
Analyzer_CAN_CANFD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003230  08018a7c  08018a7c  00019a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bcac  0801bcac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bcb4  0801bcb4  0001ccb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bcb8  0801bcb8  0001ccb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  24000000  0801bcbc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004184  24000188  0801be44  0001d188  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400430c  0801be44  0001d30c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d188  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024f84  00000000  00000000  0001d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fe5  00000000  00000000  0004213a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca0  00000000  00000000  00047120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015c0  00000000  00000000  00048dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cf23  00000000  00000000  0004a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029b84  00000000  00000000  000872a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001733cd  00000000  00000000  000b0e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002241f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083f8  00000000  00000000  00224238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  0022c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000188 	.word	0x24000188
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018a64 	.word	0x08018a64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400018c 	.word	0x2400018c
 80002dc:	08018a64 	.word	0x08018a64

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <ILI9488_SendCommand>:

#define  LCD_SPI_SETDATASIZE_8BIT(hlcdspi)        MODIFY_REG(hspi4.Instance->CFG1, SPI_CFG1_DSIZE, SPI_DATASIZE_8BIT)
#define  LCD_SPI_SETDATASIZE_16BIT(hlcdspi)       MODIFY_REG(hspi4.Instance->CFG1, SPI_CFG1_DSIZE, SPI_DATASIZE_16BIT)

//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpCmd = com;
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	DC_COMMAND();
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <ILI9488_SendCommand+0x48>)
 80003a6:	f00d f9db 	bl	800d760 <HAL_GPIO_WritePin>
	//Put CS LOW
	CS_A();
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b0:	4809      	ldr	r0, [pc, #36]	@ (80003d8 <ILI9488_SendCommand+0x48>)
 80003b2:	f00d f9d5 	bl	800d760 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi4, &tmpCmd, 1, 1);
 80003b6:	f107 010f 	add.w	r1, r7, #15
 80003ba:	2301      	movs	r3, #1
 80003bc:	2201      	movs	r2, #1
 80003be:	4807      	ldr	r0, [pc, #28]	@ (80003dc <ILI9488_SendCommand+0x4c>)
 80003c0:	f011 f936 	bl	8011630 <HAL_SPI_Transmit>
	//Bring CS HIGH
	CS_D();
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003ca:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <ILI9488_SendCommand+0x48>)
 80003cc:	f00d f9c8 	bl	800d760 <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	58021000 	.word	0x58021000
 80003dc:	24002460 	.word	0x24002460

080003e0 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpCmd = data;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	DC_DATA();
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <ILI9488_SendData+0x48>)
 80003f6:	f00d f9b3 	bl	800d760 <HAL_GPIO_WritePin>
	//Put CS LOW
	CS_A();
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000400:	4809      	ldr	r0, [pc, #36]	@ (8000428 <ILI9488_SendData+0x48>)
 8000402:	f00d f9ad 	bl	800d760 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi4, &tmpCmd, 1, 1);
 8000406:	f107 010f 	add.w	r1, r7, #15
 800040a:	2301      	movs	r3, #1
 800040c:	2201      	movs	r2, #1
 800040e:	4807      	ldr	r0, [pc, #28]	@ (800042c <ILI9488_SendData+0x4c>)
 8000410:	f011 f90e 	bl	8011630 <HAL_SPI_Transmit>
	//Bring CS HIGH
	CS_D();
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041a:	4803      	ldr	r0, [pc, #12]	@ (8000428 <ILI9488_SendData+0x48>)
 800041c:	f00d f9a0 	bl	800d760 <HAL_GPIO_WritePin>
}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	58021000 	.word	0x58021000
 800042c:	24002460 	.word	0x24002460

08000430 <ILI9488_SendData_Multi>:

//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000440:	481a      	ldr	r0, [pc, #104]	@ (80004ac <ILI9488_SendData_Multi+0x7c>)
 8000442:	f00d f98d 	bl	800d760 <HAL_GPIO_WritePin>
	CS_A();
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800044c:	4817      	ldr	r0, [pc, #92]	@ (80004ac <ILI9488_SendData_Multi+0x7c>)
 800044e:	f00d f987 	bl	800d760 <HAL_GPIO_WritePin>
	while (buff_size > 0) {
 8000452:	e01d      	b.n	8000490 <ILI9488_SendData_Multi+0x60>
		spiDmaTransferComplete = 0;
 8000454:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <ILI9488_SendData_Multi+0x80>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
		uint16_t chunk_size = buff_size > 65536 ? 65536 : buff_size;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000460:	bf28      	it	cs
 8000462:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8000466:	81fb      	strh	r3, [r7, #14]
		//uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
		HAL_SPI_Transmit_DMA(&hspi4, buff, chunk_size);	//, HAL_MAX_DELAY
 8000468:	89fb      	ldrh	r3, [r7, #14]
 800046a:	461a      	mov	r2, r3
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	4811      	ldr	r0, [pc, #68]	@ (80004b4 <ILI9488_SendData_Multi+0x84>)
 8000470:	f011 fada 	bl	8011a28 <HAL_SPI_Transmit_DMA>
		buff += chunk_size;
 8000474:	89fb      	ldrh	r3, [r7, #14]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800047c:	89fb      	ldrh	r3, [r7, #14]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	603b      	str	r3, [r7, #0]
		while (!spiDmaTransferComplete) {
 8000484:	bf00      	nop
 8000486:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <ILI9488_SendData_Multi+0x80>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0fa      	beq.n	8000486 <ILI9488_SendData_Multi+0x56>
	while (buff_size > 0) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d1de      	bne.n	8000454 <ILI9488_SendData_Multi+0x24>
		}
	}
	CS_D();
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800049c:	4803      	ldr	r0, [pc, #12]	@ (80004ac <ILI9488_SendData_Multi+0x7c>)
 800049e:	f00d f95f 	bl	800d760 <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	58021000 	.word	0x58021000
 80004b0:	240001a4 	.word	0x240001a4
 80004b4:	24002460 	.word	0x24002460

080004b8 <ILI9488_Init>:

void ILI9488_Init() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

	CS_D();
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c2:	4870      	ldr	r0, [pc, #448]	@ (8000684 <ILI9488_Init+0x1cc>)
 80004c4:	f00d f94c 	bl	800d760 <HAL_GPIO_WritePin>
	RST_A();
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ce:	486d      	ldr	r0, [pc, #436]	@ (8000684 <ILI9488_Init+0x1cc>)
 80004d0:	f00d f946 	bl	800d760 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f009 f8a7 	bl	8009628 <HAL_Delay>
	RST_D();
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e0:	4868      	ldr	r0, [pc, #416]	@ (8000684 <ILI9488_Init+0x1cc>)
 80004e2:	f00d f93d 	bl	800d760 <HAL_GPIO_WritePin>
	width = ILI9488_TFTWIDTH;
 80004e6:	4b68      	ldr	r3, [pc, #416]	@ (8000688 <ILI9488_Init+0x1d0>)
 80004e8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80004ec:	801a      	strh	r2, [r3, #0]
	height = ILI9488_TFTHEIGHT;
 80004ee:	4b67      	ldr	r3, [pc, #412]	@ (800068c <ILI9488_Init+0x1d4>)
 80004f0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80004f4:	801a      	strh	r2, [r3, #0]
	//CS_A();

	ILI9488_SendCommand(ILI9488_GMCTRP1);	//0xE0
 80004f6:	20e0      	movs	r0, #224	@ 0xe0
 80004f8:	f7ff ff4a 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ff6f 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x03);
 8000502:	2003      	movs	r0, #3
 8000504:	f7ff ff6c 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x09);
 8000508:	2009      	movs	r0, #9
 800050a:	f7ff ff69 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x08);
 800050e:	2008      	movs	r0, #8
 8000510:	f7ff ff66 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x16);
 8000514:	2016      	movs	r0, #22
 8000516:	f7ff ff63 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0A);
 800051a:	200a      	movs	r0, #10
 800051c:	f7ff ff60 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x3F);
 8000520:	203f      	movs	r0, #63	@ 0x3f
 8000522:	f7ff ff5d 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x78);
 8000526:	2078      	movs	r0, #120	@ 0x78
 8000528:	f7ff ff5a 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x4C);
 800052c:	204c      	movs	r0, #76	@ 0x4c
 800052e:	f7ff ff57 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x09);
 8000532:	2009      	movs	r0, #9
 8000534:	f7ff ff54 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0A);
 8000538:	200a      	movs	r0, #10
 800053a:	f7ff ff51 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x08);
 800053e:	2008      	movs	r0, #8
 8000540:	f7ff ff4e 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x16);
 8000544:	2016      	movs	r0, #22
 8000546:	f7ff ff4b 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x1A);
 800054a:	201a      	movs	r0, #26
 800054c:	f7ff ff48 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0F);
 8000550:	200f      	movs	r0, #15
 8000552:	f7ff ff45 	bl	80003e0 <ILI9488_SendData>
	//Negative Gamma Control
	ILI9488_SendCommand(ILI9488_GMCTRN1);
 8000556:	20e1      	movs	r0, #225	@ 0xe1
 8000558:	f7ff ff1a 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x00);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff ff3f 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x16);
 8000562:	2016      	movs	r0, #22
 8000564:	f7ff ff3c 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x19);
 8000568:	2019      	movs	r0, #25
 800056a:	f7ff ff39 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x03);
 800056e:	2003      	movs	r0, #3
 8000570:	f7ff ff36 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0F);
 8000574:	200f      	movs	r0, #15
 8000576:	f7ff ff33 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x05);
 800057a:	2005      	movs	r0, #5
 800057c:	f7ff ff30 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x32);
 8000580:	2032      	movs	r0, #50	@ 0x32
 8000582:	f7ff ff2d 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x45);
 8000586:	2045      	movs	r0, #69	@ 0x45
 8000588:	f7ff ff2a 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x46);
 800058c:	2046      	movs	r0, #70	@ 0x46
 800058e:	f7ff ff27 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x04);
 8000592:	2004      	movs	r0, #4
 8000594:	f7ff ff24 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0E);
 8000598:	200e      	movs	r0, #14
 800059a:	f7ff ff21 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0D);
 800059e:	200d      	movs	r0, #13
 80005a0:	f7ff ff1e 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x35);
 80005a4:	2035      	movs	r0, #53	@ 0x35
 80005a6:	f7ff ff1b 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x37);
 80005aa:	2037      	movs	r0, #55	@ 0x37
 80005ac:	f7ff ff18 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x0F);
 80005b0:	200f      	movs	r0, #15
 80005b2:	f7ff ff15 	bl	80003e0 <ILI9488_SendData>
	//Power Control 1
	ILI9488_SendCommand(ILI9488_PWCTR1);
 80005b6:	20c0      	movs	r0, #192	@ 0xc0
 80005b8:	f7ff feea 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x17);	//Vreg1out
 80005bc:	2017      	movs	r0, #23
 80005be:	f7ff ff0f 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x15);	//Verg2out
 80005c2:	2015      	movs	r0, #21
 80005c4:	f7ff ff0c 	bl	80003e0 <ILI9488_SendData>
	//Power Control 2
	ILI9488_SendCommand(ILI9488_PWCTR2);
 80005c8:	20c1      	movs	r0, #193	@ 0xc1
 80005ca:	f7ff fee1 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x41);	//VGH,VGL
 80005ce:	2041      	movs	r0, #65	@ 0x41
 80005d0:	f7ff ff06 	bl	80003e0 <ILI9488_SendData>
	//Power Control 5 (For Partial Mode)
	ILI9488_SendCommand(ILI9488_VMCTR1);
 80005d4:	20c5      	movs	r0, #197	@ 0xc5
 80005d6:	f7ff fedb 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff00 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x12);
 80005e0:	2012      	movs	r0, #18
 80005e2:	f7ff fefd 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x80);
 80005e6:	2080      	movs	r0, #128	@ 0x80
 80005e8:	f7ff fefa 	bl	80003e0 <ILI9488_SendData>
	//Memory Access Control This command defines read/write scanning direction of the frame memory.
	ILI9488_SendCommand(ILI9488_MADCTL);
 80005ec:	2036      	movs	r0, #54	@ 0x36
 80005ee:	f7ff fecf 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x48);
 80005f2:	2048      	movs	r0, #72	@ 0x48
 80005f4:	f7ff fef4 	bl	80003e0 <ILI9488_SendData>
	// Interface Pixel Format
	ILI9488_SendCommand(ILI9488_PIXFMT);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f7ff fec9 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x66);	// RGB666 = 0x66 (18 bit)//RGB565 = 0x55  (16 bit)
 80005fe:	2066      	movs	r0, #102	@ 0x66
 8000600:	f7ff feee 	bl	80003e0 <ILI9488_SendData>
	// Interface Mode Control
	ILI9488_SendCommand(ILI9488_EXTC);
 8000604:	20b0      	movs	r0, #176	@ 0xb0
 8000606:	f7ff fec3 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x00);	//0x80  SDO NOT USE  0x00 SDO USE
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff fee8 	bl	80003e0 <ILI9488_SendData>
	//Frame rate
	ILI9488_SendCommand(ILI9488_FRMCTR1);
 8000610:	20b1      	movs	r0, #177	@ 0xb1
 8000612:	f7ff febd 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0xA0);	//60Hz
 8000616:	20a0      	movs	r0, #160	@ 0xa0
 8000618:	f7ff fee2 	bl	80003e0 <ILI9488_SendData>
	//Display Inversion Control
	ILI9488_SendCommand(ILI9488_INVCTR);
 800061c:	20b4      	movs	r0, #180	@ 0xb4
 800061e:	f7ff feb7 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x02);	//2-dot
 8000622:	2002      	movs	r0, #2
 8000624:	f7ff fedc 	bl	80003e0 <ILI9488_SendData>
	//Display Function Control  RGB/MCU Interface Control
	ILI9488_SendCommand(ILI9488_DFUNCTR);
 8000628:	20b6      	movs	r0, #182	@ 0xb6
 800062a:	f7ff feb1 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x02);	//MCU
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff fed6 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x02);	//Source,Gate scan dieection
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff fed3 	bl	80003e0 <ILI9488_SendData>
	// Set Image Function
	ILI9488_SendCommand(ILI9488_SETIMAGE);
 800063a:	20e9      	movs	r0, #233	@ 0xe9
 800063c:	f7ff fea8 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x00);	// Disable 24 bit data
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff fecd 	bl	80003e0 <ILI9488_SendData>
	// Adjust Control
	ILI9488_SendCommand(ILI9488_ADJCTR);
 8000646:	20f7      	movs	r0, #247	@ 0xf7
 8000648:	f7ff fea2 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0xA9);
 800064c:	20a9      	movs	r0, #169	@ 0xa9
 800064e:	f7ff fec7 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x51);
 8000652:	2051      	movs	r0, #81	@ 0x51
 8000654:	f7ff fec4 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x2C);
 8000658:	202c      	movs	r0, #44	@ 0x2c
 800065a:	f7ff fec1 	bl	80003e0 <ILI9488_SendData>
	ILI9488_SendData(0x82);    // D7 stream, loose
 800065e:	2082      	movs	r0, #130	@ 0x82
 8000660:	f7ff febe 	bl	80003e0 <ILI9488_SendData>

	//TURN ON DISPLAY
	ILI9488_SendCommand(ILI9488_DISPON);
 8000664:	2029      	movs	r0, #41	@ 0x29
 8000666:	f7ff fe93 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendData(0x2C);
 800066a:	202c      	movs	r0, #44	@ 0x2c
 800066c:	f7ff feb8 	bl	80003e0 <ILI9488_SendData>

	ili9488_DisplayOn();
 8000670:	f000 ffc0 	bl	80015f4 <ili9488_DisplayOn>
	ili9488_DisplayBrightness(100);   //Display on
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f000 ffcd 	bl	8001614 <ili9488_DisplayBrightness>

//	ILI9488_SendCommand(ILI9488_WRDISBV);////This command is used to adjust the brightness value of the display.
//	ILI9488_SendData(0x2C);//In principle, 00h value means the lowest brightness and FFh value means the highest brightness

	HAL_Delay(120);
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f008 ffd4 	bl	8009628 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58021000 	.word	0x58021000
 8000688:	24000000 	.word	0x24000000
 800068c:	24000002 	.word	0x24000002

08000690 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	4603      	mov	r3, r0
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	803b      	strh	r3, [r7, #0]
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80006ae:	202a      	movs	r0, #42	@ 0x2a
 80006b0:	f7ff fe6e 	bl	8000390 <ILI9488_SendCommand>
	{
		uint8_t data[4] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	887b      	ldrh	r3, [r7, #2]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73bb      	strb	r3, [r7, #14]
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9488_SendData_Multi(data, 4);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fea8 	bl	8000430 <ILI9488_SendData_Multi>
	}
	ILI9488_SendCommand(ILI9488_PASET);
 80006e0:	202b      	movs	r0, #43	@ 0x2b
 80006e2:	f7ff fe55 	bl	8000390 <ILI9488_SendCommand>
	{
		uint8_t data[4] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	723b      	strb	r3, [r7, #8]
 80006f0:	88bb      	ldrh	r3, [r7, #4]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	727b      	strb	r3, [r7, #9]
 80006f6:	883b      	ldrh	r3, [r7, #0]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	72bb      	strb	r3, [r7, #10]
 8000700:	883b      	ldrh	r3, [r7, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9488_SendData_Multi(data, 4);
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2104      	movs	r1, #4
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fe8f 	bl	8000430 <ILI9488_SendData_Multi>
	}
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000712:	202c      	movs	r0, #44	@ 0x2c
 8000714:	f7ff fe3c 	bl	8000390 <ILI9488_SendCommand>

}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}

08000720 <drawPixel>:

	//printf("\tPixcount value =%d\tCount value =%d\n\r\n\r", pixcount, count);
	CS_D(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
}

void drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	460b      	mov	r3, r1
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1e      	blt.n	8000778 <drawPixel+0x58>
 800073a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <drawPixel+0x60>)
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	4293      	cmp	r3, r2
 8000744:	da18      	bge.n	8000778 <drawPixel+0x58>
 8000746:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db14      	blt.n	8000778 <drawPixel+0x58>
 800074e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000752:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <drawPixel+0x64>)
 8000754:	8812      	ldrh	r2, [r2, #0]
 8000756:	4293      	cmp	r3, r2
 8000758:	da0e      	bge.n	8000778 <drawPixel+0x58>
		return;
	setAddrWindow(x, y, x + 1, y + 1);
 800075a:	88f8      	ldrh	r0, [r7, #6]
 800075c:	88b9      	ldrh	r1, [r7, #4]
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	f7ff ff91 	bl	8000690 <setAddrWindow>
	//DC_DATA(); //HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_SET);
	//CS_A(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);
	write16BitColor(color);
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fea9 	bl	80014c8 <write16BitColor>
 8000776:	e000      	b.n	800077a <drawPixel+0x5a>
		return;
 8000778:	bf00      	nop
	//CS_D(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);

}
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	24000000 	.word	0x24000000
 8000784:	24000002 	.word	0x24000002

08000788 <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4623      	mov	r3, r4
 8000798:	80fb      	strh	r3, [r7, #6]
 800079a:	4603      	mov	r3, r0
 800079c:	80bb      	strh	r3, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]
 80007a2:	4613      	mov	r3, r2
 80007a4:	803b      	strh	r3, [r7, #0]

	if ((x >= width) || (y >= height))
 80007a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007aa:	4a24      	ldr	r2, [pc, #144]	@ (800083c <drawFastVLine+0xb4>)
 80007ac:	8812      	ldrh	r2, [r2, #0]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	da40      	bge.n	8000834 <drawFastVLine+0xac>
 80007b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007b6:	4a22      	ldr	r2, [pc, #136]	@ (8000840 <drawFastVLine+0xb8>)
 80007b8:	8812      	ldrh	r2, [r2, #0]
 80007ba:	4293      	cmp	r3, r2
 80007bc:	da3a      	bge.n	8000834 <drawFastVLine+0xac>
		return;

	if ((y + h - 1) >= height)
 80007be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000840 <drawFastVLine+0xb8>)
 80007ca:	8812      	ldrh	r2, [r2, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	dd05      	ble.n	80007dc <drawFastVLine+0x54>
		h = height - y;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <drawFastVLine+0xb8>)
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	807b      	strh	r3, [r7, #2]

	setAddrWindow(x, y, x, y + h - 1);
 80007dc:	88f8      	ldrh	r0, [r7, #6]
 80007de:	88b9      	ldrh	r1, [r7, #4]
 80007e0:	88fc      	ldrh	r4, [r7, #6]
 80007e2:	88ba      	ldrh	r2, [r7, #4]
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	4413      	add	r3, r2
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	3b01      	subs	r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	4622      	mov	r2, r4
 80007f0:	f7ff ff4e 	bl	8000690 <setAddrWindow>
	DC_DATA(); //HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <drawFastVLine+0xbc>)
 80007fc:	f00c ffb0 	bl	800d760 <HAL_GPIO_WritePin>
	CS_A(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000806:	480f      	ldr	r0, [pc, #60]	@ (8000844 <drawFastVLine+0xbc>)
 8000808:	f00c ffaa 	bl	800d760 <HAL_GPIO_WritePin>
	while (h--) {
 800080c:	e003      	b.n	8000816 <drawFastVLine+0x8e>
		write16BitColor(color);
 800080e:	883b      	ldrh	r3, [r7, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fe59 	bl	80014c8 <write16BitColor>
	while (h--) {
 8000816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800081a:	b29a      	uxth	r2, r3
 800081c:	3a01      	subs	r2, #1
 800081e:	b292      	uxth	r2, r2
 8000820:	807a      	strh	r2, [r7, #2]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1f3      	bne.n	800080e <drawFastVLine+0x86>
	}
	CS_D(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <drawFastVLine+0xbc>)
 800082e:	f00c ff97 	bl	800d760 <HAL_GPIO_WritePin>
 8000832:	e000      	b.n	8000836 <drawFastVLine+0xae>
		return;
 8000834:	bf00      	nop

}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	24000000 	.word	0x24000000
 8000840:	24000002 	.word	0x24000002
 8000844:	58021000 	.word	0x58021000

08000848 <drawFastHLine>:

void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	4603      	mov	r3, r0
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	807b      	strh	r3, [r7, #2]
 8000862:	4613      	mov	r3, r2
 8000864:	803b      	strh	r3, [r7, #0]

	if ((x >= width) || (y >= height))
 8000866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086a:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <drawFastHLine+0xb4>)
 800086c:	8812      	ldrh	r2, [r2, #0]
 800086e:	4293      	cmp	r3, r2
 8000870:	da3f      	bge.n	80008f2 <drawFastHLine+0xaa>
 8000872:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000876:	4a22      	ldr	r2, [pc, #136]	@ (8000900 <drawFastHLine+0xb8>)
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	4293      	cmp	r3, r2
 800087c:	da39      	bge.n	80008f2 <drawFastHLine+0xaa>
		return;
	if ((x + w - 1) >= width)
 800087e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000886:	4413      	add	r3, r2
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <drawFastHLine+0xb4>)
 800088a:	8812      	ldrh	r2, [r2, #0]
 800088c:	4293      	cmp	r3, r2
 800088e:	dd05      	ble.n	800089c <drawFastHLine+0x54>
		w = width - x;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <drawFastHLine+0xb4>)
 8000892:	881a      	ldrh	r2, [r3, #0]
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + w - 1, y);
 800089c:	88f8      	ldrh	r0, [r7, #6]
 800089e:	88b9      	ldrh	r1, [r7, #4]
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	4413      	add	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	88bb      	ldrh	r3, [r7, #4]
 80008ae:	f7ff feef 	bl	8000690 <setAddrWindow>
	DC_DATA(); //HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <drawFastHLine+0xbc>)
 80008ba:	f00c ff51 	bl	800d760 <HAL_GPIO_WritePin>
	CS_A(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c4:	480f      	ldr	r0, [pc, #60]	@ (8000904 <drawFastHLine+0xbc>)
 80008c6:	f00c ff4b 	bl	800d760 <HAL_GPIO_WritePin>
	while (w--) {
 80008ca:	e003      	b.n	80008d4 <drawFastHLine+0x8c>
		write16BitColor(color);
 80008cc:	883b      	ldrh	r3, [r7, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fdfa 	bl	80014c8 <write16BitColor>
	while (w--) {
 80008d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	3a01      	subs	r2, #1
 80008dc:	b292      	uxth	r2, r2
 80008de:	807a      	strh	r2, [r7, #2]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f3      	bne.n	80008cc <drawFastHLine+0x84>
	}
	CS_D(); //HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ea:	4806      	ldr	r0, [pc, #24]	@ (8000904 <drawFastHLine+0xbc>)
 80008ec:	f00c ff38 	bl	800d760 <HAL_GPIO_WritePin>
 80008f0:	e000      	b.n	80008f4 <drawFastHLine+0xac>
		return;
 80008f2:	bf00      	nop
}
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000000 	.word	0x24000000
 8000900:	24000002 	.word	0x24000002
 8000904:	58021000 	.word	0x58021000

08000908 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b087      	sub	sp, #28
 800090c:	af02      	add	r7, sp, #8
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	4603      	mov	r3, r0
 800091c:	80bb      	strh	r3, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	807b      	strh	r3, [r7, #2]
 8000922:	4613      	mov	r3, r2
 8000924:	803b      	strh	r3, [r7, #0]
	if (x0 == x1) {
 8000926:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800092a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800092e:	429a      	cmp	r2, r3
 8000930:	d11a      	bne.n	8000968 <drawLine+0x60>
		if (y0 > y1)
 8000932:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000936:	f9b7 3000 	ldrsh.w	r3, [r7]
 800093a:	429a      	cmp	r2, r3
 800093c:	dd05      	ble.n	800094a <drawLine+0x42>
			swap(y0, y1);
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	81bb      	strh	r3, [r7, #12]
 8000942:	883b      	ldrh	r3, [r7, #0]
 8000944:	80bb      	strh	r3, [r7, #4]
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	803b      	strh	r3, [r7, #0]
		drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800094a:	883a      	ldrh	r2, [r7, #0]
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	3301      	adds	r3, #1
 8000954:	b29b      	uxth	r3, r3
 8000956:	b21a      	sxth	r2, r3
 8000958:	8c3b      	ldrh	r3, [r7, #32]
 800095a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800095e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000962:	f7ff ff11 	bl	8000788 <drawFastVLine>

		writeLine(x0, y0, x1, y1, color);

	}

}
 8000966:	e02d      	b.n	80009c4 <drawLine+0xbc>
	} else if (y0 == y1) {
 8000968:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800096c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000970:	429a      	cmp	r2, r3
 8000972:	d11a      	bne.n	80009aa <drawLine+0xa2>
		if (x0 > x1)
 8000974:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800097c:	429a      	cmp	r2, r3
 800097e:	dd05      	ble.n	800098c <drawLine+0x84>
			swap(x0, x1);
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	81fb      	strh	r3, [r7, #14]
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	80fb      	strh	r3, [r7, #6]
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	807b      	strh	r3, [r7, #2]
		drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800098c:	887a      	ldrh	r2, [r7, #2]
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	3301      	adds	r3, #1
 8000996:	b29b      	uxth	r3, r3
 8000998:	b21a      	sxth	r2, r3
 800099a:	8c3b      	ldrh	r3, [r7, #32]
 800099c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009a4:	f7ff ff50 	bl	8000848 <drawFastHLine>
}
 80009a8:	e00c      	b.n	80009c4 <drawLine+0xbc>
		writeLine(x0, y0, x1, y1, color);
 80009aa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80009ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009ba:	8c3b      	ldrh	r3, [r7, #32]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4623      	mov	r3, r4
 80009c0:	f000 f804 	bl	80009cc <writeLine>
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd90      	pop	{r4, r7, pc}

080009cc <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4608      	mov	r0, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	461a      	mov	r2, r3
 80009da:	4623      	mov	r3, r4
 80009dc:	80fb      	strh	r3, [r7, #6]
 80009de:	4603      	mov	r3, r0
 80009e0:	80bb      	strh	r3, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
 80009e6:	4613      	mov	r3, r2
 80009e8:	803b      	strh	r3, [r7, #0]

	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80009ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80009ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009fc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a04:	1acb      	subs	r3, r1, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	bfcc      	ite	gt
 8000a10:	2301      	movgt	r3, #1
 8000a12:	2300      	movle	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8000a18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00b      	beq.n	8000a38 <writeLine+0x6c>
		swap(x0, y0);
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	833b      	strh	r3, [r7, #24]
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	8b3b      	ldrh	r3, [r7, #24]
 8000a2a:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	82fb      	strh	r3, [r7, #22]
 8000a30:	883b      	ldrh	r3, [r7, #0]
 8000a32:	807b      	strh	r3, [r7, #2]
 8000a34:	8afb      	ldrh	r3, [r7, #22]
 8000a36:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8000a38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dd0b      	ble.n	8000a5c <writeLine+0x90>
		swap(x0, x1);
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	82bb      	strh	r3, [r7, #20]
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	8abb      	ldrh	r3, [r7, #20]
 8000a4e:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	827b      	strh	r3, [r7, #18]
 8000a54:	883b      	ldrh	r3, [r7, #0]
 8000a56:	80bb      	strh	r3, [r7, #4]
 8000a58:	8a7b      	ldrh	r3, [r7, #18]
 8000a5a:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000a66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bfb8      	it	lt
 8000a74:	425b      	neglt	r3, r3
 8000a76:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000a78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da00      	bge.n	8000a82 <writeLine+0xb6>
 8000a80:	3301      	adds	r3, #1
 8000a82:	105b      	asrs	r3, r3, #1
 8000a84:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 8000a86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	da02      	bge.n	8000a98 <writeLine+0xcc>
		ystep = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	83bb      	strh	r3, [r7, #28]
 8000a96:	e031      	b.n	8000afc <writeLine+0x130>
	} else {
		ystep = -1;
 8000a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a9c:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 8000a9e:	e02d      	b.n	8000afc <writeLine+0x130>
		if (steep) {
 8000aa0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <writeLine+0xee>
			drawPixel(y0, x0, color);
 8000aa8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000aaa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000aae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fe34 	bl	8000720 <drawPixel>
 8000ab8:	e007      	b.n	8000aca <writeLine+0xfe>
		} else {
			drawPixel(x0, y0, color);
 8000aba:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000abc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe2b 	bl	8000720 <drawPixel>
		}
		err -= dy;
 8000aca:	8bfa      	ldrh	r2, [r7, #30]
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8000ad4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da09      	bge.n	8000af0 <writeLine+0x124>
			y0 += ystep;
 8000adc:	88ba      	ldrh	r2, [r7, #4]
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8000ae6:	8bfa      	ldrh	r2, [r7, #30]
 8000ae8:	8a3b      	ldrh	r3, [r7, #16]
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 8000af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	ddcb      	ble.n	8000aa0 <writeLine+0xd4>
		}
	}
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
	...

08000b14 <fillScreen>:
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0, width, height, color);
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <fillScreen+0x2c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <fillScreen+0x30>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	b219      	sxth	r1, r3
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	2100      	movs	r1, #0
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <fillRect>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	24000000 	.word	0x24000000
 8000b44:	24000002 	.word	0x24000002

08000b48 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	b08a      	sub	sp, #40	@ 0x28
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4606      	mov	r6, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	461a      	mov	r2, r3
 8000b58:	4633      	mov	r3, r6
 8000b5a:	80fb      	strh	r3, [r7, #6]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80bb      	strh	r3, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
 8000b64:	4613      	mov	r3, r2
 8000b66:	803b      	strh	r3, [r7, #0]
 8000b68:	466b      	mov	r3, sp
 8000b6a:	469a      	mov	sl, r3
	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b70:	4a83      	ldr	r2, [pc, #524]	@ (8000d80 <fillRect+0x238>)
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	da05      	bge.n	8000b84 <fillRect+0x3c>
 8000b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b7c:	4a81      	ldr	r2, [pc, #516]	@ (8000d84 <fillRect+0x23c>)
 8000b7e:	8812      	ldrh	r2, [r2, #0]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	db01      	blt.n	8000b88 <fillRect+0x40>
		return;
 8000b84:	46d5      	mov	sp, sl
 8000b86:	e0f6      	b.n	8000d76 <fillRect+0x22e>
	if ((x + w - 1) >= width)
 8000b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a7b      	ldr	r2, [pc, #492]	@ (8000d80 <fillRect+0x238>)
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	dd05      	ble.n	8000ba6 <fillRect+0x5e>
		w = width - x;
 8000b9a:	4b79      	ldr	r3, [pc, #484]	@ (8000d80 <fillRect+0x238>)
 8000b9c:	881a      	ldrh	r2, [r3, #0]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000ba6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000baa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a74      	ldr	r2, [pc, #464]	@ (8000d84 <fillRect+0x23c>)
 8000bb2:	8812      	ldrh	r2, [r2, #0]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	dd05      	ble.n	8000bc4 <fillRect+0x7c>
		h = height - y;
 8000bb8:	4b72      	ldr	r3, [pc, #456]	@ (8000d84 <fillRect+0x23c>)
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000bc4:	88f8      	ldrh	r0, [r7, #6]
 8000bc6:	88b9      	ldrh	r1, [r7, #4]
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b29e      	uxth	r6, r3
 8000bd4:	88ba      	ldrh	r2, [r7, #4]
 8000bd6:	883b      	ldrh	r3, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4632      	mov	r2, r6
 8000be2:	f7ff fd55 	bl	8000690 <setAddrWindow>
	uint8_t Rbyte = (color & 0xF800) >> 8;
 8000be6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000bea:	121b      	asrs	r3, r3, #8
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f023 0307 	bic.w	r3, r3, #7
 8000bf2:	76fb      	strb	r3, [r7, #27]
	uint8_t Gbyte = (color & 0x07E0) >> 3;
 8000bf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000bf8:	10db      	asrs	r3, r3, #3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f023 0303 	bic.w	r3, r3, #3
 8000c00:	76bb      	strb	r3, [r7, #26]
	uint8_t Bbyte = (color & 0x001F) << 3;
 8000c02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	767b      	strb	r3, [r7, #25]
	n = w * h * 3;
 8000c0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000c12:	fb03 f202 	mul.w	r2, r3, r2
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
	if (n <= 65535) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c24:	d204      	bcs.n	8000c30 <fillRect+0xe8>
		cnt = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e02f      	b.n	8000c90 <fillRect+0x148>
	} else {
		cnt = n / 3;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	4a55      	ldr	r2, [pc, #340]	@ (8000d88 <fillRect+0x240>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	085b      	lsrs	r3, r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n / 65535 + 1;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	4a52      	ldr	r2, [pc, #328]	@ (8000d8c <fillRect+0x244>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0bdb      	lsrs	r3, r3, #15
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	74fb      	strb	r3, [r7, #19]
		for (i = min_cnt; i < n / 3; i++) {
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c54:	e014      	b.n	8000c80 <fillRect+0x138>
			if (n % i == 0) {
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c60:	fb01 f202 	mul.w	r2, r1, r2
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d107      	bne.n	8000c7a <fillRect+0x132>
				cnt = i;
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	623b      	str	r3, [r7, #32]
				buf_size = n / i;
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	61fb      	str	r3, [r7, #28]
				break;
 8000c78:	e00a      	b.n	8000c90 <fillRect+0x148>
		for (i = min_cnt; i < n / 3; i++) {
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4a41      	ldr	r2, [pc, #260]	@ (8000d88 <fillRect+0x240>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	085b      	lsrs	r3, r3, #1
 8000c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3e2      	bcc.n	8000c56 <fillRect+0x10e>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000c90:	69f9      	ldr	r1, [r7, #28]
 8000c92:	460b      	mov	r3, r1
 8000c94:	3b01      	subs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	4699      	mov	r9, r3
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	00eb      	lsls	r3, r5, #3
 8000cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc6:	00e2      	lsls	r2, r4, #3
 8000cc8:	1dcb      	adds	r3, r1, #7
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd2:	466b      	mov	r3, sp
 8000cd4:	3300      	adds	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < buf_size / 3; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cdc:	e019      	b.n	8000d12 <fillRect+0x1ca>
		frm_buf[i * 3] = Rbyte;
 8000cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	7ef9      	ldrb	r1, [r7, #27]
 8000cea:	54d1      	strb	r1, [r2, r3]
		frm_buf[i * 3 + 1] = Gbyte;
 8000cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	7eb9      	ldrb	r1, [r7, #26]
 8000cfa:	54d1      	strb	r1, [r2, r3]
		frm_buf[i * 3 + 2] = Bbyte;
 8000cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	3302      	adds	r3, #2
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	7e79      	ldrb	r1, [r7, #25]
 8000d0a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < buf_size / 3; i++) {
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0e:	3301      	adds	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <fillRect+0x240>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	085b      	lsrs	r3, r3, #1
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3dd      	bcc.n	8000cde <fillRect+0x196>
	}
	DC_DATA();
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d28:	4819      	ldr	r0, [pc, #100]	@ (8000d90 <fillRect+0x248>)
 8000d2a:	f00c fd19 	bl	800d760 <HAL_GPIO_WritePin>
	CS_A();
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d34:	4816      	ldr	r0, [pc, #88]	@ (8000d90 <fillRect+0x248>)
 8000d36:	f00c fd13 	bl	800d760 <HAL_GPIO_WritePin>
	while (cnt > 0) {
 8000d3a:	e012      	b.n	8000d62 <fillRect+0x21a>
		spiDmaTransferComplete = 0;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <fillRect+0x24c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi4, frm_buf, buf_size); //, HAL_MAX_DELAY
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	4813      	ldr	r0, [pc, #76]	@ (8000d98 <fillRect+0x250>)
 8000d4c:	f010 fe6c 	bl	8011a28 <HAL_SPI_Transmit_DMA>
		cnt -= 1;
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
		while (!spiDmaTransferComplete) {
 8000d56:	bf00      	nop
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <fillRect+0x24c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0fa      	beq.n	8000d58 <fillRect+0x210>
	while (cnt > 0) {
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1e9      	bne.n	8000d3c <fillRect+0x1f4>
		}
	}
	// waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	CS_D();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d6e:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <fillRect+0x248>)
 8000d70:	f00c fcf6 	bl	800d760 <HAL_GPIO_WritePin>
 8000d74:	46d5      	mov	sp, sl
}
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000000 	.word	0x24000000
 8000d84:	24000002 	.word	0x24000002
 8000d88:	aaaaaaab 	.word	0xaaaaaaab
 8000d8c:	80008001 	.word	0x80008001
 8000d90:	58021000 	.word	0x58021000
 8000d94:	240001a4 	.word	0x240001a4
 8000d98:	24002460 	.word	0x24002460

08000d9c <setRotation>:
/**********************************************
 * @brief		set orientation of the display
 * @param  	r	rottion
 **********************************************/
void setRotation(Displ_Orientat_e orientation) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	ILI9488_SendCommand(ILI9488_MADCTL);
 8000da6:	2036      	movs	r0, #54	@ 0x36
 8000da8:	f7ff faf2 	bl	8000390 <ILI9488_SendCommand>
	uint8_t rotation = orientation % 4; // can't be higher than 3
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d83a      	bhi.n	8000e30 <setRotation+0x94>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <setRotation+0x24>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000dd1 	.word	0x08000dd1
 8000dc4:	08000de9 	.word	0x08000de9
 8000dc8:	08000e01 	.word	0x08000e01
 8000dcc:	08000e19 	.word	0x08000e19
	case 0:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000dd0:	2088      	movs	r0, #136	@ 0x88
 8000dd2:	f7ff fb05 	bl	80003e0 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <setRotation+0xa4>)
 8000dd8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ddc:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <setRotation+0xa8>)
 8000de0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000de4:	801a      	strh	r2, [r3, #0]
		break;
 8000de6:	e023      	b.n	8000e30 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000de8:	20e8      	movs	r0, #232	@ 0xe8
 8000dea:	f7ff faf9 	bl	80003e0 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <setRotation+0xa4>)
 8000df0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000df4:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <setRotation+0xa8>)
 8000df8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000dfc:	801a      	strh	r2, [r3, #0]
		break;
 8000dfe:	e017      	b.n	8000e30 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000e00:	2048      	movs	r0, #72	@ 0x48
 8000e02:	f7ff faed 	bl	80003e0 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <setRotation+0xa4>)
 8000e08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e0c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <setRotation+0xa8>)
 8000e10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e14:	801a      	strh	r2, [r3, #0]
		break;
 8000e16:	e00b      	b.n	8000e30 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000e18:	2028      	movs	r0, #40	@ 0x28
 8000e1a:	f7ff fae1 	bl	80003e0 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <setRotation+0xa4>)
 8000e20:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e24:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <setRotation+0xa8>)
 8000e28:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e2c:	801a      	strh	r2, [r3, #0]
		break;
 8000e2e:	bf00      	nop
	}
	current_orientation = orientation; //stores active orientation into a global variable for touch routines
 8000e30:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <setRotation+0xac>)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	7013      	strb	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000000 	.word	0x24000000
 8000e44:	24000002 	.word	0x24000002
 8000e48:	240001a5 	.word	0x240001a5

08000e4c <Displ_WChar>:
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size,
		uint16_t color, uint16_t bgcolor) {
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	b590      	push	{r4, r7, lr}
 8000e50:	b08d      	sub	sp, #52	@ 0x34
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	70fb      	strb	r3, [r7, #3]

	uint32_t i, b, bytes, j, bufSize, mask;
	const uint8_t *pos;
	uint8_t wsize = font.Width; //printing char width
 8000e62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000e66:	76fb      	strb	r3, [r7, #27]
	if (size == 2)
 8000e68:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d102      	bne.n	8000e76 <Displ_WChar+0x2a>
		wsize <<= 1;
 8000e70:	7efb      	ldrb	r3, [r7, #27]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	76fb      	strb	r3, [r7, #27]
	bufSize = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
	bytes = font.Height * font.Size;
 8000e7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000e7e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
	pos = font.table + (ch - 32) * bytes; //that's char position in table
 8000e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	3b20      	subs	r3, #32
 8000e8e:	4619      	mov	r1, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8000e9a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d005      	beq.n	8000eae <Displ_WChar+0x62>
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d107      	bne.n	8000eb6 <Displ_WChar+0x6a>
	case 3:
		mask = 0x800000;
 8000ea6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000eaa:	61fb      	str	r3, [r7, #28]
		break;
 8000eac:	e005      	b.n	8000eba <Displ_WChar+0x6e>
	case 2:
		mask = 0x8000;
 8000eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb2:	61fb      	str	r3, [r7, #28]
		break;
 8000eb4:	e001      	b.n	8000eba <Displ_WChar+0x6e>
	default:
		mask = 0x80;
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	61fb      	str	r3, [r7, #28]
	}
//  setting up char image in RGB666 format

	uint8_t Rcol = (color & 0xF800) >> 8;
 8000eba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000ebe:	121b      	asrs	r3, r3, #8
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f023 0307 	bic.w	r3, r3, #7
 8000ec6:	73fb      	strb	r3, [r7, #15]
	uint8_t Gcol = (color & 0x07E0) >> 3;
 8000ec8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000ecc:	10db      	asrs	r3, r3, #3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f023 0303 	bic.w	r3, r3, #3
 8000ed4:	73bb      	strb	r3, [r7, #14]
	uint8_t Bcol = (color & 0x001F) << 3;
 8000ed6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	737b      	strb	r3, [r7, #13]
	uint8_t Rbak = (bgcolor & 0xF800) >> 8;
 8000ede:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000ee2:	121b      	asrs	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f023 0307 	bic.w	r3, r3, #7
 8000eea:	733b      	strb	r3, [r7, #12]
	uint8_t Gbak = (bgcolor & 0x07E0) >> 3;
 8000eec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000ef0:	10db      	asrs	r3, r3, #3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f023 0303 	bic.w	r3, r3, #3
 8000ef8:	72fb      	strb	r3, [r7, #11]
	uint8_t Bbak = (bgcolor & 0x001F) << 3;
 8000efa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < (bytes); i += font.Size) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f06:	e0af      	b.n	8001068 <Displ_WChar+0x21c>
		b = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
		switch (font.Size) {
 8000f0c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d015      	beq.n	8000f40 <Displ_WChar+0xf4>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d120      	bne.n	8000f5a <Displ_WChar+0x10e>
		case 3:
			b = pos[i] << 16 | pos[i + 1] << 8 | pos[i + 2];
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f24:	3301      	adds	r3, #1
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	440b      	add	r3, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f32:	3202      	adds	r2, #2
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	440a      	add	r2, r1
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8000f3e:	e011      	b.n	8000f64 <Displ_WChar+0x118>
		case 2:
			b = pos[i] << 8 | pos[i + 1];
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f44:	4413      	add	r3, r2
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	6939      	ldr	r1, [r7, #16]
 8000f50:	440a      	add	r2, r1
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8000f58:	e004      	b.n	8000f64 <Displ_WChar+0x118>
		default:
			b = pos[i];
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		for (j = 0; j < font.Width; j++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	e072      	b.n	8001050 <Displ_WChar+0x204>
			if ((b << j) & mask) {
 8000f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d034      	beq.n	8000fe2 <Displ_WChar+0x196>
				dispBuffer[bufSize++] = Rcol;
 8000f78:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <Displ_WChar+0x27c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	1c59      	adds	r1, r3, #1
 8000f80:	6239      	str	r1, [r7, #32]
 8000f82:	4413      	add	r3, r2
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gcol;
 8000f88:	4b4f      	ldr	r3, [pc, #316]	@ (80010c8 <Displ_WChar+0x27c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	6239      	str	r1, [r7, #32]
 8000f92:	4413      	add	r3, r2
 8000f94:	7bba      	ldrb	r2, [r7, #14]
 8000f96:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bcol;
 8000f98:	4b4b      	ldr	r3, [pc, #300]	@ (80010c8 <Displ_WChar+0x27c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	1c59      	adds	r1, r3, #1
 8000fa0:	6239      	str	r1, [r7, #32]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7b7a      	ldrb	r2, [r7, #13]
 8000fa6:	701a      	strb	r2, [r3, #0]

				if (size == 2) {
 8000fa8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d14c      	bne.n	800104a <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rcol;
 8000fb0:	4b45      	ldr	r3, [pc, #276]	@ (80010c8 <Displ_WChar+0x27c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	1c59      	adds	r1, r3, #1
 8000fb8:	6239      	str	r1, [r7, #32]
 8000fba:	4413      	add	r3, r2
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gcol;
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <Displ_WChar+0x27c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	1c59      	adds	r1, r3, #1
 8000fc8:	6239      	str	r1, [r7, #32]
 8000fca:	4413      	add	r3, r2
 8000fcc:	7bba      	ldrb	r2, [r7, #14]
 8000fce:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bcol;
 8000fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <Displ_WChar+0x27c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	1c59      	adds	r1, r3, #1
 8000fd8:	6239      	str	r1, [r7, #32]
 8000fda:	4413      	add	r3, r2
 8000fdc:	7b7a      	ldrb	r2, [r7, #13]
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e033      	b.n	800104a <Displ_WChar+0x1fe>
				}
			} else {
				dispBuffer[bufSize++] = Rbak;
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <Displ_WChar+0x27c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	6239      	str	r1, [r7, #32]
 8000fec:	4413      	add	r3, r2
 8000fee:	7b3a      	ldrb	r2, [r7, #12]
 8000ff0:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gbak;
 8000ff2:	4b35      	ldr	r3, [pc, #212]	@ (80010c8 <Displ_WChar+0x27c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	1c59      	adds	r1, r3, #1
 8000ffa:	6239      	str	r1, [r7, #32]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	7afa      	ldrb	r2, [r7, #11]
 8001000:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bbak;
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <Displ_WChar+0x27c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	1c59      	adds	r1, r3, #1
 800100a:	6239      	str	r1, [r7, #32]
 800100c:	4413      	add	r3, r2
 800100e:	7aba      	ldrb	r2, [r7, #10]
 8001010:	701a      	strb	r2, [r3, #0]
				if (size == 2) {
 8001012:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001016:	2b02      	cmp	r3, #2
 8001018:	d117      	bne.n	800104a <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rbak;
 800101a:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <Displ_WChar+0x27c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	6239      	str	r1, [r7, #32]
 8001024:	4413      	add	r3, r2
 8001026:	7b3a      	ldrb	r2, [r7, #12]
 8001028:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gbak;
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <Displ_WChar+0x27c>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	1c59      	adds	r1, r3, #1
 8001032:	6239      	str	r1, [r7, #32]
 8001034:	4413      	add	r3, r2
 8001036:	7afa      	ldrb	r2, [r7, #11]
 8001038:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bbak;
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <Displ_WChar+0x27c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	1c59      	adds	r1, r3, #1
 8001042:	6239      	str	r1, [r7, #32]
 8001044:	4413      	add	r3, r2
 8001046:	7aba      	ldrb	r2, [r7, #10]
 8001048:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < font.Width; j++) {
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	3301      	adds	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001050:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001054:	461a      	mov	r2, r3
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	4293      	cmp	r3, r2
 800105a:	d386      	bcc.n	8000f6a <Displ_WChar+0x11e>
	for (i = 0; i < (bytes); i += font.Size) {
 800105c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001060:	461a      	mov	r2, r3
 8001062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001064:	4413      	add	r3, r2
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f4ff af4b 	bcc.w	8000f08 <Displ_WChar+0xbc>
				}
			}
		}
	}
	setAddrWindow(x, y, x + wsize - 1, y + font.Height - 1);
 8001072:	7efb      	ldrb	r3, [r7, #27]
 8001074:	b29a      	uxth	r2, r3
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b29c      	uxth	r4, r3
 8001080:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	88b9      	ldrh	r1, [r7, #4]
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	4622      	mov	r2, r4
 8001094:	f7ff fafc 	bl	8000690 <setAddrWindow>
	ILI9488_SendData_Multi(dispBuffer, bufSize);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <Displ_WChar+0x27c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9c6 	bl	8000430 <ILI9488_SendData_Multi>
	dispBuffer = (dispBuffer == dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <Displ_WChar+0x27c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <Displ_WChar+0x280>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <Displ_WChar+0x266>
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <Displ_WChar+0x284>)
 80010b0:	e000      	b.n	80010b4 <Displ_WChar+0x268>
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <Displ_WChar+0x280>)
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <Displ_WChar+0x27c>)
 80010b6:	6013      	str	r3, [r2, #0]

}
 80010b8:	bf00      	nop
 80010ba:	3734      	adds	r7, #52	@ 0x34
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010c2:	b002      	add	sp, #8
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	24000004 	.word	0x24000004
 80010cc:	240001a8 	.word	0x240001a8
 80010d0:	240011a8 	.word	0x240011a8

080010d4 <Displ_WString>:
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char *str, sFONT font,
		uint8_t size, uint16_t color, uint16_t bgcolor) {
 80010d4:	b082      	sub	sp, #8
 80010d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d8:	b08b      	sub	sp, #44	@ 0x2c
 80010da:	af06      	add	r7, sp, #24
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e0:	4603      	mov	r3, r0
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	460b      	mov	r3, r1
 80010e6:	80bb      	strh	r3, [r7, #4]
	uint16_t delta = font.Width;
 80010e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80010ea:	81fb      	strh	r3, [r7, #14]
	if (size > 1)
 80010ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d922      	bls.n	800113a <Displ_WString+0x66>
		delta <<= 1;
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	81fb      	strh	r3, [r7, #14]

	while (*str) {
 80010fa:	e01e      	b.n	800113a <Displ_WString+0x66>
		 str++;
		 continue;
		 }
		 }*/

		Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	88bd      	ldrh	r5, [r7, #4]
 8001102:	88fc      	ldrh	r4, [r7, #6]
 8001104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001108:	9304      	str	r3, [sp, #16]
 800110a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	466e      	mov	r6, sp
 8001116:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800111e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001124:	4629      	mov	r1, r5
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff fe90 	bl	8000e4c <Displ_WChar>
		x += delta;
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	4413      	add	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
		str++;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	603b      	str	r3, [r7, #0]
	while (*str) {
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1dc      	bne.n	80010fc <Displ_WString+0x28>
	}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800114e:	b002      	add	sp, #8
 8001150:	4770      	bx	lr
	...

08001154 <Displ_CString>:
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_CString(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		const char *str, sFONT font, uint8_t size, uint16_t color,
		uint16_t bgcolor) {
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af06      	add	r7, sp, #24
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	uint16_t x, y;
	uint16_t wsize = font.Width;
 8001172:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001174:	817b      	strh	r3, [r7, #10]
	static uint8_t cambia = 0;
	if (size > 1)
 8001176:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800117a:	2b01      	cmp	r3, #1
 800117c:	d902      	bls.n	8001184 <Displ_CString+0x30>
		wsize <<= 1;
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	817b      	strh	r3, [r7, #10]
	if ((strlen(str) * wsize) > (x1 - x0 + 1))
 8001184:	6a38      	ldr	r0, [r7, #32]
 8001186:	f7ff f8ab 	bl	80002e0 <strlen>
 800118a:	4602      	mov	r2, r0
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	8879      	ldrh	r1, [r7, #2]
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	1a8a      	subs	r2, r1, r2
 8001198:	3201      	adds	r2, #1
 800119a:	4293      	cmp	r3, r2
 800119c:	d902      	bls.n	80011a4 <Displ_CString+0x50>
		x = x0;
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	e00e      	b.n	80011c2 <Displ_CString+0x6e>
	else
		x = (x1 + x0 + 1 - strlen(str) * wsize) >> 1;
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4413      	add	r3, r2
 80011aa:	461c      	mov	r4, r3
 80011ac:	6a38      	ldr	r0, [r7, #32]
 80011ae:	f7ff f897 	bl	80002e0 <strlen>
 80011b2:	4602      	mov	r2, r0
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	1ae3      	subs	r3, r4, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	81fb      	strh	r3, [r7, #14]
	if (font.Height > (y1 - y0 + 1))
 80011c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80011c4:	4619      	mov	r1, r3
 80011c6:	883a      	ldrh	r2, [r7, #0]
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	4299      	cmp	r1, r3
 80011d0:	dd02      	ble.n	80011d8 <Displ_CString+0x84>
		y = y0;
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	81bb      	strh	r3, [r7, #12]
 80011d6:	e007      	b.n	80011e8 <Displ_CString+0x94>
	else
		y = (y1 + y0 + 1 - font.Height) >> 1;
 80011d8:	883a      	ldrh	r2, [r7, #0]
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	3301      	adds	r3, #1
 80011e0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	105b      	asrs	r3, r3, #1
 80011e6:	81bb      	strh	r3, [r7, #12]

	if (x > x0) {
 80011e8:	89fa      	ldrh	r2, [r7, #14]
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d916      	bls.n	800121e <Displ_CString+0xca>
		fillRect(x0, y0, x - x0, y1 - y0 + 1, bgcolor);
 80011f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21c      	sxth	r4, r3
 8001202:	883a      	ldrh	r2, [r7, #0]
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	4622      	mov	r2, r4
 8001218:	f7ff fc96 	bl	8000b48 <fillRect>
 800121c:	e001      	b.n	8001222 <Displ_CString+0xce>
	} else
		x = x0; // fixing here mistake could be due to roundings: x lower than x0.
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	81fb      	strh	r3, [r7, #14]
	if (x1 > (strlen(str) * wsize + x0))
 8001222:	887c      	ldrh	r4, [r7, #2]
 8001224:	6a38      	ldr	r0, [r7, #32]
 8001226:	f7ff f85b 	bl	80002e0 <strlen>
 800122a:	4602      	mov	r2, r0
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	fb03 f202 	mul.w	r2, r3, r2
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4413      	add	r3, r2
 8001236:	429c      	cmp	r4, r3
 8001238:	d91f      	bls.n	800127a <Displ_CString+0x126>
		fillRect(x1 - x + x0 - 1, y0, x - x0 + 1, y1 - y0 + 1, bgcolor);
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29a      	uxth	r2, r3
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4413      	add	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	b218      	sxth	r0, r3
 800124e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001252:	89fa      	ldrh	r2, [r7, #14]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	3301      	adds	r3, #1
 800125c:	b29b      	uxth	r3, r3
 800125e:	b21c      	sxth	r4, r3
 8001260:	883a      	ldrh	r2, [r7, #0]
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b29b      	uxth	r3, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4613      	mov	r3, r2
 8001274:	4622      	mov	r2, r4
 8001276:	f7ff fc67 	bl	8000b48 <fillRect>

	if (y > y0) {
 800127a:	89ba      	ldrh	r2, [r7, #12]
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d916      	bls.n	80012b0 <Displ_CString+0x15c>
		fillRect(x0, y0, x1 - x0 + 1, y - y0, bgcolor);
 8001282:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001286:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21c      	sxth	r4, r3
 8001298:	89ba      	ldrh	r2, [r7, #12]
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	4622      	mov	r2, r4
 80012aa:	f7ff fc4d 	bl	8000b48 <fillRect>
 80012ae:	e001      	b.n	80012b4 <Displ_CString+0x160>
	} else
		y = y0; //same comment as above
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	81bb      	strh	r3, [r7, #12]
	if (y1 >= (font.Height + y0))
 80012b4:	883a      	ldrh	r2, [r7, #0]
 80012b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80012b8:	4619      	mov	r1, r3
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	440b      	add	r3, r1
 80012be:	429a      	cmp	r2, r3
 80012c0:	db1d      	blt.n	80012fe <Displ_CString+0x1aa>
		fillRect(x0, y1 - y + y0, x1 - x0 + 1, y - y0 + 1, bgcolor);
 80012c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012c6:	883a      	ldrh	r2, [r7, #0]
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b219      	sxth	r1, r3
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b21c      	sxth	r4, r3
 80012e4:	89ba      	ldrh	r2, [r7, #12]
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	4622      	mov	r2, r4
 80012fa:	f7ff fc25 	bl	8000b48 <fillRect>

	cambia = !cambia;
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <Displ_CString+0x1f4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <Displ_CString+0x1f4>)
 8001310:	701a      	strb	r2, [r3, #0]

	Displ_WString(x, y, str, font, size, color, bgcolor);
 8001312:	89bd      	ldrh	r5, [r7, #12]
 8001314:	89fc      	ldrh	r4, [r7, #14]
 8001316:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	466a      	mov	r2, sp
 8001326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800132e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	6a3a      	ldr	r2, [r7, #32]
 8001336:	4629      	mov	r1, r5
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff fecb 	bl	80010d4 <Displ_WString>

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	bf00      	nop
 8001348:	240021a8 	.word	0x240021a8

0800134c <DrawCircle>:
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}
void DrawCircle(int16_t x, int16_t y, int16_t Radius,uint16_t color)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4623      	mov	r3, r4
 800135c:	80fb      	strh	r3, [r7, #6]
 800135e:	4603      	mov	r3, r0
 8001360:	80bb      	strh	r3, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	803b      	strh	r3, [r7, #0]
  int32_t  D;       /* Decision Variable */
  int32_t  CurX;   /* Current X Value */
  int32_t  CurY;   /* Current Y Value */

  D = 3 - (Radius << 1);
 800136a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	f1c3 0303 	rsb	r3, r3, #3
 8001374:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800137a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800137e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001380:	e097      	b.n	80014b2 <DrawCircle+0x166>
  {
	  drawPixel((x + CurX), (y - CurY), color);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	b29a      	uxth	r2, r3
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	b218      	sxth	r0, r3
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	b21b      	sxth	r3, r3
 800139a:	883a      	ldrh	r2, [r7, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff f9bf 	bl	8000720 <drawPixel>
	  drawPixel((x - CurX), (y - CurY), color);
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b218      	sxth	r0, r3
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	883a      	ldrh	r2, [r7, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff f9af 	bl	8000720 <drawPixel>
	  drawPixel((x + CurY), (y - CurX), color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4413      	add	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	88ba      	ldrh	r2, [r7, #4]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	883a      	ldrh	r2, [r7, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff f99f 	bl	8000720 <drawPixel>
	  drawPixel((x - CurY), (y - CurX), color);
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	88ba      	ldrh	r2, [r7, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	883a      	ldrh	r2, [r7, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff f98f 	bl	8000720 <drawPixel>
      drawPixel((x + CurX), (y + CurY), color);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	b218      	sxth	r0, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	b29a      	uxth	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	b21b      	sxth	r3, r3
 800141a:	883a      	ldrh	r2, [r7, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff f97f 	bl	8000720 <drawPixel>
      drawPixel((x - CurX), (y + CurY), color);
 8001422:	88fa      	ldrh	r2, [r7, #6]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	b218      	sxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b29a      	uxth	r2, r3
 8001432:	88bb      	ldrh	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21b      	sxth	r3, r3
 800143a:	883a      	ldrh	r2, [r7, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff f96f 	bl	8000720 <drawPixel>
      drawPixel((x + CurY), (y + CurX), color);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	b29a      	uxth	r2, r3
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	b218      	sxth	r0, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	b29a      	uxth	r2, r3
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	883a      	ldrh	r2, [r7, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff f95f 	bl	8000720 <drawPixel>
      drawPixel((x - CurY), (y + CurX), color);
 8001462:	88fa      	ldrh	r2, [r7, #6]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	b29b      	uxth	r3, r3
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	b218      	sxth	r0, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	883a      	ldrh	r2, [r7, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff f94f 	bl	8000720 <drawPixel>

    if (D < 0)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da06      	bge.n	8001496 <DrawCircle+0x14a>
    {
      D += (CurX << 2) + 6;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3306      	adds	r3, #6
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <DrawCircle+0x160>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	330a      	adds	r3, #10
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
      CurY--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	3301      	adds	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	f77f af63 	ble.w	8001382 <DrawCircle+0x36>
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
	...

080014c8 <write16BitColor>:
  DrawCircle(x, y, Radius,color);
}
/*
 *
 */
void write16BitColor(uint16_t color) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (color & 0xF800) >> 11;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	0adb      	lsrs	r3, r3, #11
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color & 0x07E0) >> 5;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	115b      	asrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014e4:	73bb      	strb	r3, [r7, #14]
	uint8_t b = color & 0x001F;
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	737b      	strb	r3, [r7, #13]
	r = (r * 255) / 31;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4613      	mov	r3, r2
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <write16BitColor+0x90>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	441a      	add	r2, r3
 8001500:	1112      	asrs	r2, r2, #4
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	73fb      	strb	r3, [r7, #15]
	g = (g * 255) / 63;
 8001508:	7bba      	ldrb	r2, [r7, #14]
 800150a:	4613      	mov	r3, r2
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <write16BitColor+0x94>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	441a      	add	r2, r3
 8001518:	1152      	asrs	r2, r2, #5
 800151a:	17db      	asrs	r3, r3, #31
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	73bb      	strb	r3, [r7, #14]
	b = (b * 255) / 31;
 8001520:	7b7a      	ldrb	r2, [r7, #13]
 8001522:	4613      	mov	r3, r2
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <write16BitColor+0x90>)
 800152a:	fb82 1203 	smull	r1, r2, r2, r3
 800152e:	441a      	add	r2, r3
 8001530:	1112      	asrs	r2, r2, #4
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	737b      	strb	r3, [r7, #13]
	uint8_t data[3] = { r, g, b };
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	723b      	strb	r3, [r7, #8]
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	727b      	strb	r3, [r7, #9]
 8001540:	7b7b      	ldrb	r3, [r7, #13]
 8001542:	72bb      	strb	r3, [r7, #10]
	ILI9488_SendData_Multi(data, 3);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	2103      	movs	r1, #3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff70 	bl	8000430 <ILI9488_SendData_Multi>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	84210843 	.word	0x84210843
 800155c:	82082083 	.word	0x82082083

08001560 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	803b      	strh	r3, [r7, #0]
	drawFastHLine(x, y, w-1, color);
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	3b01      	subs	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21a      	sxth	r2, r3
 8001586:	8b3b      	ldrh	r3, [r7, #24]
 8001588:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800158c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001590:	f7ff f95a 	bl	8000848 <drawFastHLine>
	drawFastVLine(x, y, h-1 , color);
 8001594:	883b      	ldrh	r3, [r7, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015a6:	f7ff f8ef 	bl	8000788 <drawFastVLine>
	drawFastHLine(x, y+h-1, w-1, color);
 80015aa:	88ba      	ldrh	r2, [r7, #4]
 80015ac:	883b      	ldrh	r3, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b219      	sxth	r1, r3
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b21a      	sxth	r2, r3
 80015c0:	8b3b      	ldrh	r3, [r7, #24]
 80015c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c6:	f7ff f93f 	bl	8000848 <drawFastHLine>
	drawFastVLine(x + w-1, y, h-1, color);
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b218      	sxth	r0, r3
 80015d8:	883b      	ldrh	r3, [r7, #0]
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b21a      	sxth	r2, r3
 80015e0:	8b3b      	ldrh	r3, [r7, #24]
 80015e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015e6:	f7ff f8cf 	bl	8000788 <drawFastVLine>
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
	...

080015f4 <ili9488_DisplayOn>:


/*
 *
 */
void ili9488_DisplayOn(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	ILI9488_SendCommand(ILI9488_SLPOUT);
 80015f8:	2011      	movs	r0, #17
 80015fa:	f7fe fec9 	bl	8000390 <ILI9488_SendCommand>
	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80015fe:	2029      	movs	r0, #41	@ 0x29
 8001600:	f7fe fec6 	bl	8000390 <ILI9488_SendCommand>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001604:	2104      	movs	r1, #4
 8001606:	4802      	ldr	r0, [pc, #8]	@ (8001610 <ili9488_DisplayOn+0x1c>)
 8001608:	f010 ff72 	bl	80124f0 <HAL_TIM_PWM_Start>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24002564 	.word	0x24002564

08001614 <ili9488_DisplayBrightness>:
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}
/*
 *
 */
void ili9488_DisplayBrightness(uint8_t level) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, level);
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <ili9488_DisplayBrightness+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38
// Start PWM signals generation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001626:	2104      	movs	r1, #4
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <ili9488_DisplayBrightness+0x24>)
 800162a:	f010 ff61 	bl	80124f0 <HAL_TIM_PWM_Start>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24002564 	.word	0x24002564

0800163c <HAL_SPI_TxCpltCallback>:
	 #endif
	 // printf("ID:%08X\r\n", (unsigned int)id);*/

}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	spiDmaTransferComplete = 1;
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <HAL_SPI_TxCpltCallback+0x1c>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
//		Touch_PenDown=0;    //reset touch interrupt flag: writing onto display will trigger the display interrupt pin
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	240001a4 	.word	0x240001a4

0800165c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <MX_DMA_Init+0x3c>)
 8001664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <MX_DMA_Init+0x3c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_DMA_Init+0x3c>)
 8001674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	200b      	movs	r0, #11
 8001686:	f008 f8da 	bl	800983e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800168a:	200b      	movs	r0, #11
 800168c:	f008 f8f1 	bl	8009872 <HAL_NVIC_EnableIRQ>

}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024400 	.word	0x58024400

0800169c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	@ 0x30
 80016a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b64      	ldr	r3, [pc, #400]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a62      	ldr	r2, [pc, #392]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b60      	ldr	r3, [pc, #384]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b58      	ldr	r3, [pc, #352]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b55      	ldr	r3, [pc, #340]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a53      	ldr	r2, [pc, #332]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 80016f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a4c      	ldr	r2, [pc, #304]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b49      	ldr	r3, [pc, #292]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b46      	ldr	r3, [pc, #280]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001730:	4a44      	ldr	r2, [pc, #272]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173a:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174e:	4a3d      	ldr	r2, [pc, #244]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001758:	4b3a      	ldr	r3, [pc, #232]	@ (8001844 <MX_GPIO_Init+0x1a8>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RESET_Pin|CS_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 800176c:	4836      	ldr	r0, [pc, #216]	@ (8001848 <MX_GPIO_Init+0x1ac>)
 800176e:	f00b fff7 	bl	800d760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001778:	4833      	ldr	r0, [pc, #204]	@ (8001848 <MX_GPIO_Init+0x1ac>)
 800177a:	f00b fff1 	bl	800d760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800177e:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8001782:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	482d      	ldr	r0, [pc, #180]	@ (8001848 <MX_GPIO_Init+0x1ac>)
 8001794:	f00b fe34 	bl	800d400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001798:	f643 73df 	movw	r3, #16351	@ 0x3fdf
 800179c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4827      	ldr	r0, [pc, #156]	@ (800184c <MX_GPIO_Init+0x1b0>)
 80017ae:	f00b fe27 	bl	800d400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80017b2:	f248 73fd 	movw	r3, #34813	@ 0x87fd
 80017b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4822      	ldr	r0, [pc, #136]	@ (8001850 <MX_GPIO_Init+0x1b4>)
 80017c8:	f00b fe1a 	bl	800d400 <HAL_GPIO_Init>


  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80017cc:	f640 73f6 	movw	r3, #4086	@ 0xff6
 80017d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	481c      	ldr	r0, [pc, #112]	@ (8001854 <MX_GPIO_Init+0x1b8>)
 80017e2:	f00b fe0d 	bl	800d400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80017e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <MX_GPIO_Init+0x1ac>)
 8001800:	f00b fdfe 	bl	800d400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8001804:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	480a      	ldr	r0, [pc, #40]	@ (8001848 <MX_GPIO_Init+0x1ac>)
 800181e:	f00b fdef 	bl	800d400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001826:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <MX_GPIO_Init+0x1bc>)
 8001838:	f00b fde2 	bl	800d400 <HAL_GPIO_Init>


}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	@ 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58024400 	.word	0x58024400
 8001848:	58021000 	.word	0x58021000
 800184c:	58020800 	.word	0x58020800
 8001850:	58020000 	.word	0x58020000
 8001854:	58020400 	.word	0x58020400
 8001858:	58020c00 	.word	0x58020c00

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b0a3      	sub	sp, #140	@ 0x8c
 8001860:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f007 fe47 	bl	80094f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f002 f94d 	bl	8003b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f7ff ff17 	bl	800169c <MX_GPIO_Init>
  MX_DMA_Init();
 800186e:	f7ff fef5 	bl	800165c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001872:	f015 f9b3 	bl	8016bdc <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8001876:	f007 f9e7 	bl	8008c48 <MX_SPI4_Init>
  MX_TIM1_Init();
 800187a:	f007 fd07 	bl	800928c <MX_TIM1_Init>
  MX_FDCAN1_Init();
 800187e:	f002 f9ef 	bl	8003c60 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001882:	48b1      	ldr	r0, [pc, #708]	@ (8001b48 <main+0x2ec>)
 8001884:	f00a fd8e 	bl	800c3a4 <HAL_FDCAN_Start>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <main+0x36>
  {
	  Error_Handler();
 800188e:	f004 fe4b 	bl	8006528 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	48ac      	ldr	r0, [pc, #688]	@ (8001b48 <main+0x2ec>)
 8001898:	f00a fff0 	bl	800c87c <HAL_FDCAN_ActivateNotification>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <main+0x4a>
  {
    /* Notification Error */
    Error_Handler();
 80018a2:	f004 fe41 	bl	8006528 <Error_Handler>
  }
	 ILI9488_Init();
 80018a6:	f7fe fe07 	bl	80004b8 <ILI9488_Init>
	 setRotation(Displ_Orientat_90);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff fa76 	bl	8000d9c <setRotation>
	 fillScreen(ILI9488_BLACK);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff f92f 	bl	8000b14 <fillScreen>
	 for(w=0;w<100;w++)
 80018b6:	4ba5      	ldr	r3, [pc, #660]	@ (8001b4c <main+0x2f0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e041      	b.n	8001942 <main+0xe6>
	 {
			x = rand() % (_width - 11);
 80018be:	f015 fee7 	bl	8017690 <rand>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4ba2      	ldr	r3, [pc, #648]	@ (8001b50 <main+0x2f4>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	3b0b      	subs	r3, #11
 80018ca:	fb92 f1f3 	sdiv	r1, r2, r3
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001b54 <main+0x2f8>)
 80018d8:	801a      	strh	r2, [r3, #0]
			y = rand() % (_height - 18);
 80018da:	f015 fed9 	bl	8017690 <rand>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b58 <main+0x2fc>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	3b12      	subs	r3, #18
 80018e6:	fb92 f1f3 	sdiv	r1, r2, r3
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b9a      	ldr	r3, [pc, #616]	@ (8001b5c <main+0x300>)
 80018f4:	801a      	strh	r2, [r3, #0]
			uint16_t taille=rand()%60;
 80018f6:	f015 fecb 	bl	8017690 <rand>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b98      	ldr	r3, [pc, #608]	@ (8001b60 <main+0x304>)
 80018fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001902:	4413      	add	r3, r2
 8001904:	1159      	asrs	r1, r3, #5
 8001906:	17d3      	asrs	r3, r2, #31
 8001908:	1ac9      	subs	r1, r1, r3
 800190a:	460b      	mov	r3, r1
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a5b      	subs	r3, r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	1ad1      	subs	r1, r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	80fb      	strh	r3, [r7, #6]
			DrawCircle(x, y,taille,rand_color());
 8001918:	4b8e      	ldr	r3, [pc, #568]	@ (8001b54 <main+0x2f8>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b21c      	sxth	r4, r3
 800191e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b5c <main+0x300>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b21d      	sxth	r5, r3
 8001924:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8001928:	f004 faca 	bl	8005ec0 <rand_color>
 800192c:	4603      	mov	r3, r0
 800192e:	4632      	mov	r2, r6
 8001930:	4629      	mov	r1, r5
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fd0a 	bl	800134c <DrawCircle>
	 for(w=0;w<100;w++)
 8001938:	4b84      	ldr	r3, [pc, #528]	@ (8001b4c <main+0x2f0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a83      	ldr	r2, [pc, #524]	@ (8001b4c <main+0x2f0>)
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b82      	ldr	r3, [pc, #520]	@ (8001b4c <main+0x2f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b63      	cmp	r3, #99	@ 0x63
 8001948:	ddb9      	ble.n	80018be <main+0x62>
	 }
	 HAL_Delay(500);
 800194a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800194e:	f007 fe6b 	bl	8009628 <HAL_Delay>
	 dinam(ILI9488_BLACK);
 8001952:	2000      	movs	r0, #0
 8001954:	f004 fb0a 	bl	8005f6c <dinam>
	 HAL_Delay(500);
 8001958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195c:	f007 fe64 	bl	8009628 <HAL_Delay>
	 Displ_CString(120,120,180,180,"CANalyzer",Font24,3,ILI9488_WHITE,ILI9488_BLACK);
 8001960:	2300      	movs	r3, #0
 8001962:	9306      	str	r3, [sp, #24]
 8001964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001968:	9305      	str	r3, [sp, #20]
 800196a:	2303      	movs	r3, #3
 800196c:	9304      	str	r3, [sp, #16]
 800196e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b64 <main+0x308>)
 8001970:	ab01      	add	r3, sp, #4
 8001972:	ca07      	ldmia	r2, {r0, r1, r2}
 8001974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001978:	4b7b      	ldr	r3, [pc, #492]	@ (8001b68 <main+0x30c>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	23b4      	movs	r3, #180	@ 0xb4
 800197e:	22b4      	movs	r2, #180	@ 0xb4
 8001980:	2178      	movs	r1, #120	@ 0x78
 8001982:	2078      	movs	r0, #120	@ 0x78
 8001984:	f7ff fbe6 	bl	8001154 <Displ_CString>
	 HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198c:	f007 fe4c 	bl	8009628 <HAL_Delay>
	 horizanim();
 8001990:	f004 fb24 	bl	8005fdc <horizanim>
	 sprintf(text,"CAN : 125Kbps");
 8001994:	4975      	ldr	r1, [pc, #468]	@ (8001b6c <main+0x310>)
 8001996:	4876      	ldr	r0, [pc, #472]	@ (8001b70 <main+0x314>)
 8001998:	f015 ffae 	bl	80178f8 <siprintf>
	 Displ_WString(330, 10, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800199c:	4b75      	ldr	r3, [pc, #468]	@ (8001b74 <main+0x318>)
 800199e:	2200      	movs	r2, #0
 80019a0:	9204      	str	r2, [sp, #16]
 80019a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a6:	9203      	str	r2, [sp, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	466c      	mov	r4, sp
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001b70 <main+0x314>)
 80019bc:	210a      	movs	r1, #10
 80019be:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80019c2:	f7ff fb87 	bl	80010d4 <Displ_WString>
	 Displ_CString(0,60,20,10,"0x0D",Font16,1,ILI9488_WHITE,ILI9488_OLIVE);
 80019c6:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 80019ca:	9306      	str	r3, [sp, #24]
 80019cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d0:	9305      	str	r3, [sp, #20]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9304      	str	r3, [sp, #16]
 80019d6:	4a67      	ldr	r2, [pc, #412]	@ (8001b74 <main+0x318>)
 80019d8:	ab01      	add	r3, sp, #4
 80019da:	ca07      	ldmia	r2, {r0, r1, r2}
 80019dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019e0:	4b65      	ldr	r3, [pc, #404]	@ (8001b78 <main+0x31c>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	230a      	movs	r3, #10
 80019e6:	2214      	movs	r2, #20
 80019e8:	213c      	movs	r1, #60	@ 0x3c
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fbb2 	bl	8001154 <Displ_CString>
	 y=60;
 80019f0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b5c <main+0x300>)
 80019f2:	223c      	movs	r2, #60	@ 0x3c
 80019f4:	801a      	strh	r2, [r3, #0]
	 x=380;
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <main+0x2f8>)
 80019f8:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80019fc:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a02:	e006      	b.n	8001a12 <main+0x1b6>
	 {
		 bas(ILI9488_OLIVE);
 8001a04:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8001a08:	f004 f9ce 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a0e:	3301      	adds	r3, #1
 8001a10:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a16:	ddf5      	ble.n	8001a04 <main+0x1a8>
	 }
	 Displ_CString(0,100,20,10,"0x46",Font16,1,ILI9488_WHITE,ILI9488_BLUE);
 8001a18:	231f      	movs	r3, #31
 8001a1a:	9306      	str	r3, [sp, #24]
 8001a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a20:	9305      	str	r3, [sp, #20]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9304      	str	r3, [sp, #16]
 8001a26:	4a53      	ldr	r2, [pc, #332]	@ (8001b74 <main+0x318>)
 8001a28:	ab01      	add	r3, sp, #4
 8001a2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a30:	4b52      	ldr	r3, [pc, #328]	@ (8001b7c <main+0x320>)
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	230a      	movs	r3, #10
 8001a36:	2214      	movs	r2, #20
 8001a38:	2164      	movs	r1, #100	@ 0x64
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fb8a 	bl	8001154 <Displ_CString>
	 y=100;
 8001a40:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <main+0x300>)
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001a46:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <main+0x2f8>)
 8001a48:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001a4c:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a52:	e005      	b.n	8001a60 <main+0x204>
	 {
		 bas(ILI9488_BLUE);
 8001a54:	201f      	movs	r0, #31
 8001a56:	f004 f9a7 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a62:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a64:	ddf6      	ble.n	8001a54 <main+0x1f8>
	 }
	 Displ_CString(0,140,20,10,"0x33",Font16,1,ILI9488_WHITE,ILI9488_DARKCYAN);
 8001a66:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8001a6a:	9306      	str	r3, [sp, #24]
 8001a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a70:	9305      	str	r3, [sp, #20]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9304      	str	r3, [sp, #16]
 8001a76:	4a3f      	ldr	r2, [pc, #252]	@ (8001b74 <main+0x318>)
 8001a78:	ab01      	add	r3, sp, #4
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a80:	4b3f      	ldr	r3, [pc, #252]	@ (8001b80 <main+0x324>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	230a      	movs	r3, #10
 8001a86:	2214      	movs	r2, #20
 8001a88:	218c      	movs	r1, #140	@ 0x8c
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb62 	bl	8001154 <Displ_CString>
	 y=140;
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <main+0x300>)
 8001a92:	228c      	movs	r2, #140	@ 0x8c
 8001a94:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <main+0x2f8>)
 8001a98:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001a9c:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001aa2:	e006      	b.n	8001ab2 <main+0x256>
	 {
		 bas(ILI9488_DARKCYAN);
 8001aa4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001aa8:	f004 f97e 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ab6:	ddf5      	ble.n	8001aa4 <main+0x248>
	 }
	 Displ_CString(0,180,20,10,"0x1F",Font16,1,ILI9488_WHITE,ILI9488_ORANGE);
 8001ab8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001abc:	9306      	str	r3, [sp, #24]
 8001abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ac2:	9305      	str	r3, [sp, #20]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b74 <main+0x318>)
 8001aca:	ab01      	add	r3, sp, #4
 8001acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <main+0x328>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	2214      	movs	r2, #20
 8001ada:	21b4      	movs	r1, #180	@ 0xb4
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fb39 	bl	8001154 <Displ_CString>
	 y=180;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <main+0x300>)
 8001ae4:	22b4      	movs	r2, #180	@ 0xb4
 8001ae6:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <main+0x2f8>)
 8001aea:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001aee:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001af4:	e006      	b.n	8001b04 <main+0x2a8>
	 {
		 bas(ILI9488_ORANGE);
 8001af6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8001afa:	f004 f955 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b00:	3301      	adds	r3, #1
 8001b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b06:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b08:	ddf5      	ble.n	8001af6 <main+0x29a>
	 }
	 Displ_CString(0,220,20,10,"0x21",Font16,1,ILI9488_WHITE,ILI9488_RED);
 8001b0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b0e:	9306      	str	r3, [sp, #24]
 8001b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	2301      	movs	r3, #1
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	@ (8001b74 <main+0x318>)
 8001b1c:	ab01      	add	r3, sp, #4
 8001b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <main+0x32c>)
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	230a      	movs	r3, #10
 8001b2a:	2214      	movs	r2, #20
 8001b2c:	21dc      	movs	r1, #220	@ 0xdc
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff fb10 	bl	8001154 <Displ_CString>
	 y=220;
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <main+0x300>)
 8001b36:	22dc      	movs	r2, #220	@ 0xdc
 8001b38:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <main+0x2f8>)
 8001b3c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001b40:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b46:	e028      	b.n	8001b9a <main+0x33e>
 8001b48:	240021ac 	.word	0x240021ac
 8001b4c:	240023c0 	.word	0x240023c0
 8001b50:	24000024 	.word	0x24000024
 8001b54:	24000020 	.word	0x24000020
 8001b58:	24000026 	.word	0x24000026
 8001b5c:	24000022 	.word	0x24000022
 8001b60:	88888889 	.word	0x88888889
 8001b64:	24000014 	.word	0x24000014
 8001b68:	08018b44 	.word	0x08018b44
 8001b6c:	08018b50 	.word	0x08018b50
 8001b70:	24002354 	.word	0x24002354
 8001b74:	24000008 	.word	0x24000008
 8001b78:	08018b60 	.word	0x08018b60
 8001b7c:	08018b68 	.word	0x08018b68
 8001b80:	08018b70 	.word	0x08018b70
 8001b84:	08018b78 	.word	0x08018b78
 8001b88:	08018b80 	.word	0x08018b80
	 {
		 bas(ILI9488_RED);
 8001b8c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001b90:	f004 f90a 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b96:	3301      	adds	r3, #1
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b9e:	ddf5      	ble.n	8001b8c <main+0x330>
	 }
	 Displ_CString(0,260,20,10,"0x4D",Font16,1,ILI9488_WHITE,ILI9488_PINK);
 8001ba0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001ba4:	9306      	str	r3, [sp, #24]
 8001ba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001baa:	9305      	str	r3, [sp, #20]
 8001bac:	2301      	movs	r3, #1
 8001bae:	9304      	str	r3, [sp, #16]
 8001bb0:	4ad1      	ldr	r2, [pc, #836]	@ (8001ef8 <main+0x69c>)
 8001bb2:	ab01      	add	r3, sp, #4
 8001bb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bba:	4bd0      	ldr	r3, [pc, #832]	@ (8001efc <main+0x6a0>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	2214      	movs	r2, #20
 8001bc2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fac4 	bl	8001154 <Displ_CString>
	 y=260;
 8001bcc:	4bcc      	ldr	r3, [pc, #816]	@ (8001f00 <main+0x6a4>)
 8001bce:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bd2:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001bd4:	4bcb      	ldr	r3, [pc, #812]	@ (8001f04 <main+0x6a8>)
 8001bd6:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001bda:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8001be0:	e006      	b.n	8001bf0 <main+0x394>
	 {
		 bas(ILI9488_PINK);
 8001be2:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8001be6:	f004 f8df 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bec:	3301      	adds	r3, #1
 8001bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bf2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bf4:	ddf5      	ble.n	8001be2 <main+0x386>
	 }
	 Displ_CString(0,300,20,10,"0x0A",Font16,1,ILI9488_WHITE,ILI9488_PURPLE);
 8001bf6:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001bfa:	9306      	str	r3, [sp, #24]
 8001bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	4abc      	ldr	r2, [pc, #752]	@ (8001ef8 <main+0x69c>)
 8001c08:	ab01      	add	r3, sp, #4
 8001c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c10:	4bbd      	ldr	r3, [pc, #756]	@ (8001f08 <main+0x6ac>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	230a      	movs	r3, #10
 8001c16:	2214      	movs	r2, #20
 8001c18:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fa99 	bl	8001154 <Displ_CString>
	 y=300;
 8001c22:	4bb7      	ldr	r3, [pc, #732]	@ (8001f00 <main+0x6a4>)
 8001c24:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c28:	801a      	strh	r2, [r3, #0]
	 x=380;
 8001c2a:	4bb6      	ldr	r3, [pc, #728]	@ (8001f04 <main+0x6a8>)
 8001c2c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001c30:	801a      	strh	r2, [r3, #0]
	 for(int p=0;p<64;p++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c36:	e006      	b.n	8001c46 <main+0x3ea>
	 {
		 bas(ILI9488_PURPLE);
 8001c38:	f647 000f 	movw	r0, #30735	@ 0x780f
 8001c3c:	f004 f8b4 	bl	8005da8 <bas>
	 for(int p=0;p<64;p++)
 8001c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c42:	3301      	adds	r3, #1
 8001c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c4a:	ddf5      	ble.n	8001c38 <main+0x3dc>
	 }
	  filter.Identifier = 0xb0;
 8001c4c:	4baf      	ldr	r3, [pc, #700]	@ (8001f0c <main+0x6b0>)
 8001c4e:	22b0      	movs	r2, #176	@ 0xb0
 8001c50:	601a      	str	r2, [r3, #0]
	  filter.IdType = FDCAN_STANDARD_ID;
 8001c52:	4bae      	ldr	r3, [pc, #696]	@ (8001f0c <main+0x6b0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
	  filter.TxFrameType = FDCAN_DATA_FRAME;
 8001c58:	4bac      	ldr	r3, [pc, #688]	@ (8001f0c <main+0x6b0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
	  filter.DataLength = FDCAN_DLC_BYTES_8;
 8001c5e:	4bab      	ldr	r3, [pc, #684]	@ (8001f0c <main+0x6b0>)
 8001c60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c64:	60da      	str	r2, [r3, #12]
	  filter.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c66:	4ba9      	ldr	r3, [pc, #676]	@ (8001f0c <main+0x6b0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
	  filter.BitRateSwitch = FDCAN_BRS_OFF;
 8001c6c:	4ba7      	ldr	r3, [pc, #668]	@ (8001f0c <main+0x6b0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
	  filter.FDFormat = FDCAN_CLASSIC_CAN;
 8001c72:	4ba6      	ldr	r3, [pc, #664]	@ (8001f0c <main+0x6b0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
	  filter.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001c78:	4ba4      	ldr	r3, [pc, #656]	@ (8001f0c <main+0x6b0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
	  filter.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8001c7e:	4ba3      	ldr	r3, [pc, #652]	@ (8001f0c <main+0x6b0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]

	  Ms.Identifier = 0xb1;
 8001c84:	4ba2      	ldr	r3, [pc, #648]	@ (8001f10 <main+0x6b4>)
 8001c86:	22b1      	movs	r2, #177	@ 0xb1
 8001c88:	601a      	str	r2, [r3, #0]
	  Ms.IdType = FDCAN_STANDARD_ID;
 8001c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8001f10 <main+0x6b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
	  Ms.TxFrameType = FDCAN_DATA_FRAME;
 8001c90:	4b9f      	ldr	r3, [pc, #636]	@ (8001f10 <main+0x6b4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
	  Ms.DataLength = FDCAN_DLC_BYTES_8;
 8001c96:	4b9e      	ldr	r3, [pc, #632]	@ (8001f10 <main+0x6b4>)
 8001c98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c9c:	60da      	str	r2, [r3, #12]
	  Ms.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8001f10 <main+0x6b4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
	  Ms.BitRateSwitch = FDCAN_BRS_OFF;
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	@ (8001f10 <main+0x6b4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
	  Ms.FDFormat = FDCAN_CLASSIC_CAN;
 8001caa:	4b99      	ldr	r3, [pc, #612]	@ (8001f10 <main+0x6b4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
	  Ms.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001cb0:	4b97      	ldr	r3, [pc, #604]	@ (8001f10 <main+0x6b4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
	  Ms.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8001cb6:	4b96      	ldr	r3, [pc, #600]	@ (8001f10 <main+0x6b4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(bufferr_receive[0])
 8001cbc:	4b95      	ldr	r3, [pc, #596]	@ (8001f14 <main+0x6b8>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b51      	cmp	r3, #81	@ 0x51
 8001cc2:	f300 8129 	bgt.w	8001f18 <main+0x6bc>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	da70      	bge.n	8001dac <main+0x550>
			  bufferr_receive[0]=0xff;
	          fd_speed=3;
	          speed=0;
	  break;
	  default :
		  break;
 8001cca:	f001 bf09 	b.w	8003ae0 <main+0x2284>
	  switch(bufferr_receive[0])
 8001cce:	3bc1      	subs	r3, #193	@ 0xc1
 8001cd0:	2b33      	cmp	r3, #51	@ 0x33
 8001cd2:	f201 8705 	bhi.w	8003ae0 <main+0x2284>
 8001cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cdc <main+0x480>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	0800342d 	.word	0x0800342d
 8001ce0:	08003513 	.word	0x08003513
 8001ce4:	0800362d 	.word	0x0800362d
 8001ce8:	08003ae1 	.word	0x08003ae1
 8001cec:	08003ae1 	.word	0x08003ae1
 8001cf0:	08003ae1 	.word	0x08003ae1
 8001cf4:	08003ae1 	.word	0x08003ae1
 8001cf8:	08003ae1 	.word	0x08003ae1
 8001cfc:	08003ae1 	.word	0x08003ae1
 8001d00:	08003ae1 	.word	0x08003ae1
 8001d04:	08003ae1 	.word	0x08003ae1
 8001d08:	08003ae1 	.word	0x08003ae1
 8001d0c:	08003ae1 	.word	0x08003ae1
 8001d10:	08003ae1 	.word	0x08003ae1
 8001d14:	08003ae1 	.word	0x08003ae1
 8001d18:	08003ae1 	.word	0x08003ae1
 8001d1c:	08003ae1 	.word	0x08003ae1
 8001d20:	08003ae1 	.word	0x08003ae1
 8001d24:	08003ae1 	.word	0x08003ae1
 8001d28:	08003ae1 	.word	0x08003ae1
 8001d2c:	08003ae1 	.word	0x08003ae1
 8001d30:	08003ae1 	.word	0x08003ae1
 8001d34:	08003ae1 	.word	0x08003ae1
 8001d38:	08003ae1 	.word	0x08003ae1
 8001d3c:	08003ae1 	.word	0x08003ae1
 8001d40:	08003ae1 	.word	0x08003ae1
 8001d44:	08003ae1 	.word	0x08003ae1
 8001d48:	08003ae1 	.word	0x08003ae1
 8001d4c:	08003ae1 	.word	0x08003ae1
 8001d50:	08003ae1 	.word	0x08003ae1
 8001d54:	08003ae1 	.word	0x08003ae1
 8001d58:	08003ae1 	.word	0x08003ae1
 8001d5c:	08003ae1 	.word	0x08003ae1
 8001d60:	08003ae1 	.word	0x08003ae1
 8001d64:	08003ae1 	.word	0x08003ae1
 8001d68:	08003ae1 	.word	0x08003ae1
 8001d6c:	08003ae1 	.word	0x08003ae1
 8001d70:	08003ae1 	.word	0x08003ae1
 8001d74:	08003ae1 	.word	0x08003ae1
 8001d78:	08003ae1 	.word	0x08003ae1
 8001d7c:	08003ae1 	.word	0x08003ae1
 8001d80:	08003ae1 	.word	0x08003ae1
 8001d84:	08003ae1 	.word	0x08003ae1
 8001d88:	08003ae1 	.word	0x08003ae1
 8001d8c:	08003ae1 	.word	0x08003ae1
 8001d90:	08003ae1 	.word	0x08003ae1
 8001d94:	08003ae1 	.word	0x08003ae1
 8001d98:	08003ae1 	.word	0x08003ae1
 8001d9c:	08003713 	.word	0x08003713
 8001da0:	08003819 	.word	0x08003819
 8001da4:	08003901 	.word	0x08003901
 8001da8:	080039f9 	.word	0x080039f9
 8001dac:	3b03      	subs	r3, #3
 8001dae:	2b4e      	cmp	r3, #78	@ 0x4e
 8001db0:	f201 8696 	bhi.w	8003ae0 <main+0x2284>
 8001db4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <main+0x560>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	080025f5 	.word	0x080025f5
 8001dc0:	08003ae1 	.word	0x08003ae1
 8001dc4:	08003ae1 	.word	0x08003ae1
 8001dc8:	08003ae1 	.word	0x08003ae1
 8001dcc:	08003ae1 	.word	0x08003ae1
 8001dd0:	08003ae1 	.word	0x08003ae1
 8001dd4:	08003ae1 	.word	0x08003ae1
 8001dd8:	08002851 	.word	0x08002851
 8001ddc:	08003ae1 	.word	0x08003ae1
 8001de0:	08003ae1 	.word	0x08003ae1
 8001de4:	08001f29 	.word	0x08001f29
 8001de8:	08003ae1 	.word	0x08003ae1
 8001dec:	08003ae1 	.word	0x08003ae1
 8001df0:	08003ae1 	.word	0x08003ae1
 8001df4:	08003415 	.word	0x08003415
 8001df8:	08003ae1 	.word	0x08003ae1
 8001dfc:	08003ae1 	.word	0x08003ae1
 8001e00:	08003ae1 	.word	0x08003ae1
 8001e04:	08003ae1 	.word	0x08003ae1
 8001e08:	08003ae1 	.word	0x08003ae1
 8001e0c:	08003ae1 	.word	0x08003ae1
 8001e10:	08003ae1 	.word	0x08003ae1
 8001e14:	08003ae1 	.word	0x08003ae1
 8001e18:	08003ae1 	.word	0x08003ae1
 8001e1c:	08003ae1 	.word	0x08003ae1
 8001e20:	08003ae1 	.word	0x08003ae1
 8001e24:	08003ae1 	.word	0x08003ae1
 8001e28:	08003ae1 	.word	0x08003ae1
 8001e2c:	08002ab1 	.word	0x08002ab1
 8001e30:	08003ae1 	.word	0x08003ae1
 8001e34:	08002d0d 	.word	0x08002d0d
 8001e38:	08003ae1 	.word	0x08003ae1
 8001e3c:	08003ae1 	.word	0x08003ae1
 8001e40:	08003ae1 	.word	0x08003ae1
 8001e44:	08003ae1 	.word	0x08003ae1
 8001e48:	08003ae1 	.word	0x08003ae1
 8001e4c:	08003ae1 	.word	0x08003ae1
 8001e50:	08003ae1 	.word	0x08003ae1
 8001e54:	08003ae1 	.word	0x08003ae1
 8001e58:	08003ae1 	.word	0x08003ae1
 8001e5c:	08003ae1 	.word	0x08003ae1
 8001e60:	08003ae1 	.word	0x08003ae1
 8001e64:	08003ae1 	.word	0x08003ae1
 8001e68:	08003ae1 	.word	0x08003ae1
 8001e6c:	08003ae1 	.word	0x08003ae1
 8001e70:	08003ae1 	.word	0x08003ae1
 8001e74:	08003ae1 	.word	0x08003ae1
 8001e78:	08003ae1 	.word	0x08003ae1
 8001e7c:	08002395 	.word	0x08002395
 8001e80:	08003ae1 	.word	0x08003ae1
 8001e84:	08003ae1 	.word	0x08003ae1
 8001e88:	08003ae1 	.word	0x08003ae1
 8001e8c:	08003ae1 	.word	0x08003ae1
 8001e90:	08003ae1 	.word	0x08003ae1
 8001e94:	08003ae1 	.word	0x08003ae1
 8001e98:	08003ae1 	.word	0x08003ae1
 8001e9c:	08003ae1 	.word	0x08003ae1
 8001ea0:	08003ae1 	.word	0x08003ae1
 8001ea4:	08003ae1 	.word	0x08003ae1
 8001ea8:	08003ae1 	.word	0x08003ae1
 8001eac:	08003ae1 	.word	0x08003ae1
 8001eb0:	08003ae1 	.word	0x08003ae1
 8001eb4:	08003ae1 	.word	0x08003ae1
 8001eb8:	08003ae1 	.word	0x08003ae1
 8001ebc:	08003ae1 	.word	0x08003ae1
 8001ec0:	08003ae1 	.word	0x08003ae1
 8001ec4:	08003ae1 	.word	0x08003ae1
 8001ec8:	0800213b 	.word	0x0800213b
 8001ecc:	08003ae1 	.word	0x08003ae1
 8001ed0:	08003ae1 	.word	0x08003ae1
 8001ed4:	08003ae1 	.word	0x08003ae1
 8001ed8:	08003ae1 	.word	0x08003ae1
 8001edc:	08003ae1 	.word	0x08003ae1
 8001ee0:	08003ae1 	.word	0x08003ae1
 8001ee4:	08002f69 	.word	0x08002f69
 8001ee8:	08003ae1 	.word	0x08003ae1
 8001eec:	08003ae1 	.word	0x08003ae1
 8001ef0:	08003ae1 	.word	0x08003ae1
 8001ef4:	0800314f 	.word	0x0800314f
 8001ef8:	24000008 	.word	0x24000008
 8001efc:	08018b88 	.word	0x08018b88
 8001f00:	24000022 	.word	0x24000022
 8001f04:	24000020 	.word	0x24000020
 8001f08:	08018b90 	.word	0x08018b90
 8001f0c:	240023fc 	.word	0x240023fc
 8001f10:	24002420 	.word	0x24002420
 8001f14:	240023a4 	.word	0x240023a4
 8001f18:	2bf4      	cmp	r3, #244	@ 0xf4
 8001f1a:	f301 85e1 	bgt.w	8003ae0 <main+0x2284>
 8001f1e:	2bc1      	cmp	r3, #193	@ 0xc1
 8001f20:	f6bf aed5 	bge.w	8001cce <main+0x472>
		  break;
 8001f24:	f001 bddc 	b.w	8003ae0 <main+0x2284>
		  fit[0]=0x0d;
 8001f28:	4ba5      	ldr	r3, [pc, #660]	@ (80021c0 <main+0x964>)
 8001f2a:	220d      	movs	r2, #13
 8001f2c:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8001f2e:	4aa4      	ldr	r2, [pc, #656]	@ (80021c0 <main+0x964>)
 8001f30:	49a4      	ldr	r1, [pc, #656]	@ (80021c4 <main+0x968>)
 8001f32:	48a5      	ldr	r0, [pc, #660]	@ (80021c8 <main+0x96c>)
 8001f34:	f00a fad8 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8001f38:	4ba4      	ldr	r3, [pc, #656]	@ (80021cc <main+0x970>)
 8001f3a:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001f3e:	801a      	strh	r2, [r3, #0]
		  y=60;
 8001f40:	4ba3      	ldr	r3, [pc, #652]	@ (80021d0 <main+0x974>)
 8001f42:	223c      	movs	r2, #60	@ 0x3c
 8001f44:	801a      	strh	r2, [r3, #0]
		  j=1;
 8001f46:	4ba3      	ldr	r3, [pc, #652]	@ (80021d4 <main+0x978>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2319      	movs	r3, #25
 8001f52:	f240 12df 	movw	r2, #479	@ 0x1df
 8001f56:	213c      	movs	r1, #60	@ 0x3c
 8001f58:	2050      	movs	r0, #80	@ 0x50
 8001f5a:	f7ff fb01 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2319      	movs	r3, #25
 8001f64:	f240 12df 	movw	r2, #479	@ 0x1df
 8001f68:	213c      	movs	r1, #60	@ 0x3c
 8001f6a:	2050      	movs	r0, #80	@ 0x50
 8001f6c:	f7fe fdec 	bl	8000b48 <fillRect>
		  if(bol==1)
 8001f70:	4b99      	ldr	r3, [pc, #612]	@ (80021d8 <main+0x97c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d139      	bne.n	8001fec <main+0x790>
		  dinam(ILI9488_WHITE);
 8001f78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f7c:	f003 fff6 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"vitesse",Font24,3,ILI9488_BLACK,ILI9488_WHITE);
 8001f80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f84:	9306      	str	r3, [sp, #24]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9305      	str	r3, [sp, #20]
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	9304      	str	r3, [sp, #16]
 8001f8e:	4a93      	ldr	r2, [pc, #588]	@ (80021dc <main+0x980>)
 8001f90:	ab01      	add	r3, sp, #4
 8001f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f98:	4b91      	ldr	r3, [pc, #580]	@ (80021e0 <main+0x984>)
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	23b4      	movs	r3, #180	@ 0xb4
 8001f9e:	22b4      	movs	r2, #180	@ 0xb4
 8001fa0:	2178      	movs	r1, #120	@ 0x78
 8001fa2:	2078      	movs	r0, #120	@ 0x78
 8001fa4:	f7ff f8d6 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fac:	e016      	b.n	8001fdc <main+0x780>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 8001fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	f240 12df 	movw	r2, #479	@ 0x1df
 8001fba:	2164      	movs	r1, #100	@ 0x64
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff facf 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 8001fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	f240 12df 	movw	r2, #479	@ 0x1df
 8001fce:	2164      	movs	r1, #100	@ 0x64
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7fe fdb9 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd8:	3301      	adds	r3, #1
 8001fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fde:	2b13      	cmp	r3, #19
 8001fe0:	dde5      	ble.n	8001fae <main+0x752>
		  horizanim();
 8001fe2:	f003 fffb 	bl	8005fdc <horizanim>
		  bol=0;
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <main+0x97c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8001fec:	497d      	ldr	r1, [pc, #500]	@ (80021e4 <main+0x988>)
 8001fee:	487e      	ldr	r0, [pc, #504]	@ (80021e8 <main+0x98c>)
 8001ff0:	f015 fc82 	bl	80178f8 <siprintf>
		  Displ_WString(20,30,text,Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 8001ff4:	4b7d      	ldr	r3, [pc, #500]	@ (80021ec <main+0x990>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	9204      	str	r2, [sp, #16]
 8001ffa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	9202      	str	r2, [sp, #8]
 8002004:	466c      	mov	r4, sp
 8002006:	1d1a      	adds	r2, r3, #4
 8002008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800200c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a75      	ldr	r2, [pc, #468]	@ (80021e8 <main+0x98c>)
 8002014:	211e      	movs	r1, #30
 8002016:	2014      	movs	r0, #20
 8002018:	f7ff f85c 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 800201c:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <main+0x994>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461e      	mov	r6, r3
 8002022:	4b73      	ldr	r3, [pc, #460]	@ (80021f0 <main+0x994>)
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	469c      	mov	ip, r3
 8002028:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <main+0x994>)
 800202a:	789b      	ldrb	r3, [r3, #2]
 800202c:	461a      	mov	r2, r3
 800202e:	4b70      	ldr	r3, [pc, #448]	@ (80021f0 <main+0x994>)
 8002030:	78db      	ldrb	r3, [r3, #3]
 8002032:	4619      	mov	r1, r3
 8002034:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <main+0x994>)
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	4b6d      	ldr	r3, [pc, #436]	@ (80021f0 <main+0x994>)
 800203c:	795b      	ldrb	r3, [r3, #5]
 800203e:	461c      	mov	r4, r3
 8002040:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <main+0x994>)
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	461d      	mov	r5, r3
 8002046:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <main+0x994>)
 8002048:	79db      	ldrb	r3, [r3, #7]
 800204a:	9305      	str	r3, [sp, #20]
 800204c:	9504      	str	r5, [sp, #16]
 800204e:	9403      	str	r4, [sp, #12]
 8002050:	9002      	str	r0, [sp, #8]
 8002052:	9101      	str	r1, [sp, #4]
 8002054:	9200      	str	r2, [sp, #0]
 8002056:	4663      	mov	r3, ip
 8002058:	4632      	mov	r2, r6
 800205a:	4966      	ldr	r1, [pc, #408]	@ (80021f4 <main+0x998>)
 800205c:	4862      	ldr	r0, [pc, #392]	@ (80021e8 <main+0x98c>)
 800205e:	f015 fc4b 	bl	80178f8 <siprintf>
		  Displ_WString(90,30,text,Font16,1,ILI9488_BLACK,ILI9488_OLIVE);
 8002062:	4b62      	ldr	r3, [pc, #392]	@ (80021ec <main+0x990>)
 8002064:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 8002068:	9204      	str	r2, [sp, #16]
 800206a:	2200      	movs	r2, #0
 800206c:	9203      	str	r2, [sp, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	9202      	str	r2, [sp, #8]
 8002072:	466c      	mov	r4, sp
 8002074:	1d1a      	adds	r2, r3, #4
 8002076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800207a:	e884 0003 	stmia.w	r4, {r0, r1}
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a59      	ldr	r2, [pc, #356]	@ (80021e8 <main+0x98c>)
 8002082:	211e      	movs	r1, #30
 8002084:	205a      	movs	r0, #90	@ 0x5a
 8002086:	f7ff f825 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x0D",Font16,1,ILI9488_WHITE,ILI9488_OLIVE);
 800208a:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 800208e:	9306      	str	r3, [sp, #24]
 8002090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002094:	9305      	str	r3, [sp, #20]
 8002096:	2301      	movs	r3, #1
 8002098:	9304      	str	r3, [sp, #16]
 800209a:	4a54      	ldr	r2, [pc, #336]	@ (80021ec <main+0x990>)
 800209c:	ab01      	add	r3, sp, #4
 800209e:	ca07      	ldmia	r2, {r0, r1, r2}
 80020a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020a4:	4b54      	ldr	r3, [pc, #336]	@ (80021f8 <main+0x99c>)
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	230a      	movs	r3, #10
 80020aa:	2214      	movs	r2, #20
 80020ac:	213c      	movs	r1, #60	@ 0x3c
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff f850 	bl	8001154 <Displ_CString>
		  col=ILI9488_OLIVE;
 80020b4:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <main+0x9a0>)
 80020b6:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 80020ba:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 80020bc:	f004 f82e 	bl	800611c <chronogramme>
		  for(int u=0;u<80;u++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c4:	e014      	b.n	80020f0 <main+0x894>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 80020c6:	2300      	movs	r3, #0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80020d0:	21c8      	movs	r1, #200	@ 0xc8
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fa44 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2319      	movs	r3, #25
 80020de:	f240 12df 	movw	r2, #479	@ 0x1df
 80020e2:	21c8      	movs	r1, #200	@ 0xc8
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7fe fd2f 	bl	8000b48 <fillRect>
		  for(int u=0;u<80;u++)
 80020ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ec:	3301      	adds	r3, #1
 80020ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80020f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80020f4:	dde7      	ble.n	80020c6 <main+0x86a>
		  sprintf(text2,"vitesse :%dKm/h",(int)engine_data);
 80020f6:	4b42      	ldr	r3, [pc, #264]	@ (8002200 <main+0x9a4>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002100:	ee17 2a90 	vmov	r2, s15
 8002104:	493f      	ldr	r1, [pc, #252]	@ (8002204 <main+0x9a8>)
 8002106:	4840      	ldr	r0, [pc, #256]	@ (8002208 <main+0x9ac>)
 8002108:	f015 fbf6 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,40,10,text2,Font16,1,ILI9488_WHITE,ILI9488_OLIVE);
 800210c:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8002110:	9306      	str	r3, [sp, #24]
 8002112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002116:	9305      	str	r3, [sp, #20]
 8002118:	2301      	movs	r3, #1
 800211a:	9304      	str	r3, [sp, #16]
 800211c:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <main+0x990>)
 800211e:	ab01      	add	r3, sp, #4
 8002120:	ca07      	ldmia	r2, {r0, r1, r2}
 8002122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <main+0x9ac>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	230a      	movs	r3, #10
 800212c:	2228      	movs	r2, #40	@ 0x28
 800212e:	2164      	movs	r1, #100	@ 0x64
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff f80f 	bl	8001154 <Displ_CString>
		  break;
 8002136:	f001 bcd7 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x46;
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <main+0x964>)
 800213c:	2246      	movs	r2, #70	@ 0x46
 800213e:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8002140:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <main+0x964>)
 8002142:	4920      	ldr	r1, [pc, #128]	@ (80021c4 <main+0x968>)
 8002144:	4820      	ldr	r0, [pc, #128]	@ (80021c8 <main+0x96c>)
 8002146:	f00a f9cf 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <main+0x970>)
 800214c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002150:	801a      	strh	r2, [r3, #0]
		  y=60;
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <main+0x974>)
 8002154:	223c      	movs	r2, #60	@ 0x3c
 8002156:	801a      	strh	r2, [r3, #0]
		  j=1;
 8002158:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <main+0x978>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2319      	movs	r3, #25
 8002164:	f240 12df 	movw	r2, #479	@ 0x1df
 8002168:	213c      	movs	r1, #60	@ 0x3c
 800216a:	2050      	movs	r0, #80	@ 0x50
 800216c:	f7ff f9f8 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2319      	movs	r3, #25
 8002176:	f240 12df 	movw	r2, #479	@ 0x1df
 800217a:	213c      	movs	r1, #60	@ 0x3c
 800217c:	2050      	movs	r0, #80	@ 0x50
 800217e:	f7fe fce3 	bl	8000b48 <fillRect>
		  if(bol==1)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <main+0x97c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d161      	bne.n	800224e <main+0x9f2>
		  dinam(ILI9488_WHITE);
 800218a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800218e:	f003 feed 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Temperature",Font24,3,ILI9488_BLACK,ILI9488_WHITE);
 8002192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002196:	9306      	str	r3, [sp, #24]
 8002198:	2300      	movs	r3, #0
 800219a:	9305      	str	r3, [sp, #20]
 800219c:	2303      	movs	r3, #3
 800219e:	9304      	str	r3, [sp, #16]
 80021a0:	4a0e      	ldr	r2, [pc, #56]	@ (80021dc <main+0x980>)
 80021a2:	ab01      	add	r3, sp, #4
 80021a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <main+0x9b0>)
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	23b4      	movs	r3, #180	@ 0xb4
 80021b0:	22b4      	movs	r2, #180	@ 0xb4
 80021b2:	2178      	movs	r1, #120	@ 0x78
 80021b4:	2078      	movs	r0, #120	@ 0x78
 80021b6:	f7fe ffcd 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80021be:	e03e      	b.n	800223e <main+0x9e2>
 80021c0:	24002448 	.word	0x24002448
 80021c4:	240023fc 	.word	0x240023fc
 80021c8:	240021ac 	.word	0x240021ac
 80021cc:	24000020 	.word	0x24000020
 80021d0:	24000022 	.word	0x24000022
 80021d4:	240023c4 	.word	0x240023c4
 80021d8:	24000028 	.word	0x24000028
 80021dc:	24000014 	.word	0x24000014
 80021e0:	08018b98 	.word	0x08018b98
 80021e4:	08018ba0 	.word	0x08018ba0
 80021e8:	24002354 	.word	0x24002354
 80021ec:	24000008 	.word	0x24000008
 80021f0:	2400226c 	.word	0x2400226c
 80021f4:	08018ba8 	.word	0x08018ba8
 80021f8:	08018b60 	.word	0x08018b60
 80021fc:	240023d0 	.word	0x240023d0
 8002200:	2400245c 	.word	0x2400245c
 8002204:	08018bd0 	.word	0x08018bd0
 8002208:	2400237c 	.word	0x2400237c
 800220c:	08018be0 	.word	0x08018be0
			  lcdDrawRect(0, 200, 479, 25, ILI9488_WHITE);
 8002210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2319      	movs	r3, #25
 8002218:	f240 12df 	movw	r2, #479	@ 0x1df
 800221c:	21c8      	movs	r1, #200	@ 0xc8
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff f99e 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_WHITE);
 8002224:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	f240 12df 	movw	r2, #479	@ 0x1df
 8002230:	21c8      	movs	r1, #200	@ 0xc8
 8002232:	2000      	movs	r0, #0
 8002234:	f7fe fc88 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8002238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223a:	3301      	adds	r3, #1
 800223c:	643b      	str	r3, [r7, #64]	@ 0x40
 800223e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002240:	2b13      	cmp	r3, #19
 8002242:	dde5      	ble.n	8002210 <main+0x9b4>
		  horizanim();
 8002244:	f003 feca 	bl	8005fdc <horizanim>
		  bol=0;
 8002248:	4b74      	ldr	r3, [pc, #464]	@ (800241c <main+0xbc0>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 800224e:	4974      	ldr	r1, [pc, #464]	@ (8002420 <main+0xbc4>)
 8002250:	4874      	ldr	r0, [pc, #464]	@ (8002424 <main+0xbc8>)
 8002252:	f015 fb51 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8002256:	4b74      	ldr	r3, [pc, #464]	@ (8002428 <main+0xbcc>)
 8002258:	2200      	movs	r2, #0
 800225a:	9204      	str	r2, [sp, #16]
 800225c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002260:	9203      	str	r2, [sp, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	466c      	mov	r4, sp
 8002268:	1d1a      	adds	r2, r3, #4
 800226a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6b      	ldr	r2, [pc, #428]	@ (8002424 <main+0xbc8>)
 8002276:	211e      	movs	r1, #30
 8002278:	2014      	movs	r0, #20
 800227a:	f7fe ff2b 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 800227e:	4b6b      	ldr	r3, [pc, #428]	@ (800242c <main+0xbd0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461e      	mov	r6, r3
 8002284:	4b69      	ldr	r3, [pc, #420]	@ (800242c <main+0xbd0>)
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	469c      	mov	ip, r3
 800228a:	4b68      	ldr	r3, [pc, #416]	@ (800242c <main+0xbd0>)
 800228c:	789b      	ldrb	r3, [r3, #2]
 800228e:	461a      	mov	r2, r3
 8002290:	4b66      	ldr	r3, [pc, #408]	@ (800242c <main+0xbd0>)
 8002292:	78db      	ldrb	r3, [r3, #3]
 8002294:	4619      	mov	r1, r3
 8002296:	4b65      	ldr	r3, [pc, #404]	@ (800242c <main+0xbd0>)
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	4b63      	ldr	r3, [pc, #396]	@ (800242c <main+0xbd0>)
 800229e:	795b      	ldrb	r3, [r3, #5]
 80022a0:	461c      	mov	r4, r3
 80022a2:	4b62      	ldr	r3, [pc, #392]	@ (800242c <main+0xbd0>)
 80022a4:	799b      	ldrb	r3, [r3, #6]
 80022a6:	461d      	mov	r5, r3
 80022a8:	4b60      	ldr	r3, [pc, #384]	@ (800242c <main+0xbd0>)
 80022aa:	79db      	ldrb	r3, [r3, #7]
 80022ac:	9305      	str	r3, [sp, #20]
 80022ae:	9504      	str	r5, [sp, #16]
 80022b0:	9403      	str	r4, [sp, #12]
 80022b2:	9002      	str	r0, [sp, #8]
 80022b4:	9101      	str	r1, [sp, #4]
 80022b6:	9200      	str	r2, [sp, #0]
 80022b8:	4663      	mov	r3, ip
 80022ba:	4632      	mov	r2, r6
 80022bc:	495c      	ldr	r1, [pc, #368]	@ (8002430 <main+0xbd4>)
 80022be:	4859      	ldr	r0, [pc, #356]	@ (8002424 <main+0xbc8>)
 80022c0:	f015 fb1a 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_BLUE);
 80022c4:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <main+0xbcc>)
 80022c6:	221f      	movs	r2, #31
 80022c8:	9204      	str	r2, [sp, #16]
 80022ca:	2200      	movs	r2, #0
 80022cc:	9203      	str	r2, [sp, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	9202      	str	r2, [sp, #8]
 80022d2:	466c      	mov	r4, sp
 80022d4:	1d1a      	adds	r2, r3, #4
 80022d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022da:	e884 0003 	stmia.w	r4, {r0, r1}
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a50      	ldr	r2, [pc, #320]	@ (8002424 <main+0xbc8>)
 80022e2:	211e      	movs	r1, #30
 80022e4:	205a      	movs	r0, #90	@ 0x5a
 80022e6:	f7fe fef5 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x46",Font16,1,ILI9488_WHITE,ILI9488_BLUE);
 80022ea:	231f      	movs	r3, #31
 80022ec:	9306      	str	r3, [sp, #24]
 80022ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022f2:	9305      	str	r3, [sp, #20]
 80022f4:	2301      	movs	r3, #1
 80022f6:	9304      	str	r3, [sp, #16]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002428 <main+0xbcc>)
 80022fa:	ab01      	add	r3, sp, #4
 80022fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002302:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <main+0xbd8>)
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	230a      	movs	r3, #10
 8002308:	2214      	movs	r2, #20
 800230a:	213c      	movs	r1, #60	@ 0x3c
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe ff21 	bl	8001154 <Displ_CString>
		  col=ILI9488_BLUE;
 8002312:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <main+0xbdc>)
 8002314:	221f      	movs	r2, #31
 8002316:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8002318:	f003 ff00 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002320:	e014      	b.n	800234c <main+0xaf0>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2319      	movs	r3, #25
 8002328:	f240 12df 	movw	r2, #479	@ 0x1df
 800232c:	21c8      	movs	r1, #200	@ 0xc8
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff f916 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 8002334:	2300      	movs	r3, #0
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	f240 12df 	movw	r2, #479	@ 0x1df
 800233e:	21c8      	movs	r1, #200	@ 0xc8
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fc01 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8002346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002348:	3301      	adds	r3, #1
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800234c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234e:	2b27      	cmp	r3, #39	@ 0x27
 8002350:	dde7      	ble.n	8002322 <main+0xac6>
		  sprintf(text2,"Temperature:%dDegC",(int)engine_data);
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <main+0xbe0>)
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	ee17 2a90 	vmov	r2, s15
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <main+0xbe4>)
 8002362:	4838      	ldr	r0, [pc, #224]	@ (8002444 <main+0xbe8>)
 8002364:	f015 fac8 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_BLUE);
 8002368:	231f      	movs	r3, #31
 800236a:	9306      	str	r3, [sp, #24]
 800236c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002370:	9305      	str	r3, [sp, #20]
 8002372:	2301      	movs	r3, #1
 8002374:	9304      	str	r3, [sp, #16]
 8002376:	4a2c      	ldr	r2, [pc, #176]	@ (8002428 <main+0xbcc>)
 8002378:	ab01      	add	r3, sp, #4
 800237a:	ca07      	ldmia	r2, {r0, r1, r2}
 800237c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002380:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <main+0xbe8>)
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	230a      	movs	r3, #10
 8002386:	2250      	movs	r2, #80	@ 0x50
 8002388:	2164      	movs	r1, #100	@ 0x64
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe fee2 	bl	8001154 <Displ_CString>
		  break;
 8002390:	f001 bbaa 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x33;
 8002394:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <main+0xbec>)
 8002396:	2233      	movs	r2, #51	@ 0x33
 8002398:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 800239a:	4a2b      	ldr	r2, [pc, #172]	@ (8002448 <main+0xbec>)
 800239c:	492b      	ldr	r1, [pc, #172]	@ (800244c <main+0xbf0>)
 800239e:	482c      	ldr	r0, [pc, #176]	@ (8002450 <main+0xbf4>)
 80023a0:	f00a f8a2 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <main+0xbf8>)
 80023a6:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80023aa:	801a      	strh	r2, [r3, #0]
		  y=60;
 80023ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <main+0xbfc>)
 80023ae:	223c      	movs	r2, #60	@ 0x3c
 80023b0:	801a      	strh	r2, [r3, #0]
		  j=1;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <main+0xc00>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2319      	movs	r3, #25
 80023be:	f240 12df 	movw	r2, #479	@ 0x1df
 80023c2:	213c      	movs	r1, #60	@ 0x3c
 80023c4:	2050      	movs	r0, #80	@ 0x50
 80023c6:	f7ff f8cb 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2319      	movs	r3, #25
 80023d0:	f240 12df 	movw	r2, #479	@ 0x1df
 80023d4:	213c      	movs	r1, #60	@ 0x3c
 80023d6:	2050      	movs	r0, #80	@ 0x50
 80023d8:	f7fe fbb6 	bl	8000b48 <fillRect>
		  if(bol==1)
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <main+0xbc0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d160      	bne.n	80024a6 <main+0xc4a>
		  dinam(ILI9488_WHITE);
 80023e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023e8:	f003 fdc0 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Pression",Font24,3,ILI9488_BLACK,ILI9488_WHITE);
 80023ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023f0:	9306      	str	r3, [sp, #24]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9305      	str	r3, [sp, #20]
 80023f6:	2303      	movs	r3, #3
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <main+0xc04>)
 80023fc:	ab01      	add	r3, sp, #4
 80023fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002400:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002404:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <main+0xc08>)
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	23b4      	movs	r3, #180	@ 0xb4
 800240a:	22b4      	movs	r2, #180	@ 0xb4
 800240c:	2178      	movs	r1, #120	@ 0x78
 800240e:	2078      	movs	r0, #120	@ 0x78
 8002410:	f7fe fea0 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8002414:	2300      	movs	r3, #0
 8002416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002418:	e03d      	b.n	8002496 <main+0xc3a>
 800241a:	bf00      	nop
 800241c:	24000028 	.word	0x24000028
 8002420:	08018ba0 	.word	0x08018ba0
 8002424:	24002354 	.word	0x24002354
 8002428:	24000008 	.word	0x24000008
 800242c:	2400226c 	.word	0x2400226c
 8002430:	08018ba8 	.word	0x08018ba8
 8002434:	08018b68 	.word	0x08018b68
 8002438:	240023d0 	.word	0x240023d0
 800243c:	2400245c 	.word	0x2400245c
 8002440:	08018bec 	.word	0x08018bec
 8002444:	2400237c 	.word	0x2400237c
 8002448:	24002448 	.word	0x24002448
 800244c:	240023fc 	.word	0x240023fc
 8002450:	240021ac 	.word	0x240021ac
 8002454:	24000020 	.word	0x24000020
 8002458:	24000022 	.word	0x24000022
 800245c:	240023c4 	.word	0x240023c4
 8002460:	24000014 	.word	0x24000014
 8002464:	08018c00 	.word	0x08018c00
			  lcdDrawRect(0, 200, 479, 25, ILI9488_WHITE);
 8002468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	f240 12df 	movw	r2, #479	@ 0x1df
 8002474:	21c8      	movs	r1, #200	@ 0xc8
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff f872 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_WHITE);
 800247c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2319      	movs	r3, #25
 8002484:	f240 12df 	movw	r2, #479	@ 0x1df
 8002488:	21c8      	movs	r1, #200	@ 0xc8
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fb5c 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8002490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002492:	3301      	adds	r3, #1
 8002494:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	2b13      	cmp	r3, #19
 800249a:	dde5      	ble.n	8002468 <main+0xc0c>
		  horizanim();
 800249c:	f003 fd9e 	bl	8005fdc <horizanim>
		  bol=0;
 80024a0:	4b76      	ldr	r3, [pc, #472]	@ (800267c <main+0xe20>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 80024a6:	4976      	ldr	r1, [pc, #472]	@ (8002680 <main+0xe24>)
 80024a8:	4876      	ldr	r0, [pc, #472]	@ (8002684 <main+0xe28>)
 80024aa:	f015 fa25 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 80024ae:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <main+0xe2c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	9204      	str	r2, [sp, #16]
 80024b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024b8:	9203      	str	r2, [sp, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	466c      	mov	r4, sp
 80024c0:	1d1a      	adds	r2, r3, #4
 80024c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6d      	ldr	r2, [pc, #436]	@ (8002684 <main+0xe28>)
 80024ce:	211e      	movs	r1, #30
 80024d0:	2014      	movs	r0, #20
 80024d2:	f7fe fdff 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 80024d6:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <main+0xe30>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461e      	mov	r6, r3
 80024dc:	4b6b      	ldr	r3, [pc, #428]	@ (800268c <main+0xe30>)
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	469c      	mov	ip, r3
 80024e2:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <main+0xe30>)
 80024e4:	789b      	ldrb	r3, [r3, #2]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b68      	ldr	r3, [pc, #416]	@ (800268c <main+0xe30>)
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b67      	ldr	r3, [pc, #412]	@ (800268c <main+0xe30>)
 80024f0:	791b      	ldrb	r3, [r3, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	4b65      	ldr	r3, [pc, #404]	@ (800268c <main+0xe30>)
 80024f6:	795b      	ldrb	r3, [r3, #5]
 80024f8:	461c      	mov	r4, r3
 80024fa:	4b64      	ldr	r3, [pc, #400]	@ (800268c <main+0xe30>)
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	461d      	mov	r5, r3
 8002500:	4b62      	ldr	r3, [pc, #392]	@ (800268c <main+0xe30>)
 8002502:	79db      	ldrb	r3, [r3, #7]
 8002504:	9305      	str	r3, [sp, #20]
 8002506:	9504      	str	r5, [sp, #16]
 8002508:	9403      	str	r4, [sp, #12]
 800250a:	9002      	str	r0, [sp, #8]
 800250c:	9101      	str	r1, [sp, #4]
 800250e:	9200      	str	r2, [sp, #0]
 8002510:	4663      	mov	r3, ip
 8002512:	4632      	mov	r2, r6
 8002514:	495e      	ldr	r1, [pc, #376]	@ (8002690 <main+0xe34>)
 8002516:	485b      	ldr	r0, [pc, #364]	@ (8002684 <main+0xe28>)
 8002518:	f015 f9ee 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_DARKCYAN);
 800251c:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <main+0xe2c>)
 800251e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8002522:	9204      	str	r2, [sp, #16]
 8002524:	2200      	movs	r2, #0
 8002526:	9203      	str	r2, [sp, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	466c      	mov	r4, sp
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002534:	e884 0003 	stmia.w	r4, {r0, r1}
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a52      	ldr	r2, [pc, #328]	@ (8002684 <main+0xe28>)
 800253c:	211e      	movs	r1, #30
 800253e:	205a      	movs	r0, #90	@ 0x5a
 8002540:	f7fe fdc8 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x33",Font16,1,ILI9488_WHITE,ILI9488_DARKCYAN);
 8002544:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8002548:	9306      	str	r3, [sp, #24]
 800254a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800254e:	9305      	str	r3, [sp, #20]
 8002550:	2301      	movs	r3, #1
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	4a4c      	ldr	r2, [pc, #304]	@ (8002688 <main+0xe2c>)
 8002556:	ab01      	add	r3, sp, #4
 8002558:	ca07      	ldmia	r2, {r0, r1, r2}
 800255a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800255e:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <main+0xe38>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	230a      	movs	r3, #10
 8002564:	2214      	movs	r2, #20
 8002566:	213c      	movs	r1, #60	@ 0x3c
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe fdf3 	bl	8001154 <Displ_CString>
		  col=ILI9488_DARKCYAN;
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <main+0xe3c>)
 8002570:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8002574:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8002576:	f003 fdd1 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	@ 0x34
 800257e:	e014      	b.n	80025aa <main+0xd4e>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	f240 12df 	movw	r2, #479	@ 0x1df
 800258a:	21c8      	movs	r1, #200	@ 0xc8
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe ffe7 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 8002592:	2300      	movs	r3, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2319      	movs	r3, #25
 8002598:	f240 12df 	movw	r2, #479	@ 0x1df
 800259c:	21c8      	movs	r1, #200	@ 0xc8
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fad2 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	3301      	adds	r3, #1
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	2b27      	cmp	r3, #39	@ 0x27
 80025ae:	dde7      	ble.n	8002580 <main+0xd24>
		  sprintf(text2,"Pression :%dKPa",(int)engine_data);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <main+0xe40>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ba:	ee17 2a90 	vmov	r2, s15
 80025be:	4938      	ldr	r1, [pc, #224]	@ (80026a0 <main+0xe44>)
 80025c0:	4838      	ldr	r0, [pc, #224]	@ (80026a4 <main+0xe48>)
 80025c2:	f015 f999 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_DARKCYAN);
 80025c6:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 80025ca:	9306      	str	r3, [sp, #24]
 80025cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025d0:	9305      	str	r3, [sp, #20]
 80025d2:	2301      	movs	r3, #1
 80025d4:	9304      	str	r3, [sp, #16]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <main+0xe2c>)
 80025d8:	ab01      	add	r3, sp, #4
 80025da:	ca07      	ldmia	r2, {r0, r1, r2}
 80025dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025e0:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <main+0xe48>)
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	230a      	movs	r3, #10
 80025e6:	2250      	movs	r2, #80	@ 0x50
 80025e8:	2164      	movs	r1, #100	@ 0x64
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fdb2 	bl	8001154 <Displ_CString>
		  break;
 80025f0:	f001 ba7a 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x03;
 80025f4:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <main+0xe4c>)
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 80025fa:	4a2b      	ldr	r2, [pc, #172]	@ (80026a8 <main+0xe4c>)
 80025fc:	492b      	ldr	r1, [pc, #172]	@ (80026ac <main+0xe50>)
 80025fe:	482c      	ldr	r0, [pc, #176]	@ (80026b0 <main+0xe54>)
 8002600:	f009 ff72 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <main+0xe58>)
 8002606:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800260a:	801a      	strh	r2, [r3, #0]
		  y=60;
 800260c:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <main+0xe5c>)
 800260e:	223c      	movs	r2, #60	@ 0x3c
 8002610:	801a      	strh	r2, [r3, #0]
		  j=1;
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <main+0xe60>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8002618:	2300      	movs	r3, #0
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2319      	movs	r3, #25
 800261e:	f240 12df 	movw	r2, #479	@ 0x1df
 8002622:	213c      	movs	r1, #60	@ 0x3c
 8002624:	2050      	movs	r0, #80	@ 0x50
 8002626:	f7fe ff9b 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 800262a:	2300      	movs	r3, #0
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	f240 12df 	movw	r2, #479	@ 0x1df
 8002634:	213c      	movs	r1, #60	@ 0x3c
 8002636:	2050      	movs	r0, #80	@ 0x50
 8002638:	f7fe fa86 	bl	8000b48 <fillRect>
		  if(bol==1)
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <main+0xe20>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d15e      	bne.n	8002702 <main+0xea6>
		  dinam(ILI9488_WHITE);
 8002644:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002648:	f003 fc90 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Temps en Sec",Font16,3,ILI9488_BLACK,ILI9488_WHITE);
 800264c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002650:	9306      	str	r3, [sp, #24]
 8002652:	2300      	movs	r3, #0
 8002654:	9305      	str	r3, [sp, #20]
 8002656:	2303      	movs	r3, #3
 8002658:	9304      	str	r3, [sp, #16]
 800265a:	4a0b      	ldr	r2, [pc, #44]	@ (8002688 <main+0xe2c>)
 800265c:	ab01      	add	r3, sp, #4
 800265e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002664:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <main+0xe64>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	23b4      	movs	r3, #180	@ 0xb4
 800266a:	22b4      	movs	r2, #180	@ 0xb4
 800266c:	2178      	movs	r1, #120	@ 0x78
 800266e:	2078      	movs	r0, #120	@ 0x78
 8002670:	f7fe fd70 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8002674:	2300      	movs	r3, #0
 8002676:	633b      	str	r3, [r7, #48]	@ 0x30
 8002678:	e03b      	b.n	80026f2 <main+0xe96>
 800267a:	bf00      	nop
 800267c:	24000028 	.word	0x24000028
 8002680:	08018ba0 	.word	0x08018ba0
 8002684:	24002354 	.word	0x24002354
 8002688:	24000008 	.word	0x24000008
 800268c:	2400226c 	.word	0x2400226c
 8002690:	08018ba8 	.word	0x08018ba8
 8002694:	08018b70 	.word	0x08018b70
 8002698:	240023d0 	.word	0x240023d0
 800269c:	2400245c 	.word	0x2400245c
 80026a0:	08018c0c 	.word	0x08018c0c
 80026a4:	2400237c 	.word	0x2400237c
 80026a8:	24002448 	.word	0x24002448
 80026ac:	240023fc 	.word	0x240023fc
 80026b0:	240021ac 	.word	0x240021ac
 80026b4:	24000020 	.word	0x24000020
 80026b8:	24000022 	.word	0x24000022
 80026bc:	240023c4 	.word	0x240023c4
 80026c0:	08018c1c 	.word	0x08018c1c
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 80026c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2319      	movs	r3, #25
 80026cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80026d0:	2164      	movs	r1, #100	@ 0x64
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe ff44 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 80026d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2319      	movs	r3, #25
 80026e0:	f240 12df 	movw	r2, #479	@ 0x1df
 80026e4:	2164      	movs	r1, #100	@ 0x64
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fa2e 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	3301      	adds	r3, #1
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f4:	2b13      	cmp	r3, #19
 80026f6:	dde5      	ble.n	80026c4 <main+0xe68>
		  horizanim();
 80026f8:	f003 fc70 	bl	8005fdc <horizanim>
		  bol=0;
 80026fc:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <main+0x107c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8002702:	4976      	ldr	r1, [pc, #472]	@ (80028dc <main+0x1080>)
 8002704:	4876      	ldr	r0, [pc, #472]	@ (80028e0 <main+0x1084>)
 8002706:	f015 f8f7 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800270a:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <main+0x1088>)
 800270c:	2200      	movs	r2, #0
 800270e:	9204      	str	r2, [sp, #16]
 8002710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002714:	9203      	str	r2, [sp, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	9202      	str	r2, [sp, #8]
 800271a:	466c      	mov	r4, sp
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002722:	e884 0003 	stmia.w	r4, {r0, r1}
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6d      	ldr	r2, [pc, #436]	@ (80028e0 <main+0x1084>)
 800272a:	211e      	movs	r1, #30
 800272c:	2014      	movs	r0, #20
 800272e:	f7fe fcd1 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8002732:	4b6d      	ldr	r3, [pc, #436]	@ (80028e8 <main+0x108c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461e      	mov	r6, r3
 8002738:	4b6b      	ldr	r3, [pc, #428]	@ (80028e8 <main+0x108c>)
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	469c      	mov	ip, r3
 800273e:	4b6a      	ldr	r3, [pc, #424]	@ (80028e8 <main+0x108c>)
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	461a      	mov	r2, r3
 8002744:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <main+0x108c>)
 8002746:	78db      	ldrb	r3, [r3, #3]
 8002748:	4619      	mov	r1, r3
 800274a:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <main+0x108c>)
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	4b65      	ldr	r3, [pc, #404]	@ (80028e8 <main+0x108c>)
 8002752:	795b      	ldrb	r3, [r3, #5]
 8002754:	461c      	mov	r4, r3
 8002756:	4b64      	ldr	r3, [pc, #400]	@ (80028e8 <main+0x108c>)
 8002758:	799b      	ldrb	r3, [r3, #6]
 800275a:	461d      	mov	r5, r3
 800275c:	4b62      	ldr	r3, [pc, #392]	@ (80028e8 <main+0x108c>)
 800275e:	79db      	ldrb	r3, [r3, #7]
 8002760:	9305      	str	r3, [sp, #20]
 8002762:	9504      	str	r5, [sp, #16]
 8002764:	9403      	str	r4, [sp, #12]
 8002766:	9002      	str	r0, [sp, #8]
 8002768:	9101      	str	r1, [sp, #4]
 800276a:	9200      	str	r2, [sp, #0]
 800276c:	4663      	mov	r3, ip
 800276e:	4632      	mov	r2, r6
 8002770:	495e      	ldr	r1, [pc, #376]	@ (80028ec <main+0x1090>)
 8002772:	485b      	ldr	r0, [pc, #364]	@ (80028e0 <main+0x1084>)
 8002774:	f015 f8c0 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_ORANGE);
 8002778:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <main+0x1088>)
 800277a:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 800277e:	9204      	str	r2, [sp, #16]
 8002780:	2200      	movs	r2, #0
 8002782:	9203      	str	r2, [sp, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	9202      	str	r2, [sp, #8]
 8002788:	466c      	mov	r4, sp
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	e884 0003 	stmia.w	r4, {r0, r1}
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a52      	ldr	r2, [pc, #328]	@ (80028e0 <main+0x1084>)
 8002798:	211e      	movs	r1, #30
 800279a:	205a      	movs	r0, #90	@ 0x5a
 800279c:	f7fe fc9a 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x1F",Font16,1,ILI9488_WHITE,ILI9488_ORANGE);
 80027a0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80027a4:	9306      	str	r3, [sp, #24]
 80027a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027aa:	9305      	str	r3, [sp, #20]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	4a4c      	ldr	r2, [pc, #304]	@ (80028e4 <main+0x1088>)
 80027b2:	ab01      	add	r3, sp, #4
 80027b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80027b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027ba:	4b4d      	ldr	r3, [pc, #308]	@ (80028f0 <main+0x1094>)
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	230a      	movs	r3, #10
 80027c0:	2214      	movs	r2, #20
 80027c2:	213c      	movs	r1, #60	@ 0x3c
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fcc5 	bl	8001154 <Displ_CString>
		  col=ILI9488_ORANGE;
 80027ca:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <main+0x1098>)
 80027cc:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80027d0:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 80027d2:	f003 fca3 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027da:	e014      	b.n	8002806 <main+0xfaa>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 80027dc:	2300      	movs	r3, #0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2319      	movs	r3, #25
 80027e2:	f240 12df 	movw	r2, #479	@ 0x1df
 80027e6:	21c8      	movs	r1, #200	@ 0xc8
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe feb9 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2319      	movs	r3, #25
 80027f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80027f8:	21c8      	movs	r1, #200	@ 0xc8
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7fe f9a4 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	3301      	adds	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	2b27      	cmp	r3, #39	@ 0x27
 800280a:	dde7      	ble.n	80027dc <main+0xf80>
		  sprintf(text2,"Temps :%dSec",(int)engine_data);
 800280c:	4b3a      	ldr	r3, [pc, #232]	@ (80028f8 <main+0x109c>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002816:	ee17 2a90 	vmov	r2, s15
 800281a:	4938      	ldr	r1, [pc, #224]	@ (80028fc <main+0x10a0>)
 800281c:	4838      	ldr	r0, [pc, #224]	@ (8002900 <main+0x10a4>)
 800281e:	f015 f86b 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_ORANGE);
 8002822:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002826:	9306      	str	r3, [sp, #24]
 8002828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800282c:	9305      	str	r3, [sp, #20]
 800282e:	2301      	movs	r3, #1
 8002830:	9304      	str	r3, [sp, #16]
 8002832:	4a2c      	ldr	r2, [pc, #176]	@ (80028e4 <main+0x1088>)
 8002834:	ab01      	add	r3, sp, #4
 8002836:	ca07      	ldmia	r2, {r0, r1, r2}
 8002838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800283c:	4b30      	ldr	r3, [pc, #192]	@ (8002900 <main+0x10a4>)
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	230a      	movs	r3, #10
 8002842:	2250      	movs	r2, #80	@ 0x50
 8002844:	2164      	movs	r1, #100	@ 0x64
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fc84 	bl	8001154 <Displ_CString>
		  break;
 800284c:	f001 b94c 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x0a;
 8002850:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <main+0x10a8>)
 8002852:	220a      	movs	r2, #10
 8002854:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8002856:	4a2b      	ldr	r2, [pc, #172]	@ (8002904 <main+0x10a8>)
 8002858:	492b      	ldr	r1, [pc, #172]	@ (8002908 <main+0x10ac>)
 800285a:	482c      	ldr	r0, [pc, #176]	@ (800290c <main+0x10b0>)
 800285c:	f009 fe44 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8002860:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <main+0x10b4>)
 8002862:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002866:	801a      	strh	r2, [r3, #0]
		  y=60;
 8002868:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <main+0x10b8>)
 800286a:	223c      	movs	r2, #60	@ 0x3c
 800286c:	801a      	strh	r2, [r3, #0]
		  j=1;
 800286e:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <main+0x10bc>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2319      	movs	r3, #25
 800287a:	f240 12df 	movw	r2, #479	@ 0x1df
 800287e:	213c      	movs	r1, #60	@ 0x3c
 8002880:	2050      	movs	r0, #80	@ 0x50
 8002882:	f7fe fe6d 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8002886:	2300      	movs	r3, #0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2319      	movs	r3, #25
 800288c:	f240 12df 	movw	r2, #479	@ 0x1df
 8002890:	213c      	movs	r1, #60	@ 0x3c
 8002892:	2050      	movs	r0, #80	@ 0x50
 8002894:	f7fe f958 	bl	8000b48 <fillRect>
		  if(bol==1)
 8002898:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <main+0x107c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d160      	bne.n	8002962 <main+0x1106>
		  dinam(ILI9488_WHITE);
 80028a0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028a4:	f003 fb62 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Distance",Font24,3,ILI9488_BLACK,ILI9488_WHITE);
 80028a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028ac:	9306      	str	r3, [sp, #24]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9305      	str	r3, [sp, #20]
 80028b2:	2303      	movs	r3, #3
 80028b4:	9304      	str	r3, [sp, #16]
 80028b6:	4a19      	ldr	r2, [pc, #100]	@ (800291c <main+0x10c0>)
 80028b8:	ab01      	add	r3, sp, #4
 80028ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80028bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <main+0x10c4>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	23b4      	movs	r3, #180	@ 0xb4
 80028c6:	22b4      	movs	r2, #180	@ 0xb4
 80028c8:	2178      	movs	r1, #120	@ 0x78
 80028ca:	2078      	movs	r0, #120	@ 0x78
 80028cc:	f7fe fc42 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d4:	e03d      	b.n	8002952 <main+0x10f6>
 80028d6:	bf00      	nop
 80028d8:	24000028 	.word	0x24000028
 80028dc:	08018ba0 	.word	0x08018ba0
 80028e0:	24002354 	.word	0x24002354
 80028e4:	24000008 	.word	0x24000008
 80028e8:	2400226c 	.word	0x2400226c
 80028ec:	08018ba8 	.word	0x08018ba8
 80028f0:	08018b78 	.word	0x08018b78
 80028f4:	240023d0 	.word	0x240023d0
 80028f8:	2400245c 	.word	0x2400245c
 80028fc:	08018c2c 	.word	0x08018c2c
 8002900:	2400237c 	.word	0x2400237c
 8002904:	24002448 	.word	0x24002448
 8002908:	240023fc 	.word	0x240023fc
 800290c:	240021ac 	.word	0x240021ac
 8002910:	24000020 	.word	0x24000020
 8002914:	24000022 	.word	0x24000022
 8002918:	240023c4 	.word	0x240023c4
 800291c:	24000014 	.word	0x24000014
 8002920:	08018c3c 	.word	0x08018c3c
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 8002924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2319      	movs	r3, #25
 800292c:	f240 12df 	movw	r2, #479	@ 0x1df
 8002930:	2164      	movs	r1, #100	@ 0x64
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fe14 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 8002938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2319      	movs	r3, #25
 8002940:	f240 12df 	movw	r2, #479	@ 0x1df
 8002944:	2164      	movs	r1, #100	@ 0x64
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f8fe 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	3301      	adds	r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002954:	2b13      	cmp	r3, #19
 8002956:	dde5      	ble.n	8002924 <main+0x10c8>
		  horizanim();
 8002958:	f003 fb40 	bl	8005fdc <horizanim>
		  bol=0;
 800295c:	4b76      	ldr	r3, [pc, #472]	@ (8002b38 <main+0x12dc>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8002962:	4976      	ldr	r1, [pc, #472]	@ (8002b3c <main+0x12e0>)
 8002964:	4876      	ldr	r0, [pc, #472]	@ (8002b40 <main+0x12e4>)
 8002966:	f014 ffc7 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800296a:	4b76      	ldr	r3, [pc, #472]	@ (8002b44 <main+0x12e8>)
 800296c:	2200      	movs	r2, #0
 800296e:	9204      	str	r2, [sp, #16]
 8002970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002974:	9203      	str	r2, [sp, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	9202      	str	r2, [sp, #8]
 800297a:	466c      	mov	r4, sp
 800297c:	1d1a      	adds	r2, r3, #4
 800297e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002982:	e884 0003 	stmia.w	r4, {r0, r1}
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6d      	ldr	r2, [pc, #436]	@ (8002b40 <main+0x12e4>)
 800298a:	211e      	movs	r1, #30
 800298c:	2014      	movs	r0, #20
 800298e:	f7fe fba1 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <main+0x12ec>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461e      	mov	r6, r3
 8002998:	4b6b      	ldr	r3, [pc, #428]	@ (8002b48 <main+0x12ec>)
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	469c      	mov	ip, r3
 800299e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <main+0x12ec>)
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b68      	ldr	r3, [pc, #416]	@ (8002b48 <main+0x12ec>)
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4b67      	ldr	r3, [pc, #412]	@ (8002b48 <main+0x12ec>)
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	4b65      	ldr	r3, [pc, #404]	@ (8002b48 <main+0x12ec>)
 80029b2:	795b      	ldrb	r3, [r3, #5]
 80029b4:	461c      	mov	r4, r3
 80029b6:	4b64      	ldr	r3, [pc, #400]	@ (8002b48 <main+0x12ec>)
 80029b8:	799b      	ldrb	r3, [r3, #6]
 80029ba:	461d      	mov	r5, r3
 80029bc:	4b62      	ldr	r3, [pc, #392]	@ (8002b48 <main+0x12ec>)
 80029be:	79db      	ldrb	r3, [r3, #7]
 80029c0:	9305      	str	r3, [sp, #20]
 80029c2:	9504      	str	r5, [sp, #16]
 80029c4:	9403      	str	r4, [sp, #12]
 80029c6:	9002      	str	r0, [sp, #8]
 80029c8:	9101      	str	r1, [sp, #4]
 80029ca:	9200      	str	r2, [sp, #0]
 80029cc:	4663      	mov	r3, ip
 80029ce:	4632      	mov	r2, r6
 80029d0:	495e      	ldr	r1, [pc, #376]	@ (8002b4c <main+0x12f0>)
 80029d2:	485b      	ldr	r0, [pc, #364]	@ (8002b40 <main+0x12e4>)
 80029d4:	f014 ff90 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_RED);
 80029d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b44 <main+0x12e8>)
 80029da:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80029de:	9204      	str	r2, [sp, #16]
 80029e0:	2200      	movs	r2, #0
 80029e2:	9203      	str	r2, [sp, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	9202      	str	r2, [sp, #8]
 80029e8:	466c      	mov	r4, sp
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <main+0x12e4>)
 80029f8:	211e      	movs	r1, #30
 80029fa:	205a      	movs	r0, #90	@ 0x5a
 80029fc:	f7fe fb6a 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x21",Font16,1,ILI9488_WHITE,ILI9488_RED);
 8002a00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a04:	9306      	str	r3, [sp, #24]
 8002a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a0a:	9305      	str	r3, [sp, #20]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	9304      	str	r3, [sp, #16]
 8002a10:	4a4c      	ldr	r2, [pc, #304]	@ (8002b44 <main+0x12e8>)
 8002a12:	ab01      	add	r3, sp, #4
 8002a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b50 <main+0x12f4>)
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	230a      	movs	r3, #10
 8002a20:	2214      	movs	r2, #20
 8002a22:	213c      	movs	r1, #60	@ 0x3c
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe fb95 	bl	8001154 <Displ_CString>
		  col=ILI9488_RED;
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <main+0x12f8>)
 8002a2c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a30:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8002a32:	f003 fb73 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3a:	e014      	b.n	8002a66 <main+0x120a>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	f240 12df 	movw	r2, #479	@ 0x1df
 8002a46:	21c8      	movs	r1, #200	@ 0xc8
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe fd89 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	f240 12df 	movw	r2, #479	@ 0x1df
 8002a58:	21c8      	movs	r1, #200	@ 0xc8
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f874 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	3301      	adds	r3, #1
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	2b27      	cmp	r3, #39	@ 0x27
 8002a6a:	dde7      	ble.n	8002a3c <main+0x11e0>
		  sprintf(text2,"Distance :%dKm",(int)engine_data);
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <main+0x12fc>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a76:	ee17 2a90 	vmov	r2, s15
 8002a7a:	4938      	ldr	r1, [pc, #224]	@ (8002b5c <main+0x1300>)
 8002a7c:	4838      	ldr	r0, [pc, #224]	@ (8002b60 <main+0x1304>)
 8002a7e:	f014 ff3b 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_RED);
 8002a82:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a86:	9306      	str	r3, [sp, #24]
 8002a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8c:	9305      	str	r3, [sp, #20]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9304      	str	r3, [sp, #16]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <main+0x12e8>)
 8002a94:	ab01      	add	r3, sp, #4
 8002a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a9c:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <main+0x1304>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	2250      	movs	r2, #80	@ 0x50
 8002aa4:	2164      	movs	r1, #100	@ 0x64
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fb54 	bl	8001154 <Displ_CString>
		  break;
 8002aac:	f001 b81c 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x1f;
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b64 <main+0x1308>)
 8002ab2:	221f      	movs	r2, #31
 8002ab4:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <main+0x1308>)
 8002ab8:	492b      	ldr	r1, [pc, #172]	@ (8002b68 <main+0x130c>)
 8002aba:	482c      	ldr	r0, [pc, #176]	@ (8002b6c <main+0x1310>)
 8002abc:	f009 fd14 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <main+0x1314>)
 8002ac2:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002ac6:	801a      	strh	r2, [r3, #0]
		  y=60;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <main+0x1318>)
 8002aca:	223c      	movs	r2, #60	@ 0x3c
 8002acc:	801a      	strh	r2, [r3, #0]
		  j=1;
 8002ace:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <main+0x131c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	f240 12df 	movw	r2, #479	@ 0x1df
 8002ade:	213c      	movs	r1, #60	@ 0x3c
 8002ae0:	2050      	movs	r0, #80	@ 0x50
 8002ae2:	f7fe fd3d 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2319      	movs	r3, #25
 8002aec:	f240 12df 	movw	r2, #479	@ 0x1df
 8002af0:	213c      	movs	r1, #60	@ 0x3c
 8002af2:	2050      	movs	r0, #80	@ 0x50
 8002af4:	f7fe f828 	bl	8000b48 <fillRect>
		  if(bol==1)
 8002af8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <main+0x12dc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d15e      	bne.n	8002bbe <main+0x1362>
		  dinam(ILI9488_WHITE);
 8002b00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b04:	f003 fa32 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Temps en Min",Font16,3,ILI9488_BLACK,ILI9488_WHITE);
 8002b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0c:	9306      	str	r3, [sp, #24]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9305      	str	r3, [sp, #20]
 8002b12:	2303      	movs	r3, #3
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	4a0b      	ldr	r2, [pc, #44]	@ (8002b44 <main+0x12e8>)
 8002b18:	ab01      	add	r3, sp, #4
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b20:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <main+0x1320>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	23b4      	movs	r3, #180	@ 0xb4
 8002b26:	22b4      	movs	r2, #180	@ 0xb4
 8002b28:	2178      	movs	r1, #120	@ 0x78
 8002b2a:	2078      	movs	r0, #120	@ 0x78
 8002b2c:	f7fe fb12 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	e03b      	b.n	8002bae <main+0x1352>
 8002b36:	bf00      	nop
 8002b38:	24000028 	.word	0x24000028
 8002b3c:	08018ba0 	.word	0x08018ba0
 8002b40:	24002354 	.word	0x24002354
 8002b44:	24000008 	.word	0x24000008
 8002b48:	2400226c 	.word	0x2400226c
 8002b4c:	08018ba8 	.word	0x08018ba8
 8002b50:	08018b80 	.word	0x08018b80
 8002b54:	240023d0 	.word	0x240023d0
 8002b58:	2400245c 	.word	0x2400245c
 8002b5c:	08018c48 	.word	0x08018c48
 8002b60:	2400237c 	.word	0x2400237c
 8002b64:	24002448 	.word	0x24002448
 8002b68:	240023fc 	.word	0x240023fc
 8002b6c:	240021ac 	.word	0x240021ac
 8002b70:	24000020 	.word	0x24000020
 8002b74:	24000022 	.word	0x24000022
 8002b78:	240023c4 	.word	0x240023c4
 8002b7c:	08018c58 	.word	0x08018c58
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 8002b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2319      	movs	r3, #25
 8002b88:	f240 12df 	movw	r2, #479	@ 0x1df
 8002b8c:	2164      	movs	r1, #100	@ 0x64
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe fce6 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 8002b94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2319      	movs	r3, #25
 8002b9c:	f240 12df 	movw	r2, #479	@ 0x1df
 8002ba0:	2164      	movs	r1, #100	@ 0x64
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fd ffd0 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	3301      	adds	r3, #1
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2b13      	cmp	r3, #19
 8002bb2:	dde5      	ble.n	8002b80 <main+0x1324>
		  horizanim();
 8002bb4:	f003 fa12 	bl	8005fdc <horizanim>
		  bol=0;
 8002bb8:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <main+0x1538>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8002bbe:	4976      	ldr	r1, [pc, #472]	@ (8002d98 <main+0x153c>)
 8002bc0:	4876      	ldr	r0, [pc, #472]	@ (8002d9c <main+0x1540>)
 8002bc2:	f014 fe99 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8002bc6:	4b76      	ldr	r3, [pc, #472]	@ (8002da0 <main+0x1544>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	9204      	str	r2, [sp, #16]
 8002bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bd0:	9203      	str	r2, [sp, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	9202      	str	r2, [sp, #8]
 8002bd6:	466c      	mov	r4, sp
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bde:	e884 0003 	stmia.w	r4, {r0, r1}
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6d      	ldr	r2, [pc, #436]	@ (8002d9c <main+0x1540>)
 8002be6:	211e      	movs	r1, #30
 8002be8:	2014      	movs	r0, #20
 8002bea:	f7fe fa73 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <main+0x1548>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461e      	mov	r6, r3
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8002da4 <main+0x1548>)
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	469c      	mov	ip, r3
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <main+0x1548>)
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <main+0x1548>)
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <main+0x1548>)
 8002c08:	791b      	ldrb	r3, [r3, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <main+0x1548>)
 8002c0e:	795b      	ldrb	r3, [r3, #5]
 8002c10:	461c      	mov	r4, r3
 8002c12:	4b64      	ldr	r3, [pc, #400]	@ (8002da4 <main+0x1548>)
 8002c14:	799b      	ldrb	r3, [r3, #6]
 8002c16:	461d      	mov	r5, r3
 8002c18:	4b62      	ldr	r3, [pc, #392]	@ (8002da4 <main+0x1548>)
 8002c1a:	79db      	ldrb	r3, [r3, #7]
 8002c1c:	9305      	str	r3, [sp, #20]
 8002c1e:	9504      	str	r5, [sp, #16]
 8002c20:	9403      	str	r4, [sp, #12]
 8002c22:	9002      	str	r0, [sp, #8]
 8002c24:	9101      	str	r1, [sp, #4]
 8002c26:	9200      	str	r2, [sp, #0]
 8002c28:	4663      	mov	r3, ip
 8002c2a:	4632      	mov	r2, r6
 8002c2c:	495e      	ldr	r1, [pc, #376]	@ (8002da8 <main+0x154c>)
 8002c2e:	485b      	ldr	r0, [pc, #364]	@ (8002d9c <main+0x1540>)
 8002c30:	f014 fe62 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_PINK);
 8002c34:	4b5a      	ldr	r3, [pc, #360]	@ (8002da0 <main+0x1544>)
 8002c36:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002c3a:	9204      	str	r2, [sp, #16]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	9203      	str	r2, [sp, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	9202      	str	r2, [sp, #8]
 8002c44:	466c      	mov	r4, sp
 8002c46:	1d1a      	adds	r2, r3, #4
 8002c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c4c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a52      	ldr	r2, [pc, #328]	@ (8002d9c <main+0x1540>)
 8002c54:	211e      	movs	r1, #30
 8002c56:	205a      	movs	r0, #90	@ 0x5a
 8002c58:	f7fe fa3c 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x4D",Font16,1,ILI9488_WHITE,ILI9488_PINK);
 8002c5c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c60:	9306      	str	r3, [sp, #24]
 8002c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c66:	9305      	str	r3, [sp, #20]
 8002c68:	2301      	movs	r3, #1
 8002c6a:	9304      	str	r3, [sp, #16]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002da0 <main+0x1544>)
 8002c6e:	ab01      	add	r3, sp, #4
 8002c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c76:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <main+0x1550>)
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	2214      	movs	r2, #20
 8002c7e:	213c      	movs	r1, #60	@ 0x3c
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fa67 	bl	8001154 <Displ_CString>
		  col=ILI9488_PINK;
 8002c86:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <main+0x1554>)
 8002c88:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002c8c:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8002c8e:	f003 fa45 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e014      	b.n	8002cc2 <main+0x1466>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	f240 12df 	movw	r2, #479	@ 0x1df
 8002ca2:	21c8      	movs	r1, #200	@ 0xc8
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fc5b 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2319      	movs	r3, #25
 8002cb0:	f240 12df 	movw	r2, #479	@ 0x1df
 8002cb4:	21c8      	movs	r1, #200	@ 0xc8
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd ff46 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b27      	cmp	r3, #39	@ 0x27
 8002cc6:	dde7      	ble.n	8002c98 <main+0x143c>
		  sprintf(text2,"Temps  :%dMin",(int)engine_data);
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002db4 <main+0x1558>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd2:	ee17 2a90 	vmov	r2, s15
 8002cd6:	4938      	ldr	r1, [pc, #224]	@ (8002db8 <main+0x155c>)
 8002cd8:	4838      	ldr	r0, [pc, #224]	@ (8002dbc <main+0x1560>)
 8002cda:	f014 fe0d 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_PINK);
 8002cde:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ce2:	9306      	str	r3, [sp, #24]
 8002ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce8:	9305      	str	r3, [sp, #20]
 8002cea:	2301      	movs	r3, #1
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <main+0x1544>)
 8002cf0:	ab01      	add	r3, sp, #4
 8002cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cf8:	4b30      	ldr	r3, [pc, #192]	@ (8002dbc <main+0x1560>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	2250      	movs	r2, #80	@ 0x50
 8002d00:	2164      	movs	r1, #100	@ 0x64
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe fa26 	bl	8001154 <Displ_CString>
		  break;
 8002d08:	f000 beee 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x21;
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc0 <main+0x1564>)
 8002d0e:	2221      	movs	r2, #33	@ 0x21
 8002d10:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8002d12:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc0 <main+0x1564>)
 8002d14:	492b      	ldr	r1, [pc, #172]	@ (8002dc4 <main+0x1568>)
 8002d16:	482c      	ldr	r0, [pc, #176]	@ (8002dc8 <main+0x156c>)
 8002d18:	f009 fbe6 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <main+0x1570>)
 8002d1e:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002d22:	801a      	strh	r2, [r3, #0]
		  y=60;
 8002d24:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd0 <main+0x1574>)
 8002d26:	223c      	movs	r2, #60	@ 0x3c
 8002d28:	801a      	strh	r2, [r3, #0]
		  j=1;
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <main+0x1578>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	f240 12df 	movw	r2, #479	@ 0x1df
 8002d3a:	213c      	movs	r1, #60	@ 0x3c
 8002d3c:	2050      	movs	r0, #80	@ 0x50
 8002d3e:	f7fe fc0f 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2319      	movs	r3, #25
 8002d48:	f240 12df 	movw	r2, #479	@ 0x1df
 8002d4c:	213c      	movs	r1, #60	@ 0x3c
 8002d4e:	2050      	movs	r0, #80	@ 0x50
 8002d50:	f7fd fefa 	bl	8000b48 <fillRect>
		  if(bol==1)
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <main+0x1538>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d15e      	bne.n	8002e1a <main+0x15be>
		  dinam(ILI9488_WHITE);
 8002d5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d60:	f003 f904 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"Pression carburant",Font16,3,ILI9488_BLACK,ILI9488_WHITE);
 8002d64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d68:	9306      	str	r3, [sp, #24]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	2303      	movs	r3, #3
 8002d70:	9304      	str	r3, [sp, #16]
 8002d72:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <main+0x1544>)
 8002d74:	ab01      	add	r3, sp, #4
 8002d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <main+0x157c>)
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	23b4      	movs	r3, #180	@ 0xb4
 8002d82:	22b4      	movs	r2, #180	@ 0xb4
 8002d84:	2178      	movs	r1, #120	@ 0x78
 8002d86:	2078      	movs	r0, #120	@ 0x78
 8002d88:	f7fe f9e4 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e03b      	b.n	8002e0a <main+0x15ae>
 8002d92:	bf00      	nop
 8002d94:	24000028 	.word	0x24000028
 8002d98:	08018ba0 	.word	0x08018ba0
 8002d9c:	24002354 	.word	0x24002354
 8002da0:	24000008 	.word	0x24000008
 8002da4:	2400226c 	.word	0x2400226c
 8002da8:	08018ba8 	.word	0x08018ba8
 8002dac:	08018b88 	.word	0x08018b88
 8002db0:	240023d0 	.word	0x240023d0
 8002db4:	2400245c 	.word	0x2400245c
 8002db8:	08018c68 	.word	0x08018c68
 8002dbc:	2400237c 	.word	0x2400237c
 8002dc0:	24002448 	.word	0x24002448
 8002dc4:	240023fc 	.word	0x240023fc
 8002dc8:	240021ac 	.word	0x240021ac
 8002dcc:	24000020 	.word	0x24000020
 8002dd0:	24000022 	.word	0x24000022
 8002dd4:	240023c4 	.word	0x240023c4
 8002dd8:	08018c78 	.word	0x08018c78
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 8002ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2319      	movs	r3, #25
 8002de4:	f240 12df 	movw	r2, #479	@ 0x1df
 8002de8:	2164      	movs	r1, #100	@ 0x64
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fe fbb8 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 8002df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2319      	movs	r3, #25
 8002df8:	f240 12df 	movw	r2, #479	@ 0x1df
 8002dfc:	2164      	movs	r1, #100	@ 0x64
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fd fea2 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b13      	cmp	r3, #19
 8002e0e:	dde5      	ble.n	8002ddc <main+0x1580>
		  horizanim();
 8002e10:	f003 f8e4 	bl	8005fdc <horizanim>
		  bol=0;
 8002e14:	4b76      	ldr	r3, [pc, #472]	@ (8002ff0 <main+0x1794>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8002e1a:	4976      	ldr	r1, [pc, #472]	@ (8002ff4 <main+0x1798>)
 8002e1c:	4876      	ldr	r0, [pc, #472]	@ (8002ff8 <main+0x179c>)
 8002e1e:	f014 fd6b 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8002e22:	4b76      	ldr	r3, [pc, #472]	@ (8002ffc <main+0x17a0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	9204      	str	r2, [sp, #16]
 8002e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e2c:	9203      	str	r2, [sp, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	9202      	str	r2, [sp, #8]
 8002e32:	466c      	mov	r4, sp
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff8 <main+0x179c>)
 8002e42:	211e      	movs	r1, #30
 8002e44:	2014      	movs	r0, #20
 8002e46:	f7fe f945 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8002e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003000 <main+0x17a4>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461e      	mov	r6, r3
 8002e50:	4b6b      	ldr	r3, [pc, #428]	@ (8003000 <main+0x17a4>)
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	469c      	mov	ip, r3
 8002e56:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <main+0x17a4>)
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b68      	ldr	r3, [pc, #416]	@ (8003000 <main+0x17a4>)
 8002e5e:	78db      	ldrb	r3, [r3, #3]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <main+0x17a4>)
 8002e64:	791b      	ldrb	r3, [r3, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <main+0x17a4>)
 8002e6a:	795b      	ldrb	r3, [r3, #5]
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	4b64      	ldr	r3, [pc, #400]	@ (8003000 <main+0x17a4>)
 8002e70:	799b      	ldrb	r3, [r3, #6]
 8002e72:	461d      	mov	r5, r3
 8002e74:	4b62      	ldr	r3, [pc, #392]	@ (8003000 <main+0x17a4>)
 8002e76:	79db      	ldrb	r3, [r3, #7]
 8002e78:	9305      	str	r3, [sp, #20]
 8002e7a:	9504      	str	r5, [sp, #16]
 8002e7c:	9403      	str	r4, [sp, #12]
 8002e7e:	9002      	str	r0, [sp, #8]
 8002e80:	9101      	str	r1, [sp, #4]
 8002e82:	9200      	str	r2, [sp, #0]
 8002e84:	4663      	mov	r3, ip
 8002e86:	4632      	mov	r2, r6
 8002e88:	495e      	ldr	r1, [pc, #376]	@ (8003004 <main+0x17a8>)
 8002e8a:	485b      	ldr	r0, [pc, #364]	@ (8002ff8 <main+0x179c>)
 8002e8c:	f014 fd34 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_PURPLE);
 8002e90:	4b5a      	ldr	r3, [pc, #360]	@ (8002ffc <main+0x17a0>)
 8002e92:	f647 020f 	movw	r2, #30735	@ 0x780f
 8002e96:	9204      	str	r2, [sp, #16]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	9203      	str	r2, [sp, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	9202      	str	r2, [sp, #8]
 8002ea0:	466c      	mov	r4, sp
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea8:	e884 0003 	stmia.w	r4, {r0, r1}
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <main+0x179c>)
 8002eb0:	211e      	movs	r1, #30
 8002eb2:	205a      	movs	r0, #90	@ 0x5a
 8002eb4:	f7fe f90e 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x0A",Font16,1,ILI9488_WHITE,ILI9488_PURPLE);
 8002eb8:	f647 030f 	movw	r3, #30735	@ 0x780f
 8002ebc:	9306      	str	r3, [sp, #24]
 8002ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec2:	9305      	str	r3, [sp, #20]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9304      	str	r3, [sp, #16]
 8002ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ffc <main+0x17a0>)
 8002eca:	ab01      	add	r3, sp, #4
 8002ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8003008 <main+0x17ac>)
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	2214      	movs	r2, #20
 8002eda:	213c      	movs	r1, #60	@ 0x3c
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe f939 	bl	8001154 <Displ_CString>
		  col=ILI9488_PURPLE;
 8002ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <main+0x17b0>)
 8002ee4:	f647 020f 	movw	r2, #30735	@ 0x780f
 8002ee8:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8002eea:	f003 f917 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e014      	b.n	8002f1e <main+0x16c2>
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2319      	movs	r3, #25
 8002efa:	f240 12df 	movw	r2, #479	@ 0x1df
 8002efe:	21c8      	movs	r1, #200	@ 0xc8
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe fb2d 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2319      	movs	r3, #25
 8002f0c:	f240 12df 	movw	r2, #479	@ 0x1df
 8002f10:	21c8      	movs	r1, #200	@ 0xc8
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd fe18 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b27      	cmp	r3, #39	@ 0x27
 8002f22:	dde7      	ble.n	8002ef4 <main+0x1698>
		  sprintf(text2,"Pression carburant :%dKPa",(int)engine_data);
 8002f24:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <main+0x17b4>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f2e:	ee17 2a90 	vmov	r2, s15
 8002f32:	4938      	ldr	r1, [pc, #224]	@ (8003014 <main+0x17b8>)
 8002f34:	4838      	ldr	r0, [pc, #224]	@ (8003018 <main+0x17bc>)
 8002f36:	f014 fcdf 	bl	80178f8 <siprintf>
		  Displ_CString(0,100,100,10,text2,Font16,1,ILI9488_WHITE,ILI9488_PURPLE);
 8002f3a:	f647 030f 	movw	r3, #30735	@ 0x780f
 8002f3e:	9306      	str	r3, [sp, #24]
 8002f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f44:	9305      	str	r3, [sp, #20]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9304      	str	r3, [sp, #16]
 8002f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <main+0x17a0>)
 8002f4c:	ab01      	add	r3, sp, #4
 8002f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <main+0x17bc>)
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	230a      	movs	r3, #10
 8002f5a:	2264      	movs	r2, #100	@ 0x64
 8002f5c:	2164      	movs	r1, #100	@ 0x64
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fe f8f8 	bl	8001154 <Displ_CString>
		  break;
 8002f64:	f000 bdc0 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x4d;
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <main+0x17c0>)
 8002f6a:	224d      	movs	r2, #77	@ 0x4d
 8002f6c:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <main+0x17c0>)
 8002f70:	492b      	ldr	r1, [pc, #172]	@ (8003020 <main+0x17c4>)
 8002f72:	482c      	ldr	r0, [pc, #176]	@ (8003024 <main+0x17c8>)
 8002f74:	f009 fab8 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <main+0x17cc>)
 8002f7a:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002f7e:	801a      	strh	r2, [r3, #0]
		  y=60;
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <main+0x17d0>)
 8002f82:	223c      	movs	r2, #60	@ 0x3c
 8002f84:	801a      	strh	r2, [r3, #0]
		  j=1;
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <main+0x17d4>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	f240 12df 	movw	r2, #479	@ 0x1df
 8002f96:	213c      	movs	r1, #60	@ 0x3c
 8002f98:	2050      	movs	r0, #80	@ 0x50
 8002f9a:	f7fe fae1 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2319      	movs	r3, #25
 8002fa4:	f240 12df 	movw	r2, #479	@ 0x1df
 8002fa8:	213c      	movs	r1, #60	@ 0x3c
 8002faa:	2050      	movs	r0, #80	@ 0x50
 8002fac:	f7fd fdcc 	bl	8000b48 <fillRect>
		  if(bol==1)
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <main+0x1794>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d15e      	bne.n	8003076 <main+0x181a>
		  dinam(ILI9488_WHITE);
 8002fb8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002fbc:	f002 ffd6 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"état du carburant",Font16,3,ILI9488_BLACK,ILI9488_WHITE);
 8002fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fc4:	9306      	str	r3, [sp, #24]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9305      	str	r3, [sp, #20]
 8002fca:	2303      	movs	r3, #3
 8002fcc:	9304      	str	r3, [sp, #16]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <main+0x17a0>)
 8002fd0:	ab01      	add	r3, sp, #4
 8002fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <main+0x17d8>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	23b4      	movs	r3, #180	@ 0xb4
 8002fde:	22b4      	movs	r2, #180	@ 0xb4
 8002fe0:	2178      	movs	r1, #120	@ 0x78
 8002fe2:	2078      	movs	r0, #120	@ 0x78
 8002fe4:	f7fe f8b6 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e03b      	b.n	8003066 <main+0x180a>
 8002fee:	bf00      	nop
 8002ff0:	24000028 	.word	0x24000028
 8002ff4:	08018ba0 	.word	0x08018ba0
 8002ff8:	24002354 	.word	0x24002354
 8002ffc:	24000008 	.word	0x24000008
 8003000:	2400226c 	.word	0x2400226c
 8003004:	08018ba8 	.word	0x08018ba8
 8003008:	08018b90 	.word	0x08018b90
 800300c:	240023d0 	.word	0x240023d0
 8003010:	2400245c 	.word	0x2400245c
 8003014:	08018c8c 	.word	0x08018c8c
 8003018:	2400237c 	.word	0x2400237c
 800301c:	24002448 	.word	0x24002448
 8003020:	240023fc 	.word	0x240023fc
 8003024:	240021ac 	.word	0x240021ac
 8003028:	24000020 	.word	0x24000020
 800302c:	24000022 	.word	0x24000022
 8003030:	240023c4 	.word	0x240023c4
 8003034:	08018ca8 	.word	0x08018ca8
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 8003038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	f240 12df 	movw	r2, #479	@ 0x1df
 8003044:	2164      	movs	r1, #100	@ 0x64
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe fa8a 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 800304c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	f240 12df 	movw	r2, #479	@ 0x1df
 8003058:	2164      	movs	r1, #100	@ 0x64
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fd74 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3301      	adds	r3, #1
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b13      	cmp	r3, #19
 800306a:	dde5      	ble.n	8003038 <main+0x17dc>
		  horizanim();
 800306c:	f002 ffb6 	bl	8005fdc <horizanim>
		  bol=0;
 8003070:	4ba0      	ldr	r3, [pc, #640]	@ (80032f4 <main+0x1a98>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8003076:	49a0      	ldr	r1, [pc, #640]	@ (80032f8 <main+0x1a9c>)
 8003078:	48a0      	ldr	r0, [pc, #640]	@ (80032fc <main+0x1aa0>)
 800307a:	f014 fc3d 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800307e:	4ba0      	ldr	r3, [pc, #640]	@ (8003300 <main+0x1aa4>)
 8003080:	2200      	movs	r2, #0
 8003082:	9204      	str	r2, [sp, #16]
 8003084:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	9202      	str	r2, [sp, #8]
 800308e:	466c      	mov	r4, sp
 8003090:	1d1a      	adds	r2, r3, #4
 8003092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003096:	e884 0003 	stmia.w	r4, {r0, r1}
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a97      	ldr	r2, [pc, #604]	@ (80032fc <main+0x1aa0>)
 800309e:	211e      	movs	r1, #30
 80030a0:	2014      	movs	r0, #20
 80030a2:	f7fe f817 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 80030a6:	4b97      	ldr	r3, [pc, #604]	@ (8003304 <main+0x1aa8>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461e      	mov	r6, r3
 80030ac:	4b95      	ldr	r3, [pc, #596]	@ (8003304 <main+0x1aa8>)
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	469c      	mov	ip, r3
 80030b2:	4b94      	ldr	r3, [pc, #592]	@ (8003304 <main+0x1aa8>)
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b92      	ldr	r3, [pc, #584]	@ (8003304 <main+0x1aa8>)
 80030ba:	78db      	ldrb	r3, [r3, #3]
 80030bc:	4619      	mov	r1, r3
 80030be:	4b91      	ldr	r3, [pc, #580]	@ (8003304 <main+0x1aa8>)
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003304 <main+0x1aa8>)
 80030c6:	795b      	ldrb	r3, [r3, #5]
 80030c8:	461c      	mov	r4, r3
 80030ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003304 <main+0x1aa8>)
 80030cc:	799b      	ldrb	r3, [r3, #6]
 80030ce:	461d      	mov	r5, r3
 80030d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003304 <main+0x1aa8>)
 80030d2:	79db      	ldrb	r3, [r3, #7]
 80030d4:	9305      	str	r3, [sp, #20]
 80030d6:	9504      	str	r5, [sp, #16]
 80030d8:	9403      	str	r4, [sp, #12]
 80030da:	9002      	str	r0, [sp, #8]
 80030dc:	9101      	str	r1, [sp, #4]
 80030de:	9200      	str	r2, [sp, #0]
 80030e0:	4663      	mov	r3, ip
 80030e2:	4632      	mov	r2, r6
 80030e4:	4988      	ldr	r1, [pc, #544]	@ (8003308 <main+0x1aac>)
 80030e6:	4885      	ldr	r0, [pc, #532]	@ (80032fc <main+0x1aa0>)
 80030e8:	f014 fc06 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_MAROON);
 80030ec:	4b84      	ldr	r3, [pc, #528]	@ (8003300 <main+0x1aa4>)
 80030ee:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 80030f2:	9204      	str	r2, [sp, #16]
 80030f4:	2200      	movs	r2, #0
 80030f6:	9203      	str	r2, [sp, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	466c      	mov	r4, sp
 80030fe:	1d1a      	adds	r2, r3, #4
 8003100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003104:	e884 0003 	stmia.w	r4, {r0, r1}
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7c      	ldr	r2, [pc, #496]	@ (80032fc <main+0x1aa0>)
 800310c:	211e      	movs	r1, #30
 800310e:	205a      	movs	r0, #90	@ 0x5a
 8003110:	f7fd ffe0 	bl	80010d4 <Displ_WString>
		  Displ_CString(0,60,20,10,"0x03",Font16,1,ILI9488_WHITE,ILI9488_MAROON);
 8003114:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8003118:	9306      	str	r3, [sp, #24]
 800311a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800311e:	9305      	str	r3, [sp, #20]
 8003120:	2301      	movs	r3, #1
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	4a76      	ldr	r2, [pc, #472]	@ (8003300 <main+0x1aa4>)
 8003126:	ab01      	add	r3, sp, #4
 8003128:	ca07      	ldmia	r2, {r0, r1, r2}
 800312a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800312e:	4b77      	ldr	r3, [pc, #476]	@ (800330c <main+0x1ab0>)
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	230a      	movs	r3, #10
 8003134:	2214      	movs	r2, #20
 8003136:	213c      	movs	r1, #60	@ 0x3c
 8003138:	2000      	movs	r0, #0
 800313a:	f7fe f80b 	bl	8001154 <Displ_CString>
		  col=ILI9488_MAROON;
 800313e:	4b74      	ldr	r3, [pc, #464]	@ (8003310 <main+0x1ab4>)
 8003140:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8003144:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 8003146:	f002 ffe9 	bl	800611c <chronogramme>
		  break;
 800314a:	f000 bccd 	b.w	8003ae8 <main+0x228c>
		  fit[0]=0x51;
 800314e:	4b71      	ldr	r3, [pc, #452]	@ (8003314 <main+0x1ab8>)
 8003150:	2251      	movs	r2, #81	@ 0x51
 8003152:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 8003154:	4a6f      	ldr	r2, [pc, #444]	@ (8003314 <main+0x1ab8>)
 8003156:	4970      	ldr	r1, [pc, #448]	@ (8003318 <main+0x1abc>)
 8003158:	4870      	ldr	r0, [pc, #448]	@ (800331c <main+0x1ac0>)
 800315a:	f009 f9c5 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  x=380;
 800315e:	4b70      	ldr	r3, [pc, #448]	@ (8003320 <main+0x1ac4>)
 8003160:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8003164:	801a      	strh	r2, [r3, #0]
		  y=60;
 8003166:	4b6f      	ldr	r3, [pc, #444]	@ (8003324 <main+0x1ac8>)
 8003168:	223c      	movs	r2, #60	@ 0x3c
 800316a:	801a      	strh	r2, [r3, #0]
		  j=1;
 800316c:	4b6e      	ldr	r3, [pc, #440]	@ (8003328 <main+0x1acc>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
		  lcdDrawRect(80, 60, 479, 25, ILI9488_BLACK);
 8003172:	2300      	movs	r3, #0
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2319      	movs	r3, #25
 8003178:	f240 12df 	movw	r2, #479	@ 0x1df
 800317c:	213c      	movs	r1, #60	@ 0x3c
 800317e:	2050      	movs	r0, #80	@ 0x50
 8003180:	f7fe f9ee 	bl	8001560 <lcdDrawRect>
		  fillRect(80,60, 479, 25, ILI9488_BLACK);
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2319      	movs	r3, #25
 800318a:	f240 12df 	movw	r2, #479	@ 0x1df
 800318e:	213c      	movs	r1, #60	@ 0x3c
 8003190:	2050      	movs	r0, #80	@ 0x50
 8003192:	f7fd fcd9 	bl	8000b48 <fillRect>
		  if(bol==1)
 8003196:	4b57      	ldr	r3, [pc, #348]	@ (80032f4 <main+0x1a98>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d139      	bne.n	8003212 <main+0x19b6>
		  dinam(ILI9488_WHITE);
 800319e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80031a2:	f002 fee3 	bl	8005f6c <dinam>
		  Displ_CString(120,120,180,180,"type carburant",Font16,3,ILI9488_BLACK,ILI9488_WHITE);
 80031a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031aa:	9306      	str	r3, [sp, #24]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9305      	str	r3, [sp, #20]
 80031b0:	2303      	movs	r3, #3
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	4a52      	ldr	r2, [pc, #328]	@ (8003300 <main+0x1aa4>)
 80031b6:	ab01      	add	r3, sp, #4
 80031b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031be:	4b5b      	ldr	r3, [pc, #364]	@ (800332c <main+0x1ad0>)
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	23b4      	movs	r3, #180	@ 0xb4
 80031c4:	22b4      	movs	r2, #180	@ 0xb4
 80031c6:	2178      	movs	r1, #120	@ 0x78
 80031c8:	2078      	movs	r0, #120	@ 0x78
 80031ca:	f7fd ffc3 	bl	8001154 <Displ_CString>
		  for(int u=0;u<20;u++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e016      	b.n	8003202 <main+0x19a6>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_WHITE);
 80031d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2319      	movs	r3, #25
 80031dc:	f240 12df 	movw	r2, #479	@ 0x1df
 80031e0:	2164      	movs	r1, #100	@ 0x64
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7fe f9bc 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_WHITE);
 80031e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2319      	movs	r3, #25
 80031f0:	f240 12df 	movw	r2, #479	@ 0x1df
 80031f4:	2164      	movs	r1, #100	@ 0x64
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fca6 	bl	8000b48 <fillRect>
		  for(int u=0;u<20;u++)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b13      	cmp	r3, #19
 8003206:	dde5      	ble.n	80031d4 <main+0x1978>
		  horizanim();
 8003208:	f002 fee8 	bl	8005fdc <horizanim>
		  bol=0;
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <main+0x1a98>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
		  sprintf(text,"Data :");
 8003212:	4939      	ldr	r1, [pc, #228]	@ (80032f8 <main+0x1a9c>)
 8003214:	4839      	ldr	r0, [pc, #228]	@ (80032fc <main+0x1aa0>)
 8003216:	f014 fb6f 	bl	80178f8 <siprintf>
		  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800321a:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <main+0x1aa4>)
 800321c:	2200      	movs	r2, #0
 800321e:	9204      	str	r2, [sp, #16]
 8003220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	9202      	str	r2, [sp, #8]
 800322a:	466c      	mov	r4, sp
 800322c:	1d1a      	adds	r2, r3, #4
 800322e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003232:	e884 0003 	stmia.w	r4, {r0, r1}
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a30      	ldr	r2, [pc, #192]	@ (80032fc <main+0x1aa0>)
 800323a:	211e      	movs	r1, #30
 800323c:	2014      	movs	r0, #20
 800323e:	f7fd ff49 	bl	80010d4 <Displ_WString>
		  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8003242:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <main+0x1aa8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461e      	mov	r6, r3
 8003248:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <main+0x1aa8>)
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	469c      	mov	ip, r3
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <main+0x1aa8>)
 8003250:	789b      	ldrb	r3, [r3, #2]
 8003252:	461a      	mov	r2, r3
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <main+0x1aa8>)
 8003256:	78db      	ldrb	r3, [r3, #3]
 8003258:	4619      	mov	r1, r3
 800325a:	4b2a      	ldr	r3, [pc, #168]	@ (8003304 <main+0x1aa8>)
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <main+0x1aa8>)
 8003262:	795b      	ldrb	r3, [r3, #5]
 8003264:	461c      	mov	r4, r3
 8003266:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <main+0x1aa8>)
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	461d      	mov	r5, r3
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <main+0x1aa8>)
 800326e:	79db      	ldrb	r3, [r3, #7]
 8003270:	9305      	str	r3, [sp, #20]
 8003272:	9504      	str	r5, [sp, #16]
 8003274:	9403      	str	r4, [sp, #12]
 8003276:	9002      	str	r0, [sp, #8]
 8003278:	9101      	str	r1, [sp, #4]
 800327a:	9200      	str	r2, [sp, #0]
 800327c:	4663      	mov	r3, ip
 800327e:	4632      	mov	r2, r6
 8003280:	4921      	ldr	r1, [pc, #132]	@ (8003308 <main+0x1aac>)
 8003282:	481e      	ldr	r0, [pc, #120]	@ (80032fc <main+0x1aa0>)
 8003284:	f014 fb38 	bl	80178f8 <siprintf>
		  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_WHITE);
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <main+0x1aa4>)
 800328a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800328e:	9204      	str	r2, [sp, #16]
 8003290:	2200      	movs	r2, #0
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	9202      	str	r2, [sp, #8]
 8003298:	466c      	mov	r4, sp
 800329a:	1d1a      	adds	r2, r3, #4
 800329c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <main+0x1aa0>)
 80032a8:	211e      	movs	r1, #30
 80032aa:	205a      	movs	r0, #90	@ 0x5a
 80032ac:	f7fd ff12 	bl	80010d4 <Displ_WString>
		  e_data=engine_data;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <main+0x1ad4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <main+0x1ad8>)
 80032b6:	6013      	str	r3, [r2, #0]
		  Displ_CString(0,60,20,10,"0x51",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80032b8:	2300      	movs	r3, #0
 80032ba:	9306      	str	r3, [sp, #24]
 80032bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032c0:	9305      	str	r3, [sp, #20]
 80032c2:	2301      	movs	r3, #1
 80032c4:	9304      	str	r3, [sp, #16]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003300 <main+0x1aa4>)
 80032c8:	ab01      	add	r3, sp, #4
 80032ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80032cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <main+0x1adc>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	230a      	movs	r3, #10
 80032d6:	2214      	movs	r2, #20
 80032d8:	213c      	movs	r1, #60	@ 0x3c
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fd ff3a 	bl	8001154 <Displ_CString>
		  col=ILI9488_WHITE;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <main+0x1ab4>)
 80032e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e6:	801a      	strh	r2, [r3, #0]
		  chronogramme();
 80032e8:	f002 ff18 	bl	800611c <chronogramme>
		  for(int u=0;u<40;u++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e039      	b.n	8003366 <main+0x1b0a>
 80032f2:	bf00      	nop
 80032f4:	24000028 	.word	0x24000028
 80032f8:	08018ba0 	.word	0x08018ba0
 80032fc:	24002354 	.word	0x24002354
 8003300:	24000008 	.word	0x24000008
 8003304:	2400226c 	.word	0x2400226c
 8003308:	08018ba8 	.word	0x08018ba8
 800330c:	08018cbc 	.word	0x08018cbc
 8003310:	240023d0 	.word	0x240023d0
 8003314:	24002448 	.word	0x24002448
 8003318:	240023fc 	.word	0x240023fc
 800331c:	240021ac 	.word	0x240021ac
 8003320:	24000020 	.word	0x24000020
 8003324:	24000022 	.word	0x24000022
 8003328:	240023c4 	.word	0x240023c4
 800332c:	08018cc4 	.word	0x08018cc4
 8003330:	2400245c 	.word	0x2400245c
 8003334:	24002444 	.word	0x24002444
 8003338:	08018cd4 	.word	0x08018cd4
			  lcdDrawRect(0, 200, 479, 25, ILI9488_BLACK);
 800333c:	2300      	movs	r3, #0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	f240 12df 	movw	r2, #479	@ 0x1df
 8003346:	21c8      	movs	r1, #200	@ 0xc8
 8003348:	2000      	movs	r0, #0
 800334a:	f7fe f909 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 200, 479, 25, ILI9488_BLACK);
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2319      	movs	r3, #25
 8003354:	f240 12df 	movw	r2, #479	@ 0x1df
 8003358:	21c8      	movs	r1, #200	@ 0xc8
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd fbf4 	bl	8000b48 <fillRect>
		  for(int u=0;u<40;u++)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3301      	adds	r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b27      	cmp	r3, #39	@ 0x27
 800336a:	dde7      	ble.n	800333c <main+0x1ae0>
		  Displ_CString(0,100,100,20,"Type de carburant:",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 800336c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003370:	9306      	str	r3, [sp, #24]
 8003372:	2300      	movs	r3, #0
 8003374:	9305      	str	r3, [sp, #20]
 8003376:	2301      	movs	r3, #1
 8003378:	9304      	str	r3, [sp, #16]
 800337a:	4a9f      	ldr	r2, [pc, #636]	@ (80035f8 <main+0x1d9c>)
 800337c:	ab01      	add	r3, sp, #4
 800337e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003384:	4b9d      	ldr	r3, [pc, #628]	@ (80035fc <main+0x1da0>)
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2314      	movs	r3, #20
 800338a:	2264      	movs	r2, #100	@ 0x64
 800338c:	2164      	movs	r1, #100	@ 0x64
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fee0 	bl	8001154 <Displ_CString>
          if (((int) engine_data) & 0x01)
 8003394:	4b9a      	ldr	r3, [pc, #616]	@ (8003600 <main+0x1da4>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800339e:	ee17 3a90 	vmov	r3, s15
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <main+0x1b76>
			  Displ_CString(200,100,250,20,"Diesel",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 80033aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033ae:	9306      	str	r3, [sp, #24]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	2301      	movs	r3, #1
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	4a8f      	ldr	r2, [pc, #572]	@ (80035f8 <main+0x1d9c>)
 80033ba:	ab01      	add	r3, sp, #4
 80033bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80033be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033c2:	4b90      	ldr	r3, [pc, #576]	@ (8003604 <main+0x1da8>)
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2314      	movs	r3, #20
 80033c8:	22fa      	movs	r2, #250	@ 0xfa
 80033ca:	2164      	movs	r1, #100	@ 0x64
 80033cc:	20c8      	movs	r0, #200	@ 0xc8
 80033ce:	f7fd fec1 	bl	8001154 <Displ_CString>
          if (((int) engine_data) & 0x02) {
 80033d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003600 <main+0x1da4>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033dc:	ee17 3a90 	vmov	r3, s15
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 837e 	beq.w	8003ae6 <main+0x228a>
   		  Displ_CString(190,100,230,10,"Essence",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 80033ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033ee:	9306      	str	r3, [sp, #24]
 80033f0:	2300      	movs	r3, #0
 80033f2:	9305      	str	r3, [sp, #20]
 80033f4:	2301      	movs	r3, #1
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	4a7f      	ldr	r2, [pc, #508]	@ (80035f8 <main+0x1d9c>)
 80033fa:	ab01      	add	r3, sp, #4
 80033fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80033fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003402:	4b81      	ldr	r3, [pc, #516]	@ (8003608 <main+0x1dac>)
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	230a      	movs	r3, #10
 8003408:	22e6      	movs	r2, #230	@ 0xe6
 800340a:	2164      	movs	r1, #100	@ 0x64
 800340c:	20be      	movs	r0, #190	@ 0xbe
 800340e:	f7fd fea1 	bl	8001154 <Displ_CString>
		  break;
 8003412:	e368      	b.n	8003ae6 <main+0x228a>
		  fit[0]=0x11;
 8003414:	4b7d      	ldr	r3, [pc, #500]	@ (800360c <main+0x1db0>)
 8003416:	2211      	movs	r2, #17
 8003418:	701a      	strb	r2, [r3, #0]
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &filter, fit);
 800341a:	4a7c      	ldr	r2, [pc, #496]	@ (800360c <main+0x1db0>)
 800341c:	497c      	ldr	r1, [pc, #496]	@ (8003610 <main+0x1db4>)
 800341e:	487d      	ldr	r0, [pc, #500]	@ (8003614 <main+0x1db8>)
 8003420:	f009 f862 	bl	800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>
		  j=0;
 8003424:	4b7c      	ldr	r3, [pc, #496]	@ (8003618 <main+0x1dbc>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
		  break;
 800342a:	e35d      	b.n	8003ae8 <main+0x228c>
			  HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 800342c:	2101      	movs	r1, #1
 800342e:	4879      	ldr	r0, [pc, #484]	@ (8003614 <main+0x1db8>)
 8003430:	f009 fa9e 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
			  HAL_FDCAN_Stop(&hfdcan1);
 8003434:	4877      	ldr	r0, [pc, #476]	@ (8003614 <main+0x1db8>)
 8003436:	f008 ffe0 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 800343a:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <main+0x1db8>)
 800343c:	4a77      	ldr	r2, [pc, #476]	@ (800361c <main+0x1dc0>)
 800343e:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003440:	4b74      	ldr	r3, [pc, #464]	@ (8003614 <main+0x1db8>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003446:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <main+0x1db8>)
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 800344c:	4b71      	ldr	r3, [pc, #452]	@ (8003614 <main+0x1db8>)
 800344e:	2201      	movs	r2, #1
 8003450:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003452:	4b70      	ldr	r3, [pc, #448]	@ (8003614 <main+0x1db8>)
 8003454:	2200      	movs	r2, #0
 8003456:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 8003458:	4b6e      	ldr	r3, [pc, #440]	@ (8003614 <main+0x1db8>)
 800345a:	2200      	movs	r2, #0
 800345c:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 4;
 800345e:	4b6d      	ldr	r3, [pc, #436]	@ (8003614 <main+0x1db8>)
 8003460:	2204      	movs	r2, #4
 8003462:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003464:	4b6b      	ldr	r3, [pc, #428]	@ (8003614 <main+0x1db8>)
 8003466:	2201      	movs	r2, #1
 8003468:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <main+0x1db8>)
 800346c:	225d      	movs	r2, #93	@ 0x5d
 800346e:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003470:	4b68      	ldr	r3, [pc, #416]	@ (8003614 <main+0x1db8>)
 8003472:	2202      	movs	r2, #2
 8003474:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 8003476:	4b67      	ldr	r3, [pc, #412]	@ (8003614 <main+0x1db8>)
 8003478:	2201      	movs	r2, #1
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 1;
 800347c:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <main+0x1db8>)
 800347e:	2201      	movs	r2, #1
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 1;
 8003482:	4b64      	ldr	r3, [pc, #400]	@ (8003614 <main+0x1db8>)
 8003484:	2201      	movs	r2, #1
 8003486:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 1;
 8003488:	4b62      	ldr	r3, [pc, #392]	@ (8003614 <main+0x1db8>)
 800348a:	2201      	movs	r2, #1
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 800348e:	4b61      	ldr	r3, [pc, #388]	@ (8003614 <main+0x1db8>)
 8003490:	2200      	movs	r2, #0
 8003492:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 8003494:	4b5f      	ldr	r3, [pc, #380]	@ (8003614 <main+0x1db8>)
 8003496:	2201      	movs	r2, #1
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 800349a:	4b5e      	ldr	r3, [pc, #376]	@ (8003614 <main+0x1db8>)
 800349c:	2200      	movs	r2, #0
 800349e:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80034a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003614 <main+0x1db8>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80034a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <main+0x1db8>)
 80034a8:	2204      	movs	r2, #4
 80034aa:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <main+0x1db8>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80034b2:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <main+0x1db8>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 80034b8:	4b56      	ldr	r3, [pc, #344]	@ (8003614 <main+0x1db8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80034be:	4b55      	ldr	r3, [pc, #340]	@ (8003614 <main+0x1db8>)
 80034c0:	2204      	movs	r2, #4
 80034c2:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <main+0x1db8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80034ca:	4b52      	ldr	r3, [pc, #328]	@ (8003614 <main+0x1db8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80034d0:	4b50      	ldr	r3, [pc, #320]	@ (8003614 <main+0x1db8>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80034d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <main+0x1db8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80034dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003614 <main+0x1db8>)
 80034de:	2204      	movs	r2, #4
 80034e0:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80034e2:	484c      	ldr	r0, [pc, #304]	@ (8003614 <main+0x1db8>)
 80034e4:	f008 fd0a 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80034e8:	484a      	ldr	r0, [pc, #296]	@ (8003614 <main+0x1db8>)
 80034ea:	f008 ff5b 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2101      	movs	r1, #1
 80034f2:	4848      	ldr	r0, [pc, #288]	@ (8003614 <main+0x1db8>)
 80034f4:	f009 f9c2 	bl	800c87c <HAL_FDCAN_ActivateNotification>
	          bufferr_receive[0]=0xff;
 80034f8:	4b49      	ldr	r3, [pc, #292]	@ (8003620 <main+0x1dc4>)
 80034fa:	22ff      	movs	r2, #255	@ 0xff
 80034fc:	701a      	strb	r2, [r3, #0]
	          speed=0;
 80034fe:	4b49      	ldr	r3, [pc, #292]	@ (8003624 <main+0x1dc8>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
	          fd_speed=0;
 8003504:	4b48      	ldr	r3, [pc, #288]	@ (8003628 <main+0x1dcc>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
	          j=0;
 800350a:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <main+0x1dbc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
		  break;
 8003510:	e2ea      	b.n	8003ae8 <main+0x228c>
		      HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8003512:	2101      	movs	r1, #1
 8003514:	483f      	ldr	r0, [pc, #252]	@ (8003614 <main+0x1db8>)
 8003516:	f009 fa2b 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
    		  HAL_FDCAN_Stop(&hfdcan1);
 800351a:	483e      	ldr	r0, [pc, #248]	@ (8003614 <main+0x1db8>)
 800351c:	f008 ff6d 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 8003520:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <main+0x1db8>)
 8003522:	4a3e      	ldr	r2, [pc, #248]	@ (800361c <main+0x1dc0>)
 8003524:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003526:	4b3b      	ldr	r3, [pc, #236]	@ (8003614 <main+0x1db8>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <main+0x1db8>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003532:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <main+0x1db8>)
 8003534:	2201      	movs	r2, #1
 8003536:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003538:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <main+0x1db8>)
 800353a:	2200      	movs	r2, #0
 800353c:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 800353e:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <main+0x1db8>)
 8003540:	2200      	movs	r2, #0
 8003542:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 2;
 8003544:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <main+0x1db8>)
 8003546:	2202      	movs	r2, #2
 8003548:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800354a:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <main+0x1db8>)
 800354c:	2202      	movs	r2, #2
 800354e:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003550:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <main+0x1db8>)
 8003552:	225d      	movs	r2, #93	@ 0x5d
 8003554:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003556:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <main+0x1db8>)
 8003558:	2202      	movs	r2, #2
 800355a:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 800355c:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <main+0x1db8>)
 800355e:	2201      	movs	r2, #1
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003562:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <main+0x1db8>)
 8003564:	2201      	movs	r2, #1
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 1;
 8003568:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <main+0x1db8>)
 800356a:	2201      	movs	r2, #1
 800356c:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 1;
 800356e:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <main+0x1db8>)
 8003570:	2201      	movs	r2, #1
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <main+0x1db8>)
 8003576:	2200      	movs	r2, #0
 8003578:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <main+0x1db8>)
 800357c:	2201      	movs	r2, #1
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <main+0x1db8>)
 8003582:	2200      	movs	r2, #0
 8003584:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003586:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <main+0x1db8>)
 8003588:	2201      	movs	r2, #1
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <main+0x1db8>)
 800358e:	2204      	movs	r2, #4
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003592:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <main+0x1db8>)
 8003594:	2200      	movs	r2, #0
 8003596:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <main+0x1db8>)
 800359a:	2204      	movs	r2, #4
 800359c:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <main+0x1db8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <main+0x1db8>)
 80035a6:	2204      	movs	r2, #4
 80035a8:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <main+0x1db8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80035b0:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <main+0x1db8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <main+0x1db8>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035bc:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <main+0x1db8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035c2:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <main+0x1db8>)
 80035c4:	2204      	movs	r2, #4
 80035c6:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80035c8:	4812      	ldr	r0, [pc, #72]	@ (8003614 <main+0x1db8>)
 80035ca:	f008 fc97 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80035ce:	4811      	ldr	r0, [pc, #68]	@ (8003614 <main+0x1db8>)
 80035d0:	f008 fee8 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80035d4:	2200      	movs	r2, #0
 80035d6:	2101      	movs	r1, #1
 80035d8:	480e      	ldr	r0, [pc, #56]	@ (8003614 <main+0x1db8>)
 80035da:	f009 f94f 	bl	800c87c <HAL_FDCAN_ActivateNotification>
	          bufferr_receive[0]=0xff;
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <main+0x1dc4>)
 80035e0:	22ff      	movs	r2, #255	@ 0xff
 80035e2:	701a      	strb	r2, [r3, #0]
	          speed=1;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <main+0x1dc8>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
	          fd_speed=0;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <main+0x1dcc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
	          j=0;
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <main+0x1dbc>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
	      break;
 80035f6:	e277      	b.n	8003ae8 <main+0x228c>
 80035f8:	24000008 	.word	0x24000008
 80035fc:	08018cdc 	.word	0x08018cdc
 8003600:	2400245c 	.word	0x2400245c
 8003604:	08018cf0 	.word	0x08018cf0
 8003608:	08018cf8 	.word	0x08018cf8
 800360c:	24002448 	.word	0x24002448
 8003610:	240023fc 	.word	0x240023fc
 8003614:	240021ac 	.word	0x240021ac
 8003618:	240023c4 	.word	0x240023c4
 800361c:	4000a000 	.word	0x4000a000
 8003620:	240023a4 	.word	0x240023a4
 8003624:	24002454 	.word	0x24002454
 8003628:	24002458 	.word	0x24002458
		      HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 800362c:	2101      	movs	r1, #1
 800362e:	4873      	ldr	r0, [pc, #460]	@ (80037fc <main+0x1fa0>)
 8003630:	f009 f99e 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
    		  HAL_FDCAN_Stop(&hfdcan1);
 8003634:	4871      	ldr	r0, [pc, #452]	@ (80037fc <main+0x1fa0>)
 8003636:	f008 fee0 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <main+0x1fa0>)
 800363c:	4a70      	ldr	r2, [pc, #448]	@ (8003800 <main+0x1fa4>)
 800363e:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003640:	4b6e      	ldr	r3, [pc, #440]	@ (80037fc <main+0x1fa0>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <main+0x1fa0>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 800364c:	4b6b      	ldr	r3, [pc, #428]	@ (80037fc <main+0x1fa0>)
 800364e:	2201      	movs	r2, #1
 8003650:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003652:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <main+0x1fa0>)
 8003654:	2200      	movs	r2, #0
 8003656:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 8003658:	4b68      	ldr	r3, [pc, #416]	@ (80037fc <main+0x1fa0>)
 800365a:	2200      	movs	r2, #0
 800365c:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 1;
 800365e:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <main+0x1fa0>)
 8003660:	2201      	movs	r2, #1
 8003662:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8003664:	4b65      	ldr	r3, [pc, #404]	@ (80037fc <main+0x1fa0>)
 8003666:	2202      	movs	r2, #2
 8003668:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 45;
 800366a:	4b64      	ldr	r3, [pc, #400]	@ (80037fc <main+0x1fa0>)
 800366c:	222d      	movs	r2, #45	@ 0x2d
 800366e:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003670:	4b62      	ldr	r3, [pc, #392]	@ (80037fc <main+0x1fa0>)
 8003672:	2202      	movs	r2, #2
 8003674:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 8003676:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <main+0x1fa0>)
 8003678:	2201      	movs	r2, #1
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 1;
 800367c:	4b5f      	ldr	r3, [pc, #380]	@ (80037fc <main+0x1fa0>)
 800367e:	2201      	movs	r2, #1
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 1;
 8003682:	4b5e      	ldr	r3, [pc, #376]	@ (80037fc <main+0x1fa0>)
 8003684:	2201      	movs	r2, #1
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 1;
 8003688:	4b5c      	ldr	r3, [pc, #368]	@ (80037fc <main+0x1fa0>)
 800368a:	2201      	movs	r2, #1
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <main+0x1fa0>)
 8003690:	2200      	movs	r2, #0
 8003692:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 8003694:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <main+0x1fa0>)
 8003696:	2201      	movs	r2, #1
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 800369a:	4b58      	ldr	r3, [pc, #352]	@ (80037fc <main+0x1fa0>)
 800369c:	2200      	movs	r2, #0
 800369e:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80036a0:	4b56      	ldr	r3, [pc, #344]	@ (80037fc <main+0x1fa0>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80036a6:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <main+0x1fa0>)
 80036a8:	2204      	movs	r2, #4
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80036ac:	4b53      	ldr	r3, [pc, #332]	@ (80037fc <main+0x1fa0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80036b2:	4b52      	ldr	r3, [pc, #328]	@ (80037fc <main+0x1fa0>)
 80036b4:	2204      	movs	r2, #4
 80036b6:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <main+0x1fa0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80036be:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <main+0x1fa0>)
 80036c0:	2204      	movs	r2, #4
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 80036c4:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <main+0x1fa0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80036ca:	4b4c      	ldr	r3, [pc, #304]	@ (80037fc <main+0x1fa0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80036d0:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <main+0x1fa0>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80036d6:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <main+0x1fa0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80036dc:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <main+0x1fa0>)
 80036de:	2204      	movs	r2, #4
 80036e0:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80036e2:	4846      	ldr	r0, [pc, #280]	@ (80037fc <main+0x1fa0>)
 80036e4:	f008 fc0a 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80036e8:	4844      	ldr	r0, [pc, #272]	@ (80037fc <main+0x1fa0>)
 80036ea:	f008 fe5b 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2101      	movs	r1, #1
 80036f2:	4842      	ldr	r0, [pc, #264]	@ (80037fc <main+0x1fa0>)
 80036f4:	f009 f8c2 	bl	800c87c <HAL_FDCAN_ActivateNotification>
	          bufferr_receive[0]=0xff;
 80036f8:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <main+0x1fa8>)
 80036fa:	22ff      	movs	r2, #255	@ 0xff
 80036fc:	701a      	strb	r2, [r3, #0]
	          speed=2;
 80036fe:	4b42      	ldr	r3, [pc, #264]	@ (8003808 <main+0x1fac>)
 8003700:	2202      	movs	r2, #2
 8003702:	601a      	str	r2, [r3, #0]
	          fd_speed=0;
 8003704:	4b41      	ldr	r3, [pc, #260]	@ (800380c <main+0x1fb0>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
	          j=0;
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <main+0x1fb4>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
	      break;
 8003710:	e1ea      	b.n	8003ae8 <main+0x228c>
		      HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8003712:	2101      	movs	r1, #1
 8003714:	4839      	ldr	r0, [pc, #228]	@ (80037fc <main+0x1fa0>)
 8003716:	f009 f92b 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
			  HAL_FDCAN_Stop(&hfdcan1);
 800371a:	4838      	ldr	r0, [pc, #224]	@ (80037fc <main+0x1fa0>)
 800371c:	f008 fe6d 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <main+0x1fa0>)
 8003722:	4a37      	ldr	r2, [pc, #220]	@ (8003800 <main+0x1fa4>)
 8003724:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003726:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <main+0x1fa0>)
 8003728:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800372c:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800372e:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <main+0x1fa0>)
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <main+0x1fa0>)
 8003736:	2201      	movs	r2, #1
 8003738:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 800373a:	4b30      	ldr	r3, [pc, #192]	@ (80037fc <main+0x1fa0>)
 800373c:	2200      	movs	r2, #0
 800373e:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <main+0x1fa0>)
 8003742:	2200      	movs	r2, #0
 8003744:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 1;
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <main+0x1fa0>)
 8003748:	2201      	movs	r2, #1
 800374a:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800374c:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <main+0x1fa0>)
 800374e:	2202      	movs	r2, #2
 8003750:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <main+0x1fa0>)
 8003754:	225d      	movs	r2, #93	@ 0x5d
 8003756:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003758:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <main+0x1fa0>)
 800375a:	2202      	movs	r2, #2
 800375c:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 8;
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <main+0x1fa0>)
 8003760:	2208      	movs	r2, #8
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 13;
 8003764:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <main+0x1fa0>)
 8003766:	220d      	movs	r2, #13
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 21;
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <main+0x1fa0>)
 800376c:	2215      	movs	r2, #21
 800376e:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 13;
 8003770:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <main+0x1fa0>)
 8003772:	220d      	movs	r2, #13
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 8003776:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <main+0x1fa0>)
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 800377c:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <main+0x1fa0>)
 800377e:	2201      	movs	r2, #1
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <main+0x1fa0>)
 8003784:	2200      	movs	r2, #0
 8003786:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003788:	4b1c      	ldr	r3, [pc, #112]	@ (80037fc <main+0x1fa0>)
 800378a:	2201      	movs	r2, #1
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <main+0x1fa0>)
 8003790:	2206      	movs	r2, #6
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <main+0x1fa0>)
 8003796:	2201      	movs	r2, #1
 8003798:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 800379a:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <main+0x1fa0>)
 800379c:	2206      	movs	r2, #6
 800379e:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 80037a0:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <main+0x1fa0>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <main+0x1fa0>)
 80037a8:	2206      	movs	r2, #6
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <main+0x1fa0>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <main+0x1fa0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <main+0x1fa0>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80037be:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <main+0x1fa0>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <main+0x1fa0>)
 80037c6:	2206      	movs	r2, #6
 80037c8:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80037ca:	480c      	ldr	r0, [pc, #48]	@ (80037fc <main+0x1fa0>)
 80037cc:	f008 fb96 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80037d0:	480a      	ldr	r0, [pc, #40]	@ (80037fc <main+0x1fa0>)
 80037d2:	f008 fde7 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2101      	movs	r1, #1
 80037da:	4808      	ldr	r0, [pc, #32]	@ (80037fc <main+0x1fa0>)
 80037dc:	f009 f84e 	bl	800c87c <HAL_FDCAN_ActivateNotification>
	          bufferr_receive[0]=0xff;
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <main+0x1fa8>)
 80037e2:	22ff      	movs	r2, #255	@ 0xff
 80037e4:	701a      	strb	r2, [r3, #0]
	          tftfd=0;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <main+0x1fb8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
	          fd_speed=0;
 80037ec:	4b07      	ldr	r3, [pc, #28]	@ (800380c <main+0x1fb0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
	          speed=0;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <main+0x1fac>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
	    break;
 80037f8:	e176      	b.n	8003ae8 <main+0x228c>
 80037fa:	bf00      	nop
 80037fc:	240021ac 	.word	0x240021ac
 8003800:	4000a000 	.word	0x4000a000
 8003804:	240023a4 	.word	0x240023a4
 8003808:	24002454 	.word	0x24002454
 800380c:	24002458 	.word	0x24002458
 8003810:	240023c4 	.word	0x240023c4
 8003814:	24002450 	.word	0x24002450
		      HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8003818:	2101      	movs	r1, #1
 800381a:	4871      	ldr	r0, [pc, #452]	@ (80039e0 <main+0x2184>)
 800381c:	f009 f8a8 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
		      HAL_FDCAN_Stop(&hfdcan1);
 8003820:	486f      	ldr	r0, [pc, #444]	@ (80039e0 <main+0x2184>)
 8003822:	f008 fdea 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 8003826:	4b6e      	ldr	r3, [pc, #440]	@ (80039e0 <main+0x2184>)
 8003828:	4a6e      	ldr	r2, [pc, #440]	@ (80039e4 <main+0x2188>)
 800382a:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800382c:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <main+0x2184>)
 800382e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003832:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003834:	4b6a      	ldr	r3, [pc, #424]	@ (80039e0 <main+0x2184>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 800383a:	4b69      	ldr	r3, [pc, #420]	@ (80039e0 <main+0x2184>)
 800383c:	2201      	movs	r2, #1
 800383e:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003840:	4b67      	ldr	r3, [pc, #412]	@ (80039e0 <main+0x2184>)
 8003842:	2200      	movs	r2, #0
 8003844:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 8003846:	4b66      	ldr	r3, [pc, #408]	@ (80039e0 <main+0x2184>)
 8003848:	2200      	movs	r2, #0
 800384a:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 1;
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <main+0x2184>)
 800384e:	2201      	movs	r2, #1
 8003850:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8003852:	4b63      	ldr	r3, [pc, #396]	@ (80039e0 <main+0x2184>)
 8003854:	2202      	movs	r2, #2
 8003856:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003858:	4b61      	ldr	r3, [pc, #388]	@ (80039e0 <main+0x2184>)
 800385a:	225d      	movs	r2, #93	@ 0x5d
 800385c:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 800385e:	4b60      	ldr	r3, [pc, #384]	@ (80039e0 <main+0x2184>)
 8003860:	2202      	movs	r2, #2
 8003862:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 2;
 8003864:	4b5e      	ldr	r3, [pc, #376]	@ (80039e0 <main+0x2184>)
 8003866:	2202      	movs	r2, #2
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 13;
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <main+0x2184>)
 800386c:	220d      	movs	r2, #13
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 21;
 8003870:	4b5b      	ldr	r3, [pc, #364]	@ (80039e0 <main+0x2184>)
 8003872:	2215      	movs	r2, #21
 8003874:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 13;
 8003876:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <main+0x2184>)
 8003878:	220d      	movs	r2, #13
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 800387c:	4b58      	ldr	r3, [pc, #352]	@ (80039e0 <main+0x2184>)
 800387e:	2200      	movs	r2, #0
 8003880:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 8003882:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <main+0x2184>)
 8003884:	2201      	movs	r2, #1
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <main+0x2184>)
 800388a:	2200      	movs	r2, #0
 800388c:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <main+0x2184>)
 8003890:	2201      	movs	r2, #1
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8003894:	4b52      	ldr	r3, [pc, #328]	@ (80039e0 <main+0x2184>)
 8003896:	2206      	movs	r2, #6
 8003898:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800389a:	4b51      	ldr	r3, [pc, #324]	@ (80039e0 <main+0x2184>)
 800389c:	2200      	movs	r2, #0
 800389e:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80038a0:	4b4f      	ldr	r3, [pc, #316]	@ (80039e0 <main+0x2184>)
 80038a2:	2204      	movs	r2, #4
 80038a4:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 80038a6:	4b4e      	ldr	r3, [pc, #312]	@ (80039e0 <main+0x2184>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80038ac:	4b4c      	ldr	r3, [pc, #304]	@ (80039e0 <main+0x2184>)
 80038ae:	2204      	movs	r2, #4
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 80038b2:	4b4b      	ldr	r3, [pc, #300]	@ (80039e0 <main+0x2184>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80038b8:	4b49      	ldr	r3, [pc, #292]	@ (80039e0 <main+0x2184>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <main+0x2184>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80038c4:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <main+0x2184>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 80038ca:	4b45      	ldr	r3, [pc, #276]	@ (80039e0 <main+0x2184>)
 80038cc:	2206      	movs	r2, #6
 80038ce:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80038d0:	4843      	ldr	r0, [pc, #268]	@ (80039e0 <main+0x2184>)
 80038d2:	f008 fb13 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80038d6:	4842      	ldr	r0, [pc, #264]	@ (80039e0 <main+0x2184>)
 80038d8:	f008 fd64 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80038dc:	2200      	movs	r2, #0
 80038de:	2101      	movs	r1, #1
 80038e0:	483f      	ldr	r0, [pc, #252]	@ (80039e0 <main+0x2184>)
 80038e2:	f008 ffcb 	bl	800c87c <HAL_FDCAN_ActivateNotification>
			  bufferr_receive[0]=0xff;
 80038e6:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <main+0x218c>)
 80038e8:	22ff      	movs	r2, #255	@ 0xff
 80038ea:	701a      	strb	r2, [r3, #0]
			  tftfd=0;
 80038ec:	4b3f      	ldr	r3, [pc, #252]	@ (80039ec <main+0x2190>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
	          fd_speed=1;
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <main+0x2194>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
	          speed=0;
 80038f8:	4b3e      	ldr	r3, [pc, #248]	@ (80039f4 <main+0x2198>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
	  break;
 80038fe:	e0f3      	b.n	8003ae8 <main+0x228c>
		      HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8003900:	2101      	movs	r1, #1
 8003902:	4837      	ldr	r0, [pc, #220]	@ (80039e0 <main+0x2184>)
 8003904:	f009 f834 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
		      HAL_FDCAN_Stop(&hfdcan1);
 8003908:	4835      	ldr	r0, [pc, #212]	@ (80039e0 <main+0x2184>)
 800390a:	f008 fd76 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 800390e:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <main+0x2184>)
 8003910:	4a34      	ldr	r2, [pc, #208]	@ (80039e4 <main+0x2188>)
 8003912:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003914:	4b32      	ldr	r3, [pc, #200]	@ (80039e0 <main+0x2184>)
 8003916:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800391a:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800391c:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <main+0x2184>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003922:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <main+0x2184>)
 8003924:	2201      	movs	r2, #1
 8003926:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <main+0x2184>)
 800392a:	2200      	movs	r2, #0
 800392c:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 800392e:	4b2c      	ldr	r3, [pc, #176]	@ (80039e0 <main+0x2184>)
 8003930:	2200      	movs	r2, #0
 8003932:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 1;
 8003934:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <main+0x2184>)
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800393a:	4b29      	ldr	r3, [pc, #164]	@ (80039e0 <main+0x2184>)
 800393c:	2202      	movs	r2, #2
 800393e:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <main+0x2184>)
 8003942:	225d      	movs	r2, #93	@ 0x5d
 8003944:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003946:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <main+0x2184>)
 8003948:	2202      	movs	r2, #2
 800394a:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 800394c:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <main+0x2184>)
 800394e:	2201      	movs	r2, #1
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 13;
 8003952:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <main+0x2184>)
 8003954:	220d      	movs	r2, #13
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 21;
 8003958:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <main+0x2184>)
 800395a:	2215      	movs	r2, #21
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 13;
 800395e:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <main+0x2184>)
 8003960:	220d      	movs	r2, #13
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 8003964:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <main+0x2184>)
 8003966:	2200      	movs	r2, #0
 8003968:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <main+0x2184>)
 800396c:	2201      	movs	r2, #1
 800396e:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <main+0x2184>)
 8003972:	2200      	movs	r2, #0
 8003974:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003976:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <main+0x2184>)
 8003978:	2201      	movs	r2, #1
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <main+0x2184>)
 800397e:	2206      	movs	r2, #6
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <main+0x2184>)
 8003984:	2200      	movs	r2, #0
 8003986:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003988:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <main+0x2184>)
 800398a:	2204      	movs	r2, #4
 800398c:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <main+0x2184>)
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <main+0x2184>)
 8003996:	2204      	movs	r2, #4
 8003998:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 800399a:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <main+0x2184>)
 800399c:	2200      	movs	r2, #0
 800399e:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <main+0x2184>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <main+0x2184>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <main+0x2184>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <main+0x2184>)
 80039b4:	2206      	movs	r2, #6
 80039b6:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 80039b8:	4809      	ldr	r0, [pc, #36]	@ (80039e0 <main+0x2184>)
 80039ba:	f008 fa9f 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 80039be:	4808      	ldr	r0, [pc, #32]	@ (80039e0 <main+0x2184>)
 80039c0:	f008 fcf0 	bl	800c3a4 <HAL_FDCAN_Start>
			  tftfd=0;
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <main+0x2190>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
			  bufferr_receive[0]=0xff;
 80039ca:	4b07      	ldr	r3, [pc, #28]	@ (80039e8 <main+0x218c>)
 80039cc:	22ff      	movs	r2, #255	@ 0xff
 80039ce:	701a      	strb	r2, [r3, #0]
	          fd_speed=2;
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <main+0x2194>)
 80039d2:	2202      	movs	r2, #2
 80039d4:	601a      	str	r2, [r3, #0]
	          speed=0;
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <main+0x2198>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
	  break;
 80039dc:	e084      	b.n	8003ae8 <main+0x228c>
 80039de:	bf00      	nop
 80039e0:	240021ac 	.word	0x240021ac
 80039e4:	4000a000 	.word	0x4000a000
 80039e8:	240023a4 	.word	0x240023a4
 80039ec:	24002450 	.word	0x24002450
 80039f0:	24002458 	.word	0x24002458
 80039f4:	24002454 	.word	0x24002454
			  HAL_FDCAN_TT_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 80039f8:	2101      	movs	r1, #1
 80039fa:	483c      	ldr	r0, [pc, #240]	@ (8003aec <main+0x2290>)
 80039fc:	f008 ffb8 	bl	800c970 <HAL_FDCAN_TT_DeactivateNotification>
	    	  HAL_FDCAN_Stop(&hfdcan1);
 8003a00:	483a      	ldr	r0, [pc, #232]	@ (8003aec <main+0x2290>)
 8003a02:	f008 fcfa 	bl	800c3fa <HAL_FDCAN_Stop>
			  hfdcan1.Instance = FDCAN1;
 8003a06:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <main+0x2290>)
 8003a08:	4a39      	ldr	r2, [pc, #228]	@ (8003af0 <main+0x2294>)
 8003a0a:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003a0c:	4b37      	ldr	r3, [pc, #220]	@ (8003aec <main+0x2290>)
 8003a0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003a12:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a14:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <main+0x2290>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003a1a:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <main+0x2290>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8003a20:	4b32      	ldr	r3, [pc, #200]	@ (8003aec <main+0x2290>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 8003a26:	4b31      	ldr	r3, [pc, #196]	@ (8003aec <main+0x2290>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = 1;
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003aec <main+0x2290>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8003a32:	4b2e      	ldr	r3, [pc, #184]	@ (8003aec <main+0x2290>)
 8003a34:	2202      	movs	r2, #2
 8003a36:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003a38:	4b2c      	ldr	r3, [pc, #176]	@ (8003aec <main+0x2290>)
 8003a3a:	225d      	movs	r2, #93	@ 0x5d
 8003a3c:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <main+0x2290>)
 8003a40:	2202      	movs	r2, #2
 8003a42:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 8003a44:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <main+0x2290>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 13;
 8003a4a:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <main+0x2290>)
 8003a4c:	220d      	movs	r2, #13
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 5;
 8003a50:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <main+0x2290>)
 8003a52:	2205      	movs	r2, #5
 8003a54:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 5;
 8003a56:	4b25      	ldr	r3, [pc, #148]	@ (8003aec <main+0x2290>)
 8003a58:	2205      	movs	r2, #5
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.MessageRAMOffset = 0;
 8003a5c:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <main+0x2290>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.StdFiltersNbr = 1;
 8003a62:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <main+0x2290>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.ExtFiltersNbr = 0;
 8003a68:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <main+0x2290>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
			  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003aec <main+0x2290>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
			  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <main+0x2290>)
 8003a76:	2206      	movs	r2, #6
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
			  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <main+0x2290>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	649a      	str	r2, [r3, #72]	@ 0x48
			  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <main+0x2290>)
 8003a82:	2204      	movs	r2, #4
 8003a84:	64da      	str	r2, [r3, #76]	@ 0x4c
			  hfdcan1.Init.RxBuffersNbr = 0;
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <main+0x2290>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	651a      	str	r2, [r3, #80]	@ 0x50
			  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <main+0x2290>)
 8003a8e:	2204      	movs	r2, #4
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54
			  hfdcan1.Init.TxEventsNbr = 0;
 8003a92:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <main+0x2290>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	659a      	str	r2, [r3, #88]	@ 0x58
			  hfdcan1.Init.TxBuffersNbr = 0;
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <main+0x2290>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
			  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <main+0x2290>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	661a      	str	r2, [r3, #96]	@ 0x60
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <main+0x2290>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	665a      	str	r2, [r3, #100]	@ 0x64
			  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <main+0x2290>)
 8003aac:	2206      	movs	r2, #6
 8003aae:	669a      	str	r2, [r3, #104]	@ 0x68
			  HAL_FDCAN_Init(&hfdcan1);
 8003ab0:	480e      	ldr	r0, [pc, #56]	@ (8003aec <main+0x2290>)
 8003ab2:	f008 fa23 	bl	800befc <HAL_FDCAN_Init>
			  HAL_FDCAN_Start(&hfdcan1);
 8003ab6:	480d      	ldr	r0, [pc, #52]	@ (8003aec <main+0x2290>)
 8003ab8:	f008 fc74 	bl	800c3a4 <HAL_FDCAN_Start>
			  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2101      	movs	r1, #1
 8003ac0:	480a      	ldr	r0, [pc, #40]	@ (8003aec <main+0x2290>)
 8003ac2:	f008 fedb 	bl	800c87c <HAL_FDCAN_ActivateNotification>
			  tftfd=0;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <main+0x2298>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
			  bufferr_receive[0]=0xff;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <main+0x229c>)
 8003ace:	22ff      	movs	r2, #255	@ 0xff
 8003ad0:	701a      	strb	r2, [r3, #0]
	          fd_speed=3;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <main+0x22a0>)
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	601a      	str	r2, [r3, #0]
	          speed=0;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <main+0x22a4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
	  break;
 8003ade:	e003      	b.n	8003ae8 <main+0x228c>
		  break;
 8003ae0:	bf00      	nop
 8003ae2:	f7fe b8eb 	b.w	8001cbc <main+0x460>
		  break;
 8003ae6:	bf00      	nop
	  switch(bufferr_receive[0])
 8003ae8:	f7fe b8e8 	b.w	8001cbc <main+0x460>
 8003aec:	240021ac 	.word	0x240021ac
 8003af0:	4000a000 	.word	0x4000a000
 8003af4:	24002450 	.word	0x24002450
 8003af8:	240023a4 	.word	0x240023a4
 8003afc:	24002458 	.word	0x24002458
 8003b00:	24002454 	.word	0x24002454

08003b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b09e      	sub	sp, #120	@ 0x78
 8003b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b0e:	224c      	movs	r2, #76	@ 0x4c
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f013 ff53 	bl	80179be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f013 ff4c 	bl	80179be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b26:	2002      	movs	r0, #2
 8003b28:	f00b f8ec 	bl	800ed04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	4b48      	ldr	r3, [pc, #288]	@ (8003c54 <SystemClock_Config+0x150>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	4a47      	ldr	r2, [pc, #284]	@ (8003c54 <SystemClock_Config+0x150>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003b3c:	4b45      	ldr	r3, [pc, #276]	@ (8003c54 <SystemClock_Config+0x150>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b44      	ldr	r3, [pc, #272]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4a43      	ldr	r2, [pc, #268]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b50:	6193      	str	r3, [r2, #24]
 8003b52:	4b41      	ldr	r3, [pc, #260]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003b5e:	bf00      	nop
 8003b60:	4b3d      	ldr	r3, [pc, #244]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6c:	d1f8      	bne.n	8003b60 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <SystemClock_Config+0x158>)
 8003b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b74:	4a39      	ldr	r2, [pc, #228]	@ (8003c5c <SystemClock_Config+0x158>)
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b7e:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <SystemClock_Config+0x158>)
 8003b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	4a30      	ldr	r2, [pc, #192]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b9a:	6193      	str	r3, [r2, #24]
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <SystemClock_Config+0x154>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c54 <SystemClock_Config+0x150>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <SystemClock_Config+0x150>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003bb2:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <SystemClock_Config+0x150>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003bbe:	bf00      	nop
 8003bc0:	4b25      	ldr	r3, [pc, #148]	@ (8003c58 <SystemClock_Config+0x154>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bcc:	d1f8      	bne.n	8003bc0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003be0:	2305      	movs	r3, #5
 8003be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003be4:	23c0      	movs	r3, #192	@ 0xc0
 8003be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003be8:	2302      	movs	r3, #2
 8003bea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8003bec:	2314      	movs	r3, #20
 8003bee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00b f8c7 	bl	800ed98 <HAL_RCC_OscConfig>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003c10:	f002 fc8a 	bl	8006528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c14:	233f      	movs	r3, #63	@ 0x3f
 8003c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003c20:	2308      	movs	r3, #8
 8003c22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003c24:	2340      	movs	r3, #64	@ 0x40
 8003c26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003c28:	2340      	movs	r3, #64	@ 0x40
 8003c2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003c32:	2340      	movs	r3, #64	@ 0x40
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	2104      	movs	r1, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00b fd05 	bl	800f64c <HAL_RCC_ClockConfig>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8003c48:	f002 fc6e 	bl	8006528 <Error_Handler>
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3778      	adds	r7, #120	@ 0x78
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	58000400 	.word	0x58000400
 8003c58:	58024800 	.word	0x58024800
 8003c5c:	58024400 	.word	0x58024400

08003c60 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003c64:	4b3d      	ldr	r3, [pc, #244]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c66:	4a3e      	ldr	r2, [pc, #248]	@ (8003d60 <MX_FDCAN1_Init+0x100>)
 8003c68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003c70:	4b3a      	ldr	r3, [pc, #232]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003c76:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003c7c:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003c82:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8003c88:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 93;
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c96:	225d      	movs	r2, #93	@ 0x5d
 8003c98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003c9a:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003cac:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8003cbe:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003cc4:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003cd0:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003cd6:	4b21      	ldr	r3, [pc, #132]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cde:	2204      	movs	r2, #4
 8003ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cea:	2204      	movs	r2, #4
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003cee:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8003cfa:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003d00:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003d06:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003d08:	2204      	movs	r2, #4
 8003d0a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003d0c:	4813      	ldr	r0, [pc, #76]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003d0e:	f008 f8f5 	bl	800befc <HAL_FDCAN_Init>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8003d18:	f002 fc06 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003d28:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x0;
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x0;
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
  sFilterConfig.RxBufferIndex = 0;
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	619a      	str	r2, [r3, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8003d46:	4907      	ldr	r1, [pc, #28]	@ (8003d64 <MX_FDCAN1_Init+0x104>)
 8003d48:	4804      	ldr	r0, [pc, #16]	@ (8003d5c <MX_FDCAN1_Init+0xfc>)
 8003d4a:	f008 fab5 	bl	800c2b8 <HAL_FDCAN_ConfigFilter>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_FDCAN1_Init+0xf8>
  {
    /* Filter configuration Error */
	  Error_Handler();
 8003d54:	f002 fbe8 	bl	8006528 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	240021ac 	.word	0x240021ac
 8003d60:	4000a000 	.word	0x4000a000
 8003d64:	2400224c 	.word	0x2400224c

08003d68 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6a:	b0a9      	sub	sp, #164	@ 0xa4
 8003d6c:	af10      	add	r7, sp, #64	@ 0x40
 8003d6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d70:	6239      	str	r1, [r7, #32]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f001 87ac 	beq.w	8005cd6 <HAL_FDCAN_RxFifo0Callback+0x1f6e>
    {
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, R);
 8003d7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003d80:	4aa1      	ldr	r2, [pc, #644]	@ (8004008 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8003d82:	2140      	movs	r1, #64	@ 0x40
 8003d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d86:	f008 fc0b 	bl	800c5a0 <HAL_FDCAN_GetRxMessage>
    if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN )
 8003d8a:	4b9f      	ldr	r3, [pc, #636]	@ (8004008 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d133      	bne.n	8003dfa <HAL_FDCAN_RxFifo0Callback+0x92>
    {
    ss= snprintf(b,30,"%02x %02x %02x %02x %02x %02x %02x %02x %02x",RxHeader.Identifier,R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8003d92:	4b9d      	ldr	r3, [pc, #628]	@ (8004008 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a9b      	ldr	r2, [pc, #620]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4a99      	ldr	r2, [pc, #612]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003d9e:	7852      	ldrb	r2, [r2, #1]
 8003da0:	4610      	mov	r0, r2
 8003da2:	4a98      	ldr	r2, [pc, #608]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003da4:	7892      	ldrb	r2, [r2, #2]
 8003da6:	4614      	mov	r4, r2
 8003da8:	4a96      	ldr	r2, [pc, #600]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003daa:	78d2      	ldrb	r2, [r2, #3]
 8003dac:	4615      	mov	r5, r2
 8003dae:	4a95      	ldr	r2, [pc, #596]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003db0:	7912      	ldrb	r2, [r2, #4]
 8003db2:	4616      	mov	r6, r2
 8003db4:	4a93      	ldr	r2, [pc, #588]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003db6:	7952      	ldrb	r2, [r2, #5]
 8003db8:	61fa      	str	r2, [r7, #28]
 8003dba:	4a92      	ldr	r2, [pc, #584]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003dbc:	7992      	ldrb	r2, [r2, #6]
 8003dbe:	61ba      	str	r2, [r7, #24]
 8003dc0:	4a90      	ldr	r2, [pc, #576]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003dc2:	79d2      	ldrb	r2, [r2, #7]
 8003dc4:	9207      	str	r2, [sp, #28]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	9206      	str	r2, [sp, #24]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	9205      	str	r2, [sp, #20]
 8003dce:	9604      	str	r6, [sp, #16]
 8003dd0:	9503      	str	r5, [sp, #12]
 8003dd2:	9402      	str	r4, [sp, #8]
 8003dd4:	9001      	str	r0, [sp, #4]
 8003dd6:	9100      	str	r1, [sp, #0]
 8003dd8:	4a8c      	ldr	r2, [pc, #560]	@ (800400c <HAL_FDCAN_RxFifo0Callback+0x2a4>)
 8003dda:	211e      	movs	r1, #30
 8003ddc:	488c      	ldr	r0, [pc, #560]	@ (8004010 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8003dde:	f013 fd57 	bl	8017890 <sniprintf>
 8003de2:	4603      	mov	r3, r0
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b8b      	ldr	r3, [pc, #556]	@ (8004014 <HAL_FDCAN_RxFifo0Callback+0x2ac>)
 8003de8:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(b, ss);
 8003dea:	4b8a      	ldr	r3, [pc, #552]	@ (8004014 <HAL_FDCAN_RxFifo0Callback+0x2ac>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4887      	ldr	r0, [pc, #540]	@ (8004010 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8003df2:	f012 ffcd 	bl	8016d90 <CDC_Transmit_FS>
		  obd();
 8003df6:	f002 fb9f 	bl	8006538 <obd>
    }
    if(RxHeader.FDFormat == FDCAN_FD_CAN )
 8003dfa:	4b83      	ldr	r3, [pc, #524]	@ (8004008 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e02:	f040 8652 	bne.w	8004aaa <HAL_FDCAN_RxFifo0Callback+0xd42>
    {
    	j=1;
 8003e06:	4b84      	ldr	r3, [pc, #528]	@ (8004018 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    if (RxHeader.Identifier == 0x46)
 8003e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004008 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b46      	cmp	r3, #70	@ 0x46
 8003e12:	f040 8218 	bne.w	8004246 <HAL_FDCAN_RxFifo0Callback+0x4de>
   	    {
		  	  lcdDrawRect(0, 120, 479, 60, ILI9488_BLACK);
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	233c      	movs	r3, #60	@ 0x3c
 8003e1c:	f240 12df 	movw	r2, #479	@ 0x1df
 8003e20:	2178      	movs	r1, #120	@ 0x78
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fd fb9c 	bl	8001560 <lcdDrawRect>
		  	  fillRect(0, 120, 479, 60, ILI9488_BLACK);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	233c      	movs	r3, #60	@ 0x3c
 8003e2e:	f240 12df 	movw	r2, #479	@ 0x1df
 8003e32:	2178      	movs	r1, #120	@ 0x78
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7fc fe87 	bl	8000b48 <fillRect>
    	      s= snprintf(b,90,"--temperature--\n%02x %02x %02x %02x %02x %02x %02x %02x\n %02x %02x %02x %02x %02x %02x %02x %02x\n--end-temperature\n",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7],R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	469c      	mov	ip, r3
 8003e40:	4b70      	ldr	r3, [pc, #448]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	4618      	mov	r0, r3
 8003e46:	4b6f      	ldr	r3, [pc, #444]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e48:	789b      	ldrb	r3, [r3, #2]
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e4e:	78db      	ldrb	r3, [r3, #3]
 8003e50:	461d      	mov	r5, r3
 8003e52:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e54:	791b      	ldrb	r3, [r3, #4]
 8003e56:	461e      	mov	r6, r3
 8003e58:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e5a:	795b      	ldrb	r3, [r3, #5]
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	4b69      	ldr	r3, [pc, #420]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e60:	799b      	ldrb	r3, [r3, #6]
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	4b67      	ldr	r3, [pc, #412]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e66:	79db      	ldrb	r3, [r3, #7]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e6c:	7a1b      	ldrb	r3, [r3, #8]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	4b64      	ldr	r3, [pc, #400]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e72:	7a5b      	ldrb	r3, [r3, #9]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e78:	7a9b      	ldrb	r3, [r3, #10]
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	4b61      	ldr	r3, [pc, #388]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e7e:	7adb      	ldrb	r3, [r3, #11]
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	4b60      	ldr	r3, [pc, #384]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e84:	7b1b      	ldrb	r3, [r3, #12]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e8a:	7b5b      	ldrb	r3, [r3, #13]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e90:	7b9b      	ldrb	r3, [r3, #14]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b5b      	ldr	r3, [pc, #364]	@ (8004004 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8003e96:	7bdb      	ldrb	r3, [r3, #15]
 8003e98:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e9a:	920d      	str	r2, [sp, #52]	@ 0x34
 8003e9c:	910c      	str	r1, [sp, #48]	@ 0x30
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	920a      	str	r2, [sp, #40]	@ 0x28
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	9208      	str	r2, [sp, #32]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	9207      	str	r2, [sp, #28]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	9206      	str	r2, [sp, #24]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	9205      	str	r2, [sp, #20]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	9603      	str	r6, [sp, #12]
 8003ec0:	9502      	str	r5, [sp, #8]
 8003ec2:	9401      	str	r4, [sp, #4]
 8003ec4:	9000      	str	r0, [sp, #0]
 8003ec6:	4663      	mov	r3, ip
 8003ec8:	4a54      	ldr	r2, [pc, #336]	@ (800401c <HAL_FDCAN_RxFifo0Callback+0x2b4>)
 8003eca:	215a      	movs	r1, #90	@ 0x5a
 8003ecc:	4850      	ldr	r0, [pc, #320]	@ (8004010 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8003ece:	f013 fcdf 	bl	8017890 <sniprintf>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	4b52      	ldr	r3, [pc, #328]	@ (8004020 <HAL_FDCAN_RxFifo0Callback+0x2b8>)
 8003ed8:	701a      	strb	r2, [r3, #0]
   	   		  CDC_Transmit_FS(b, s);
 8003eda:	4b51      	ldr	r3, [pc, #324]	@ (8004020 <HAL_FDCAN_RxFifo0Callback+0x2b8>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	484b      	ldr	r0, [pc, #300]	@ (8004010 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8003ee2:	f012 ff55 	bl	8016d90 <CDC_Transmit_FS>
			  col=ILI9488_DARKCYAN;
 8003ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8004024 <HAL_FDCAN_RxFifo0Callback+0x2bc>)
 8003ee8:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8003eec:	801a      	strh	r2, [r3, #0]
	    	  if(tftfd==0)
 8003eee:	4b4e      	ldr	r3, [pc, #312]	@ (8004028 <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80b6 	bne.w	8004064 <HAL_FDCAN_RxFifo0Callback+0x2fc>
	    	  {
			  dinam(ILI9488_BLACK);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f002 f837 	bl	8005f6c <dinam>
			  Displ_CString(80,120,180,180,"FDCAN Transmission",Font24,3,ILI9488_WHITE,ILI9488_BLACK);
 8003efe:	2300      	movs	r3, #0
 8003f00:	9306      	str	r3, [sp, #24]
 8003f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	2303      	movs	r3, #3
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	4a47      	ldr	r2, [pc, #284]	@ (800402c <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003f0e:	ab01      	add	r3, sp, #4
 8003f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f16:	4b46      	ldr	r3, [pc, #280]	@ (8004030 <HAL_FDCAN_RxFifo0Callback+0x2c8>)
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	23b4      	movs	r3, #180	@ 0xb4
 8003f1c:	22b4      	movs	r2, #180	@ 0xb4
 8003f1e:	2178      	movs	r1, #120	@ 0x78
 8003f20:	2050      	movs	r0, #80	@ 0x50
 8003f22:	f7fd f917 	bl	8001154 <Displ_CString>
			  horizanim();
 8003f26:	f002 f859 	bl	8005fdc <horizanim>
			  tftfd++;
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004028 <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4a3d      	ldr	r2, [pc, #244]	@ (8004028 <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 8003f32:	6013      	str	r3, [r2, #0]
			  if(fd_speed==0)
 8003f34:	4b3f      	ldr	r3, [pc, #252]	@ (8004034 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d117      	bne.n	8003f6c <HAL_FDCAN_RxFifo0Callback+0x204>
			  {
			  sprintf(text,"FD CAN 125Kbps:");
 8003f3c:	493e      	ldr	r1, [pc, #248]	@ (8004038 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8003f3e:	483f      	ldr	r0, [pc, #252]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003f40:	f013 fcda 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8003f44:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	9204      	str	r2, [sp, #16]
 8003f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f4e:	9203      	str	r2, [sp, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	9202      	str	r2, [sp, #8]
 8003f54:	466c      	mov	r4, sp
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a36      	ldr	r2, [pc, #216]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003f64:	211e      	movs	r1, #30
 8003f66:	2014      	movs	r0, #20
 8003f68:	f7fd f8b4 	bl	80010d4 <Displ_WString>
			  }
			  if(fd_speed==1)
 8003f6c:	4b31      	ldr	r3, [pc, #196]	@ (8004034 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d117      	bne.n	8003fa4 <HAL_FDCAN_RxFifo0Callback+0x23c>
			  {
			  sprintf(text,"FD CAN 500Kbps:");
 8003f74:	4933      	ldr	r1, [pc, #204]	@ (8004044 <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003f76:	4831      	ldr	r0, [pc, #196]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003f78:	f013 fcbe 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8003f7c:	4b30      	ldr	r3, [pc, #192]	@ (8004040 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	9204      	str	r2, [sp, #16]
 8003f82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f86:	9203      	str	r2, [sp, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	466c      	mov	r4, sp
 8003f8e:	1d1a      	adds	r2, r3, #4
 8003f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f94:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a28      	ldr	r2, [pc, #160]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003f9c:	211e      	movs	r1, #30
 8003f9e:	2014      	movs	r0, #20
 8003fa0:	f7fd f898 	bl	80010d4 <Displ_WString>
			  }
			  if(fd_speed==2)
 8003fa4:	4b23      	ldr	r3, [pc, #140]	@ (8004034 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d117      	bne.n	8003fdc <HAL_FDCAN_RxFifo0Callback+0x274>
			  {
			  sprintf(text,"FD CAN 1Mbps:");
 8003fac:	4926      	ldr	r1, [pc, #152]	@ (8004048 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003fae:	4823      	ldr	r0, [pc, #140]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003fb0:	f013 fca2 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	9204      	str	r2, [sp, #16]
 8003fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fbe:	9203      	str	r2, [sp, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	9202      	str	r2, [sp, #8]
 8003fc4:	466c      	mov	r4, sp
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fcc:	e884 0003 	stmia.w	r4, {r0, r1}
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003fd4:	211e      	movs	r1, #30
 8003fd6:	2014      	movs	r0, #20
 8003fd8:	f7fd f87c 	bl	80010d4 <Displ_WString>
			  }
			  if(fd_speed==3)
 8003fdc:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d13f      	bne.n	8004064 <HAL_FDCAN_RxFifo0Callback+0x2fc>
			  {
			  sprintf(text,"FD CAN 2Mbps:");
 8003fe4:	4919      	ldr	r1, [pc, #100]	@ (800404c <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 8003fe6:	4815      	ldr	r0, [pc, #84]	@ (800403c <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003fe8:	f013 fc86 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	9204      	str	r2, [sp, #16]
 8003ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	9202      	str	r2, [sp, #8]
 8003ffc:	466c      	mov	r4, sp
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	e026      	b.n	8004050 <HAL_FDCAN_RxFifo0Callback+0x2e8>
 8004002:	bf00      	nop
 8004004:	2400226c 	.word	0x2400226c
 8004008:	240023d4 	.word	0x240023d4
 800400c:	08018d00 	.word	0x08018d00
 8004010:	240022c8 	.word	0x240022c8
 8004014:	240022c5 	.word	0x240022c5
 8004018:	240023c4 	.word	0x240023c4
 800401c:	08018d30 	.word	0x08018d30
 8004020:	240022c4 	.word	0x240022c4
 8004024:	240023d0 	.word	0x240023d0
 8004028:	24002450 	.word	0x24002450
 800402c:	24000014 	.word	0x24000014
 8004030:	08018da4 	.word	0x08018da4
 8004034:	24002458 	.word	0x24002458
 8004038:	08018db8 	.word	0x08018db8
 800403c:	24002354 	.word	0x24002354
 8004040:	24000008 	.word	0x24000008
 8004044:	08018dc8 	.word	0x08018dc8
 8004048:	08018dd8 	.word	0x08018dd8
 800404c:	08018de8 	.word	0x08018de8
 8004050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004054:	e884 0003 	stmia.w	r4, {r0, r1}
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a68      	ldr	r2, [pc, #416]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 800405c:	211e      	movs	r1, #30
 800405e:	2014      	movs	r0, #20
 8004060:	f7fd f838 	bl	80010d4 <Displ_WString>
			  }
	    	  }
	    	  if(tftfd>0)
 8004064:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <HAL_FDCAN_RxFifo0Callback+0x498>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f340 80ec 	ble.w	8004246 <HAL_FDCAN_RxFifo0Callback+0x4de>
	    	  {
			  lcdDrawRect(140, 30, 479, 4, ILI9488_BLACK);
 800406e:	2300      	movs	r3, #0
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2304      	movs	r3, #4
 8004074:	f240 12df 	movw	r2, #479	@ 0x1df
 8004078:	211e      	movs	r1, #30
 800407a:	208c      	movs	r0, #140	@ 0x8c
 800407c:	f7fd fa70 	bl	8001560 <lcdDrawRect>
			  fillRect(140, 30, 479, 40, ILI9488_BLACK);
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2328      	movs	r3, #40	@ 0x28
 8004086:	f240 12df 	movw	r2, #479	@ 0x1df
 800408a:	211e      	movs	r1, #30
 800408c:	208c      	movs	r0, #140	@ 0x8c
 800408e:	f7fc fd5b 	bl	8000b48 <fillRect>
			  sprintf(text,"Data :");
 8004092:	495c      	ldr	r1, [pc, #368]	@ (8004204 <HAL_FDCAN_RxFifo0Callback+0x49c>)
 8004094:	4859      	ldr	r0, [pc, #356]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 8004096:	f013 fc2f 	bl	80178f8 <siprintf>
			  Displ_WString(20, 60, text, Font16, 1, ILI9488_WHITE, col);
 800409a:	4b5b      	ldr	r3, [pc, #364]	@ (8004208 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	4b5b      	ldr	r3, [pc, #364]	@ (800420c <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 80040a0:	9204      	str	r2, [sp, #16]
 80040a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040a6:	9203      	str	r2, [sp, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	9202      	str	r2, [sp, #8]
 80040ac:	466c      	mov	r4, sp
 80040ae:	1d1a      	adds	r2, r3, #4
 80040b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a50      	ldr	r2, [pc, #320]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 80040bc:	213c      	movs	r1, #60	@ 0x3c
 80040be:	2014      	movs	r0, #20
 80040c0:	f7fd f808 	bl	80010d4 <Displ_WString>
			  sprintf(text,"Temperature :");
 80040c4:	4952      	ldr	r1, [pc, #328]	@ (8004210 <HAL_FDCAN_RxFifo0Callback+0x4a8>)
 80040c6:	484d      	ldr	r0, [pc, #308]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 80040c8:	f013 fc16 	bl	80178f8 <siprintf>
			  Displ_WString(160, 30, text, Font16, 1, ILI9488_WHITE, col);
 80040cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004208 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	4b4e      	ldr	r3, [pc, #312]	@ (800420c <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 80040d2:	9204      	str	r2, [sp, #16]
 80040d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	9202      	str	r2, [sp, #8]
 80040de:	466c      	mov	r4, sp
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a43      	ldr	r2, [pc, #268]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 80040ee:	211e      	movs	r1, #30
 80040f0:	20a0      	movs	r0, #160	@ 0xa0
 80040f2:	f7fc ffef 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 80040f6:	4b47      	ldr	r3, [pc, #284]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	461e      	mov	r6, r3
 80040fc:	4b45      	ldr	r3, [pc, #276]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	469c      	mov	ip, r3
 8004102:	4b44      	ldr	r3, [pc, #272]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	461a      	mov	r2, r3
 8004108:	4b42      	ldr	r3, [pc, #264]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	4619      	mov	r1, r3
 800410e:	4b41      	ldr	r3, [pc, #260]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004110:	791b      	ldrb	r3, [r3, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	4b3f      	ldr	r3, [pc, #252]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004116:	795b      	ldrb	r3, [r3, #5]
 8004118:	461c      	mov	r4, r3
 800411a:	4b3e      	ldr	r3, [pc, #248]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 800411c:	799b      	ldrb	r3, [r3, #6]
 800411e:	461d      	mov	r5, r3
 8004120:	4b3c      	ldr	r3, [pc, #240]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004122:	79db      	ldrb	r3, [r3, #7]
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	9504      	str	r5, [sp, #16]
 8004128:	9403      	str	r4, [sp, #12]
 800412a:	9002      	str	r0, [sp, #8]
 800412c:	9101      	str	r1, [sp, #4]
 800412e:	9200      	str	r2, [sp, #0]
 8004130:	4663      	mov	r3, ip
 8004132:	4632      	mov	r2, r6
 8004134:	4938      	ldr	r1, [pc, #224]	@ (8004218 <HAL_FDCAN_RxFifo0Callback+0x4b0>)
 8004136:	4831      	ldr	r0, [pc, #196]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 8004138:	f013 fbde 	bl	80178f8 <siprintf>
			  Displ_WString(90, 60, text, Font16, 1, ILI9488_WHITE, col);
 800413c:	4b32      	ldr	r3, [pc, #200]	@ (8004208 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 800413e:	881a      	ldrh	r2, [r3, #0]
 8004140:	4b32      	ldr	r3, [pc, #200]	@ (800420c <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 8004142:	9204      	str	r2, [sp, #16]
 8004144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004148:	9203      	str	r2, [sp, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	9202      	str	r2, [sp, #8]
 800414e:	466c      	mov	r4, sp
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004156:	e884 0003 	stmia.w	r4, {r0, r1}
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a27      	ldr	r2, [pc, #156]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 800415e:	213c      	movs	r1, #60	@ 0x3c
 8004160:	205a      	movs	r0, #90	@ 0x5a
 8004162:	f7fc ffb7 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 8004166:	4b2b      	ldr	r3, [pc, #172]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004168:	7a1b      	ldrb	r3, [r3, #8]
 800416a:	461e      	mov	r6, r3
 800416c:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 800416e:	7a5b      	ldrb	r3, [r3, #9]
 8004170:	469c      	mov	ip, r3
 8004172:	4b28      	ldr	r3, [pc, #160]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004174:	7a9b      	ldrb	r3, [r3, #10]
 8004176:	461a      	mov	r2, r3
 8004178:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 800417a:	7adb      	ldrb	r3, [r3, #11]
 800417c:	4619      	mov	r1, r3
 800417e:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004180:	7b1b      	ldrb	r3, [r3, #12]
 8004182:	4618      	mov	r0, r3
 8004184:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004186:	7b5b      	ldrb	r3, [r3, #13]
 8004188:	461c      	mov	r4, r3
 800418a:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 800418c:	7b9b      	ldrb	r3, [r3, #14]
 800418e:	461d      	mov	r5, r3
 8004190:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8004192:	7bdb      	ldrb	r3, [r3, #15]
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	9504      	str	r5, [sp, #16]
 8004198:	9403      	str	r4, [sp, #12]
 800419a:	9002      	str	r0, [sp, #8]
 800419c:	9101      	str	r1, [sp, #4]
 800419e:	9200      	str	r2, [sp, #0]
 80041a0:	4663      	mov	r3, ip
 80041a2:	4632      	mov	r2, r6
 80041a4:	491c      	ldr	r1, [pc, #112]	@ (8004218 <HAL_FDCAN_RxFifo0Callback+0x4b0>)
 80041a6:	4815      	ldr	r0, [pc, #84]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 80041a8:	f013 fba6 	bl	80178f8 <siprintf>
			  Displ_WString(90, 90, text, Font16, 1, ILI9488_WHITE, col);
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 80041b2:	9204      	str	r2, [sp, #16]
 80041b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041b8:	9203      	str	r2, [sp, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	9202      	str	r2, [sp, #8]
 80041be:	466c      	mov	r4, sp
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0b      	ldr	r2, [pc, #44]	@ (80041fc <HAL_FDCAN_RxFifo0Callback+0x494>)
 80041ce:	215a      	movs	r1, #90	@ 0x5a
 80041d0:	205a      	movs	r0, #90	@ 0x5a
 80041d2:	f7fc ff7f 	bl	80010d4 <Displ_WString>
			  x=380;
 80041d6:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 80041d8:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80041dc:	801a      	strh	r2, [r3, #0]
			  y=120;
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 80041e0:	2278      	movs	r2, #120	@ 0x78
 80041e2:	801a      	strh	r2, [r3, #0]
			  chronogramme();
 80041e4:	f001 ff9a 	bl	800611c <chronogramme>
			  x=380;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 80041ea:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80041ee:	801a      	strh	r2, [r3, #0]
			  y=160;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 80041f2:	22a0      	movs	r2, #160	@ 0xa0
 80041f4:	801a      	strh	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041fa:	e01f      	b.n	800423c <HAL_FDCAN_RxFifo0Callback+0x4d4>
 80041fc:	24002354 	.word	0x24002354
 8004200:	24002450 	.word	0x24002450
 8004204:	08018ba0 	.word	0x08018ba0
 8004208:	240023d0 	.word	0x240023d0
 800420c:	24000008 	.word	0x24000008
 8004210:	08018df8 	.word	0x08018df8
 8004214:	2400226c 	.word	0x2400226c
 8004218:	08018ba8 	.word	0x08018ba8
 800421c:	24000020 	.word	0x24000020
 8004220:	24000022 	.word	0x24000022
			  {
				  R[z]=R[z+8];
 8004224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004226:	3308      	adds	r3, #8
 8004228:	4aa3      	ldr	r2, [pc, #652]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800422a:	5cd1      	ldrb	r1, [r2, r3]
 800422c:	4aa2      	ldr	r2, [pc, #648]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800422e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004230:	4413      	add	r3, r2
 8004232:	460a      	mov	r2, r1
 8004234:	701a      	strb	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 8004236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004238:	3301      	adds	r3, #1
 800423a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800423c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800423e:	2b07      	cmp	r3, #7
 8004240:	ddf0      	ble.n	8004224 <HAL_FDCAN_RxFifo0Callback+0x4bc>
	    	  }
			  chronogramme();
 8004242:	f001 ff6b 	bl	800611c <chronogramme>
    	  }
   	    }
        if (RxHeader.Identifier == 0x33 )
 8004246:	4b9d      	ldr	r3, [pc, #628]	@ (80044bc <HAL_FDCAN_RxFifo0Callback+0x754>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b33      	cmp	r3, #51	@ 0x33
 800424c:	f040 8160 	bne.w	8004510 <HAL_FDCAN_RxFifo0Callback+0x7a8>
   	    {
		  	  lcdDrawRect(0, 120, 479, 60, ILI9488_BLACK);
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	233c      	movs	r3, #60	@ 0x3c
 8004256:	f240 12df 	movw	r2, #479	@ 0x1df
 800425a:	2178      	movs	r1, #120	@ 0x78
 800425c:	2000      	movs	r0, #0
 800425e:	f7fd f97f 	bl	8001560 <lcdDrawRect>
		  	  fillRect(0, 120, 479, 60, ILI9488_BLACK);
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	233c      	movs	r3, #60	@ 0x3c
 8004268:	f240 12df 	movw	r2, #479	@ 0x1df
 800426c:	2178      	movs	r1, #120	@ 0x78
 800426e:	2000      	movs	r0, #0
 8004270:	f7fc fc6a 	bl	8000b48 <fillRect>
		  	  lcdDrawRect(140, 30, 479, 4, ILI9488_BLACK);
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2304      	movs	r3, #4
 800427a:	f240 12df 	movw	r2, #479	@ 0x1df
 800427e:	211e      	movs	r1, #30
 8004280:	208c      	movs	r0, #140	@ 0x8c
 8004282:	f7fd f96d 	bl	8001560 <lcdDrawRect>
		  	  fillRect(140, 30, 479, 40, ILI9488_BLACK);
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2328      	movs	r3, #40	@ 0x28
 800428c:	f240 12df 	movw	r2, #479	@ 0x1df
 8004290:	211e      	movs	r1, #30
 8004292:	208c      	movs	r0, #140	@ 0x8c
 8004294:	f7fc fc58 	bl	8000b48 <fillRect>
   		   	  s= snprintf(b,80,"---Pression--\n%02x %02x %02x %02x %02x %02x %02x %02x\n %02x %02x %02x %02x %02x %02x %02x %02x\n--end-Pression--\n",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7],R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 8004298:	4b87      	ldr	r3, [pc, #540]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	469c      	mov	ip, r3
 800429e:	4b86      	ldr	r3, [pc, #536]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	4618      	mov	r0, r3
 80042a4:	4b84      	ldr	r3, [pc, #528]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042a6:	789b      	ldrb	r3, [r3, #2]
 80042a8:	461c      	mov	r4, r3
 80042aa:	4b83      	ldr	r3, [pc, #524]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	461d      	mov	r5, r3
 80042b0:	4b81      	ldr	r3, [pc, #516]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	461e      	mov	r6, r3
 80042b6:	4b80      	ldr	r3, [pc, #512]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042b8:	795b      	ldrb	r3, [r3, #5]
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	4b7e      	ldr	r3, [pc, #504]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042be:	799b      	ldrb	r3, [r3, #6]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	4b7d      	ldr	r3, [pc, #500]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042c4:	79db      	ldrb	r3, [r3, #7]
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	4b7b      	ldr	r3, [pc, #492]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042ca:	7a1b      	ldrb	r3, [r3, #8]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	4b7a      	ldr	r3, [pc, #488]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042d0:	7a5b      	ldrb	r3, [r3, #9]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	4b78      	ldr	r3, [pc, #480]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042d6:	7a9b      	ldrb	r3, [r3, #10]
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	4b77      	ldr	r3, [pc, #476]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042dc:	7adb      	ldrb	r3, [r3, #11]
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	4b75      	ldr	r3, [pc, #468]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042e2:	7b1b      	ldrb	r3, [r3, #12]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	4b74      	ldr	r3, [pc, #464]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042e8:	7b5b      	ldrb	r3, [r3, #13]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4b72      	ldr	r3, [pc, #456]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042ee:	7b9b      	ldrb	r3, [r3, #14]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b71      	ldr	r3, [pc, #452]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80042f4:	7bdb      	ldrb	r3, [r3, #15]
 80042f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80042f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80042fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	920a      	str	r2, [sp, #40]	@ 0x28
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	9209      	str	r2, [sp, #36]	@ 0x24
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	9208      	str	r2, [sp, #32]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	9207      	str	r2, [sp, #28]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	9206      	str	r2, [sp, #24]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	9205      	str	r2, [sp, #20]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	9603      	str	r6, [sp, #12]
 800431e:	9502      	str	r5, [sp, #8]
 8004320:	9401      	str	r4, [sp, #4]
 8004322:	9000      	str	r0, [sp, #0]
 8004324:	4663      	mov	r3, ip
 8004326:	4a66      	ldr	r2, [pc, #408]	@ (80044c0 <HAL_FDCAN_RxFifo0Callback+0x758>)
 8004328:	2150      	movs	r1, #80	@ 0x50
 800432a:	4866      	ldr	r0, [pc, #408]	@ (80044c4 <HAL_FDCAN_RxFifo0Callback+0x75c>)
 800432c:	f013 fab0 	bl	8017890 <sniprintf>
 8004330:	4603      	mov	r3, r0
 8004332:	b2da      	uxtb	r2, r3
 8004334:	4b64      	ldr	r3, [pc, #400]	@ (80044c8 <HAL_FDCAN_RxFifo0Callback+0x760>)
 8004336:	701a      	strb	r2, [r3, #0]
   		   	  CDC_Transmit_FS(b, s);
 8004338:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_FDCAN_RxFifo0Callback+0x760>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	4861      	ldr	r0, [pc, #388]	@ (80044c4 <HAL_FDCAN_RxFifo0Callback+0x75c>)
 8004340:	f012 fd26 	bl	8016d90 <CDC_Transmit_FS>
			  col=ILI9488_GREEN;
 8004344:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_FDCAN_RxFifo0Callback+0x764>)
 8004346:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800434a:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 800434c:	4960      	ldr	r1, [pc, #384]	@ (80044d0 <HAL_FDCAN_RxFifo0Callback+0x768>)
 800434e:	4861      	ldr	r0, [pc, #388]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004350:	f013 fad2 	bl	80178f8 <siprintf>
			  Displ_WString(20, 60, text, Font16, 1, ILI9488_WHITE, col);
 8004354:	4b5d      	ldr	r3, [pc, #372]	@ (80044cc <HAL_FDCAN_RxFifo0Callback+0x764>)
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	4b5f      	ldr	r3, [pc, #380]	@ (80044d8 <HAL_FDCAN_RxFifo0Callback+0x770>)
 800435a:	9204      	str	r2, [sp, #16]
 800435c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004360:	9203      	str	r2, [sp, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	9202      	str	r2, [sp, #8]
 8004366:	466c      	mov	r4, sp
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800436e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a57      	ldr	r2, [pc, #348]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004376:	213c      	movs	r1, #60	@ 0x3c
 8004378:	2014      	movs	r0, #20
 800437a:	f7fc feab 	bl	80010d4 <Displ_WString>
			  sprintf(text,"Pression :");
 800437e:	4957      	ldr	r1, [pc, #348]	@ (80044dc <HAL_FDCAN_RxFifo0Callback+0x774>)
 8004380:	4854      	ldr	r0, [pc, #336]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004382:	f013 fab9 	bl	80178f8 <siprintf>
			  Displ_WString(160, 30, text, Font16, 1, ILI9488_WHITE, col);
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <HAL_FDCAN_RxFifo0Callback+0x764>)
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	4b53      	ldr	r3, [pc, #332]	@ (80044d8 <HAL_FDCAN_RxFifo0Callback+0x770>)
 800438c:	9204      	str	r2, [sp, #16]
 800438e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	9202      	str	r2, [sp, #8]
 8004398:	466c      	mov	r4, sp
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a4b      	ldr	r2, [pc, #300]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 80043a8:	211e      	movs	r1, #30
 80043aa:	20a0      	movs	r0, #160	@ 0xa0
 80043ac:	f7fc fe92 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 80043b0:	4b41      	ldr	r3, [pc, #260]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461e      	mov	r6, r3
 80043b6:	4b40      	ldr	r3, [pc, #256]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	469c      	mov	ip, r3
 80043bc:	4b3e      	ldr	r3, [pc, #248]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043be:	789b      	ldrb	r3, [r3, #2]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b3d      	ldr	r3, [pc, #244]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043c4:	78db      	ldrb	r3, [r3, #3]
 80043c6:	4619      	mov	r1, r3
 80043c8:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043d0:	795b      	ldrb	r3, [r3, #5]
 80043d2:	461c      	mov	r4, r3
 80043d4:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043d6:	799b      	ldrb	r3, [r3, #6]
 80043d8:	461d      	mov	r5, r3
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 80043dc:	79db      	ldrb	r3, [r3, #7]
 80043de:	9305      	str	r3, [sp, #20]
 80043e0:	9504      	str	r5, [sp, #16]
 80043e2:	9403      	str	r4, [sp, #12]
 80043e4:	9002      	str	r0, [sp, #8]
 80043e6:	9101      	str	r1, [sp, #4]
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	4663      	mov	r3, ip
 80043ec:	4632      	mov	r2, r6
 80043ee:	493c      	ldr	r1, [pc, #240]	@ (80044e0 <HAL_FDCAN_RxFifo0Callback+0x778>)
 80043f0:	4838      	ldr	r0, [pc, #224]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 80043f2:	f013 fa81 	bl	80178f8 <siprintf>
			  Displ_WString(90, 60, text, Font16, 1, ILI9488_WHITE, col);
 80043f6:	4b35      	ldr	r3, [pc, #212]	@ (80044cc <HAL_FDCAN_RxFifo0Callback+0x764>)
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_FDCAN_RxFifo0Callback+0x770>)
 80043fc:	9204      	str	r2, [sp, #16]
 80043fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004402:	9203      	str	r2, [sp, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	9202      	str	r2, [sp, #8]
 8004408:	466c      	mov	r4, sp
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004410:	e884 0003 	stmia.w	r4, {r0, r1}
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2f      	ldr	r2, [pc, #188]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004418:	213c      	movs	r1, #60	@ 0x3c
 800441a:	205a      	movs	r0, #90	@ 0x5a
 800441c:	f7fc fe5a 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 8004420:	4b25      	ldr	r3, [pc, #148]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 8004422:	7a1b      	ldrb	r3, [r3, #8]
 8004424:	461e      	mov	r6, r3
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 8004428:	7a5b      	ldrb	r3, [r3, #9]
 800442a:	469c      	mov	ip, r3
 800442c:	4b22      	ldr	r3, [pc, #136]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800442e:	7a9b      	ldrb	r3, [r3, #10]
 8004430:	461a      	mov	r2, r3
 8004432:	4b21      	ldr	r3, [pc, #132]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 8004434:	7adb      	ldrb	r3, [r3, #11]
 8004436:	4619      	mov	r1, r3
 8004438:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800443a:	7b1b      	ldrb	r3, [r3, #12]
 800443c:	4618      	mov	r0, r3
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 8004440:	7b5b      	ldrb	r3, [r3, #13]
 8004442:	461c      	mov	r4, r3
 8004444:	4b1c      	ldr	r3, [pc, #112]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 8004446:	7b9b      	ldrb	r3, [r3, #14]
 8004448:	461d      	mov	r5, r3
 800444a:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_FDCAN_RxFifo0Callback+0x750>)
 800444c:	7bdb      	ldrb	r3, [r3, #15]
 800444e:	9305      	str	r3, [sp, #20]
 8004450:	9504      	str	r5, [sp, #16]
 8004452:	9403      	str	r4, [sp, #12]
 8004454:	9002      	str	r0, [sp, #8]
 8004456:	9101      	str	r1, [sp, #4]
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	4663      	mov	r3, ip
 800445c:	4632      	mov	r2, r6
 800445e:	4920      	ldr	r1, [pc, #128]	@ (80044e0 <HAL_FDCAN_RxFifo0Callback+0x778>)
 8004460:	481c      	ldr	r0, [pc, #112]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004462:	f013 fa49 	bl	80178f8 <siprintf>
			  Displ_WString(90, 90, text, Font16, 1, ILI9488_WHITE, col);
 8004466:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <HAL_FDCAN_RxFifo0Callback+0x764>)
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_FDCAN_RxFifo0Callback+0x770>)
 800446c:	9204      	str	r2, [sp, #16]
 800446e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004472:	9203      	str	r2, [sp, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	9202      	str	r2, [sp, #8]
 8004478:	466c      	mov	r4, sp
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004480:	e884 0003 	stmia.w	r4, {r0, r1}
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a13      	ldr	r2, [pc, #76]	@ (80044d4 <HAL_FDCAN_RxFifo0Callback+0x76c>)
 8004488:	215a      	movs	r1, #90	@ 0x5a
 800448a:	205a      	movs	r0, #90	@ 0x5a
 800448c:	f7fc fe22 	bl	80010d4 <Displ_WString>
			  x=380;
 8004490:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <HAL_FDCAN_RxFifo0Callback+0x77c>)
 8004492:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004496:	801a      	strh	r2, [r3, #0]
			  y=120;
 8004498:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <HAL_FDCAN_RxFifo0Callback+0x780>)
 800449a:	2278      	movs	r2, #120	@ 0x78
 800449c:	801a      	strh	r2, [r3, #0]
			  chronogramme();
 800449e:	f001 fe3d 	bl	800611c <chronogramme>
			  x=380;
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_FDCAN_RxFifo0Callback+0x77c>)
 80044a4:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80044a8:	801a      	strh	r2, [r3, #0]
			  y=160;
 80044aa:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <HAL_FDCAN_RxFifo0Callback+0x780>)
 80044ac:	22a0      	movs	r2, #160	@ 0xa0
 80044ae:	801a      	strh	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b4:	e01a      	b.n	80044ec <HAL_FDCAN_RxFifo0Callback+0x784>
 80044b6:	bf00      	nop
 80044b8:	2400226c 	.word	0x2400226c
 80044bc:	240023d4 	.word	0x240023d4
 80044c0:	08018e08 	.word	0x08018e08
 80044c4:	240022c8 	.word	0x240022c8
 80044c8:	240022c4 	.word	0x240022c4
 80044cc:	240023d0 	.word	0x240023d0
 80044d0:	08018ba0 	.word	0x08018ba0
 80044d4:	24002354 	.word	0x24002354
 80044d8:	24000008 	.word	0x24000008
 80044dc:	08018e7c 	.word	0x08018e7c
 80044e0:	08018ba8 	.word	0x08018ba8
 80044e4:	24000020 	.word	0x24000020
 80044e8:	24000022 	.word	0x24000022
 80044ec:	e00b      	b.n	8004506 <HAL_FDCAN_RxFifo0Callback+0x79e>
			  {
				  R[z]=R[z+8];
 80044ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f0:	3308      	adds	r3, #8
 80044f2:	4aa3      	ldr	r2, [pc, #652]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80044f4:	5cd1      	ldrb	r1, [r2, r3]
 80044f6:	4aa2      	ldr	r2, [pc, #648]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80044f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fa:	4413      	add	r3, r2
 80044fc:	460a      	mov	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 8004500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004502:	3301      	adds	r3, #1
 8004504:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004508:	2b07      	cmp	r3, #7
 800450a:	ddf0      	ble.n	80044ee <HAL_FDCAN_RxFifo0Callback+0x786>
	    	  }
			  chronogramme();
 800450c:	f001 fe06 	bl	800611c <chronogramme>
   	    }
        if (RxHeader.Identifier == 0x13)
 8004510:	4b9c      	ldr	r3, [pc, #624]	@ (8004784 <HAL_FDCAN_RxFifo0Callback+0xa1c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b13      	cmp	r3, #19
 8004516:	f040 815f 	bne.w	80047d8 <HAL_FDCAN_RxFifo0Callback+0xa70>
   	    {
		  	  lcdDrawRect(0, 120, 479, 60, ILI9488_BLACK);
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	233c      	movs	r3, #60	@ 0x3c
 8004520:	f240 12df 	movw	r2, #479	@ 0x1df
 8004524:	2178      	movs	r1, #120	@ 0x78
 8004526:	2000      	movs	r0, #0
 8004528:	f7fd f81a 	bl	8001560 <lcdDrawRect>
		  	  fillRect(0, 120, 479, 60, ILI9488_BLACK);
 800452c:	2300      	movs	r3, #0
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	233c      	movs	r3, #60	@ 0x3c
 8004532:	f240 12df 	movw	r2, #479	@ 0x1df
 8004536:	2178      	movs	r1, #120	@ 0x78
 8004538:	2000      	movs	r0, #0
 800453a:	f7fc fb05 	bl	8000b48 <fillRect>
		  	  lcdDrawRect(140, 30, 479, 4, ILI9488_BLACK);
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2304      	movs	r3, #4
 8004544:	f240 12df 	movw	r2, #479	@ 0x1df
 8004548:	211e      	movs	r1, #30
 800454a:	208c      	movs	r0, #140	@ 0x8c
 800454c:	f7fd f808 	bl	8001560 <lcdDrawRect>
		  	  fillRect(140, 30, 479, 40, ILI9488_BLACK);
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2328      	movs	r3, #40	@ 0x28
 8004556:	f240 12df 	movw	r2, #479	@ 0x1df
 800455a:	211e      	movs	r1, #30
 800455c:	208c      	movs	r0, #140	@ 0x8c
 800455e:	f7fc faf3 	bl	8000b48 <fillRect>
			  s= snprintf(b,80,"---lumiere--\n%02x %02x %02x %02x %02x %02x %02x %02x\n %02x %02x %02x %02x %02x %02x %02x %02x\n--end-lumiere\n",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7],R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 8004562:	4b87      	ldr	r3, [pc, #540]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	469c      	mov	ip, r3
 8004568:	4b85      	ldr	r3, [pc, #532]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	4618      	mov	r0, r3
 800456e:	4b84      	ldr	r3, [pc, #528]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004570:	789b      	ldrb	r3, [r3, #2]
 8004572:	461c      	mov	r4, r3
 8004574:	4b82      	ldr	r3, [pc, #520]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004576:	78db      	ldrb	r3, [r3, #3]
 8004578:	461d      	mov	r5, r3
 800457a:	4b81      	ldr	r3, [pc, #516]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800457c:	791b      	ldrb	r3, [r3, #4]
 800457e:	461e      	mov	r6, r3
 8004580:	4b7f      	ldr	r3, [pc, #508]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004582:	795b      	ldrb	r3, [r3, #5]
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	4b7e      	ldr	r3, [pc, #504]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004588:	799b      	ldrb	r3, [r3, #6]
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800458e:	79db      	ldrb	r3, [r3, #7]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	4b7b      	ldr	r3, [pc, #492]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004594:	7a1b      	ldrb	r3, [r3, #8]
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	4b79      	ldr	r3, [pc, #484]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800459a:	7a5b      	ldrb	r3, [r3, #9]
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	4b78      	ldr	r3, [pc, #480]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045a0:	7a9b      	ldrb	r3, [r3, #10]
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	4b76      	ldr	r3, [pc, #472]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045a6:	7adb      	ldrb	r3, [r3, #11]
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	4b75      	ldr	r3, [pc, #468]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045ac:	7b1b      	ldrb	r3, [r3, #12]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4b73      	ldr	r3, [pc, #460]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045b2:	7b5b      	ldrb	r3, [r3, #13]
 80045b4:	4619      	mov	r1, r3
 80045b6:	4b72      	ldr	r3, [pc, #456]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045b8:	7b9b      	ldrb	r3, [r3, #14]
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b70      	ldr	r3, [pc, #448]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80045be:	7bdb      	ldrb	r3, [r3, #15]
 80045c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80045c2:	920d      	str	r2, [sp, #52]	@ 0x34
 80045c4:	910c      	str	r1, [sp, #48]	@ 0x30
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	9208      	str	r2, [sp, #32]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	9207      	str	r2, [sp, #28]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	9206      	str	r2, [sp, #24]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	9205      	str	r2, [sp, #20]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	9603      	str	r6, [sp, #12]
 80045e8:	9502      	str	r5, [sp, #8]
 80045ea:	9401      	str	r4, [sp, #4]
 80045ec:	9000      	str	r0, [sp, #0]
 80045ee:	4663      	mov	r3, ip
 80045f0:	4a65      	ldr	r2, [pc, #404]	@ (8004788 <HAL_FDCAN_RxFifo0Callback+0xa20>)
 80045f2:	2150      	movs	r1, #80	@ 0x50
 80045f4:	4865      	ldr	r0, [pc, #404]	@ (800478c <HAL_FDCAN_RxFifo0Callback+0xa24>)
 80045f6:	f013 f94b 	bl	8017890 <sniprintf>
 80045fa:	4603      	mov	r3, r0
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b64      	ldr	r3, [pc, #400]	@ (8004790 <HAL_FDCAN_RxFifo0Callback+0xa28>)
 8004600:	701a      	strb	r2, [r3, #0]
			  CDC_Transmit_FS(b, s);
 8004602:	4b63      	ldr	r3, [pc, #396]	@ (8004790 <HAL_FDCAN_RxFifo0Callback+0xa28>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	4860      	ldr	r0, [pc, #384]	@ (800478c <HAL_FDCAN_RxFifo0Callback+0xa24>)
 800460a:	f012 fbc1 	bl	8016d90 <CDC_Transmit_FS>
			  col=ILI9488_MAROON;
 800460e:	4b61      	ldr	r3, [pc, #388]	@ (8004794 <HAL_FDCAN_RxFifo0Callback+0xa2c>)
 8004610:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8004614:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8004616:	4960      	ldr	r1, [pc, #384]	@ (8004798 <HAL_FDCAN_RxFifo0Callback+0xa30>)
 8004618:	4860      	ldr	r0, [pc, #384]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 800461a:	f013 f96d 	bl	80178f8 <siprintf>
			  Displ_WString(20, 60, text, Font16, 1, ILI9488_WHITE, col);
 800461e:	4b5d      	ldr	r3, [pc, #372]	@ (8004794 <HAL_FDCAN_RxFifo0Callback+0xa2c>)
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	4b5f      	ldr	r3, [pc, #380]	@ (80047a0 <HAL_FDCAN_RxFifo0Callback+0xa38>)
 8004624:	9204      	str	r2, [sp, #16]
 8004626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800462a:	9203      	str	r2, [sp, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	9202      	str	r2, [sp, #8]
 8004630:	466c      	mov	r4, sp
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004638:	e884 0003 	stmia.w	r4, {r0, r1}
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a57      	ldr	r2, [pc, #348]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 8004640:	213c      	movs	r1, #60	@ 0x3c
 8004642:	2014      	movs	r0, #20
 8004644:	f7fc fd46 	bl	80010d4 <Displ_WString>
			  sprintf(text,"lumiere :");
 8004648:	4956      	ldr	r1, [pc, #344]	@ (80047a4 <HAL_FDCAN_RxFifo0Callback+0xa3c>)
 800464a:	4854      	ldr	r0, [pc, #336]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 800464c:	f013 f954 	bl	80178f8 <siprintf>
			  Displ_WString(160, 30, text, Font16, 1, ILI9488_WHITE, col);
 8004650:	4b50      	ldr	r3, [pc, #320]	@ (8004794 <HAL_FDCAN_RxFifo0Callback+0xa2c>)
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	4b52      	ldr	r3, [pc, #328]	@ (80047a0 <HAL_FDCAN_RxFifo0Callback+0xa38>)
 8004656:	9204      	str	r2, [sp, #16]
 8004658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800465c:	9203      	str	r2, [sp, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	9202      	str	r2, [sp, #8]
 8004662:	466c      	mov	r4, sp
 8004664:	1d1a      	adds	r2, r3, #4
 8004666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800466a:	e884 0003 	stmia.w	r4, {r0, r1}
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4a      	ldr	r2, [pc, #296]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 8004672:	211e      	movs	r1, #30
 8004674:	20a0      	movs	r0, #160	@ 0xa0
 8004676:	f7fc fd2d 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 800467a:	4b41      	ldr	r3, [pc, #260]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461e      	mov	r6, r3
 8004680:	4b3f      	ldr	r3, [pc, #252]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	469c      	mov	ip, r3
 8004686:	4b3e      	ldr	r3, [pc, #248]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	461a      	mov	r2, r3
 800468c:	4b3c      	ldr	r3, [pc, #240]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800468e:	78db      	ldrb	r3, [r3, #3]
 8004690:	4619      	mov	r1, r3
 8004692:	4b3b      	ldr	r3, [pc, #236]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004694:	791b      	ldrb	r3, [r3, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800469a:	795b      	ldrb	r3, [r3, #5]
 800469c:	461c      	mov	r4, r3
 800469e:	4b38      	ldr	r3, [pc, #224]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046a0:	799b      	ldrb	r3, [r3, #6]
 80046a2:	461d      	mov	r5, r3
 80046a4:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046a6:	79db      	ldrb	r3, [r3, #7]
 80046a8:	9305      	str	r3, [sp, #20]
 80046aa:	9504      	str	r5, [sp, #16]
 80046ac:	9403      	str	r4, [sp, #12]
 80046ae:	9002      	str	r0, [sp, #8]
 80046b0:	9101      	str	r1, [sp, #4]
 80046b2:	9200      	str	r2, [sp, #0]
 80046b4:	4663      	mov	r3, ip
 80046b6:	4632      	mov	r2, r6
 80046b8:	493b      	ldr	r1, [pc, #236]	@ (80047a8 <HAL_FDCAN_RxFifo0Callback+0xa40>)
 80046ba:	4838      	ldr	r0, [pc, #224]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 80046bc:	f013 f91c 	bl	80178f8 <siprintf>
			  Displ_WString(90, 60, text, Font16, 1, ILI9488_WHITE, col);
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_FDCAN_RxFifo0Callback+0xa2c>)
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	4b36      	ldr	r3, [pc, #216]	@ (80047a0 <HAL_FDCAN_RxFifo0Callback+0xa38>)
 80046c6:	9204      	str	r2, [sp, #16]
 80046c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046cc:	9203      	str	r2, [sp, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	9202      	str	r2, [sp, #8]
 80046d2:	466c      	mov	r4, sp
 80046d4:	1d1a      	adds	r2, r3, #4
 80046d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046da:	e884 0003 	stmia.w	r4, {r0, r1}
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2e      	ldr	r2, [pc, #184]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 80046e2:	213c      	movs	r1, #60	@ 0x3c
 80046e4:	205a      	movs	r0, #90	@ 0x5a
 80046e6:	f7fc fcf5 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 80046ea:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046ec:	7a1b      	ldrb	r3, [r3, #8]
 80046ee:	461e      	mov	r6, r3
 80046f0:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046f2:	7a5b      	ldrb	r3, [r3, #9]
 80046f4:	469c      	mov	ip, r3
 80046f6:	4b22      	ldr	r3, [pc, #136]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046f8:	7a9b      	ldrb	r3, [r3, #10]
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 80046fe:	7adb      	ldrb	r3, [r3, #11]
 8004700:	4619      	mov	r1, r3
 8004702:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004704:	7b1b      	ldrb	r3, [r3, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 800470a:	7b5b      	ldrb	r3, [r3, #13]
 800470c:	461c      	mov	r4, r3
 800470e:	4b1c      	ldr	r3, [pc, #112]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004710:	7b9b      	ldrb	r3, [r3, #14]
 8004712:	461d      	mov	r5, r3
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <HAL_FDCAN_RxFifo0Callback+0xa18>)
 8004716:	7bdb      	ldrb	r3, [r3, #15]
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	9504      	str	r5, [sp, #16]
 800471c:	9403      	str	r4, [sp, #12]
 800471e:	9002      	str	r0, [sp, #8]
 8004720:	9101      	str	r1, [sp, #4]
 8004722:	9200      	str	r2, [sp, #0]
 8004724:	4663      	mov	r3, ip
 8004726:	4632      	mov	r2, r6
 8004728:	491f      	ldr	r1, [pc, #124]	@ (80047a8 <HAL_FDCAN_RxFifo0Callback+0xa40>)
 800472a:	481c      	ldr	r0, [pc, #112]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 800472c:	f013 f8e4 	bl	80178f8 <siprintf>
			  Displ_WString(90, 90, text, Font16, 1, ILI9488_WHITE, col);
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <HAL_FDCAN_RxFifo0Callback+0xa2c>)
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <HAL_FDCAN_RxFifo0Callback+0xa38>)
 8004736:	9204      	str	r2, [sp, #16]
 8004738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800473c:	9203      	str	r2, [sp, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	9202      	str	r2, [sp, #8]
 8004742:	466c      	mov	r4, sp
 8004744:	1d1a      	adds	r2, r3, #4
 8004746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800474a:	e884 0003 	stmia.w	r4, {r0, r1}
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a12      	ldr	r2, [pc, #72]	@ (800479c <HAL_FDCAN_RxFifo0Callback+0xa34>)
 8004752:	215a      	movs	r1, #90	@ 0x5a
 8004754:	205a      	movs	r0, #90	@ 0x5a
 8004756:	f7fc fcbd 	bl	80010d4 <Displ_WString>
			  x=380;
 800475a:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <HAL_FDCAN_RxFifo0Callback+0xa44>)
 800475c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004760:	801a      	strh	r2, [r3, #0]
			  y=120;
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <HAL_FDCAN_RxFifo0Callback+0xa48>)
 8004764:	2278      	movs	r2, #120	@ 0x78
 8004766:	801a      	strh	r2, [r3, #0]
			  chronogramme();
 8004768:	f001 fcd8 	bl	800611c <chronogramme>
			  x=380;
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <HAL_FDCAN_RxFifo0Callback+0xa44>)
 800476e:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004772:	801a      	strh	r2, [r3, #0]
			  y=160;
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <HAL_FDCAN_RxFifo0Callback+0xa48>)
 8004776:	22a0      	movs	r2, #160	@ 0xa0
 8004778:	801a      	strh	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 800477a:	2300      	movs	r3, #0
 800477c:	657b      	str	r3, [r7, #84]	@ 0x54
 800477e:	e019      	b.n	80047b4 <HAL_FDCAN_RxFifo0Callback+0xa4c>
 8004780:	2400226c 	.word	0x2400226c
 8004784:	240023d4 	.word	0x240023d4
 8004788:	08018e88 	.word	0x08018e88
 800478c:	240022c8 	.word	0x240022c8
 8004790:	240022c4 	.word	0x240022c4
 8004794:	240023d0 	.word	0x240023d0
 8004798:	08018ba0 	.word	0x08018ba0
 800479c:	24002354 	.word	0x24002354
 80047a0:	24000008 	.word	0x24000008
 80047a4:	08018ef8 	.word	0x08018ef8
 80047a8:	08018ba8 	.word	0x08018ba8
 80047ac:	24000020 	.word	0x24000020
 80047b0:	24000022 	.word	0x24000022
 80047b4:	e00b      	b.n	80047ce <HAL_FDCAN_RxFifo0Callback+0xa66>
			  {
				  R[z]=R[z+8];
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	3308      	adds	r3, #8
 80047ba:	4aa3      	ldr	r2, [pc, #652]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80047bc:	5cd1      	ldrb	r1, [r2, r3]
 80047be:	4aa2      	ldr	r2, [pc, #648]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80047c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c2:	4413      	add	r3, r2
 80047c4:	460a      	mov	r2, r1
 80047c6:	701a      	strb	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 80047c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ca:	3301      	adds	r3, #1
 80047cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d0:	2b07      	cmp	r3, #7
 80047d2:	ddf0      	ble.n	80047b6 <HAL_FDCAN_RxFifo0Callback+0xa4e>
	    	  }
			  chronogramme();
 80047d4:	f001 fca2 	bl	800611c <chronogramme>
   	    }
        if (RxHeader.Identifier == 0x53)
 80047d8:	4b9c      	ldr	r3, [pc, #624]	@ (8004a4c <HAL_FDCAN_RxFifo0Callback+0xce4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b53      	cmp	r3, #83	@ 0x53
 80047de:	f040 8164 	bne.w	8004aaa <HAL_FDCAN_RxFifo0Callback+0xd42>
   	    {
		  	  lcdDrawRect(0, 120, 479, 60, ILI9488_BLACK);
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	233c      	movs	r3, #60	@ 0x3c
 80047e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80047ec:	2178      	movs	r1, #120	@ 0x78
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7fc feb6 	bl	8001560 <lcdDrawRect>
		  	  fillRect(0, 120, 479, 60, ILI9488_BLACK);
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	233c      	movs	r3, #60	@ 0x3c
 80047fa:	f240 12df 	movw	r2, #479	@ 0x1df
 80047fe:	2178      	movs	r1, #120	@ 0x78
 8004800:	2000      	movs	r0, #0
 8004802:	f7fc f9a1 	bl	8000b48 <fillRect>
		  	  lcdDrawRect(140, 30, 479, 4, ILI9488_BLACK);
 8004806:	2300      	movs	r3, #0
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2304      	movs	r3, #4
 800480c:	f240 12df 	movw	r2, #479	@ 0x1df
 8004810:	211e      	movs	r1, #30
 8004812:	208c      	movs	r0, #140	@ 0x8c
 8004814:	f7fc fea4 	bl	8001560 <lcdDrawRect>
		  	  fillRect(140, 30, 479, 40, ILI9488_BLACK);
 8004818:	2300      	movs	r3, #0
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2328      	movs	r3, #40	@ 0x28
 800481e:	f240 12df 	movw	r2, #479	@ 0x1df
 8004822:	211e      	movs	r1, #30
 8004824:	208c      	movs	r0, #140	@ 0x8c
 8004826:	f7fc f98f 	bl	8000b48 <fillRect>
   		   	  s= snprintf(b,80,"---ABS--\n%02x %02x %02x %02x %02x %02x %02x %02x\n %02x %02x %02x %02x %02x %02x %02x %02x\n--end-ABS\n",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7],R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 800482a:	4b87      	ldr	r3, [pc, #540]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	469c      	mov	ip, r3
 8004830:	4b85      	ldr	r3, [pc, #532]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	4618      	mov	r0, r3
 8004836:	4b84      	ldr	r3, [pc, #528]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004838:	789b      	ldrb	r3, [r3, #2]
 800483a:	461c      	mov	r4, r3
 800483c:	4b82      	ldr	r3, [pc, #520]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800483e:	78db      	ldrb	r3, [r3, #3]
 8004840:	461d      	mov	r5, r3
 8004842:	4b81      	ldr	r3, [pc, #516]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004844:	791b      	ldrb	r3, [r3, #4]
 8004846:	461e      	mov	r6, r3
 8004848:	4b7f      	ldr	r3, [pc, #508]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800484a:	795b      	ldrb	r3, [r3, #5]
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004850:	799b      	ldrb	r3, [r3, #6]
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	4b7c      	ldr	r3, [pc, #496]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004856:	79db      	ldrb	r3, [r3, #7]
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800485c:	7a1b      	ldrb	r3, [r3, #8]
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	4b79      	ldr	r3, [pc, #484]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004862:	7a5b      	ldrb	r3, [r3, #9]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4b78      	ldr	r3, [pc, #480]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004868:	7a9b      	ldrb	r3, [r3, #10]
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	4b76      	ldr	r3, [pc, #472]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800486e:	7adb      	ldrb	r3, [r3, #11]
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	4b75      	ldr	r3, [pc, #468]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	4b73      	ldr	r3, [pc, #460]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800487a:	7b5b      	ldrb	r3, [r3, #13]
 800487c:	4619      	mov	r1, r3
 800487e:	4b72      	ldr	r3, [pc, #456]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004880:	7b9b      	ldrb	r3, [r3, #14]
 8004882:	461a      	mov	r2, r3
 8004884:	4b70      	ldr	r3, [pc, #448]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004886:	7bdb      	ldrb	r3, [r3, #15]
 8004888:	930e      	str	r3, [sp, #56]	@ 0x38
 800488a:	920d      	str	r2, [sp, #52]	@ 0x34
 800488c:	910c      	str	r1, [sp, #48]	@ 0x30
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	920a      	str	r2, [sp, #40]	@ 0x28
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	9209      	str	r2, [sp, #36]	@ 0x24
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	9208      	str	r2, [sp, #32]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	9207      	str	r2, [sp, #28]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	9206      	str	r2, [sp, #24]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	9205      	str	r2, [sp, #20]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9603      	str	r6, [sp, #12]
 80048b0:	9502      	str	r5, [sp, #8]
 80048b2:	9401      	str	r4, [sp, #4]
 80048b4:	9000      	str	r0, [sp, #0]
 80048b6:	4663      	mov	r3, ip
 80048b8:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_FDCAN_RxFifo0Callback+0xce8>)
 80048ba:	2150      	movs	r1, #80	@ 0x50
 80048bc:	4865      	ldr	r0, [pc, #404]	@ (8004a54 <HAL_FDCAN_RxFifo0Callback+0xcec>)
 80048be:	f012 ffe7 	bl	8017890 <sniprintf>
 80048c2:	4603      	mov	r3, r0
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4b64      	ldr	r3, [pc, #400]	@ (8004a58 <HAL_FDCAN_RxFifo0Callback+0xcf0>)
 80048c8:	701a      	strb	r2, [r3, #0]
   		   	  CDC_Transmit_FS(b, s);
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_FDCAN_RxFifo0Callback+0xcf0>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4619      	mov	r1, r3
 80048d0:	4860      	ldr	r0, [pc, #384]	@ (8004a54 <HAL_FDCAN_RxFifo0Callback+0xcec>)
 80048d2:	f012 fa5d 	bl	8016d90 <CDC_Transmit_FS>
			  col=ILI9488_PURPLE;
 80048d6:	4b61      	ldr	r3, [pc, #388]	@ (8004a5c <HAL_FDCAN_RxFifo0Callback+0xcf4>)
 80048d8:	f647 020f 	movw	r2, #30735	@ 0x780f
 80048dc:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 80048de:	4960      	ldr	r1, [pc, #384]	@ (8004a60 <HAL_FDCAN_RxFifo0Callback+0xcf8>)
 80048e0:	4860      	ldr	r0, [pc, #384]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 80048e2:	f013 f809 	bl	80178f8 <siprintf>
			  Displ_WString(20, 60, text, Font16, 1, ILI9488_WHITE, col);
 80048e6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a5c <HAL_FDCAN_RxFifo0Callback+0xcf4>)
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004a68 <HAL_FDCAN_RxFifo0Callback+0xd00>)
 80048ec:	9204      	str	r2, [sp, #16]
 80048ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048f2:	9203      	str	r2, [sp, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	9202      	str	r2, [sp, #8]
 80048f8:	466c      	mov	r4, sp
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004900:	e884 0003 	stmia.w	r4, {r0, r1}
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a57      	ldr	r2, [pc, #348]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 8004908:	213c      	movs	r1, #60	@ 0x3c
 800490a:	2014      	movs	r0, #20
 800490c:	f7fc fbe2 	bl	80010d4 <Displ_WString>
			  fin=1;
 8004910:	4b56      	ldr	r3, [pc, #344]	@ (8004a6c <HAL_FDCAN_RxFifo0Callback+0xd04>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
			  sprintf(text,"ABS :");
 8004916:	4956      	ldr	r1, [pc, #344]	@ (8004a70 <HAL_FDCAN_RxFifo0Callback+0xd08>)
 8004918:	4852      	ldr	r0, [pc, #328]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 800491a:	f012 ffed 	bl	80178f8 <siprintf>
			  Displ_WString(160, 30, text, Font16, 1, ILI9488_WHITE, col);
 800491e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a5c <HAL_FDCAN_RxFifo0Callback+0xcf4>)
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	4b51      	ldr	r3, [pc, #324]	@ (8004a68 <HAL_FDCAN_RxFifo0Callback+0xd00>)
 8004924:	9204      	str	r2, [sp, #16]
 8004926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800492a:	9203      	str	r2, [sp, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	466c      	mov	r4, sp
 8004932:	1d1a      	adds	r2, r3, #4
 8004934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004938:	e884 0003 	stmia.w	r4, {r0, r1}
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a49      	ldr	r2, [pc, #292]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 8004940:	211e      	movs	r1, #30
 8004942:	20a0      	movs	r0, #160	@ 0xa0
 8004944:	f7fc fbc6 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8004948:	4b3f      	ldr	r3, [pc, #252]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461e      	mov	r6, r3
 800494e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	469c      	mov	ip, r3
 8004954:	4b3c      	ldr	r3, [pc, #240]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004956:	789b      	ldrb	r3, [r3, #2]
 8004958:	461a      	mov	r2, r3
 800495a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800495c:	78db      	ldrb	r3, [r3, #3]
 800495e:	4619      	mov	r1, r3
 8004960:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	4618      	mov	r0, r3
 8004966:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004968:	795b      	ldrb	r3, [r3, #5]
 800496a:	461c      	mov	r4, r3
 800496c:	4b36      	ldr	r3, [pc, #216]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 800496e:	799b      	ldrb	r3, [r3, #6]
 8004970:	461d      	mov	r5, r3
 8004972:	4b35      	ldr	r3, [pc, #212]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 8004974:	79db      	ldrb	r3, [r3, #7]
 8004976:	9305      	str	r3, [sp, #20]
 8004978:	9504      	str	r5, [sp, #16]
 800497a:	9403      	str	r4, [sp, #12]
 800497c:	9002      	str	r0, [sp, #8]
 800497e:	9101      	str	r1, [sp, #4]
 8004980:	9200      	str	r2, [sp, #0]
 8004982:	4663      	mov	r3, ip
 8004984:	4632      	mov	r2, r6
 8004986:	493b      	ldr	r1, [pc, #236]	@ (8004a74 <HAL_FDCAN_RxFifo0Callback+0xd0c>)
 8004988:	4836      	ldr	r0, [pc, #216]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 800498a:	f012 ffb5 	bl	80178f8 <siprintf>
			  Displ_WString(90, 60, text, Font16, 1, ILI9488_WHITE, col);
 800498e:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <HAL_FDCAN_RxFifo0Callback+0xcf4>)
 8004990:	881a      	ldrh	r2, [r3, #0]
 8004992:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <HAL_FDCAN_RxFifo0Callback+0xd00>)
 8004994:	9204      	str	r2, [sp, #16]
 8004996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499a:	9203      	str	r2, [sp, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	9202      	str	r2, [sp, #8]
 80049a0:	466c      	mov	r4, sp
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 80049b0:	213c      	movs	r1, #60	@ 0x3c
 80049b2:	205a      	movs	r0, #90	@ 0x5a
 80049b4:	f7fc fb8e 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[8],R[9],R[10],R[11],R[12],R[13],R[14],R[15]);
 80049b8:	4b23      	ldr	r3, [pc, #140]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049ba:	7a1b      	ldrb	r3, [r3, #8]
 80049bc:	461e      	mov	r6, r3
 80049be:	4b22      	ldr	r3, [pc, #136]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049c0:	7a5b      	ldrb	r3, [r3, #9]
 80049c2:	469c      	mov	ip, r3
 80049c4:	4b20      	ldr	r3, [pc, #128]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049c6:	7a9b      	ldrb	r3, [r3, #10]
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049cc:	7adb      	ldrb	r3, [r3, #11]
 80049ce:	4619      	mov	r1, r3
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049d2:	7b1b      	ldrb	r3, [r3, #12]
 80049d4:	4618      	mov	r0, r3
 80049d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049d8:	7b5b      	ldrb	r3, [r3, #13]
 80049da:	461c      	mov	r4, r3
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049de:	7b9b      	ldrb	r3, [r3, #14]
 80049e0:	461d      	mov	r5, r3
 80049e2:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_FDCAN_RxFifo0Callback+0xce0>)
 80049e4:	7bdb      	ldrb	r3, [r3, #15]
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	9504      	str	r5, [sp, #16]
 80049ea:	9403      	str	r4, [sp, #12]
 80049ec:	9002      	str	r0, [sp, #8]
 80049ee:	9101      	str	r1, [sp, #4]
 80049f0:	9200      	str	r2, [sp, #0]
 80049f2:	4663      	mov	r3, ip
 80049f4:	4632      	mov	r2, r6
 80049f6:	491f      	ldr	r1, [pc, #124]	@ (8004a74 <HAL_FDCAN_RxFifo0Callback+0xd0c>)
 80049f8:	481a      	ldr	r0, [pc, #104]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 80049fa:	f012 ff7d 	bl	80178f8 <siprintf>
			  Displ_WString(90, 90, text, Font16, 1, ILI9488_WHITE, col);
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_FDCAN_RxFifo0Callback+0xcf4>)
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <HAL_FDCAN_RxFifo0Callback+0xd00>)
 8004a04:	9204      	str	r2, [sp, #16]
 8004a06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a0a:	9203      	str	r2, [sp, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	9202      	str	r2, [sp, #8]
 8004a10:	466c      	mov	r4, sp
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a18:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a11      	ldr	r2, [pc, #68]	@ (8004a64 <HAL_FDCAN_RxFifo0Callback+0xcfc>)
 8004a20:	215a      	movs	r1, #90	@ 0x5a
 8004a22:	205a      	movs	r0, #90	@ 0x5a
 8004a24:	f7fc fb56 	bl	80010d4 <Displ_WString>
			  x=380;
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <HAL_FDCAN_RxFifo0Callback+0xd10>)
 8004a2a:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004a2e:	801a      	strh	r2, [r3, #0]
			  y=120;
 8004a30:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <HAL_FDCAN_RxFifo0Callback+0xd14>)
 8004a32:	2278      	movs	r2, #120	@ 0x78
 8004a34:	801a      	strh	r2, [r3, #0]
			  chronogramme();
 8004a36:	f001 fb71 	bl	800611c <chronogramme>
			  x=380;
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <HAL_FDCAN_RxFifo0Callback+0xd10>)
 8004a3c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004a40:	801a      	strh	r2, [r3, #0]
			  y=160;
 8004a42:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <HAL_FDCAN_RxFifo0Callback+0xd14>)
 8004a44:	22a0      	movs	r2, #160	@ 0xa0
 8004a46:	e01b      	b.n	8004a80 <HAL_FDCAN_RxFifo0Callback+0xd18>
 8004a48:	2400226c 	.word	0x2400226c
 8004a4c:	240023d4 	.word	0x240023d4
 8004a50:	08018f04 	.word	0x08018f04
 8004a54:	240022c8 	.word	0x240022c8
 8004a58:	240022c4 	.word	0x240022c4
 8004a5c:	240023d0 	.word	0x240023d0
 8004a60:	08018ba0 	.word	0x08018ba0
 8004a64:	24002354 	.word	0x24002354
 8004a68:	24000008 	.word	0x24000008
 8004a6c:	240023cc 	.word	0x240023cc
 8004a70:	08018f6c 	.word	0x08018f6c
 8004a74:	08018ba8 	.word	0x08018ba8
 8004a78:	24000020 	.word	0x24000020
 8004a7c:	24000022 	.word	0x24000022
 8004a80:	801a      	strh	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a86:	e00b      	b.n	8004aa0 <HAL_FDCAN_RxFifo0Callback+0xd38>
			  {
				  R[z]=R[z+8];
 8004a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	4a95      	ldr	r2, [pc, #596]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004a8e:	5cd1      	ldrb	r1, [r2, r3]
 8004a90:	4a94      	ldr	r2, [pc, #592]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a94:	4413      	add	r3, r2
 8004a96:	460a      	mov	r2, r1
 8004a98:	701a      	strb	r2, [r3, #0]
			  for(int z=0;z<8;z++)
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	ddf0      	ble.n	8004a88 <HAL_FDCAN_RxFifo0Callback+0xd20>
	    	  }
			  chronogramme();
 8004aa6:	f001 fb39 	bl	800611c <chronogramme>
   	    }
    }
		  if(j==0)
 8004aaa:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce8 <HAL_FDCAN_RxFifo0Callback+0xf80>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f041 8111 	bne.w	8005cd6 <HAL_FDCAN_RxFifo0Callback+0x1f6e>
		  {
		  switch (RxHeader.Identifier)
 8004ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8004cec <HAL_FDCAN_RxFifo0Callback+0xf84>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b21      	cmp	r3, #33	@ 0x21
 8004aba:	f200 808f 	bhi.w	8004bdc <HAL_FDCAN_RxFifo0Callback+0xe74>
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d246      	bcs.n	8004b50 <HAL_FDCAN_RxFifo0Callback+0xde8>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_WHITE);
			  break;
		  default:
			  break;
 8004ac2:	f000 bd86 	b.w	80055d2 <HAL_FDCAN_RxFifo0Callback+0x186a>
		  switch (RxHeader.Identifier)
 8004ac6:	3b33      	subs	r3, #51	@ 0x33
 8004ac8:	2b1e      	cmp	r3, #30
 8004aca:	f200 8582 	bhi.w	80055d2 <HAL_FDCAN_RxFifo0Callback+0x186a>
 8004ace:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <HAL_FDCAN_RxFifo0Callback+0xd6c>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004e3b 	.word	0x08004e3b
 8004ad8:	080055d3 	.word	0x080055d3
 8004adc:	080055d3 	.word	0x080055d3
 8004ae0:	080055d3 	.word	0x080055d3
 8004ae4:	080055d3 	.word	0x080055d3
 8004ae8:	080055d3 	.word	0x080055d3
 8004aec:	080055d3 	.word	0x080055d3
 8004af0:	080055d3 	.word	0x080055d3
 8004af4:	080055d3 	.word	0x080055d3
 8004af8:	080055d3 	.word	0x080055d3
 8004afc:	080055d3 	.word	0x080055d3
 8004b00:	080055d3 	.word	0x080055d3
 8004b04:	080055d3 	.word	0x080055d3
 8004b08:	080055d3 	.word	0x080055d3
 8004b0c:	080055d3 	.word	0x080055d3
 8004b10:	080055d3 	.word	0x080055d3
 8004b14:	080055d3 	.word	0x080055d3
 8004b18:	080055d3 	.word	0x080055d3
 8004b1c:	080055d3 	.word	0x080055d3
 8004b20:	08004d1d 	.word	0x08004d1d
 8004b24:	080055d3 	.word	0x080055d3
 8004b28:	080055d3 	.word	0x080055d3
 8004b2c:	080055d3 	.word	0x080055d3
 8004b30:	080055d3 	.word	0x080055d3
 8004b34:	080055d3 	.word	0x080055d3
 8004b38:	080055d3 	.word	0x080055d3
 8004b3c:	08005209 	.word	0x08005209
 8004b40:	080055d3 	.word	0x080055d3
 8004b44:	080055d3 	.word	0x080055d3
 8004b48:	080055d3 	.word	0x080055d3
 8004b4c:	08005517 	.word	0x08005517
 8004b50:	3b03      	subs	r3, #3
 8004b52:	2b1e      	cmp	r3, #30
 8004b54:	f200 853d 	bhi.w	80055d2 <HAL_FDCAN_RxFifo0Callback+0x186a>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <HAL_FDCAN_RxFifo0Callback+0xdf8>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	0800548d 	.word	0x0800548d
 8004b64:	080055d3 	.word	0x080055d3
 8004b68:	080055d3 	.word	0x080055d3
 8004b6c:	080055d3 	.word	0x080055d3
 8004b70:	080055d3 	.word	0x080055d3
 8004b74:	080055d3 	.word	0x080055d3
 8004b78:	080055d3 	.word	0x080055d3
 8004b7c:	0800532d 	.word	0x0800532d
 8004b80:	080055d3 	.word	0x080055d3
 8004b84:	080055d3 	.word	0x080055d3
 8004b88:	08004bed 	.word	0x08004bed
 8004b8c:	080055d3 	.word	0x080055d3
 8004b90:	080055d3 	.word	0x080055d3
 8004b94:	080055d3 	.word	0x080055d3
 8004b98:	080055d3 	.word	0x080055d3
 8004b9c:	080055d3 	.word	0x080055d3
 8004ba0:	080055d3 	.word	0x080055d3
 8004ba4:	080055d3 	.word	0x080055d3
 8004ba8:	080055d3 	.word	0x080055d3
 8004bac:	080055d3 	.word	0x080055d3
 8004bb0:	080055d3 	.word	0x080055d3
 8004bb4:	080055d3 	.word	0x080055d3
 8004bb8:	080055d3 	.word	0x080055d3
 8004bbc:	080055d3 	.word	0x080055d3
 8004bc0:	080055d3 	.word	0x080055d3
 8004bc4:	080055d3 	.word	0x080055d3
 8004bc8:	080055d3 	.word	0x080055d3
 8004bcc:	080055d3 	.word	0x080055d3
 8004bd0:	08004f91 	.word	0x08004f91
 8004bd4:	080055d3 	.word	0x080055d3
 8004bd8:	080050b3 	.word	0x080050b3
 8004bdc:	2b51      	cmp	r3, #81	@ 0x51
 8004bde:	f200 84f8 	bhi.w	80055d2 <HAL_FDCAN_RxFifo0Callback+0x186a>
 8004be2:	2b33      	cmp	r3, #51	@ 0x33
 8004be4:	f4bf af6f 	bcs.w	8004ac6 <HAL_FDCAN_RxFifo0Callback+0xd5e>
			  break;
 8004be8:	f000 bcf3 	b.w	80055d2 <HAL_FDCAN_RxFifo0Callback+0x186a>
			  m++;
 8004bec:	4b40      	ldr	r3, [pc, #256]	@ (8004cf0 <HAL_FDCAN_RxFifo0Callback+0xf88>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf0 <HAL_FDCAN_RxFifo0Callback+0xf88>)
 8004bf4:	6013      	str	r3, [r2, #0]
			  col=ILI9488_OLIVE;
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf4 <HAL_FDCAN_RxFifo0Callback+0xf8c>)
 8004bf8:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 8004bfc:	801a      	strh	r2, [r3, #0]
			  x=380;
 8004bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf8 <HAL_FDCAN_RxFifo0Callback+0xf90>)
 8004c00:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004c04:	801a      	strh	r2, [r3, #0]
			  y=60;
 8004c06:	4b3d      	ldr	r3, [pc, #244]	@ (8004cfc <HAL_FDCAN_RxFifo0Callback+0xf94>)
 8004c08:	223c      	movs	r2, #60	@ 0x3c
 8004c0a:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8004c0c:	493c      	ldr	r1, [pc, #240]	@ (8004d00 <HAL_FDCAN_RxFifo0Callback+0xf98>)
 8004c0e:	483d      	ldr	r0, [pc, #244]	@ (8004d04 <HAL_FDCAN_RxFifo0Callback+0xf9c>)
 8004c10:	f012 fe72 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8004c14:	4b3c      	ldr	r3, [pc, #240]	@ (8004d08 <HAL_FDCAN_RxFifo0Callback+0xfa0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	9204      	str	r2, [sp, #16]
 8004c1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c1e:	9203      	str	r2, [sp, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	9202      	str	r2, [sp, #8]
 8004c24:	466c      	mov	r4, sp
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c2c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a34      	ldr	r2, [pc, #208]	@ (8004d04 <HAL_FDCAN_RxFifo0Callback+0xf9c>)
 8004c34:	211e      	movs	r1, #30
 8004c36:	2014      	movs	r0, #20
 8004c38:	f7fc fa4c 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8004c3c:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	461e      	mov	r6, r3
 8004c42:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	469c      	mov	ip, r3
 8004c48:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c4a:	789b      	ldrb	r3, [r3, #2]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b25      	ldr	r3, [pc, #148]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4b23      	ldr	r3, [pc, #140]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c56:	791b      	ldrb	r3, [r3, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c5c:	795b      	ldrb	r3, [r3, #5]
 8004c5e:	461c      	mov	r4, r3
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c62:	799b      	ldrb	r3, [r3, #6]
 8004c64:	461d      	mov	r5, r3
 8004c66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_FDCAN_RxFifo0Callback+0xf7c>)
 8004c68:	79db      	ldrb	r3, [r3, #7]
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	9504      	str	r5, [sp, #16]
 8004c6e:	9403      	str	r4, [sp, #12]
 8004c70:	9002      	str	r0, [sp, #8]
 8004c72:	9101      	str	r1, [sp, #4]
 8004c74:	9200      	str	r2, [sp, #0]
 8004c76:	4663      	mov	r3, ip
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4924      	ldr	r1, [pc, #144]	@ (8004d0c <HAL_FDCAN_RxFifo0Callback+0xfa4>)
 8004c7c:	4821      	ldr	r0, [pc, #132]	@ (8004d04 <HAL_FDCAN_RxFifo0Callback+0xf9c>)
 8004c7e:	f012 fe3b 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_OLIVE);
 8004c82:	4b21      	ldr	r3, [pc, #132]	@ (8004d08 <HAL_FDCAN_RxFifo0Callback+0xfa0>)
 8004c84:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 8004c88:	9204      	str	r2, [sp, #16]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	9203      	str	r2, [sp, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	9202      	str	r2, [sp, #8]
 8004c92:	466c      	mov	r4, sp
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a18      	ldr	r2, [pc, #96]	@ (8004d04 <HAL_FDCAN_RxFifo0Callback+0xf9c>)
 8004ca2:	211e      	movs	r1, #30
 8004ca4:	205a      	movs	r0, #90	@ 0x5a
 8004ca6:	f7fc fa15 	bl	80010d4 <Displ_WString>
			  e_data=engine_data;
 8004caa:	4b19      	ldr	r3, [pc, #100]	@ (8004d10 <HAL_FDCAN_RxFifo0Callback+0xfa8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <HAL_FDCAN_RxFifo0Callback+0xfac>)
 8004cb0:	6013      	str	r3, [r2, #0]
			  if(m>1)
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <HAL_FDCAN_RxFifo0Callback+0xf88>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	f340 848d 	ble.w	80055d6 <HAL_FDCAN_RxFifo0Callback+0x186e>
			  x=380;y=60;c=1;
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <HAL_FDCAN_RxFifo0Callback+0xf90>)
 8004cbe:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <HAL_FDCAN_RxFifo0Callback+0xf94>)
 8004cc6:	223c      	movs	r2, #60	@ 0x3c
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	4b13      	ldr	r3, [pc, #76]	@ (8004d18 <HAL_FDCAN_RxFifo0Callback+0xfb0>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
			  col=ILI9488_OLIVE;
 8004cd0:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <HAL_FDCAN_RxFifo0Callback+0xf8c>)
 8004cd2:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 8004cd6:	801a      	strh	r2, [r3, #0]
			  e_data=engine_data;
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <HAL_FDCAN_RxFifo0Callback+0xfa8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d14 <HAL_FDCAN_RxFifo0Callback+0xfac>)
 8004cde:	6013      	str	r3, [r2, #0]
			  break;
 8004ce0:	f000 bc79 	b.w	80055d6 <HAL_FDCAN_RxFifo0Callback+0x186e>
 8004ce4:	2400226c 	.word	0x2400226c
 8004ce8:	240023c4 	.word	0x240023c4
 8004cec:	240023d4 	.word	0x240023d4
 8004cf0:	240023b8 	.word	0x240023b8
 8004cf4:	240023d0 	.word	0x240023d0
 8004cf8:	24000020 	.word	0x24000020
 8004cfc:	24000022 	.word	0x24000022
 8004d00:	08018ba0 	.word	0x08018ba0
 8004d04:	24002354 	.word	0x24002354
 8004d08:	24000008 	.word	0x24000008
 8004d0c:	08018ba8 	.word	0x08018ba8
 8004d10:	2400245c 	.word	0x2400245c
 8004d14:	24002444 	.word	0x24002444
 8004d18:	240023c8 	.word	0x240023c8
			  y=100;
 8004d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f5c <HAL_FDCAN_RxFifo0Callback+0x11f4>)
 8004d1e:	2264      	movs	r2, #100	@ 0x64
 8004d20:	801a      	strh	r2, [r3, #0]
			  x=380;
 8004d22:	4b8f      	ldr	r3, [pc, #572]	@ (8004f60 <HAL_FDCAN_RxFifo0Callback+0x11f8>)
 8004d24:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004d28:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_BLUE;
 8004d2a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f64 <HAL_FDCAN_RxFifo0Callback+0x11fc>)
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8004d30:	498d      	ldr	r1, [pc, #564]	@ (8004f68 <HAL_FDCAN_RxFifo0Callback+0x1200>)
 8004d32:	488e      	ldr	r0, [pc, #568]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004d34:	f012 fde0 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8004d38:	4b8d      	ldr	r3, [pc, #564]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	9204      	str	r2, [sp, #16]
 8004d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d42:	9203      	str	r2, [sp, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	9202      	str	r2, [sp, #8]
 8004d48:	466c      	mov	r4, sp
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d50:	e884 0003 	stmia.w	r4, {r0, r1}
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a85      	ldr	r2, [pc, #532]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004d58:	211e      	movs	r1, #30
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	f7fc f9ba 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8004d60:	4b84      	ldr	r3, [pc, #528]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	461e      	mov	r6, r3
 8004d66:	4b83      	ldr	r3, [pc, #524]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	469c      	mov	ip, r3
 8004d6c:	4b81      	ldr	r3, [pc, #516]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d6e:	789b      	ldrb	r3, [r3, #2]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b80      	ldr	r3, [pc, #512]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d74:	78db      	ldrb	r3, [r3, #3]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4b7e      	ldr	r3, [pc, #504]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d80:	795b      	ldrb	r3, [r3, #5]
 8004d82:	461c      	mov	r4, r3
 8004d84:	4b7b      	ldr	r3, [pc, #492]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d86:	799b      	ldrb	r3, [r3, #6]
 8004d88:	461d      	mov	r5, r3
 8004d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004d8c:	79db      	ldrb	r3, [r3, #7]
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	9504      	str	r5, [sp, #16]
 8004d92:	9403      	str	r4, [sp, #12]
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	9101      	str	r1, [sp, #4]
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	4663      	mov	r3, ip
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4976      	ldr	r1, [pc, #472]	@ (8004f78 <HAL_FDCAN_RxFifo0Callback+0x1210>)
 8004da0:	4872      	ldr	r0, [pc, #456]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004da2:	f012 fda9 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_BLUE);
 8004da6:	4b72      	ldr	r3, [pc, #456]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004da8:	221f      	movs	r2, #31
 8004daa:	9204      	str	r2, [sp, #16]
 8004dac:	2200      	movs	r2, #0
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	9202      	str	r2, [sp, #8]
 8004db4:	466c      	mov	r4, sp
 8004db6:	1d1a      	adds	r2, r3, #4
 8004db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dbc:	e884 0003 	stmia.w	r4, {r0, r1}
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004dc4:	211e      	movs	r1, #30
 8004dc6:	205a      	movs	r0, #90	@ 0x5a
 8004dc8:	f7fc f984 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 60,479,25, ILI9488_BLACK);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2319      	movs	r3, #25
 8004dd2:	f240 12df 	movw	r2, #479	@ 0x1df
 8004dd6:	213c      	movs	r1, #60	@ 0x3c
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fc fbc1 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 60, 479, 25, ILI9488_BLACK);
 8004dde:	2300      	movs	r3, #0
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2319      	movs	r3, #25
 8004de4:	f240 12df 	movw	r2, #479	@ 0x1df
 8004de8:	213c      	movs	r1, #60	@ 0x3c
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fb feac 	bl	8000b48 <fillRect>
			  sprintf(text2,"vitesse :%dKm/h",(int)e_data);
 8004df0:	4b62      	ldr	r3, [pc, #392]	@ (8004f7c <HAL_FDCAN_RxFifo0Callback+0x1214>)
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfa:	ee17 2a90 	vmov	r2, s15
 8004dfe:	4960      	ldr	r1, [pc, #384]	@ (8004f80 <HAL_FDCAN_RxFifo0Callback+0x1218>)
 8004e00:	4860      	ldr	r0, [pc, #384]	@ (8004f84 <HAL_FDCAN_RxFifo0Callback+0x121c>)
 8004e02:	f012 fd79 	bl	80178f8 <siprintf>
			  Displ_CString(0,60,40,10,text2,Font16,1,ILI9488_WHITE,ILI9488_OLIVE);
 8004e06:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	2301      	movs	r3, #1
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	4a56      	ldr	r2, [pc, #344]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004e18:	ab01      	add	r3, sp, #4
 8004e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e20:	4b58      	ldr	r3, [pc, #352]	@ (8004f84 <HAL_FDCAN_RxFifo0Callback+0x121c>)
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	230a      	movs	r3, #10
 8004e26:	2228      	movs	r2, #40	@ 0x28
 8004e28:	213c      	movs	r1, #60	@ 0x3c
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fc f992 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 8004e30:	4b55      	ldr	r3, [pc, #340]	@ (8004f88 <HAL_FDCAN_RxFifo0Callback+0x1220>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a51      	ldr	r2, [pc, #324]	@ (8004f7c <HAL_FDCAN_RxFifo0Callback+0x1214>)
 8004e36:	6013      	str	r3, [r2, #0]
			  break;
 8004e38:	e3ce      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  y=140;
 8004e3a:	4b48      	ldr	r3, [pc, #288]	@ (8004f5c <HAL_FDCAN_RxFifo0Callback+0x11f4>)
 8004e3c:	228c      	movs	r2, #140	@ 0x8c
 8004e3e:	801a      	strh	r2, [r3, #0]
			  x=380;
 8004e40:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_FDCAN_RxFifo0Callback+0x11f8>)
 8004e42:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004e46:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_DARKCYAN;
 8004e48:	4b46      	ldr	r3, [pc, #280]	@ (8004f64 <HAL_FDCAN_RxFifo0Callback+0x11fc>)
 8004e4a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8004e4e:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8004e50:	4945      	ldr	r1, [pc, #276]	@ (8004f68 <HAL_FDCAN_RxFifo0Callback+0x1200>)
 8004e52:	4846      	ldr	r0, [pc, #280]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004e54:	f012 fd50 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8004e58:	4b45      	ldr	r3, [pc, #276]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	9204      	str	r2, [sp, #16]
 8004e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	9202      	str	r2, [sp, #8]
 8004e68:	466c      	mov	r4, sp
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e70:	e884 0003 	stmia.w	r4, {r0, r1}
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3d      	ldr	r2, [pc, #244]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004e78:	211e      	movs	r1, #30
 8004e7a:	2014      	movs	r0, #20
 8004e7c:	f7fc f92a 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8004e80:	4b3c      	ldr	r3, [pc, #240]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	461e      	mov	r6, r3
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	469c      	mov	ip, r3
 8004e8c:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004e8e:	789b      	ldrb	r3, [r3, #2]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b38      	ldr	r3, [pc, #224]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004e94:	78db      	ldrb	r3, [r3, #3]
 8004e96:	4619      	mov	r1, r3
 8004e98:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4b35      	ldr	r3, [pc, #212]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004ea0:	795b      	ldrb	r3, [r3, #5]
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	4b33      	ldr	r3, [pc, #204]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004ea6:	799b      	ldrb	r3, [r3, #6]
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	4b32      	ldr	r3, [pc, #200]	@ (8004f74 <HAL_FDCAN_RxFifo0Callback+0x120c>)
 8004eac:	79db      	ldrb	r3, [r3, #7]
 8004eae:	9305      	str	r3, [sp, #20]
 8004eb0:	9504      	str	r5, [sp, #16]
 8004eb2:	9403      	str	r4, [sp, #12]
 8004eb4:	9002      	str	r0, [sp, #8]
 8004eb6:	9101      	str	r1, [sp, #4]
 8004eb8:	9200      	str	r2, [sp, #0]
 8004eba:	4663      	mov	r3, ip
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	492e      	ldr	r1, [pc, #184]	@ (8004f78 <HAL_FDCAN_RxFifo0Callback+0x1210>)
 8004ec0:	482a      	ldr	r0, [pc, #168]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004ec2:	f012 fd19 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_DARKCYAN);
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004ec8:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8004ecc:	9204      	str	r2, [sp, #16]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	9203      	str	r2, [sp, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	9202      	str	r2, [sp, #8]
 8004ed6:	466c      	mov	r4, sp
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ede:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a21      	ldr	r2, [pc, #132]	@ (8004f6c <HAL_FDCAN_RxFifo0Callback+0x1204>)
 8004ee6:	211e      	movs	r1, #30
 8004ee8:	205a      	movs	r0, #90	@ 0x5a
 8004eea:	f7fc f8f3 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_BLACK);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2319      	movs	r3, #25
 8004ef4:	f240 12df 	movw	r2, #479	@ 0x1df
 8004ef8:	2164      	movs	r1, #100	@ 0x64
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fc fb30 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_BLACK);
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2319      	movs	r3, #25
 8004f06:	f240 12df 	movw	r2, #479	@ 0x1df
 8004f0a:	2164      	movs	r1, #100	@ 0x64
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fb fe1b 	bl	8000b48 <fillRect>
			  sprintf(text2,"Temperature:%dDegC",(int)e_data);
 8004f12:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <HAL_FDCAN_RxFifo0Callback+0x1214>)
 8004f14:	edd3 7a00 	vldr	s15, [r3]
 8004f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f1c:	ee17 2a90 	vmov	r2, s15
 8004f20:	491a      	ldr	r1, [pc, #104]	@ (8004f8c <HAL_FDCAN_RxFifo0Callback+0x1224>)
 8004f22:	4818      	ldr	r0, [pc, #96]	@ (8004f84 <HAL_FDCAN_RxFifo0Callback+0x121c>)
 8004f24:	f012 fce8 	bl	80178f8 <siprintf>
			  Displ_CString(0,100,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_BLUE);
 8004f28:	231f      	movs	r3, #31
 8004f2a:	9306      	str	r3, [sp, #24]
 8004f2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	2301      	movs	r3, #1
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	4a0e      	ldr	r2, [pc, #56]	@ (8004f70 <HAL_FDCAN_RxFifo0Callback+0x1208>)
 8004f38:	ab01      	add	r3, sp, #4
 8004f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004f40:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <HAL_FDCAN_RxFifo0Callback+0x121c>)
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	230a      	movs	r3, #10
 8004f46:	2250      	movs	r2, #80	@ 0x50
 8004f48:	2164      	movs	r1, #100	@ 0x64
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f7fc f902 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 8004f50:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <HAL_FDCAN_RxFifo0Callback+0x1220>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <HAL_FDCAN_RxFifo0Callback+0x1214>)
 8004f56:	6013      	str	r3, [r2, #0]
			  break;
 8004f58:	e33e      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
 8004f5a:	bf00      	nop
 8004f5c:	24000022 	.word	0x24000022
 8004f60:	24000020 	.word	0x24000020
 8004f64:	240023d0 	.word	0x240023d0
 8004f68:	08018ba0 	.word	0x08018ba0
 8004f6c:	24002354 	.word	0x24002354
 8004f70:	24000008 	.word	0x24000008
 8004f74:	2400226c 	.word	0x2400226c
 8004f78:	08018ba8 	.word	0x08018ba8
 8004f7c:	24002444 	.word	0x24002444
 8004f80:	08018bd0 	.word	0x08018bd0
 8004f84:	2400237c 	.word	0x2400237c
 8004f88:	2400245c 	.word	0x2400245c
 8004f8c:	08018bec 	.word	0x08018bec
			  y=180;
 8004f90:	4b90      	ldr	r3, [pc, #576]	@ (80051d4 <HAL_FDCAN_RxFifo0Callback+0x146c>)
 8004f92:	22b4      	movs	r2, #180	@ 0xb4
 8004f94:	801a      	strh	r2, [r3, #0]
			  x=380;
 8004f96:	4b90      	ldr	r3, [pc, #576]	@ (80051d8 <HAL_FDCAN_RxFifo0Callback+0x1470>)
 8004f98:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8004f9c:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_ORANGE;
 8004f9e:	4b8f      	ldr	r3, [pc, #572]	@ (80051dc <HAL_FDCAN_RxFifo0Callback+0x1474>)
 8004fa0:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8004fa4:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8004fa6:	498e      	ldr	r1, [pc, #568]	@ (80051e0 <HAL_FDCAN_RxFifo0Callback+0x1478>)
 8004fa8:	488e      	ldr	r0, [pc, #568]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 8004faa:	f012 fca5 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8004fae:	4b8e      	ldr	r3, [pc, #568]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	9204      	str	r2, [sp, #16]
 8004fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fb8:	9203      	str	r2, [sp, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	9202      	str	r2, [sp, #8]
 8004fbe:	466c      	mov	r4, sp
 8004fc0:	1d1a      	adds	r2, r3, #4
 8004fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a85      	ldr	r2, [pc, #532]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 8004fce:	211e      	movs	r1, #30
 8004fd0:	2014      	movs	r0, #20
 8004fd2:	f7fc f87f 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8004fd6:	4b85      	ldr	r3, [pc, #532]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	461e      	mov	r6, r3
 8004fdc:	4b83      	ldr	r3, [pc, #524]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	469c      	mov	ip, r3
 8004fe2:	4b82      	ldr	r3, [pc, #520]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004fe4:	789b      	ldrb	r3, [r3, #2]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b80      	ldr	r3, [pc, #512]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4b7f      	ldr	r3, [pc, #508]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	4b7d      	ldr	r3, [pc, #500]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004ff6:	795b      	ldrb	r3, [r3, #5]
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8004ffc:	799b      	ldrb	r3, [r3, #6]
 8004ffe:	461d      	mov	r5, r3
 8005000:	4b7a      	ldr	r3, [pc, #488]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005002:	79db      	ldrb	r3, [r3, #7]
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	9504      	str	r5, [sp, #16]
 8005008:	9403      	str	r4, [sp, #12]
 800500a:	9002      	str	r0, [sp, #8]
 800500c:	9101      	str	r1, [sp, #4]
 800500e:	9200      	str	r2, [sp, #0]
 8005010:	4663      	mov	r3, ip
 8005012:	4632      	mov	r2, r6
 8005014:	4976      	ldr	r1, [pc, #472]	@ (80051f0 <HAL_FDCAN_RxFifo0Callback+0x1488>)
 8005016:	4873      	ldr	r0, [pc, #460]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 8005018:	f012 fc6e 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_ORANGE);
 800501c:	4b72      	ldr	r3, [pc, #456]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 800501e:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8005022:	9204      	str	r2, [sp, #16]
 8005024:	2200      	movs	r2, #0
 8005026:	9203      	str	r2, [sp, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	9202      	str	r2, [sp, #8]
 800502c:	466c      	mov	r4, sp
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005034:	e884 0003 	stmia.w	r4, {r0, r1}
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6a      	ldr	r2, [pc, #424]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 800503c:	211e      	movs	r1, #30
 800503e:	205a      	movs	r0, #90	@ 0x5a
 8005040:	f7fc f848 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 140, 479, 25, ILI9488_BLACK);
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2319      	movs	r3, #25
 800504a:	f240 12df 	movw	r2, #479	@ 0x1df
 800504e:	218c      	movs	r1, #140	@ 0x8c
 8005050:	2000      	movs	r0, #0
 8005052:	f7fc fa85 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 140, 479, 25, ILI9488_BLACK);
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	2319      	movs	r3, #25
 800505c:	f240 12df 	movw	r2, #479	@ 0x1df
 8005060:	218c      	movs	r1, #140	@ 0x8c
 8005062:	2000      	movs	r0, #0
 8005064:	f7fb fd70 	bl	8000b48 <fillRect>
			  sprintf(text2,"Pression :%dKPa",(int)e_data);
 8005068:	4b62      	ldr	r3, [pc, #392]	@ (80051f4 <HAL_FDCAN_RxFifo0Callback+0x148c>)
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
 8005076:	4960      	ldr	r1, [pc, #384]	@ (80051f8 <HAL_FDCAN_RxFifo0Callback+0x1490>)
 8005078:	4860      	ldr	r0, [pc, #384]	@ (80051fc <HAL_FDCAN_RxFifo0Callback+0x1494>)
 800507a:	f012 fc3d 	bl	80178f8 <siprintf>
			  Displ_CString(0,140,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_DARKCYAN);
 800507e:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8005082:	9306      	str	r3, [sp, #24]
 8005084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005088:	9305      	str	r3, [sp, #20]
 800508a:	2301      	movs	r3, #1
 800508c:	9304      	str	r3, [sp, #16]
 800508e:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 8005090:	ab01      	add	r3, sp, #4
 8005092:	ca07      	ldmia	r2, {r0, r1, r2}
 8005094:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005098:	4b58      	ldr	r3, [pc, #352]	@ (80051fc <HAL_FDCAN_RxFifo0Callback+0x1494>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	230a      	movs	r3, #10
 800509e:	2250      	movs	r2, #80	@ 0x50
 80050a0:	218c      	movs	r1, #140	@ 0x8c
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7fc f856 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 80050a8:	4b55      	ldr	r3, [pc, #340]	@ (8005200 <HAL_FDCAN_RxFifo0Callback+0x1498>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a51      	ldr	r2, [pc, #324]	@ (80051f4 <HAL_FDCAN_RxFifo0Callback+0x148c>)
 80050ae:	6013      	str	r3, [r2, #0]
			  break;
 80050b0:	e292      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  y=220;
 80050b2:	4b48      	ldr	r3, [pc, #288]	@ (80051d4 <HAL_FDCAN_RxFifo0Callback+0x146c>)
 80050b4:	22dc      	movs	r2, #220	@ 0xdc
 80050b6:	801a      	strh	r2, [r3, #0]
			  x=380;
 80050b8:	4b47      	ldr	r3, [pc, #284]	@ (80051d8 <HAL_FDCAN_RxFifo0Callback+0x1470>)
 80050ba:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80050be:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_RED;
 80050c0:	4b46      	ldr	r3, [pc, #280]	@ (80051dc <HAL_FDCAN_RxFifo0Callback+0x1474>)
 80050c2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80050c6:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 80050c8:	4945      	ldr	r1, [pc, #276]	@ (80051e0 <HAL_FDCAN_RxFifo0Callback+0x1478>)
 80050ca:	4846      	ldr	r0, [pc, #280]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 80050cc:	f012 fc14 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	9204      	str	r2, [sp, #16]
 80050d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	9202      	str	r2, [sp, #8]
 80050e0:	466c      	mov	r4, sp
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3d      	ldr	r2, [pc, #244]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 80050f0:	211e      	movs	r1, #30
 80050f2:	2014      	movs	r0, #20
 80050f4:	f7fb ffee 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 80050f8:	4b3c      	ldr	r3, [pc, #240]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461e      	mov	r6, r3
 80050fe:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	469c      	mov	ip, r3
 8005104:	4b39      	ldr	r3, [pc, #228]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005106:	789b      	ldrb	r3, [r3, #2]
 8005108:	461a      	mov	r2, r3
 800510a:	4b38      	ldr	r3, [pc, #224]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	4619      	mov	r1, r3
 8005110:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005112:	791b      	ldrb	r3, [r3, #4]
 8005114:	4618      	mov	r0, r3
 8005116:	4b35      	ldr	r3, [pc, #212]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005118:	795b      	ldrb	r3, [r3, #5]
 800511a:	461c      	mov	r4, r3
 800511c:	4b33      	ldr	r3, [pc, #204]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 800511e:	799b      	ldrb	r3, [r3, #6]
 8005120:	461d      	mov	r5, r3
 8005122:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <HAL_FDCAN_RxFifo0Callback+0x1484>)
 8005124:	79db      	ldrb	r3, [r3, #7]
 8005126:	9305      	str	r3, [sp, #20]
 8005128:	9504      	str	r5, [sp, #16]
 800512a:	9403      	str	r4, [sp, #12]
 800512c:	9002      	str	r0, [sp, #8]
 800512e:	9101      	str	r1, [sp, #4]
 8005130:	9200      	str	r2, [sp, #0]
 8005132:	4663      	mov	r3, ip
 8005134:	4632      	mov	r2, r6
 8005136:	492e      	ldr	r1, [pc, #184]	@ (80051f0 <HAL_FDCAN_RxFifo0Callback+0x1488>)
 8005138:	482a      	ldr	r0, [pc, #168]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 800513a:	f012 fbdd 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_RED);
 800513e:	4b2a      	ldr	r3, [pc, #168]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 8005140:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005144:	9204      	str	r2, [sp, #16]
 8005146:	2200      	movs	r2, #0
 8005148:	9203      	str	r2, [sp, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	9202      	str	r2, [sp, #8]
 800514e:	466c      	mov	r4, sp
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005156:	e884 0003 	stmia.w	r4, {r0, r1}
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a21      	ldr	r2, [pc, #132]	@ (80051e4 <HAL_FDCAN_RxFifo0Callback+0x147c>)
 800515e:	211e      	movs	r1, #30
 8005160:	205a      	movs	r0, #90	@ 0x5a
 8005162:	f7fb ffb7 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 180, 479, 25, ILI9488_BLACK);
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2319      	movs	r3, #25
 800516c:	f240 12df 	movw	r2, #479	@ 0x1df
 8005170:	21b4      	movs	r1, #180	@ 0xb4
 8005172:	2000      	movs	r0, #0
 8005174:	f7fc f9f4 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 180, 479, 25, ILI9488_BLACK);
 8005178:	2300      	movs	r3, #0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2319      	movs	r3, #25
 800517e:	f240 12df 	movw	r2, #479	@ 0x1df
 8005182:	21b4      	movs	r1, #180	@ 0xb4
 8005184:	2000      	movs	r0, #0
 8005186:	f7fb fcdf 	bl	8000b48 <fillRect>
			  sprintf(text2,"Temps :%dSec",(int)e_data);
 800518a:	4b1a      	ldr	r3, [pc, #104]	@ (80051f4 <HAL_FDCAN_RxFifo0Callback+0x148c>)
 800518c:	edd3 7a00 	vldr	s15, [r3]
 8005190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005194:	ee17 2a90 	vmov	r2, s15
 8005198:	491a      	ldr	r1, [pc, #104]	@ (8005204 <HAL_FDCAN_RxFifo0Callback+0x149c>)
 800519a:	4818      	ldr	r0, [pc, #96]	@ (80051fc <HAL_FDCAN_RxFifo0Callback+0x1494>)
 800519c:	f012 fbac 	bl	80178f8 <siprintf>
			  Displ_CString(0,180,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_ORANGE);
 80051a0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80051a4:	9306      	str	r3, [sp, #24]
 80051a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	2301      	movs	r3, #1
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	4a0d      	ldr	r2, [pc, #52]	@ (80051e8 <HAL_FDCAN_RxFifo0Callback+0x1480>)
 80051b2:	ab01      	add	r3, sp, #4
 80051b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80051b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80051ba:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <HAL_FDCAN_RxFifo0Callback+0x1494>)
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	230a      	movs	r3, #10
 80051c0:	2250      	movs	r2, #80	@ 0x50
 80051c2:	21b4      	movs	r1, #180	@ 0xb4
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7fb ffc5 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_FDCAN_RxFifo0Callback+0x1498>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <HAL_FDCAN_RxFifo0Callback+0x148c>)
 80051d0:	6013      	str	r3, [r2, #0]
			  break;
 80051d2:	e201      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
 80051d4:	24000022 	.word	0x24000022
 80051d8:	24000020 	.word	0x24000020
 80051dc:	240023d0 	.word	0x240023d0
 80051e0:	08018ba0 	.word	0x08018ba0
 80051e4:	24002354 	.word	0x24002354
 80051e8:	24000008 	.word	0x24000008
 80051ec:	2400226c 	.word	0x2400226c
 80051f0:	08018ba8 	.word	0x08018ba8
 80051f4:	24002444 	.word	0x24002444
 80051f8:	08018c0c 	.word	0x08018c0c
 80051fc:	2400237c 	.word	0x2400237c
 8005200:	2400245c 	.word	0x2400245c
 8005204:	08018c2c 	.word	0x08018c2c
			  y=260;
 8005208:	4b93      	ldr	r3, [pc, #588]	@ (8005458 <HAL_FDCAN_RxFifo0Callback+0x16f0>)
 800520a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800520e:	801a      	strh	r2, [r3, #0]
			  x=380;
 8005210:	4b92      	ldr	r3, [pc, #584]	@ (800545c <HAL_FDCAN_RxFifo0Callback+0x16f4>)
 8005212:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005216:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_PINK;
 8005218:	4b91      	ldr	r3, [pc, #580]	@ (8005460 <HAL_FDCAN_RxFifo0Callback+0x16f8>)
 800521a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800521e:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8005220:	4990      	ldr	r1, [pc, #576]	@ (8005464 <HAL_FDCAN_RxFifo0Callback+0x16fc>)
 8005222:	4891      	ldr	r0, [pc, #580]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 8005224:	f012 fb68 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8005228:	4b90      	ldr	r3, [pc, #576]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 800522a:	2200      	movs	r2, #0
 800522c:	9204      	str	r2, [sp, #16]
 800522e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005232:	9203      	str	r2, [sp, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	9202      	str	r2, [sp, #8]
 8005238:	466c      	mov	r4, sp
 800523a:	1d1a      	adds	r2, r3, #4
 800523c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005240:	e884 0003 	stmia.w	r4, {r0, r1}
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a88      	ldr	r2, [pc, #544]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 8005248:	211e      	movs	r1, #30
 800524a:	2014      	movs	r0, #20
 800524c:	f7fb ff42 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8005250:	4b87      	ldr	r3, [pc, #540]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	461e      	mov	r6, r3
 8005256:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	469c      	mov	ip, r3
 800525c:	4b84      	ldr	r3, [pc, #528]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800525e:	789b      	ldrb	r3, [r3, #2]
 8005260:	461a      	mov	r2, r3
 8005262:	4b83      	ldr	r3, [pc, #524]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	4619      	mov	r1, r3
 8005268:	4b81      	ldr	r3, [pc, #516]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	4618      	mov	r0, r3
 800526e:	4b80      	ldr	r3, [pc, #512]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005270:	795b      	ldrb	r3, [r3, #5]
 8005272:	461c      	mov	r4, r3
 8005274:	4b7e      	ldr	r3, [pc, #504]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005276:	799b      	ldrb	r3, [r3, #6]
 8005278:	461d      	mov	r5, r3
 800527a:	4b7d      	ldr	r3, [pc, #500]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800527c:	79db      	ldrb	r3, [r3, #7]
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	9504      	str	r5, [sp, #16]
 8005282:	9403      	str	r4, [sp, #12]
 8005284:	9002      	str	r0, [sp, #8]
 8005286:	9101      	str	r1, [sp, #4]
 8005288:	9200      	str	r2, [sp, #0]
 800528a:	4663      	mov	r3, ip
 800528c:	4632      	mov	r2, r6
 800528e:	4979      	ldr	r1, [pc, #484]	@ (8005474 <HAL_FDCAN_RxFifo0Callback+0x170c>)
 8005290:	4875      	ldr	r0, [pc, #468]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 8005292:	f012 fb31 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_PINK);
 8005296:	4b75      	ldr	r3, [pc, #468]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 8005298:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800529c:	9204      	str	r2, [sp, #16]
 800529e:	2200      	movs	r2, #0
 80052a0:	9203      	str	r2, [sp, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	9202      	str	r2, [sp, #8]
 80052a6:	466c      	mov	r4, sp
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 80052b6:	211e      	movs	r1, #30
 80052b8:	205a      	movs	r0, #90	@ 0x5a
 80052ba:	f7fb ff0b 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 220, 479, 25, ILI9488_BLACK);
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2319      	movs	r3, #25
 80052c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80052c8:	21dc      	movs	r1, #220	@ 0xdc
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7fc f948 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 220, 479, 25, ILI9488_BLACK);
 80052d0:	2300      	movs	r3, #0
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2319      	movs	r3, #25
 80052d6:	f240 12df 	movw	r2, #479	@ 0x1df
 80052da:	21dc      	movs	r1, #220	@ 0xdc
 80052dc:	2000      	movs	r0, #0
 80052de:	f7fb fc33 	bl	8000b48 <fillRect>
			  sprintf(text2,"Distance :%dKm",(int)e_data);
 80052e2:	4b65      	ldr	r3, [pc, #404]	@ (8005478 <HAL_FDCAN_RxFifo0Callback+0x1710>)
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ec:	ee17 2a90 	vmov	r2, s15
 80052f0:	4962      	ldr	r1, [pc, #392]	@ (800547c <HAL_FDCAN_RxFifo0Callback+0x1714>)
 80052f2:	4863      	ldr	r0, [pc, #396]	@ (8005480 <HAL_FDCAN_RxFifo0Callback+0x1718>)
 80052f4:	f012 fb00 	bl	80178f8 <siprintf>
			  Displ_CString(0,220,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_RED);
 80052f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80052fc:	9306      	str	r3, [sp, #24]
 80052fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	2301      	movs	r3, #1
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	4a58      	ldr	r2, [pc, #352]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 800530a:	ab01      	add	r3, sp, #4
 800530c:	ca07      	ldmia	r2, {r0, r1, r2}
 800530e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005312:	4b5b      	ldr	r3, [pc, #364]	@ (8005480 <HAL_FDCAN_RxFifo0Callback+0x1718>)
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	230a      	movs	r3, #10
 8005318:	2250      	movs	r2, #80	@ 0x50
 800531a:	21dc      	movs	r1, #220	@ 0xdc
 800531c:	2000      	movs	r0, #0
 800531e:	f7fb ff19 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 8005322:	4b58      	ldr	r3, [pc, #352]	@ (8005484 <HAL_FDCAN_RxFifo0Callback+0x171c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a54      	ldr	r2, [pc, #336]	@ (8005478 <HAL_FDCAN_RxFifo0Callback+0x1710>)
 8005328:	6013      	str	r3, [r2, #0]
			  break;
 800532a:	e155      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  y=300;
 800532c:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_FDCAN_RxFifo0Callback+0x16f0>)
 800532e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005332:	801a      	strh	r2, [r3, #0]
			  x=380;
 8005334:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_FDCAN_RxFifo0Callback+0x16f4>)
 8005336:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800533a:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_PURPLE;
 800533c:	4b48      	ldr	r3, [pc, #288]	@ (8005460 <HAL_FDCAN_RxFifo0Callback+0x16f8>)
 800533e:	f647 020f 	movw	r2, #30735	@ 0x780f
 8005342:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8005344:	4947      	ldr	r1, [pc, #284]	@ (8005464 <HAL_FDCAN_RxFifo0Callback+0x16fc>)
 8005346:	4848      	ldr	r0, [pc, #288]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 8005348:	f012 fad6 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800534c:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 800534e:	2200      	movs	r2, #0
 8005350:	9204      	str	r2, [sp, #16]
 8005352:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005356:	9203      	str	r2, [sp, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	9202      	str	r2, [sp, #8]
 800535c:	466c      	mov	r4, sp
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005364:	e884 0003 	stmia.w	r4, {r0, r1}
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a3f      	ldr	r2, [pc, #252]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 800536c:	211e      	movs	r1, #30
 800536e:	2014      	movs	r0, #20
 8005370:	f7fb feb0 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8005374:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	461e      	mov	r6, r3
 800537a:	4b3d      	ldr	r3, [pc, #244]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	469c      	mov	ip, r3
 8005380:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005382:	789b      	ldrb	r3, [r3, #2]
 8005384:	461a      	mov	r2, r3
 8005386:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005388:	78db      	ldrb	r3, [r3, #3]
 800538a:	4619      	mov	r1, r3
 800538c:	4b38      	ldr	r3, [pc, #224]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 8005394:	795b      	ldrb	r3, [r3, #5]
 8005396:	461c      	mov	r4, r3
 8005398:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 800539a:	799b      	ldrb	r3, [r3, #6]
 800539c:	461d      	mov	r5, r3
 800539e:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_FDCAN_RxFifo0Callback+0x1708>)
 80053a0:	79db      	ldrb	r3, [r3, #7]
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	9504      	str	r5, [sp, #16]
 80053a6:	9403      	str	r4, [sp, #12]
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	9101      	str	r1, [sp, #4]
 80053ac:	9200      	str	r2, [sp, #0]
 80053ae:	4663      	mov	r3, ip
 80053b0:	4632      	mov	r2, r6
 80053b2:	4930      	ldr	r1, [pc, #192]	@ (8005474 <HAL_FDCAN_RxFifo0Callback+0x170c>)
 80053b4:	482c      	ldr	r0, [pc, #176]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 80053b6:	f012 fa9f 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_PURPLE);
 80053ba:	4b2c      	ldr	r3, [pc, #176]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 80053bc:	f647 020f 	movw	r2, #30735	@ 0x780f
 80053c0:	9204      	str	r2, [sp, #16]
 80053c2:	2200      	movs	r2, #0
 80053c4:	9203      	str	r2, [sp, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	9202      	str	r2, [sp, #8]
 80053ca:	466c      	mov	r4, sp
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a23      	ldr	r2, [pc, #140]	@ (8005468 <HAL_FDCAN_RxFifo0Callback+0x1700>)
 80053da:	211e      	movs	r1, #30
 80053dc:	205a      	movs	r0, #90	@ 0x5a
 80053de:	f7fb fe79 	bl	80010d4 <Displ_WString>
			  lcdDrawRect(0, 260, 479, 25, ILI9488_BLACK);
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2319      	movs	r3, #25
 80053e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80053ec:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7fc f8b5 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 260, 479, 25, ILI9488_BLACK);
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2319      	movs	r3, #25
 80053fc:	f240 12df 	movw	r2, #479	@ 0x1df
 8005400:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005404:	2000      	movs	r0, #0
 8005406:	f7fb fb9f 	bl	8000b48 <fillRect>
			  sprintf(text2,"Temps  :%dMin",(int)e_data);
 800540a:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <HAL_FDCAN_RxFifo0Callback+0x1710>)
 800540c:	edd3 7a00 	vldr	s15, [r3]
 8005410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005414:	ee17 2a90 	vmov	r2, s15
 8005418:	491b      	ldr	r1, [pc, #108]	@ (8005488 <HAL_FDCAN_RxFifo0Callback+0x1720>)
 800541a:	4819      	ldr	r0, [pc, #100]	@ (8005480 <HAL_FDCAN_RxFifo0Callback+0x1718>)
 800541c:	f012 fa6c 	bl	80178f8 <siprintf>
			  Displ_CString(0,260,80,10,text2,Font16,1,ILI9488_WHITE,ILI9488_PINK);
 8005420:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8005424:	9306      	str	r3, [sp, #24]
 8005426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	2301      	movs	r3, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	4a0e      	ldr	r2, [pc, #56]	@ (800546c <HAL_FDCAN_RxFifo0Callback+0x1704>)
 8005432:	ab01      	add	r3, sp, #4
 8005434:	ca07      	ldmia	r2, {r0, r1, r2}
 8005436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800543a:	4b11      	ldr	r3, [pc, #68]	@ (8005480 <HAL_FDCAN_RxFifo0Callback+0x1718>)
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	230a      	movs	r3, #10
 8005440:	2250      	movs	r2, #80	@ 0x50
 8005442:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005446:	2000      	movs	r0, #0
 8005448:	f7fb fe84 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 800544c:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <HAL_FDCAN_RxFifo0Callback+0x171c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <HAL_FDCAN_RxFifo0Callback+0x1710>)
 8005452:	6013      	str	r3, [r2, #0]
			  break;
 8005454:	e0c0      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
 8005456:	bf00      	nop
 8005458:	24000022 	.word	0x24000022
 800545c:	24000020 	.word	0x24000020
 8005460:	240023d0 	.word	0x240023d0
 8005464:	08018ba0 	.word	0x08018ba0
 8005468:	24002354 	.word	0x24002354
 800546c:	24000008 	.word	0x24000008
 8005470:	2400226c 	.word	0x2400226c
 8005474:	08018ba8 	.word	0x08018ba8
 8005478:	24002444 	.word	0x24002444
 800547c:	08018c48 	.word	0x08018c48
 8005480:	2400237c 	.word	0x2400237c
 8005484:	2400245c 	.word	0x2400245c
 8005488:	08018c68 	.word	0x08018c68
			  x=380;
 800548c:	4bac      	ldr	r3, [pc, #688]	@ (8005740 <HAL_FDCAN_RxFifo0Callback+0x19d8>)
 800548e:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005492:	801a      	strh	r2, [r3, #0]
			  y=60;
 8005494:	4bab      	ldr	r3, [pc, #684]	@ (8005744 <HAL_FDCAN_RxFifo0Callback+0x19dc>)
 8005496:	223c      	movs	r2, #60	@ 0x3c
 8005498:	801a      	strh	r2, [r3, #0]
			  col=ILI9488_MAROON;
 800549a:	4bab      	ldr	r3, [pc, #684]	@ (8005748 <HAL_FDCAN_RxFifo0Callback+0x19e0>)
 800549c:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 80054a0:	801a      	strh	r2, [r3, #0]
			  lcdDrawRect(0, 300, 479, 25, ILI9488_BLACK);
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2319      	movs	r3, #25
 80054a8:	f240 12df 	movw	r2, #479	@ 0x1df
 80054ac:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80054b0:	2000      	movs	r0, #0
 80054b2:	f7fc f855 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 300, 479, 25, ILI9488_BLACK);
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2319      	movs	r3, #25
 80054bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80054c0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80054c4:	2000      	movs	r0, #0
 80054c6:	f7fb fb3f 	bl	8000b48 <fillRect>
			  sprintf(text2,"Pression carburant :%dKPa",(int)e_data);
 80054ca:	4ba0      	ldr	r3, [pc, #640]	@ (800574c <HAL_FDCAN_RxFifo0Callback+0x19e4>)
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d4:	ee17 2a90 	vmov	r2, s15
 80054d8:	499d      	ldr	r1, [pc, #628]	@ (8005750 <HAL_FDCAN_RxFifo0Callback+0x19e8>)
 80054da:	489e      	ldr	r0, [pc, #632]	@ (8005754 <HAL_FDCAN_RxFifo0Callback+0x19ec>)
 80054dc:	f012 fa0c 	bl	80178f8 <siprintf>
			  Displ_CString(0,300,100,10,text2,Font16,1,ILI9488_WHITE,ILI9488_PURPLE);
 80054e0:	f647 030f 	movw	r3, #30735	@ 0x780f
 80054e4:	9306      	str	r3, [sp, #24]
 80054e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054ea:	9305      	str	r3, [sp, #20]
 80054ec:	2301      	movs	r3, #1
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	4a99      	ldr	r2, [pc, #612]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 80054f2:	ab01      	add	r3, sp, #4
 80054f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80054f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054fa:	4b96      	ldr	r3, [pc, #600]	@ (8005754 <HAL_FDCAN_RxFifo0Callback+0x19ec>)
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	230a      	movs	r3, #10
 8005500:	2264      	movs	r2, #100	@ 0x64
 8005502:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005506:	2000      	movs	r0, #0
 8005508:	f7fb fe24 	bl	8001154 <Displ_CString>
			  e_data=engine_data;
 800550c:	4b93      	ldr	r3, [pc, #588]	@ (800575c <HAL_FDCAN_RxFifo0Callback+0x19f4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a8e      	ldr	r2, [pc, #568]	@ (800574c <HAL_FDCAN_RxFifo0Callback+0x19e4>)
 8005512:	6013      	str	r3, [r2, #0]
			  break;
 8005514:	e060      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  y=100;
 8005516:	4b8b      	ldr	r3, [pc, #556]	@ (8005744 <HAL_FDCAN_RxFifo0Callback+0x19dc>)
 8005518:	2264      	movs	r2, #100	@ 0x64
 800551a:	801a      	strh	r2, [r3, #0]
			  x=380;
 800551c:	4b88      	ldr	r3, [pc, #544]	@ (8005740 <HAL_FDCAN_RxFifo0Callback+0x19d8>)
 800551e:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005522:	801a      	strh	r2, [r3, #0]
			  fin=1;
 8005524:	4b8e      	ldr	r3, [pc, #568]	@ (8005760 <HAL_FDCAN_RxFifo0Callback+0x19f8>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
			  col=ILI9488_WHITE;
 800552a:	4b87      	ldr	r3, [pc, #540]	@ (8005748 <HAL_FDCAN_RxFifo0Callback+0x19e0>)
 800552c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005530:	801a      	strh	r2, [r3, #0]
			  sprintf(text,"Data :");
 8005532:	498c      	ldr	r1, [pc, #560]	@ (8005764 <HAL_FDCAN_RxFifo0Callback+0x19fc>)
 8005534:	488c      	ldr	r0, [pc, #560]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 8005536:	f012 f9df 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800553a:	4b87      	ldr	r3, [pc, #540]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 800553c:	2200      	movs	r2, #0
 800553e:	9204      	str	r2, [sp, #16]
 8005540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005544:	9203      	str	r2, [sp, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	9202      	str	r2, [sp, #8]
 800554a:	466c      	mov	r4, sp
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005552:	e884 0003 	stmia.w	r4, {r0, r1}
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a83      	ldr	r2, [pc, #524]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 800555a:	211e      	movs	r1, #30
 800555c:	2014      	movs	r0, #20
 800555e:	f7fb fdb9 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8005562:	4b82      	ldr	r3, [pc, #520]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	461e      	mov	r6, r3
 8005568:	4b80      	ldr	r3, [pc, #512]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	469c      	mov	ip, r3
 800556e:	4b7f      	ldr	r3, [pc, #508]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005570:	789b      	ldrb	r3, [r3, #2]
 8005572:	461a      	mov	r2, r3
 8005574:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005576:	78db      	ldrb	r3, [r3, #3]
 8005578:	4619      	mov	r1, r3
 800557a:	4b7c      	ldr	r3, [pc, #496]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	4b7a      	ldr	r3, [pc, #488]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005582:	795b      	ldrb	r3, [r3, #5]
 8005584:	461c      	mov	r4, r3
 8005586:	4b79      	ldr	r3, [pc, #484]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005588:	799b      	ldrb	r3, [r3, #6]
 800558a:	461d      	mov	r5, r3
 800558c:	4b77      	ldr	r3, [pc, #476]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800558e:	79db      	ldrb	r3, [r3, #7]
 8005590:	9305      	str	r3, [sp, #20]
 8005592:	9504      	str	r5, [sp, #16]
 8005594:	9403      	str	r4, [sp, #12]
 8005596:	9002      	str	r0, [sp, #8]
 8005598:	9101      	str	r1, [sp, #4]
 800559a:	9200      	str	r2, [sp, #0]
 800559c:	4663      	mov	r3, ip
 800559e:	4632      	mov	r2, r6
 80055a0:	4973      	ldr	r1, [pc, #460]	@ (8005770 <HAL_FDCAN_RxFifo0Callback+0x1a08>)
 80055a2:	4871      	ldr	r0, [pc, #452]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 80055a4:	f012 f9a8 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_WHITE);
 80055a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 80055aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055ae:	9204      	str	r2, [sp, #16]
 80055b0:	2200      	movs	r2, #0
 80055b2:	9203      	str	r2, [sp, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	9202      	str	r2, [sp, #8]
 80055b8:	466c      	mov	r4, sp
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a68      	ldr	r2, [pc, #416]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 80055c8:	211e      	movs	r1, #30
 80055ca:	205a      	movs	r0, #90	@ 0x5a
 80055cc:	f7fb fd82 	bl	80010d4 <Displ_WString>
			  break;
 80055d0:	e002      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  break;
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <HAL_FDCAN_RxFifo0Callback+0x1870>
			  break;
 80055d6:	bf00      	nop
		  }
		  if(RxHeader.Identifier==0x03)
 80055d8:	4b66      	ldr	r3, [pc, #408]	@ (8005774 <HAL_FDCAN_RxFifo0Callback+0x1a0c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	f040 80e0 	bne.w	80057a2 <HAL_FDCAN_RxFifo0Callback+0x1a3a>
		  {
			  for(int u=0;u<5;u++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e6:	e014      	b.n	8005612 <HAL_FDCAN_RxFifo0Callback+0x18aa>
			  {
				  lcdDrawRect(450, 10, 20, 10, ILI9488_BLACK);
 80055e8:	2300      	movs	r3, #0
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	230a      	movs	r3, #10
 80055ee:	2214      	movs	r2, #20
 80055f0:	210a      	movs	r1, #10
 80055f2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80055f6:	f7fb ffb3 	bl	8001560 <lcdDrawRect>
				  fillRect(450, 10, 20, 10, ILI9488_BLACK);
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	230a      	movs	r3, #10
 8005600:	2214      	movs	r2, #20
 8005602:	210a      	movs	r1, #10
 8005604:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8005608:	f7fb fa9e 	bl	8000b48 <fillRect>
			  for(int u=0;u<5;u++)
 800560c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560e:	3301      	adds	r3, #1
 8005610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005614:	2b04      	cmp	r3, #4
 8005616:	dde7      	ble.n	80055e8 <HAL_FDCAN_RxFifo0Callback+0x1880>
			  }
			  horizanimD();
 8005618:	f000 fd41 	bl	800609e <horizanimD>
			  front_display();
 800561c:	f000 fe68 	bl	80062f0 <front_display>
			  Displ_CString(0,60,20,10,"0x03",Font16,1,ILI9488_WHITE,ILI9488_MAROON);
 8005620:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8005624:	9306      	str	r3, [sp, #24]
 8005626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	2301      	movs	r3, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	4a49      	ldr	r2, [pc, #292]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 8005632:	ab01      	add	r3, sp, #4
 8005634:	ca07      	ldmia	r2, {r0, r1, r2}
 8005636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800563a:	4b4f      	ldr	r3, [pc, #316]	@ (8005778 <HAL_FDCAN_RxFifo0Callback+0x1a10>)
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	230a      	movs	r3, #10
 8005640:	2214      	movs	r2, #20
 8005642:	213c      	movs	r1, #60	@ 0x3c
 8005644:	2000      	movs	r0, #0
 8005646:	f7fb fd85 	bl	8001154 <Displ_CString>
			  sprintf(text,"Data :");
 800564a:	4946      	ldr	r1, [pc, #280]	@ (8005764 <HAL_FDCAN_RxFifo0Callback+0x19fc>)
 800564c:	4846      	ldr	r0, [pc, #280]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 800564e:	f012 f953 	bl	80178f8 <siprintf>
			  Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8005652:	4b41      	ldr	r3, [pc, #260]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 8005654:	2200      	movs	r2, #0
 8005656:	9204      	str	r2, [sp, #16]
 8005658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	9202      	str	r2, [sp, #8]
 8005662:	466c      	mov	r4, sp
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800566a:	e884 0003 	stmia.w	r4, {r0, r1}
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a3d      	ldr	r2, [pc, #244]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 8005672:	211e      	movs	r1, #30
 8005674:	2014      	movs	r0, #20
 8005676:	f7fb fd2d 	bl	80010d4 <Displ_WString>
			  sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 800567a:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	461e      	mov	r6, r3
 8005680:	4b3a      	ldr	r3, [pc, #232]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	469c      	mov	ip, r3
 8005686:	4b39      	ldr	r3, [pc, #228]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005688:	789b      	ldrb	r3, [r3, #2]
 800568a:	461a      	mov	r2, r3
 800568c:	4b37      	ldr	r3, [pc, #220]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800568e:	78db      	ldrb	r3, [r3, #3]
 8005690:	4619      	mov	r1, r3
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	4b34      	ldr	r3, [pc, #208]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 800569a:	795b      	ldrb	r3, [r3, #5]
 800569c:	461c      	mov	r4, r3
 800569e:	4b33      	ldr	r3, [pc, #204]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 80056a0:	799b      	ldrb	r3, [r3, #6]
 80056a2:	461d      	mov	r5, r3
 80056a4:	4b31      	ldr	r3, [pc, #196]	@ (800576c <HAL_FDCAN_RxFifo0Callback+0x1a04>)
 80056a6:	79db      	ldrb	r3, [r3, #7]
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	9504      	str	r5, [sp, #16]
 80056ac:	9403      	str	r4, [sp, #12]
 80056ae:	9002      	str	r0, [sp, #8]
 80056b0:	9101      	str	r1, [sp, #4]
 80056b2:	9200      	str	r2, [sp, #0]
 80056b4:	4663      	mov	r3, ip
 80056b6:	4632      	mov	r2, r6
 80056b8:	492d      	ldr	r1, [pc, #180]	@ (8005770 <HAL_FDCAN_RxFifo0Callback+0x1a08>)
 80056ba:	482b      	ldr	r0, [pc, #172]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 80056bc:	f012 f91c 	bl	80178f8 <siprintf>
			  Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_MAROON);
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 80056c2:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 80056c6:	9204      	str	r2, [sp, #16]
 80056c8:	2200      	movs	r2, #0
 80056ca:	9203      	str	r2, [sp, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	9202      	str	r2, [sp, #8]
 80056d0:	466c      	mov	r4, sp
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <HAL_FDCAN_RxFifo0Callback+0x1a00>)
 80056e0:	211e      	movs	r1, #30
 80056e2:	205a      	movs	r0, #90	@ 0x5a
 80056e4:	f7fb fcf6 	bl	80010d4 <Displ_WString>
			 for(int p=0;p<64;p++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ec:	e006      	b.n	80056fc <HAL_FDCAN_RxFifo0Callback+0x1994>
			 {
				 bas(ILI9488_MAROON);
 80056ee:	f44f 40f0 	mov.w	r0, #30720	@ 0x7800
 80056f2:	f000 fb59 	bl	8005da8 <bas>
			 for(int p=0;p<64;p++)
 80056f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f8:	3301      	adds	r3, #1
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8005700:	ddf5      	ble.n	80056ee <HAL_FDCAN_RxFifo0Callback+0x1986>
			 }
			  Displ_CString(0,100,20,10,"0x51",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 8005702:	2300      	movs	r3, #0
 8005704:	9306      	str	r3, [sp, #24]
 8005706:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	2301      	movs	r3, #1
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	4a11      	ldr	r2, [pc, #68]	@ (8005758 <HAL_FDCAN_RxFifo0Callback+0x19f0>)
 8005712:	ab01      	add	r3, sp, #4
 8005714:	ca07      	ldmia	r2, {r0, r1, r2}
 8005716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800571a:	4b18      	ldr	r3, [pc, #96]	@ (800577c <HAL_FDCAN_RxFifo0Callback+0x1a14>)
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	230a      	movs	r3, #10
 8005720:	2214      	movs	r2, #20
 8005722:	2164      	movs	r1, #100	@ 0x64
 8005724:	2000      	movs	r0, #0
 8005726:	f7fb fd15 	bl	8001154 <Displ_CString>
			  y=100;
 800572a:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <HAL_FDCAN_RxFifo0Callback+0x19dc>)
 800572c:	2264      	movs	r2, #100	@ 0x64
 800572e:	801a      	strh	r2, [r3, #0]
			  x=380;
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <HAL_FDCAN_RxFifo0Callback+0x19d8>)
 8005732:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005736:	801a      	strh	r2, [r3, #0]
			 for(int p=0;p<64;p++)
 8005738:	2300      	movs	r3, #0
 800573a:	647b      	str	r3, [r7, #68]	@ 0x44
 800573c:	e027      	b.n	800578e <HAL_FDCAN_RxFifo0Callback+0x1a26>
 800573e:	bf00      	nop
 8005740:	24000020 	.word	0x24000020
 8005744:	24000022 	.word	0x24000022
 8005748:	240023d0 	.word	0x240023d0
 800574c:	24002444 	.word	0x24002444
 8005750:	08018c8c 	.word	0x08018c8c
 8005754:	2400237c 	.word	0x2400237c
 8005758:	24000008 	.word	0x24000008
 800575c:	2400245c 	.word	0x2400245c
 8005760:	240023cc 	.word	0x240023cc
 8005764:	08018ba0 	.word	0x08018ba0
 8005768:	24002354 	.word	0x24002354
 800576c:	2400226c 	.word	0x2400226c
 8005770:	08018ba8 	.word	0x08018ba8
 8005774:	240023d4 	.word	0x240023d4
 8005778:	08018cbc 	.word	0x08018cbc
 800577c:	08018cd4 	.word	0x08018cd4
			 {
				 bas(ILI9488_WHITE);
 8005780:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005784:	f000 fb10 	bl	8005da8 <bas>
			 for(int p=0;p<64;p++)
 8005788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800578a:	3301      	adds	r3, #1
 800578c:	647b      	str	r3, [r7, #68]	@ 0x44
 800578e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005790:	2b3f      	cmp	r3, #63	@ 0x3f
 8005792:	ddf5      	ble.n	8005780 <HAL_FDCAN_RxFifo0Callback+0x1a18>
			 }
			  x=380;
 8005794:	4ba9      	ldr	r3, [pc, #676]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 8005796:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800579a:	801a      	strh	r2, [r3, #0]
			  y=60;
 800579c:	4ba8      	ldr	r3, [pc, #672]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 800579e:	223c      	movs	r2, #60	@ 0x3c
 80057a0:	801a      	strh	r2, [r3, #0]
		  }
		  if(c==1)
 80057a2:	4ba8      	ldr	r3, [pc, #672]	@ (8005a44 <HAL_FDCAN_RxFifo0Callback+0x1cdc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	f040 81f4 	bne.w	8005b94 <HAL_FDCAN_RxFifo0Callback+0x1e2c>
		  {
			     hautanim();
 80057ac:	f000 fc49 	bl	8006042 <hautanim>
			     setRotation(Displ_Orientat_90);
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fb faf3 	bl	8000d9c <setRotation>
			     if(speed==0)
 80057b6:	4ba4      	ldr	r3, [pc, #656]	@ (8005a48 <HAL_FDCAN_RxFifo0Callback+0x1ce0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d118      	bne.n	80057f0 <HAL_FDCAN_RxFifo0Callback+0x1a88>
			     {
				 sprintf(text,"CAN : 125Kbps");
 80057be:	49a3      	ldr	r1, [pc, #652]	@ (8005a4c <HAL_FDCAN_RxFifo0Callback+0x1ce4>)
 80057c0:	48a3      	ldr	r0, [pc, #652]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 80057c2:	f012 f899 	bl	80178f8 <siprintf>
				 Displ_WString(330, 10, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 80057c6:	4ba3      	ldr	r3, [pc, #652]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	9204      	str	r2, [sp, #16]
 80057cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057d0:	9203      	str	r2, [sp, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	9202      	str	r2, [sp, #8]
 80057d6:	466c      	mov	r4, sp
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057de:	e884 0003 	stmia.w	r4, {r0, r1}
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a9a      	ldr	r2, [pc, #616]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 80057e6:	210a      	movs	r1, #10
 80057e8:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80057ec:	f7fb fc72 	bl	80010d4 <Displ_WString>
			     }
			     if(speed==1)
 80057f0:	4b95      	ldr	r3, [pc, #596]	@ (8005a48 <HAL_FDCAN_RxFifo0Callback+0x1ce0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d118      	bne.n	800582a <HAL_FDCAN_RxFifo0Callback+0x1ac2>
			     {
				 sprintf(text,"CAN : 500Kbps");
 80057f8:	4997      	ldr	r1, [pc, #604]	@ (8005a58 <HAL_FDCAN_RxFifo0Callback+0x1cf0>)
 80057fa:	4895      	ldr	r0, [pc, #596]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 80057fc:	f012 f87c 	bl	80178f8 <siprintf>
				 Displ_WString(330, 10, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8005800:	4b94      	ldr	r3, [pc, #592]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 8005802:	2200      	movs	r2, #0
 8005804:	9204      	str	r2, [sp, #16]
 8005806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800580a:	9203      	str	r2, [sp, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	9202      	str	r2, [sp, #8]
 8005810:	466c      	mov	r4, sp
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005818:	e884 0003 	stmia.w	r4, {r0, r1}
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a8c      	ldr	r2, [pc, #560]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 8005820:	210a      	movs	r1, #10
 8005822:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8005826:	f7fb fc55 	bl	80010d4 <Displ_WString>
			     }
			     if(speed==2)
 800582a:	4b87      	ldr	r3, [pc, #540]	@ (8005a48 <HAL_FDCAN_RxFifo0Callback+0x1ce0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d118      	bne.n	8005864 <HAL_FDCAN_RxFifo0Callback+0x1afc>
			     {
				 sprintf(text,"CAN : 1Mbps");
 8005832:	498a      	ldr	r1, [pc, #552]	@ (8005a5c <HAL_FDCAN_RxFifo0Callback+0x1cf4>)
 8005834:	4886      	ldr	r0, [pc, #536]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 8005836:	f012 f85f 	bl	80178f8 <siprintf>
				 Displ_WString(330, 10, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 800583a:	4b86      	ldr	r3, [pc, #536]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 800583c:	2200      	movs	r2, #0
 800583e:	9204      	str	r2, [sp, #16]
 8005840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005844:	9203      	str	r2, [sp, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	9202      	str	r2, [sp, #8]
 800584a:	466c      	mov	r4, sp
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005852:	e884 0003 	stmia.w	r4, {r0, r1}
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7d      	ldr	r2, [pc, #500]	@ (8005a50 <HAL_FDCAN_RxFifo0Callback+0x1ce8>)
 800585a:	210a      	movs	r1, #10
 800585c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8005860:	f7fb fc38 	bl	80010d4 <Displ_WString>
			     }
				 Displ_CString(0,60,20,10,"0x0D",Font16,1,ILI9488_WHITE,ILI9488_OLIVE);
 8005864:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8005868:	9306      	str	r3, [sp, #24]
 800586a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800586e:	9305      	str	r3, [sp, #20]
 8005870:	2301      	movs	r3, #1
 8005872:	9304      	str	r3, [sp, #16]
 8005874:	4a77      	ldr	r2, [pc, #476]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 8005876:	ab01      	add	r3, sp, #4
 8005878:	ca07      	ldmia	r2, {r0, r1, r2}
 800587a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800587e:	4b78      	ldr	r3, [pc, #480]	@ (8005a60 <HAL_FDCAN_RxFifo0Callback+0x1cf8>)
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	230a      	movs	r3, #10
 8005884:	2214      	movs	r2, #20
 8005886:	213c      	movs	r1, #60	@ 0x3c
 8005888:	2000      	movs	r0, #0
 800588a:	f7fb fc63 	bl	8001154 <Displ_CString>
				 y=60;
 800588e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 8005890:	223c      	movs	r2, #60	@ 0x3c
 8005892:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005894:	4b69      	ldr	r3, [pc, #420]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 8005896:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800589a:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 800589c:	2300      	movs	r3, #0
 800589e:	643b      	str	r3, [r7, #64]	@ 0x40
 80058a0:	e006      	b.n	80058b0 <HAL_FDCAN_RxFifo0Callback+0x1b48>
				 {
					 bas(ILI9488_OLIVE);
 80058a2:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 80058a6:	f000 fa7f 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 80058aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ac:	3301      	adds	r3, #1
 80058ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80058b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80058b4:	ddf5      	ble.n	80058a2 <HAL_FDCAN_RxFifo0Callback+0x1b3a>
				 }
				 Displ_CString(0,100,20,10,"0x46",Font16,1,ILI9488_WHITE,ILI9488_BLUE);
 80058b6:	231f      	movs	r3, #31
 80058b8:	9306      	str	r3, [sp, #24]
 80058ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	2301      	movs	r3, #1
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	4a63      	ldr	r2, [pc, #396]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 80058c6:	ab01      	add	r3, sp, #4
 80058c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80058ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058ce:	4b65      	ldr	r3, [pc, #404]	@ (8005a64 <HAL_FDCAN_RxFifo0Callback+0x1cfc>)
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	230a      	movs	r3, #10
 80058d4:	2214      	movs	r2, #20
 80058d6:	2164      	movs	r1, #100	@ 0x64
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fb fc3b 	bl	8001154 <Displ_CString>
				 y=100;
 80058de:	4b58      	ldr	r3, [pc, #352]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	801a      	strh	r2, [r3, #0]
				 x=380;
 80058e4:	4b55      	ldr	r3, [pc, #340]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 80058e6:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80058ea:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f0:	e005      	b.n	80058fe <HAL_FDCAN_RxFifo0Callback+0x1b96>
				 {
					 bas(ILI9488_BLUE);
 80058f2:	201f      	movs	r0, #31
 80058f4:	f000 fa58 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 80058f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fa:	3301      	adds	r3, #1
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005900:	2b3f      	cmp	r3, #63	@ 0x3f
 8005902:	ddf6      	ble.n	80058f2 <HAL_FDCAN_RxFifo0Callback+0x1b8a>
				 }
				 Displ_CString(0,140,20,10,"0x33",Font16,1,ILI9488_WHITE,ILI9488_DARKCYAN);
 8005904:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8005908:	9306      	str	r3, [sp, #24]
 800590a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800590e:	9305      	str	r3, [sp, #20]
 8005910:	2301      	movs	r3, #1
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	4a4f      	ldr	r2, [pc, #316]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 8005916:	ab01      	add	r3, sp, #4
 8005918:	ca07      	ldmia	r2, {r0, r1, r2}
 800591a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800591e:	4b52      	ldr	r3, [pc, #328]	@ (8005a68 <HAL_FDCAN_RxFifo0Callback+0x1d00>)
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	230a      	movs	r3, #10
 8005924:	2214      	movs	r2, #20
 8005926:	218c      	movs	r1, #140	@ 0x8c
 8005928:	2000      	movs	r0, #0
 800592a:	f7fb fc13 	bl	8001154 <Displ_CString>
				 y=140;
 800592e:	4b44      	ldr	r3, [pc, #272]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 8005930:	228c      	movs	r2, #140	@ 0x8c
 8005932:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005934:	4b41      	ldr	r3, [pc, #260]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 8005936:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800593a:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 800593c:	2300      	movs	r3, #0
 800593e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005940:	e006      	b.n	8005950 <HAL_FDCAN_RxFifo0Callback+0x1be8>
				 {
					 bas(ILI9488_DARKCYAN);
 8005942:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8005946:	f000 fa2f 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	3301      	adds	r3, #1
 800594e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	2b3f      	cmp	r3, #63	@ 0x3f
 8005954:	ddf5      	ble.n	8005942 <HAL_FDCAN_RxFifo0Callback+0x1bda>
				 }
				 Displ_CString(0,180,20,10,"0x1F",Font16,1,ILI9488_WHITE,ILI9488_ORANGE);
 8005956:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800595a:	9306      	str	r3, [sp, #24]
 800595c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	2301      	movs	r3, #1
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	4a3b      	ldr	r2, [pc, #236]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 8005968:	ab01      	add	r3, sp, #4
 800596a:	ca07      	ldmia	r2, {r0, r1, r2}
 800596c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005970:	4b3e      	ldr	r3, [pc, #248]	@ (8005a6c <HAL_FDCAN_RxFifo0Callback+0x1d04>)
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	230a      	movs	r3, #10
 8005976:	2214      	movs	r2, #20
 8005978:	21b4      	movs	r1, #180	@ 0xb4
 800597a:	2000      	movs	r0, #0
 800597c:	f7fb fbea 	bl	8001154 <Displ_CString>
				 y=180;
 8005980:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 8005982:	22b4      	movs	r2, #180	@ 0xb4
 8005984:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005986:	4b2d      	ldr	r3, [pc, #180]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 8005988:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800598c:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 800598e:	2300      	movs	r3, #0
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
 8005992:	e006      	b.n	80059a2 <HAL_FDCAN_RxFifo0Callback+0x1c3a>
				 {
					 bas(ILI9488_ORANGE);
 8005994:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005998:	f000 fa06 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	3301      	adds	r3, #1
 80059a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80059a6:	ddf5      	ble.n	8005994 <HAL_FDCAN_RxFifo0Callback+0x1c2c>
				 }
				 Displ_CString(0,220,20,10,"0x21",Font16,1,ILI9488_WHITE,ILI9488_RED);
 80059a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80059ac:	9306      	str	r3, [sp, #24]
 80059ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	2301      	movs	r3, #1
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	4a26      	ldr	r2, [pc, #152]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 80059ba:	ab01      	add	r3, sp, #4
 80059bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80059be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80059c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a70 <HAL_FDCAN_RxFifo0Callback+0x1d08>)
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	230a      	movs	r3, #10
 80059c8:	2214      	movs	r2, #20
 80059ca:	21dc      	movs	r1, #220	@ 0xdc
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fb fbc1 	bl	8001154 <Displ_CString>
				 y=220;
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 80059d4:	22dc      	movs	r2, #220	@ 0xdc
 80059d6:	801a      	strh	r2, [r3, #0]
				 x=380;
 80059d8:	4b18      	ldr	r3, [pc, #96]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 80059da:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80059de:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e4:	e006      	b.n	80059f4 <HAL_FDCAN_RxFifo0Callback+0x1c8c>
				 {
					 bas(ILI9488_RED);
 80059e6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80059ea:	f000 f9dd 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	3301      	adds	r3, #1
 80059f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80059f8:	ddf5      	ble.n	80059e6 <HAL_FDCAN_RxFifo0Callback+0x1c7e>
				 }
				 Displ_CString(0,260,20,10,"0x4D",Font16,1,ILI9488_WHITE,ILI9488_PINK);
 80059fa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80059fe:	9306      	str	r3, [sp, #24]
 8005a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	2301      	movs	r3, #1
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	4a12      	ldr	r2, [pc, #72]	@ (8005a54 <HAL_FDCAN_RxFifo0Callback+0x1cec>)
 8005a0c:	ab01      	add	r3, sp, #4
 8005a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a14:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <HAL_FDCAN_RxFifo0Callback+0x1d0c>)
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	230a      	movs	r3, #10
 8005a1a:	2214      	movs	r2, #20
 8005a1c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7fb fb97 	bl	8001154 <Displ_CString>
				 y=260;
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HAL_FDCAN_RxFifo0Callback+0x1cd8>)
 8005a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005a2c:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	@ (8005a3c <HAL_FDCAN_RxFifo0Callback+0x1cd4>)
 8005a30:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005a34:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3a:	e024      	b.n	8005a86 <HAL_FDCAN_RxFifo0Callback+0x1d1e>
 8005a3c:	24000020 	.word	0x24000020
 8005a40:	24000022 	.word	0x24000022
 8005a44:	240023c8 	.word	0x240023c8
 8005a48:	24002454 	.word	0x24002454
 8005a4c:	08018b50 	.word	0x08018b50
 8005a50:	24002354 	.word	0x24002354
 8005a54:	24000008 	.word	0x24000008
 8005a58:	08018f74 	.word	0x08018f74
 8005a5c:	08018f84 	.word	0x08018f84
 8005a60:	08018b60 	.word	0x08018b60
 8005a64:	08018b68 	.word	0x08018b68
 8005a68:	08018b70 	.word	0x08018b70
 8005a6c:	08018b78 	.word	0x08018b78
 8005a70:	08018b80 	.word	0x08018b80
 8005a74:	08018b88 	.word	0x08018b88
				 {
					 bas(ILI9488_PINK);
 8005a78:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8005a7c:	f000 f994 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 8005a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a82:	3301      	adds	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a8a:	ddf5      	ble.n	8005a78 <HAL_FDCAN_RxFifo0Callback+0x1d10>
				 }
				 Displ_CString(0,300,20,10,"0x0A",Font16,1,ILI9488_WHITE,ILI9488_PURPLE);
 8005a8c:	f647 030f 	movw	r3, #30735	@ 0x780f
 8005a90:	9306      	str	r3, [sp, #24]
 8005a92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a96:	9305      	str	r3, [sp, #20]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	4a95      	ldr	r2, [pc, #596]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005a9e:	ab01      	add	r3, sp, #4
 8005aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005aa6:	4b94      	ldr	r3, [pc, #592]	@ (8005cf8 <HAL_FDCAN_RxFifo0Callback+0x1f90>)
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	230a      	movs	r3, #10
 8005aac:	2214      	movs	r2, #20
 8005aae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7fb fb4e 	bl	8001154 <Displ_CString>
				 y=300;
 8005ab8:	4b90      	ldr	r3, [pc, #576]	@ (8005cfc <HAL_FDCAN_RxFifo0Callback+0x1f94>)
 8005aba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005abe:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8005d00 <HAL_FDCAN_RxFifo0Callback+0x1f98>)
 8005ac2:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005ac6:	801a      	strh	r2, [r3, #0]
				 for(int p=0;p<64;p++)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005acc:	e006      	b.n	8005adc <HAL_FDCAN_RxFifo0Callback+0x1d74>
				 {
					 bas(ILI9488_PURPLE);
 8005ace:	f647 000f 	movw	r0, #30735	@ 0x780f
 8005ad2:	f000 f969 	bl	8005da8 <bas>
				 for(int p=0;p<64;p++)
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	3301      	adds	r3, #1
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ae0:	ddf5      	ble.n	8005ace <HAL_FDCAN_RxFifo0Callback+0x1d66>
				 }
				 c=0;
 8005ae2:	4b88      	ldr	r3, [pc, #544]	@ (8005d04 <HAL_FDCAN_RxFifo0Callback+0x1f9c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
				 y=60;
 8005ae8:	4b84      	ldr	r3, [pc, #528]	@ (8005cfc <HAL_FDCAN_RxFifo0Callback+0x1f94>)
 8005aea:	223c      	movs	r2, #60	@ 0x3c
 8005aec:	801a      	strh	r2, [r3, #0]
				 x=380;
 8005aee:	4b84      	ldr	r3, [pc, #528]	@ (8005d00 <HAL_FDCAN_RxFifo0Callback+0x1f98>)
 8005af0:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8005af4:	801a      	strh	r2, [r3, #0]
				 sprintf(text,"Data :");
 8005af6:	4984      	ldr	r1, [pc, #528]	@ (8005d08 <HAL_FDCAN_RxFifo0Callback+0x1fa0>)
 8005af8:	4884      	ldr	r0, [pc, #528]	@ (8005d0c <HAL_FDCAN_RxFifo0Callback+0x1fa4>)
 8005afa:	f011 fefd 	bl	80178f8 <siprintf>
				 Displ_WString(20, 30, text, Font16, 1, ILI9488_WHITE, ILI9488_BLACK);
 8005afe:	4b7d      	ldr	r3, [pc, #500]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	9204      	str	r2, [sp, #16]
 8005b04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	466c      	mov	r4, sp
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b16:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d0c <HAL_FDCAN_RxFifo0Callback+0x1fa4>)
 8005b1e:	211e      	movs	r1, #30
 8005b20:	2014      	movs	r0, #20
 8005b22:	f7fb fad7 	bl	80010d4 <Displ_WString>
				 sprintf(text,"%02x %02x %02x %02x %02x %02x %02x %02x",R[0],R[1],R[2],R[3],R[4],R[5],R[6],R[7]);
 8005b26:	4b7a      	ldr	r3, [pc, #488]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	461e      	mov	r6, r3
 8005b2c:	4b78      	ldr	r3, [pc, #480]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	469c      	mov	ip, r3
 8005b32:	4b77      	ldr	r3, [pc, #476]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b75      	ldr	r3, [pc, #468]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b3a:	78db      	ldrb	r3, [r3, #3]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4b74      	ldr	r3, [pc, #464]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	4b72      	ldr	r3, [pc, #456]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b46:	795b      	ldrb	r3, [r3, #5]
 8005b48:	461c      	mov	r4, r3
 8005b4a:	4b71      	ldr	r3, [pc, #452]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b4c:	799b      	ldrb	r3, [r3, #6]
 8005b4e:	461d      	mov	r5, r3
 8005b50:	4b6f      	ldr	r3, [pc, #444]	@ (8005d10 <HAL_FDCAN_RxFifo0Callback+0x1fa8>)
 8005b52:	79db      	ldrb	r3, [r3, #7]
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	9504      	str	r5, [sp, #16]
 8005b58:	9403      	str	r4, [sp, #12]
 8005b5a:	9002      	str	r0, [sp, #8]
 8005b5c:	9101      	str	r1, [sp, #4]
 8005b5e:	9200      	str	r2, [sp, #0]
 8005b60:	4663      	mov	r3, ip
 8005b62:	4632      	mov	r2, r6
 8005b64:	496b      	ldr	r1, [pc, #428]	@ (8005d14 <HAL_FDCAN_RxFifo0Callback+0x1fac>)
 8005b66:	4869      	ldr	r0, [pc, #420]	@ (8005d0c <HAL_FDCAN_RxFifo0Callback+0x1fa4>)
 8005b68:	f011 fec6 	bl	80178f8 <siprintf>
				 Displ_WString(90, 30, text, Font16, 1, ILI9488_BLACK, ILI9488_OLIVE);
 8005b6c:	4b61      	ldr	r3, [pc, #388]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005b6e:	f647 32e0 	movw	r2, #31712	@ 0x7be0
 8005b72:	9204      	str	r2, [sp, #16]
 8005b74:	2200      	movs	r2, #0
 8005b76:	9203      	str	r2, [sp, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	9202      	str	r2, [sp, #8]
 8005b7c:	466c      	mov	r4, sp
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b84:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a60      	ldr	r2, [pc, #384]	@ (8005d0c <HAL_FDCAN_RxFifo0Callback+0x1fa4>)
 8005b8c:	211e      	movs	r1, #30
 8005b8e:	205a      	movs	r0, #90	@ 0x5a
 8005b90:	f7fb faa0 	bl	80010d4 <Displ_WString>
		  }
		  chronogramme();
 8005b94:	f000 fac2 	bl	800611c <chronogramme>
		  if(RxHeader.Identifier==0x51)
 8005b98:	4b5f      	ldr	r3, [pc, #380]	@ (8005d18 <HAL_FDCAN_RxFifo0Callback+0x1fb0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b51      	cmp	r3, #81	@ 0x51
 8005b9e:	f040 809a 	bne.w	8005cd6 <HAL_FDCAN_RxFifo0Callback+0x1f6e>
		  {
			  lcdDrawRect(0, 100, 479, 25, ILI9488_BLACK);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	2319      	movs	r3, #25
 8005ba8:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bac:	2164      	movs	r1, #100	@ 0x64
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fb fcd6 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_BLACK);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	2319      	movs	r3, #25
 8005bba:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bbe:	2164      	movs	r1, #100	@ 0x64
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fa ffc1 	bl	8000b48 <fillRect>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_BLACK);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2319      	movs	r3, #25
 8005bcc:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bd0:	2164      	movs	r1, #100	@ 0x64
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7fb fcc4 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_BLACK);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	2319      	movs	r3, #25
 8005bde:	f240 12df 	movw	r2, #479	@ 0x1df
 8005be2:	2164      	movs	r1, #100	@ 0x64
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fa ffaf 	bl	8000b48 <fillRect>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_BLACK);
 8005bea:	2300      	movs	r3, #0
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2319      	movs	r3, #25
 8005bf0:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bf4:	2164      	movs	r1, #100	@ 0x64
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fb fcb2 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_BLACK);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2319      	movs	r3, #25
 8005c02:	f240 12df 	movw	r2, #479	@ 0x1df
 8005c06:	2164      	movs	r1, #100	@ 0x64
 8005c08:	2000      	movs	r0, #0
 8005c0a:	f7fa ff9d 	bl	8000b48 <fillRect>
			  lcdDrawRect(0, 100, 479, 25, ILI9488_BLACK);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	2319      	movs	r3, #25
 8005c14:	f240 12df 	movw	r2, #479	@ 0x1df
 8005c18:	2164      	movs	r1, #100	@ 0x64
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7fb fca0 	bl	8001560 <lcdDrawRect>
			  fillRect(0, 100, 479, 25, ILI9488_BLACK);
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2319      	movs	r3, #25
 8005c26:	f240 12df 	movw	r2, #479	@ 0x1df
 8005c2a:	2164      	movs	r1, #100	@ 0x64
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fa ff8b 	bl	8000b48 <fillRect>
			  Displ_CString(0,100,120,20,"Type de carburant :",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 8005c32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c36:	9306      	str	r3, [sp, #24]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005c42:	ab01      	add	r3, sp, #4
 8005c44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_FDCAN_RxFifo0Callback+0x1fb4>)
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2314      	movs	r3, #20
 8005c50:	2278      	movs	r2, #120	@ 0x78
 8005c52:	2164      	movs	r1, #100	@ 0x64
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7fb fa7d 	bl	8001154 <Displ_CString>
              if (((int) engine_data) & 0x01)
 8005c5a:	4b31      	ldr	r3, [pc, #196]	@ (8005d20 <HAL_FDCAN_RxFifo0Callback+0x1fb8>)
 8005c5c:	edd3 7a00 	vldr	s15, [r3]
 8005c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c64:	ee17 3a90 	vmov	r3, s15
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <HAL_FDCAN_RxFifo0Callback+0x1f30>
              {
   			  Displ_CString(190,100,250,20,"Diesel",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 8005c70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005c80:	ab01      	add	r3, sp, #4
 8005c82:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c88:	4b26      	ldr	r3, [pc, #152]	@ (8005d24 <HAL_FDCAN_RxFifo0Callback+0x1fbc>)
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2314      	movs	r3, #20
 8005c8e:	22fa      	movs	r2, #250	@ 0xfa
 8005c90:	2164      	movs	r1, #100	@ 0x64
 8005c92:	20be      	movs	r0, #190	@ 0xbe
 8005c94:	f7fb fa5e 	bl	8001154 <Displ_CString>
              }
              if (((int) engine_data) & 0x02) {
 8005c98:	4b21      	ldr	r3, [pc, #132]	@ (8005d20 <HAL_FDCAN_RxFifo0Callback+0x1fb8>)
 8005c9a:	edd3 7a00 	vldr	s15, [r3]
 8005c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca2:	ee17 3a90 	vmov	r3, s15
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d013      	beq.n	8005cd6 <HAL_FDCAN_RxFifo0Callback+0x1f6e>
       		  Displ_CString(190,100,230,10,"Essence",Font16,1,ILI9488_BLACK,ILI9488_WHITE);
 8005cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf4 <HAL_FDCAN_RxFifo0Callback+0x1f8c>)
 8005cbe:	ab01      	add	r3, sp, #4
 8005cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <HAL_FDCAN_RxFifo0Callback+0x1fc0>)
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	230a      	movs	r3, #10
 8005ccc:	22e6      	movs	r2, #230	@ 0xe6
 8005cce:	2164      	movs	r1, #100	@ 0x64
 8005cd0:	20be      	movs	r0, #190	@ 0xbe
 8005cd2:	f7fb fa3f 	bl	8001154 <Displ_CString>
		  }
		  }

		  }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2101      	movs	r1, #1
 8005cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cdc:	f006 fdce 	bl	800c87c <HAL_FDCAN_ActivateNotification>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_FDCAN_RxFifo0Callback+0x1f82>
    {
      /* Notification Error */
      Error_Handler();
 8005ce6:	f000 fc1f 	bl	8006528 <Error_Handler>
    }
}
 8005cea:	bf00      	nop
 8005cec:	3764      	adds	r7, #100	@ 0x64
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	24000008 	.word	0x24000008
 8005cf8:	08018b90 	.word	0x08018b90
 8005cfc:	24000022 	.word	0x24000022
 8005d00:	24000020 	.word	0x24000020
 8005d04:	240023c8 	.word	0x240023c8
 8005d08:	08018ba0 	.word	0x08018ba0
 8005d0c:	24002354 	.word	0x24002354
 8005d10:	2400226c 	.word	0x2400226c
 8005d14:	08018ba8 	.word	0x08018ba8
 8005d18:	240023d4 	.word	0x240023d4
 8005d1c:	08018f90 	.word	0x08018f90
 8005d20:	2400245c 	.word	0x2400245c
 8005d24:	08018cf0 	.word	0x08018cf0
 8005d28:	08018cf8 	.word	0x08018cf8

08005d2c <haut>:
void haut(uint16_t col)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	4603      	mov	r3, r0
 8005d34:	80fb      	strh	r3, [r7, #6]
	 drawLine(x, y, x-5,y, col);//line hori
 8005d36:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <haut+0x74>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b218      	sxth	r0, r3
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <haut+0x78>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b219      	sxth	r1, r3
 8005d42:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <haut+0x74>)
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	3b05      	subs	r3, #5
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b21a      	sxth	r2, r3
 8005d4c:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <haut+0x78>)
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b21c      	sxth	r4, r3
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4623      	mov	r3, r4
 8005d58:	f7fa fdd6 	bl	8000908 <drawLine>
	 drawLine(x-5, y, x-5,y+2, col);//line hori
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <haut+0x74>)
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	3b05      	subs	r3, #5
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	b218      	sxth	r0, r3
 8005d66:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <haut+0x78>)
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b219      	sxth	r1, r3
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <haut+0x74>)
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	3b05      	subs	r3, #5
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	b21a      	sxth	r2, r3
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <haut+0x78>)
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	b21c      	sxth	r4, r3
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4623      	mov	r3, r4
 8005d86:	f7fa fdbf 	bl	8000908 <drawLine>
	 x=x-5;
 8005d8a:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <haut+0x74>)
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	3b05      	subs	r3, #5
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <haut+0x74>)
 8005d94:	801a      	strh	r2, [r3, #0]

}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	24000020 	.word	0x24000020
 8005da4:	24000022 	.word	0x24000022

08005da8 <bas>:
void bas(uint16_t col)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	4603      	mov	r3, r0
 8005db0:	80fb      	strh	r3, [r7, #6]

	 drawLine(x, y+10, x-5,y+10, col);
 8005db2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <bas+0x80>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b218      	sxth	r0, r3
 8005db8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e2c <bas+0x84>)
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	330a      	adds	r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	b219      	sxth	r1, r3
 8005dc2:	4b19      	ldr	r3, [pc, #100]	@ (8005e28 <bas+0x80>)
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	3b05      	subs	r3, #5
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	b21a      	sxth	r2, r3
 8005dcc:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <bas+0x84>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	330a      	adds	r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	b21c      	sxth	r4, r3
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4623      	mov	r3, r4
 8005ddc:	f7fa fd94 	bl	8000908 <drawLine>
	 drawLine(x-5, y+10, x-5,y+8, col);
 8005de0:	4b11      	ldr	r3, [pc, #68]	@ (8005e28 <bas+0x80>)
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	3b05      	subs	r3, #5
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	b218      	sxth	r0, r3
 8005dea:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <bas+0x84>)
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	330a      	adds	r3, #10
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b219      	sxth	r1, r3
 8005df4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e28 <bas+0x80>)
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	3b05      	subs	r3, #5
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	b21a      	sxth	r2, r3
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <bas+0x84>)
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	b21c      	sxth	r4, r3
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	f7fa fd7b 	bl	8000908 <drawLine>
	 x=x-5;
 8005e12:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <bas+0x80>)
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	3b05      	subs	r3, #5
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	4b03      	ldr	r3, [pc, #12]	@ (8005e28 <bas+0x80>)
 8005e1c:	801a      	strh	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd90      	pop	{r4, r7, pc}
 8005e26:	bf00      	nop
 8005e28:	24000020 	.word	0x24000020
 8005e2c:	24000022 	.word	0x24000022

08005e30 <lath>:
void lath(uint16_t col)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]

	 drawLine(x+5, y, x+5,y+10, col);//line vert + de px vers le bas
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <lath+0x40>)
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	3305      	adds	r3, #5
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b218      	sxth	r0, r3
 8005e44:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <lath+0x44>)
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b219      	sxth	r1, r3
 8005e4a:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <lath+0x40>)
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	3305      	adds	r3, #5
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b21a      	sxth	r2, r3
 8005e54:	4b07      	ldr	r3, [pc, #28]	@ (8005e74 <lath+0x44>)
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	330a      	adds	r3, #10
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	b21c      	sxth	r4, r3
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	4623      	mov	r3, r4
 8005e64:	f7fa fd50 	bl	8000908 <drawLine>
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd90      	pop	{r4, r7, pc}
 8005e70:	24000020 	.word	0x24000020
 8005e74:	24000022 	.word	0x24000022

08005e78 <lat>:
void lat(uint16_t col)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	4603      	mov	r3, r0
 8005e80:	80fb      	strh	r3, [r7, #6]

	 drawLine(x+5, y, x+5,y+10, col);
 8005e82:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb8 <lat+0x40>)
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	3305      	adds	r3, #5
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	b218      	sxth	r0, r3
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <lat+0x44>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b219      	sxth	r1, r3
 8005e92:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <lat+0x40>)
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	3305      	adds	r3, #5
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b21a      	sxth	r2, r3
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <lat+0x44>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	330a      	adds	r3, #10
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	b21c      	sxth	r4, r3
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4623      	mov	r3, r4
 8005eac:	f7fa fd2c 	bl	8000908 <drawLine>
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd90      	pop	{r4, r7, pc}
 8005eb8:	24000020 	.word	0x24000020
 8005ebc:	24000022 	.word	0x24000022

08005ec0 <rand_color>:
uint16_t rand_color()
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
    	        int num = (rand() % (11));
 8005ec6:	f011 fbe3 	bl	8017690 <rand>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b26      	ldr	r3, [pc, #152]	@ (8005f68 <rand_color+0xa8>)
 8005ece:	fb83 1302 	smull	r1, r3, r3, r2
 8005ed2:	1059      	asrs	r1, r3, #1
 8005ed4:	17d3      	asrs	r3, r2, #31
 8005ed6:	1ac9      	subs	r1, r1, r3
 8005ed8:	460b      	mov	r3, r1
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	440b      	add	r3, r1
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	607b      	str	r3, [r7, #4]
    	        switch(num)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b0a      	cmp	r3, #10
 8005eea:	d838      	bhi.n	8005f5e <rand_color+0x9e>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <rand_color+0x34>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f27 	.word	0x08005f27
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f33 	.word	0x08005f33
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f49 	.word	0x08005f49
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f53 	.word	0x08005f53
 8005f1c:	08005f59 	.word	0x08005f59
    	        {
    	        case 0:
    	        	return ILI9488_OLIVE;
 8005f20:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8005f24:	e01c      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 1:
    	        	return ILI9488_ORANGE;
 8005f26:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005f2a:	e019      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 2:
    	        	return ILI9488_RED;
 8005f2c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005f30:	e016      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 3:
    	        	return ILI9488_BLUE;
 8005f32:	231f      	movs	r3, #31
 8005f34:	e014      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 4:
    	        	return ILI9488_DARKGREY;
 8005f36:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005f3a:	e011      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 5:
    	        	return ILI9488_PURPLE;
 8005f3c:	f647 030f 	movw	r3, #30735	@ 0x780f
 8005f40:	e00e      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 6:
    	        	return ILI9488_DARKCYAN;
 8005f42:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8005f46:	e00b      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 7:
    	        	return ILI9488_NAVY;
 8005f48:	230f      	movs	r3, #15
 8005f4a:	e009      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 8:
    	        	return ILI9488_GREENYELLOW;
 8005f4c:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8005f50:	e006      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 9:
    	        	return ILI9488_WHITE;
 8005f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f56:	e003      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        case 10:
    	        	return ILI9488_YELLOW;
 8005f58:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8005f5c:	e000      	b.n	8005f60 <rand_color+0xa0>
    	        	break;
    	        default:
    	        	break;
 8005f5e:	bf00      	nop
    	        }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2e8ba2e9 	.word	0x2e8ba2e9

08005f6c <dinam>:
void dinam(uint16_t col)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
	for(int p=1;p<322;p=p+20)
 8005f76:	2301      	movs	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e026      	b.n	8005fca <dinam+0x5e>
	 {
		if(p==321)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f240 1241 	movw	r2, #321	@ 0x141
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d102      	bne.n	8005f8c <dinam+0x20>
		{
			p=320;
 8005f86:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005f8a:	60fb      	str	r3, [r7, #12]
		}
		 lcdDrawRect(0,0,p+161,p,col);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	33a1      	adds	r3, #161	@ 0xa1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	b21a      	sxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	b219      	sxth	r1, r3
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	f7fb fadc 	bl	8001560 <lcdDrawRect>
		 fillRect(0,0,p+161,p,col);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	33a1      	adds	r3, #161	@ 0xa1
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	b21a      	sxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	b219      	sxth	r1, r3
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	f7fa fdc2 	bl	8000b48 <fillRect>
	for(int p=1;p<322;p=p+20)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f5b3 7fa1 	cmp.w	r3, #322	@ 0x142
 8005fd0:	dbd4      	blt.n	8005f7c <dinam+0x10>
	 }
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <horizanim>:
void horizanim()
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af02      	add	r7, sp, #8
	for(int p=1;p<481;p=p+40)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	e023      	b.n	8006030 <horizanim+0x54>
	 {
		if(p==480)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005fee:	d102      	bne.n	8005ff6 <horizanim+0x1a>
		{
			p--;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	607b      	str	r3, [r7, #4]
		}
		 lcdDrawRect(0,0,p,320,ILI9488_BLACK);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	b21a      	sxth	r2, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8006002:	2100      	movs	r1, #0
 8006004:	2000      	movs	r0, #0
 8006006:	f7fb faab 	bl	8001560 <lcdDrawRect>
		 fillRect(0,0,p,320,ILI9488_BLACK);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	b21a      	sxth	r2, r3
 800600e:	2300      	movs	r3, #0
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8006016:	2100      	movs	r1, #0
 8006018:	2000      	movs	r0, #0
 800601a:	f7fa fd95 	bl	8000b48 <fillRect>
		 if(p==1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d102      	bne.n	800602a <horizanim+0x4e>
		 {
		 p--;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3b01      	subs	r3, #1
 8006028:	607b      	str	r3, [r7, #4]
	for(int p=1;p<481;p=p+40)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3328      	adds	r3, #40	@ 0x28
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8006036:	ddd7      	ble.n	8005fe8 <horizanim+0xc>
		 }
	  }
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <hautanim>:
void hautanim()
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af02      	add	r7, sp, #8
	for(int p=1;p<322;p=p+40)
 8006048:	2301      	movs	r3, #1
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	e01e      	b.n	800608c <hautanim+0x4a>
	 {
		if(p==321)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f240 1241 	movw	r2, #321	@ 0x141
 8006054:	4293      	cmp	r3, r2
 8006056:	d102      	bne.n	800605e <hautanim+0x1c>
		{
			p=320;
 8006058:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800605c:	607b      	str	r3, [r7, #4]
		}
		 lcdDrawRect(0,0,479,p,ILI9488_BLACK);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	b21b      	sxth	r3, r3
 8006062:	2200      	movs	r2, #0
 8006064:	9200      	str	r2, [sp, #0]
 8006066:	f240 12df 	movw	r2, #479	@ 0x1df
 800606a:	2100      	movs	r1, #0
 800606c:	2000      	movs	r0, #0
 800606e:	f7fb fa77 	bl	8001560 <lcdDrawRect>
		 fillRect(0,0,479,p,ILI9488_BLACK);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	b21b      	sxth	r3, r3
 8006076:	2200      	movs	r2, #0
 8006078:	9200      	str	r2, [sp, #0]
 800607a:	f240 12df 	movw	r2, #479	@ 0x1df
 800607e:	2100      	movs	r1, #0
 8006080:	2000      	movs	r0, #0
 8006082:	f7fa fd61 	bl	8000b48 <fillRect>
	for(int p=1;p<322;p=p+40)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3328      	adds	r3, #40	@ 0x28
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f5b3 7fa1 	cmp.w	r3, #322	@ 0x142
 8006092:	dbdc      	blt.n	800604e <hautanim+0xc>
	 }
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <horizanimD>:
void horizanimD()
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af02      	add	r7, sp, #8
	for(int p=1;p<481;p=p+40)
 80060a4:	2301      	movs	r3, #1
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	e02f      	b.n	800610a <horizanimD+0x6c>
	 {
		if(p==480)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80060b0:	d102      	bne.n	80060b8 <horizanimD+0x1a>
		{
			p--;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	607b      	str	r3, [r7, #4]
		}
		 lcdDrawRect(479-p,0,p,320,ILI9488_BLACK);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f240 13df 	movw	r3, #479	@ 0x1df
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	b218      	sxth	r0, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	b21a      	sxth	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80060d2:	2100      	movs	r1, #0
 80060d4:	f7fb fa44 	bl	8001560 <lcdDrawRect>
		 fillRect(479-p,0,p,320,ILI9488_BLACK);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f240 13df 	movw	r3, #479	@ 0x1df
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	b218      	sxth	r0, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	b21a      	sxth	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80060f2:	2100      	movs	r1, #0
 80060f4:	f7fa fd28 	bl	8000b48 <fillRect>
		 if(p==1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d102      	bne.n	8006104 <horizanimD+0x66>
		 {
		 p--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3b01      	subs	r3, #1
 8006102:	607b      	str	r3, [r7, #4]
	for(int p=1;p<481;p=p+40)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3328      	adds	r3, #40	@ 0x28
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8006110:	ddcb      	ble.n	80060aa <horizanimD+0xc>
		 }
	  }
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <chronogramme>:
//    data[1] = screenBuffer[ij] & 0xFF; // Octet de données LSB
//    HAL_SPI_Transmit_IT(&hspi4, data, sizeof(data));
//  }
//}
void chronogramme()
{
 800611c:	b590      	push	{r4, r7, lr}
 800611e:	b085      	sub	sp, #20
 8006120:	af02      	add	r7, sp, #8
	  for(int z=0;z<8;z++)
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e0ce      	b.n	80062c6 <chronogramme+0x1aa>
	  {
		  a[0] = (R[z] & (0x01));
 8006128:	4a6b      	ldr	r2, [pc, #428]	@ (80062d8 <chronogramme+0x1bc>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	b2da      	uxtb	r2, r3
 8006136:	4b69      	ldr	r3, [pc, #420]	@ (80062dc <chronogramme+0x1c0>)
 8006138:	701a      	strb	r2, [r3, #0]
		  a[1] = (R[z] & (0x02));
 800613a:	4a67      	ldr	r2, [pc, #412]	@ (80062d8 <chronogramme+0x1bc>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4413      	add	r3, r2
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	b2da      	uxtb	r2, r3
 8006148:	4b64      	ldr	r3, [pc, #400]	@ (80062dc <chronogramme+0x1c0>)
 800614a:	705a      	strb	r2, [r3, #1]
		  a[2] = (R[z] & (0x04));
 800614c:	4a62      	ldr	r2, [pc, #392]	@ (80062d8 <chronogramme+0x1bc>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4b60      	ldr	r3, [pc, #384]	@ (80062dc <chronogramme+0x1c0>)
 800615c:	709a      	strb	r2, [r3, #2]
		  a[3] = (R[z] & (0x08));
 800615e:	4a5e      	ldr	r2, [pc, #376]	@ (80062d8 <chronogramme+0x1bc>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	b2da      	uxtb	r2, r3
 800616c:	4b5b      	ldr	r3, [pc, #364]	@ (80062dc <chronogramme+0x1c0>)
 800616e:	70da      	strb	r2, [r3, #3]
		  a[4] = (R[z] & (0x10));
 8006170:	4a59      	ldr	r2, [pc, #356]	@ (80062d8 <chronogramme+0x1bc>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	b2da      	uxtb	r2, r3
 800617e:	4b57      	ldr	r3, [pc, #348]	@ (80062dc <chronogramme+0x1c0>)
 8006180:	711a      	strb	r2, [r3, #4]
		  a[5] = (R[z] & (0x20));
 8006182:	4a55      	ldr	r2, [pc, #340]	@ (80062d8 <chronogramme+0x1bc>)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	b2da      	uxtb	r2, r3
 8006190:	4b52      	ldr	r3, [pc, #328]	@ (80062dc <chronogramme+0x1c0>)
 8006192:	715a      	strb	r2, [r3, #5]
		  a[6] = (R[z] & (0x40));
 8006194:	4a50      	ldr	r2, [pc, #320]	@ (80062d8 <chronogramme+0x1bc>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4413      	add	r3, r2
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	4b4e      	ldr	r3, [pc, #312]	@ (80062dc <chronogramme+0x1c0>)
 80061a4:	719a      	strb	r2, [r3, #6]
		  a[7] = (R[z] & (0x80));
 80061a6:	4a4c      	ldr	r2, [pc, #304]	@ (80062d8 <chronogramme+0x1bc>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	4b49      	ldr	r3, [pc, #292]	@ (80062dc <chronogramme+0x1c0>)
 80061b6:	71da      	strb	r2, [r3, #7]
		  for(int i=0;i<8;i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	e07c      	b.n	80062b8 <chronogramme+0x19c>
		  {
			  if(a[i]==0x00)
 80061be:	4a47      	ldr	r2, [pc, #284]	@ (80062dc <chronogramme+0x1c0>)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d136      	bne.n	8006238 <chronogramme+0x11c>
			  {
				  bas(col);
 80061ca:	4b45      	ldr	r3, [pc, #276]	@ (80062e0 <chronogramme+0x1c4>)
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fdea 	bl	8005da8 <bas>
				  if(l==2)
 80061d4:	4b43      	ldr	r3, [pc, #268]	@ (80062e4 <chronogramme+0x1c8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d104      	bne.n	80061e6 <chronogramme+0xca>
				  {
					lath(col);
 80061dc:	4b40      	ldr	r3, [pc, #256]	@ (80062e0 <chronogramme+0x1c4>)
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe25 	bl	8005e30 <lath>
				  }
				  if((i==3) | (i==7))
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b07      	cmp	r3, #7
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	4313      	orrs	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d014      	beq.n	8006230 <chronogramme+0x114>
				  {
					drawLine(x, y+10, x,y+8, ILI9488_RED);
 8006206:	4b38      	ldr	r3, [pc, #224]	@ (80062e8 <chronogramme+0x1cc>)
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b218      	sxth	r0, r3
 800620c:	4b37      	ldr	r3, [pc, #220]	@ (80062ec <chronogramme+0x1d0>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	330a      	adds	r3, #10
 8006212:	b29b      	uxth	r3, r3
 8006214:	b219      	sxth	r1, r3
 8006216:	4b34      	ldr	r3, [pc, #208]	@ (80062e8 <chronogramme+0x1cc>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b21a      	sxth	r2, r3
 800621c:	4b33      	ldr	r3, [pc, #204]	@ (80062ec <chronogramme+0x1d0>)
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	b29b      	uxth	r3, r3
 8006224:	b21b      	sxth	r3, r3
 8006226:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800622a:	9400      	str	r4, [sp, #0]
 800622c:	f7fa fb6c 	bl	8000908 <drawLine>
				  }
				    l=1;
 8006230:	4b2c      	ldr	r3, [pc, #176]	@ (80062e4 <chronogramme+0x1c8>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e03c      	b.n	80062b2 <chronogramme+0x196>
				  }
			  else
		     {
			       haut(col);
 8006238:	4b29      	ldr	r3, [pc, #164]	@ (80062e0 <chronogramme+0x1c4>)
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fd75 	bl	8005d2c <haut>
			       x=x+5;
 8006242:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <chronogramme+0x1cc>)
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	3305      	adds	r3, #5
 8006248:	b29a      	uxth	r2, r3
 800624a:	4b27      	ldr	r3, [pc, #156]	@ (80062e8 <chronogramme+0x1cc>)
 800624c:	801a      	strh	r2, [r3, #0]
			       bas(ILI9488_BLACK);
 800624e:	2000      	movs	r0, #0
 8006250:	f7ff fdaa 	bl	8005da8 <bas>
			       if(l==1)
 8006254:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <chronogramme+0x1c8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d104      	bne.n	8006266 <chronogramme+0x14a>
			       {
				     lat(col);
 800625c:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <chronogramme+0x1c4>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fe09 	bl	8005e78 <lat>
			       }
			       l=2;
 8006266:	4b1f      	ldr	r3, [pc, #124]	@ (80062e4 <chronogramme+0x1c8>)
 8006268:	2202      	movs	r2, #2
 800626a:	601a      	str	r2, [r3, #0]
			       if((i==3) | (i==7))
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b03      	cmp	r3, #3
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2da      	uxtb	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b07      	cmp	r3, #7
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <chronogramme+0x196>
			       {
					 drawLine(x, y, x,y+2, ILI9488_RED);
 800628c:	4b16      	ldr	r3, [pc, #88]	@ (80062e8 <chronogramme+0x1cc>)
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b218      	sxth	r0, r3
 8006292:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <chronogramme+0x1d0>)
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b219      	sxth	r1, r3
 8006298:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <chronogramme+0x1cc>)
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b21a      	sxth	r2, r3
 800629e:	4b13      	ldr	r3, [pc, #76]	@ (80062ec <chronogramme+0x1d0>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	3302      	adds	r3, #2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80062ac:	9400      	str	r4, [sp, #0]
 80062ae:	f7fa fb2b 	bl	8000908 <drawLine>
		  for(int i=0;i<8;i++)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	f77f af7f 	ble.w	80061be <chronogramme+0xa2>
	  for(int z=0;z<8;z++)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3301      	adds	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b07      	cmp	r3, #7
 80062ca:	f77f af2d 	ble.w	8006128 <chronogramme+0xc>
			       }
		     }
		  }
		  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}
 80062d8:	2400226c 	.word	0x2400226c
 80062dc:	2400227c 	.word	0x2400227c
 80062e0:	240023d0 	.word	0x240023d0
 80062e4:	240023bc 	.word	0x240023bc
 80062e8:	24000020 	.word	0x24000020
 80062ec:	24000022 	.word	0x24000022

080062f0 <front_display>:
void front_display()
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af08      	add	r7, sp, #32
	switch(bufferr_receive[0])
 80062f6:	4b83      	ldr	r3, [pc, #524]	@ (8006504 <front_display+0x214>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2bf4      	cmp	r3, #244	@ 0xf4
 80062fc:	f300 80fd 	bgt.w	80064fa <front_display+0x20a>
 8006300:	2bf1      	cmp	r3, #241	@ 0xf1
 8006302:	da04      	bge.n	800630e <front_display+0x1e>
 8006304:	2bc1      	cmp	r3, #193	@ 0xc1
 8006306:	d011      	beq.n	800632c <front_display+0x3c>
 8006308:	2bc2      	cmp	r3, #194	@ 0xc2
 800630a:	d039      	beq.n	8006380 <front_display+0x90>
	case 0xf4:
	    Displ_CString(20,20,80,80,"Mode : FDCAN",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
	    Displ_CString(200,20,80,280,"2Mbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
    break;
default :
	break;
 800630c:	e0f5      	b.n	80064fa <front_display+0x20a>
	switch(bufferr_receive[0])
 800630e:	3bf1      	subs	r3, #241	@ 0xf1
 8006310:	2b03      	cmp	r3, #3
 8006312:	f200 80f2 	bhi.w	80064fa <front_display+0x20a>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <front_display+0x2c>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	080063d5 	.word	0x080063d5
 8006320:	080063ff 	.word	0x080063ff
 8006324:	08006453 	.word	0x08006453
 8006328:	080064a7 	.word	0x080064a7
	    Displ_CString(20,20,80,80,"Mode : CAN",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 800632c:	2300      	movs	r3, #0
 800632e:	9306      	str	r3, [sp, #24]
 8006330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	2301      	movs	r3, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	4a73      	ldr	r2, [pc, #460]	@ (8006508 <front_display+0x218>)
 800633c:	ab01      	add	r3, sp, #4
 800633e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006340:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006344:	4b71      	ldr	r3, [pc, #452]	@ (800650c <front_display+0x21c>)
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2350      	movs	r3, #80	@ 0x50
 800634a:	2250      	movs	r2, #80	@ 0x50
 800634c:	2114      	movs	r1, #20
 800634e:	2014      	movs	r0, #20
 8006350:	f7fa ff00 	bl	8001154 <Displ_CString>
	    Displ_CString(200,20,80,280,"500Kbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 8006354:	2300      	movs	r3, #0
 8006356:	9306      	str	r3, [sp, #24]
 8006358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800635c:	9305      	str	r3, [sp, #20]
 800635e:	2301      	movs	r3, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	4a69      	ldr	r2, [pc, #420]	@ (8006508 <front_display+0x218>)
 8006364:	ab01      	add	r3, sp, #4
 8006366:	ca07      	ldmia	r2, {r0, r1, r2}
 8006368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800636c:	4b68      	ldr	r3, [pc, #416]	@ (8006510 <front_display+0x220>)
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8006374:	2250      	movs	r2, #80	@ 0x50
 8006376:	2114      	movs	r1, #20
 8006378:	20c8      	movs	r0, #200	@ 0xc8
 800637a:	f7fa feeb 	bl	8001154 <Displ_CString>
    break;
 800637e:	e0bd      	b.n	80064fc <front_display+0x20c>
	    Displ_CString(20,20,80,80,"Mode : CAN",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 8006380:	2300      	movs	r3, #0
 8006382:	9306      	str	r3, [sp, #24]
 8006384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	2301      	movs	r3, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	4a5e      	ldr	r2, [pc, #376]	@ (8006508 <front_display+0x218>)
 8006390:	ab01      	add	r3, sp, #4
 8006392:	ca07      	ldmia	r2, {r0, r1, r2}
 8006394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006398:	4b5c      	ldr	r3, [pc, #368]	@ (800650c <front_display+0x21c>)
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2350      	movs	r3, #80	@ 0x50
 800639e:	2250      	movs	r2, #80	@ 0x50
 80063a0:	2114      	movs	r1, #20
 80063a2:	2014      	movs	r0, #20
 80063a4:	f7fa fed6 	bl	8001154 <Displ_CString>
	    Displ_CString(200,20,80,280,"125Kbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80063a8:	2300      	movs	r3, #0
 80063aa:	9306      	str	r3, [sp, #24]
 80063ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	2301      	movs	r3, #1
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	4a54      	ldr	r2, [pc, #336]	@ (8006508 <front_display+0x218>)
 80063b8:	ab01      	add	r3, sp, #4
 80063ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80063bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063c0:	4b54      	ldr	r3, [pc, #336]	@ (8006514 <front_display+0x224>)
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80063c8:	2250      	movs	r2, #80	@ 0x50
 80063ca:	2114      	movs	r1, #20
 80063cc:	20c8      	movs	r0, #200	@ 0xc8
 80063ce:	f7fa fec1 	bl	8001154 <Displ_CString>
    break;
 80063d2:	e093      	b.n	80064fc <front_display+0x20c>
	    Displ_CString(20,20,120,50,"Mode : FDCAN  125Kbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80063d4:	2300      	movs	r3, #0
 80063d6:	9306      	str	r3, [sp, #24]
 80063d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063dc:	9305      	str	r3, [sp, #20]
 80063de:	2301      	movs	r3, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	4a49      	ldr	r2, [pc, #292]	@ (8006508 <front_display+0x218>)
 80063e4:	ab01      	add	r3, sp, #4
 80063e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80063e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006518 <front_display+0x228>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2332      	movs	r3, #50	@ 0x32
 80063f2:	2278      	movs	r2, #120	@ 0x78
 80063f4:	2114      	movs	r1, #20
 80063f6:	2014      	movs	r0, #20
 80063f8:	f7fa feac 	bl	8001154 <Displ_CString>
    break;
 80063fc:	e07e      	b.n	80064fc <front_display+0x20c>
	    Displ_CString(20,20,80,80,"Mode : FDCAN",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80063fe:	2300      	movs	r3, #0
 8006400:	9306      	str	r3, [sp, #24]
 8006402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	2301      	movs	r3, #1
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	4a3e      	ldr	r2, [pc, #248]	@ (8006508 <front_display+0x218>)
 800640e:	ab01      	add	r3, sp, #4
 8006410:	ca07      	ldmia	r2, {r0, r1, r2}
 8006412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006416:	4b41      	ldr	r3, [pc, #260]	@ (800651c <front_display+0x22c>)
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	2350      	movs	r3, #80	@ 0x50
 800641c:	2250      	movs	r2, #80	@ 0x50
 800641e:	2114      	movs	r1, #20
 8006420:	2014      	movs	r0, #20
 8006422:	f7fa fe97 	bl	8001154 <Displ_CString>
	    Displ_CString(200,20,80,280,"500Kbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 8006426:	2300      	movs	r3, #0
 8006428:	9306      	str	r3, [sp, #24]
 800642a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	2301      	movs	r3, #1
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	4a34      	ldr	r2, [pc, #208]	@ (8006508 <front_display+0x218>)
 8006436:	ab01      	add	r3, sp, #4
 8006438:	ca07      	ldmia	r2, {r0, r1, r2}
 800643a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800643e:	4b34      	ldr	r3, [pc, #208]	@ (8006510 <front_display+0x220>)
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8006446:	2250      	movs	r2, #80	@ 0x50
 8006448:	2114      	movs	r1, #20
 800644a:	20c8      	movs	r0, #200	@ 0xc8
 800644c:	f7fa fe82 	bl	8001154 <Displ_CString>
    break;
 8006450:	e054      	b.n	80064fc <front_display+0x20c>
	    Displ_CString(20,20,80,80,"Mode : FDCAN",Font16,3,ILI9488_WHITE,ILI9488_BLACK);
 8006452:	2300      	movs	r3, #0
 8006454:	9306      	str	r3, [sp, #24]
 8006456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	2303      	movs	r3, #3
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	4a29      	ldr	r2, [pc, #164]	@ (8006508 <front_display+0x218>)
 8006462:	ab01      	add	r3, sp, #4
 8006464:	ca07      	ldmia	r2, {r0, r1, r2}
 8006466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800646a:	4b2c      	ldr	r3, [pc, #176]	@ (800651c <front_display+0x22c>)
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2350      	movs	r3, #80	@ 0x50
 8006470:	2250      	movs	r2, #80	@ 0x50
 8006472:	2114      	movs	r1, #20
 8006474:	2014      	movs	r0, #20
 8006476:	f7fa fe6d 	bl	8001154 <Displ_CString>
	    Displ_CString(200,20,80,280,"1Mbps",Font16,3,ILI9488_WHITE,ILI9488_BLACK);
 800647a:	2300      	movs	r3, #0
 800647c:	9306      	str	r3, [sp, #24]
 800647e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	2303      	movs	r3, #3
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	4a1f      	ldr	r2, [pc, #124]	@ (8006508 <front_display+0x218>)
 800648a:	ab01      	add	r3, sp, #4
 800648c:	ca07      	ldmia	r2, {r0, r1, r2}
 800648e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006492:	4b23      	ldr	r3, [pc, #140]	@ (8006520 <front_display+0x230>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800649a:	2250      	movs	r2, #80	@ 0x50
 800649c:	2114      	movs	r1, #20
 800649e:	20c8      	movs	r0, #200	@ 0xc8
 80064a0:	f7fa fe58 	bl	8001154 <Displ_CString>
    break;
 80064a4:	e02a      	b.n	80064fc <front_display+0x20c>
	    Displ_CString(20,20,80,80,"Mode : FDCAN",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80064a6:	2300      	movs	r3, #0
 80064a8:	9306      	str	r3, [sp, #24]
 80064aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064ae:	9305      	str	r3, [sp, #20]
 80064b0:	2301      	movs	r3, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	4a14      	ldr	r2, [pc, #80]	@ (8006508 <front_display+0x218>)
 80064b6:	ab01      	add	r3, sp, #4
 80064b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064be:	4b17      	ldr	r3, [pc, #92]	@ (800651c <front_display+0x22c>)
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2350      	movs	r3, #80	@ 0x50
 80064c4:	2250      	movs	r2, #80	@ 0x50
 80064c6:	2114      	movs	r1, #20
 80064c8:	2014      	movs	r0, #20
 80064ca:	f7fa fe43 	bl	8001154 <Displ_CString>
	    Displ_CString(200,20,80,280,"2Mbps",Font16,1,ILI9488_WHITE,ILI9488_BLACK);
 80064ce:	2300      	movs	r3, #0
 80064d0:	9306      	str	r3, [sp, #24]
 80064d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	2301      	movs	r3, #1
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <front_display+0x218>)
 80064de:	ab01      	add	r3, sp, #4
 80064e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80064e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <front_display+0x234>)
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80064ee:	2250      	movs	r2, #80	@ 0x50
 80064f0:	2114      	movs	r1, #20
 80064f2:	20c8      	movs	r0, #200	@ 0xc8
 80064f4:	f7fa fe2e 	bl	8001154 <Displ_CString>
    break;
 80064f8:	e000      	b.n	80064fc <front_display+0x20c>
	break;
 80064fa:	bf00      	nop

}
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	240023a4 	.word	0x240023a4
 8006508:	24000008 	.word	0x24000008
 800650c:	08018fa4 	.word	0x08018fa4
 8006510:	08018fb0 	.word	0x08018fb0
 8006514:	08018fb8 	.word	0x08018fb8
 8006518:	08018fc0 	.word	0x08018fc0
 800651c:	08018fd8 	.word	0x08018fd8
 8006520:	08018fe8 	.word	0x08018fe8
 8006524:	08018ff0 	.word	0x08018ff0

08006528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800652c:	b672      	cpsid	i
}
 800652e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <Error_Handler+0x8>
 8006534:	0000      	movs	r0, r0
	...

08006538 <obd>:
extern  FDCAN_RxHeaderTypeDef RxHeader;
extern uint8_t R[16];
extern float engine_data;
extern uint8_t buffer[64], s,buffer2[16],buffer3[16],buffer4[16];
extern int PID020,PID_2140,PID4160;
void obd (){
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
                /* Details from http://en.wikipedia.org/wiki/OBD-II_PIDs */
                switch (RxHeader.Identifier) {                /* Details from http://en.wikipedia.org/wiki/OBD-II_PIDs */
 800653e:	4bca      	ldr	r3, [pc, #808]	@ (8006868 <obd+0x330>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b87      	cmp	r3, #135	@ 0x87
 8006544:	f202 8365 	bhi.w	8008c12 <obd+0x26da>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <obd+0x18>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006771 	.word	0x08006771
 8006554:	08006795 	.word	0x08006795
 8006558:	08008c05 	.word	0x08008c05
 800655c:	08006885 	.word	0x08006885
 8006560:	0800698d 	.word	0x0800698d
 8006564:	080069cf 	.word	0x080069cf
 8006568:	080069fd 	.word	0x080069fd
 800656c:	08006a1f 	.word	0x08006a1f
 8006570:	08006a41 	.word	0x08006a41
 8006574:	08006a63 	.word	0x08006a63
 8006578:	08006a85 	.word	0x08006a85
 800657c:	08006ac3 	.word	0x08006ac3
 8006580:	08006aef 	.word	0x08006aef
 8006584:	08006b2b 	.word	0x08006b2b
 8006588:	08006bb1 	.word	0x08006bb1
 800658c:	08006be3 	.word	0x08006be3
 8006590:	08006c11 	.word	0x08006c11
 8006594:	08006c51 	.word	0x08006c51
 8006598:	08006c93 	.word	0x08006c93
 800659c:	08006d05 	.word	0x08006d05
 80065a0:	08006e09 	.word	0x08006e09
 80065a4:	08006eb1 	.word	0x08006eb1
 80065a8:	08006f19 	.word	0x08006f19
 80065ac:	08006f81 	.word	0x08006f81
 80065b0:	08006fe9 	.word	0x08006fe9
 80065b4:	08007051 	.word	0x08007051
 80065b8:	080070b9 	.word	0x080070b9
 80065bc:	08007121 	.word	0x08007121
 80065c0:	080071a9 	.word	0x080071a9
 80065c4:	0800734d 	.word	0x0800734d
 80065c8:	08007451 	.word	0x08007451
 80065cc:	080074e1 	.word	0x080074e1
 80065d0:	0800751f 	.word	0x0800751f
 80065d4:	08007543 	.word	0x08007543
 80065d8:	08007581 	.word	0x08007581
 80065dc:	080075c1 	.word	0x080075c1
 80065e0:	080075fd 	.word	0x080075fd
 80065e4:	08007681 	.word	0x08007681
 80065e8:	08007705 	.word	0x08007705
 80065ec:	080077c1 	.word	0x080077c1
 80065f0:	08007845 	.word	0x08007845
 80065f4:	080078c9 	.word	0x080078c9
 80065f8:	0800794d 	.word	0x0800794d
 80065fc:	080079d1 	.word	0x080079d1
 8006600:	08007a55 	.word	0x08007a55
 8006604:	08007a97 	.word	0x08007a97
 8006608:	08007add 	.word	0x08007add
 800660c:	08007b1f 	.word	0x08007b1f
 8006610:	08007b61 	.word	0x08007b61
 8006614:	08007b8d 	.word	0x08007b8d
 8006618:	08007bc1 	.word	0x08007bc1
 800661c:	08007bfd 	.word	0x08007bfd
 8006620:	08007c33 	.word	0x08007c33
 8006624:	08007caf 	.word	0x08007caf
 8006628:	08007d2b 	.word	0x08007d2b
 800662c:	08007ddd 	.word	0x08007ddd
 8006630:	08007e59 	.word	0x08007e59
 8006634:	08007ed5 	.word	0x08007ed5
 8006638:	08007f51 	.word	0x08007f51
 800663c:	08007fcd 	.word	0x08007fcd
 8006640:	08008049 	.word	0x08008049
 8006644:	080080ed 	.word	0x080080ed
 8006648:	0800808b 	.word	0x0800808b
 800664c:	0800812f 	.word	0x0800812f
 8006650:	08008171 	.word	0x08008171
 8006654:	08008c05 	.word	0x08008c05
 8006658:	08008195 	.word	0x08008195
 800665c:	080081d5 	.word	0x080081d5
 8006660:	0800821d 	.word	0x0800821d
 8006664:	0800825f 	.word	0x0800825f
 8006668:	080082a1 	.word	0x080082a1
 800666c:	080082d9 	.word	0x080082d9
 8006670:	0800831b 	.word	0x0800831b
 8006674:	0800835d 	.word	0x0800835d
 8006678:	0800839f 	.word	0x0800839f
 800667c:	08008415 	.word	0x08008415
 8006680:	08008455 	.word	0x08008455
 8006684:	08008495 	.word	0x08008495
 8006688:	080084d3 	.word	0x080084d3
 800668c:	08008507 	.word	0x08008507
 8006690:	080085b3 	.word	0x080085b3
 8006694:	080085e7 	.word	0x080085e7
 8006698:	0800864d 	.word	0x0800864d
 800669c:	08008c05 	.word	0x08008c05
 80066a0:	0800868d 	.word	0x0800868d
 80066a4:	080086c3 	.word	0x080086c3
 80066a8:	08008741 	.word	0x08008741
 80066ac:	0800877f 	.word	0x0800877f
 80066b0:	080087bd 	.word	0x080087bd
 80066b4:	080087fb 	.word	0x080087fb
 80066b8:	08008835 	.word	0x08008835
 80066bc:	08008875 	.word	0x08008875
 80066c0:	080088b5 	.word	0x080088b5
 80066c4:	080088e1 	.word	0x080088e1
 80066c8:	08008921 	.word	0x08008921
 80066cc:	08008c05 	.word	0x08008c05
 80066d0:	08008c13 	.word	0x08008c13
 80066d4:	0800895f 	.word	0x0800895f
 80066d8:	0800898b 	.word	0x0800898b
 80066dc:	080089b7 	.word	0x080089b7
 80066e0:	08008a19 	.word	0x08008a19
 80066e4:	08008c05 	.word	0x08008c05
 80066e8:	08008abb 	.word	0x08008abb
 80066ec:	08008ac5 	.word	0x08008ac5
 80066f0:	08008acf 	.word	0x08008acf
 80066f4:	08008ad9 	.word	0x08008ad9
 80066f8:	08008ae3 	.word	0x08008ae3
 80066fc:	08008aed 	.word	0x08008aed
 8006700:	08008af7 	.word	0x08008af7
 8006704:	08008b01 	.word	0x08008b01
 8006708:	08008b0b 	.word	0x08008b0b
 800670c:	08008b15 	.word	0x08008b15
 8006710:	08008b1f 	.word	0x08008b1f
 8006714:	08008b29 	.word	0x08008b29
 8006718:	08008b33 	.word	0x08008b33
 800671c:	08008b3d 	.word	0x08008b3d
 8006720:	08008b47 	.word	0x08008b47
 8006724:	08008b51 	.word	0x08008b51
 8006728:	08008b5b 	.word	0x08008b5b
 800672c:	08008b65 	.word	0x08008b65
 8006730:	08008b6f 	.word	0x08008b6f
 8006734:	08008b79 	.word	0x08008b79
 8006738:	08008b83 	.word	0x08008b83
 800673c:	08008b8d 	.word	0x08008b8d
 8006740:	08008b97 	.word	0x08008b97
 8006744:	08008ba1 	.word	0x08008ba1
 8006748:	08008bab 	.word	0x08008bab
 800674c:	08008bb5 	.word	0x08008bb5
 8006750:	08008c13 	.word	0x08008c13
 8006754:	08008bbf 	.word	0x08008bbf
 8006758:	08008bc9 	.word	0x08008bc9
 800675c:	08008bd3 	.word	0x08008bd3
 8006760:	08008bdd 	.word	0x08008bdd
 8006764:	08008be7 	.word	0x08008be7
 8006768:	08008bf1 	.word	0x08008bf1
 800676c:	08008bfb 	.word	0x08008bfb
                    case PID_0_20:                          // PID 0-20 Supported
                        PID020 = (R[3] << 24) | (R[4] << 16) | (R[5] << 8) | (R[6]);
 8006770:	4b3e      	ldr	r3, [pc, #248]	@ (800686c <obd+0x334>)
 8006772:	78db      	ldrb	r3, [r3, #3]
 8006774:	061a      	lsls	r2, r3, #24
 8006776:	4b3d      	ldr	r3, [pc, #244]	@ (800686c <obd+0x334>)
 8006778:	791b      	ldrb	r3, [r3, #4]
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	431a      	orrs	r2, r3
 800677e:	4b3b      	ldr	r3, [pc, #236]	@ (800686c <obd+0x334>)
 8006780:	795b      	ldrb	r3, [r3, #5]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	4313      	orrs	r3, r2
 8006786:	4a39      	ldr	r2, [pc, #228]	@ (800686c <obd+0x334>)
 8006788:	7992      	ldrb	r2, [r2, #6]
 800678a:	4313      	orrs	r3, r2
 800678c:	4a38      	ldr	r2, [pc, #224]	@ (8006870 <obd+0x338>)
 800678e:	6013      	str	r3, [r2, #0]
                        break;
 8006790:	f002 ba3f 	b.w	8008c12 <obd+0x26da>
                    case STATUS_DTC: {                      // bit encoded
                        if (R[4] & 0x04) {     //Compression Ignition (Diesel)
 8006794:	4b35      	ldr	r3, [pc, #212]	@ (800686c <obd+0x334>)
 8006796:	791b      	ldrb	r3, [r3, #4]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d031      	beq.n	8006804 <obd+0x2cc>
                            if (R[3] & 0x80) { //MIL Light on
 80067a0:	4b32      	ldr	r3, [pc, #200]	@ (800686c <obd+0x334>)
 80067a2:	78db      	ldrb	r3, [r3, #3]
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da16      	bge.n	80067d8 <obd+0x2a0>
                                engine_data = (R[3] - 128);
 80067aa:	4b30      	ldr	r3, [pc, #192]	@ (800686c <obd+0x334>)
 80067ac:	78db      	ldrb	r3, [r3, #3]
 80067ae:	3b80      	subs	r3, #128	@ 0x80
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006874 <obd+0x33c>)
 80067ba:	edc3 7a00 	vstr	s15, [r3]
                                sprintf(buffer,"MIL ON, %d DTCs", (int) engine_data);
 80067be:	4b2d      	ldr	r3, [pc, #180]	@ (8006874 <obd+0x33c>)
 80067c0:	edd3 7a00 	vldr	s15, [r3]
 80067c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c8:	ee17 2a90 	vmov	r2, s15
 80067cc:	492a      	ldr	r1, [pc, #168]	@ (8006878 <obd+0x340>)
 80067ce:	482b      	ldr	r0, [pc, #172]	@ (800687c <obd+0x344>)
 80067d0:	f011 f892 	bl	80178f8 <siprintf>
                        // Common Tests between Gas and Diesel Engines, byte B (can_MsgRx.data[4])
                        //                  Test available  Test incomplete
                        // Misfire          B0              B4
                        // Fuel System      B1              B5
                        // Components       B2              B6
                        break;
 80067d4:	f002 ba1d 	b.w	8008c12 <obd+0x26da>
                                engine_data = (R[3]);
 80067d8:	4b24      	ldr	r3, [pc, #144]	@ (800686c <obd+0x334>)
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e4:	4b23      	ldr	r3, [pc, #140]	@ (8006874 <obd+0x33c>)
 80067e6:	edc3 7a00 	vstr	s15, [r3]
                                sprintf(buffer,"MIL OFF, %d DTCs", (int) engine_data);
 80067ea:	4b22      	ldr	r3, [pc, #136]	@ (8006874 <obd+0x33c>)
 80067ec:	edd3 7a00 	vldr	s15, [r3]
 80067f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067f4:	ee17 2a90 	vmov	r2, s15
 80067f8:	4921      	ldr	r1, [pc, #132]	@ (8006880 <obd+0x348>)
 80067fa:	4820      	ldr	r0, [pc, #128]	@ (800687c <obd+0x344>)
 80067fc:	f011 f87c 	bl	80178f8 <siprintf>
                        break;
 8006800:	f002 ba07 	b.w	8008c12 <obd+0x26da>
                            if (R[3] & 0x80) { //MIL Light on
 8006804:	4b19      	ldr	r3, [pc, #100]	@ (800686c <obd+0x334>)
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	da16      	bge.n	800683c <obd+0x304>
                                engine_data = (R[3] - 128);
 800680e:	4b17      	ldr	r3, [pc, #92]	@ (800686c <obd+0x334>)
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	3b80      	subs	r3, #128	@ 0x80
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800681c:	4b15      	ldr	r3, [pc, #84]	@ (8006874 <obd+0x33c>)
 800681e:	edc3 7a00 	vstr	s15, [r3]
                                sprintf(buffer,"MIL ON, %d DTCs", (int) engine_data);
 8006822:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <obd+0x33c>)
 8006824:	edd3 7a00 	vldr	s15, [r3]
 8006828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800682c:	ee17 2a90 	vmov	r2, s15
 8006830:	4911      	ldr	r1, [pc, #68]	@ (8006878 <obd+0x340>)
 8006832:	4812      	ldr	r0, [pc, #72]	@ (800687c <obd+0x344>)
 8006834:	f011 f860 	bl	80178f8 <siprintf>
                        break;
 8006838:	f002 b9eb 	b.w	8008c12 <obd+0x26da>
                                engine_data = (R[3]);
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <obd+0x334>)
 800683e:	78db      	ldrb	r3, [r3, #3]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006848:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <obd+0x33c>)
 800684a:	edc3 7a00 	vstr	s15, [r3]
                                sprintf(buffer,"MIL OFF, %d DTCs", (int) engine_data);
 800684e:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <obd+0x33c>)
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006858:	ee17 2a90 	vmov	r2, s15
 800685c:	4908      	ldr	r1, [pc, #32]	@ (8006880 <obd+0x348>)
 800685e:	4807      	ldr	r0, [pc, #28]	@ (800687c <obd+0x344>)
 8006860:	f011 f84a 	bl	80178f8 <siprintf>
                        break;
 8006864:	f002 b9d5 	b.w	8008c12 <obd+0x26da>
 8006868:	240023d4 	.word	0x240023d4
 800686c:	2400226c 	.word	0x2400226c
 8006870:	240023ac 	.word	0x240023ac
 8006874:	2400245c 	.word	0x2400245c
 8006878:	08018ff8 	.word	0x08018ff8
 800687c:	24002284 	.word	0x24002284
 8006880:	08019008 	.word	0x08019008
                    }
                    case FREEZE_DTC:                        // Locks in Diagnostic trouble Codes
                        break;
                    case FUEL_SYS_STATUS:                   // bit encoded
                        //This tells us the warmup status of the engine. Only 1 bit should be set
                        engine_data = R[3];
 8006884:	4bb9      	ldr	r3, [pc, #740]	@ (8006b6c <obd+0x634>)
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006890:	4bb7      	ldr	r3, [pc, #732]	@ (8006b70 <obd+0x638>)
 8006892:	edc3 7a00 	vstr	s15, [r3]
                        if (((int) engine_data) & 0x01) {   // Open loop - Engine warmup
 8006896:	4bb6      	ldr	r3, [pc, #728]	@ (8006b70 <obd+0x638>)
 8006898:	edd3 7a00 	vldr	s15, [r3]
 800689c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a0:	ee17 3a90 	vmov	r3, s15
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <obd+0x386>
                            s=snprintf(buffer,64,"The warmup status of the engine :Open Loop - Warmup\n");
 80068ac:	4ab1      	ldr	r2, [pc, #708]	@ (8006b74 <obd+0x63c>)
 80068ae:	2140      	movs	r1, #64	@ 0x40
 80068b0:	48b1      	ldr	r0, [pc, #708]	@ (8006b78 <obd+0x640>)
 80068b2:	f010 ffed 	bl	8017890 <sniprintf>
 80068b6:	4603      	mov	r3, r0
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4bb0      	ldr	r3, [pc, #704]	@ (8006b7c <obd+0x644>)
 80068bc:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        if (((int) engine_data) & 0x02) {   // Closed Loop - O2 Sensor feedback
 80068be:	4bac      	ldr	r3, [pc, #688]	@ (8006b70 <obd+0x638>)
 80068c0:	edd3 7a00 	vldr	s15, [r3]
 80068c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c8:	ee17 3a90 	vmov	r3, s15
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <obd+0x3ae>
                            s=snprintf(buffer,64,"The warmup status of the engine :Closed Loop - Normal\n");
 80068d4:	4aaa      	ldr	r2, [pc, #680]	@ (8006b80 <obd+0x648>)
 80068d6:	2140      	movs	r1, #64	@ 0x40
 80068d8:	48a7      	ldr	r0, [pc, #668]	@ (8006b78 <obd+0x640>)
 80068da:	f010 ffd9 	bl	8017890 <sniprintf>
 80068de:	4603      	mov	r3, r0
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4ba6      	ldr	r3, [pc, #664]	@ (8006b7c <obd+0x644>)
 80068e4:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        if (((int) engine_data) & 0x04) {   // Open loop,
 80068e6:	4ba2      	ldr	r3, [pc, #648]	@ (8006b70 <obd+0x638>)
 80068e8:	edd3 7a00 	vldr	s15, [r3]
 80068ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068f0:	ee17 3a90 	vmov	r3, s15
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <obd+0x3d6>
                            s=snprintf(buffer,64,"The warmup status of the engine :Open Loop-Load/Decel\n");
 80068fc:	4aa1      	ldr	r2, [pc, #644]	@ (8006b84 <obd+0x64c>)
 80068fe:	2140      	movs	r1, #64	@ 0x40
 8006900:	489d      	ldr	r0, [pc, #628]	@ (8006b78 <obd+0x640>)
 8006902:	f010 ffc5 	bl	8017890 <sniprintf>
 8006906:	4603      	mov	r3, r0
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b9c      	ldr	r3, [pc, #624]	@ (8006b7c <obd+0x644>)
 800690c:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        if (((int) engine_data) & 0x08) {   // Open loop - system failure
 800690e:	4b98      	ldr	r3, [pc, #608]	@ (8006b70 <obd+0x638>)
 8006910:	edd3 7a00 	vldr	s15, [r3]
 8006914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006918:	ee17 3a90 	vmov	r3, s15
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <obd+0x3fe>
                            s=snprintf(buffer,64,"The warmup status of the engine :Open Loop - FAILURE\n");
 8006924:	4a98      	ldr	r2, [pc, #608]	@ (8006b88 <obd+0x650>)
 8006926:	2140      	movs	r1, #64	@ 0x40
 8006928:	4893      	ldr	r0, [pc, #588]	@ (8006b78 <obd+0x640>)
 800692a:	f010 ffb1 	bl	8017890 <sniprintf>
 800692e:	4603      	mov	r3, r0
 8006930:	b2da      	uxtb	r2, r3
 8006932:	4b92      	ldr	r3, [pc, #584]	@ (8006b7c <obd+0x644>)
 8006934:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        if (((int) engine_data) & 0x10) {   // Closed Loop - O2 Sensor feedback failure
 8006936:	4b8e      	ldr	r3, [pc, #568]	@ (8006b70 <obd+0x638>)
 8006938:	edd3 7a00 	vldr	s15, [r3]
 800693c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006940:	ee17 3a90 	vmov	r3, s15
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <obd+0x426>
                            s=snprintf(buffer,64,"The warmup status of the engine : Closed Loop - O2Fail\n");
 800694c:	4a8f      	ldr	r2, [pc, #572]	@ (8006b8c <obd+0x654>)
 800694e:	2140      	movs	r1, #64	@ 0x40
 8006950:	4889      	ldr	r0, [pc, #548]	@ (8006b78 <obd+0x640>)
 8006952:	f010 ff9d 	bl	8017890 <sniprintf>
 8006956:	4603      	mov	r3, r0
 8006958:	b2da      	uxtb	r2, r3
 800695a:	4b88      	ldr	r3, [pc, #544]	@ (8006b7c <obd+0x644>)
 800695c:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        if ((((int) engine_data) & 0x20) | (((int) engine_data) & 0x40) | (((int) engine_data) & 0x80)) { //These shouldnt be on, assume Proprietary status
 800695e:	4b84      	ldr	r3, [pc, #528]	@ (8006b70 <obd+0x638>)
 8006960:	edd3 7a00 	vldr	s15, [r3]
 8006964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006968:	ee17 3a90 	vmov	r3, s15
 800696c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006970:	2b00      	cmp	r3, #0
 8006972:	f002 8149 	beq.w	8008c08 <obd+0x26d0>
                            s=snprintf(buffer,64,"The warmup status of the engine : Unsupported Status\n");
 8006976:	4a86      	ldr	r2, [pc, #536]	@ (8006b90 <obd+0x658>)
 8006978:	2140      	movs	r1, #64	@ 0x40
 800697a:	487f      	ldr	r0, [pc, #508]	@ (8006b78 <obd+0x640>)
 800697c:	f010 ff88 	bl	8017890 <sniprintf>
 8006980:	4603      	mov	r3, r0
 8006982:	b2da      	uxtb	r2, r3
 8006984:	4b7d      	ldr	r3, [pc, #500]	@ (8006b7c <obd+0x644>)
 8006986:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                        break;
 8006988:	f002 b93e 	b.w	8008c08 <obd+0x26d0>
                    case ENGINE_LOAD:                       // A*100/255
                        engine_data = (R[3]*100)/255;
 800698c:	4b77      	ldr	r3, [pc, #476]	@ (8006b6c <obd+0x634>)
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	461a      	mov	r2, r3
 8006992:	2364      	movs	r3, #100	@ 0x64
 8006994:	fb02 f303 	mul.w	r3, r2, r3
 8006998:	4a7e      	ldr	r2, [pc, #504]	@ (8006b94 <obd+0x65c>)
 800699a:	fb82 1203 	smull	r1, r2, r2, r3
 800699e:	441a      	add	r2, r3
 80069a0:	11d2      	asrs	r2, r2, #7
 80069a2:	17db      	asrs	r3, r3, #31
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ae:	4b70      	ldr	r3, [pc, #448]	@ (8006b70 <obd+0x638>)
 80069b0:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %% ",(int) engine_data);
 80069b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006b70 <obd+0x638>)
 80069b6:	edd3 7a00 	vldr	s15, [r3]
 80069ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069be:	ee17 2a90 	vmov	r2, s15
 80069c2:	4975      	ldr	r1, [pc, #468]	@ (8006b98 <obd+0x660>)
 80069c4:	486c      	ldr	r0, [pc, #432]	@ (8006b78 <obd+0x640>)
 80069c6:	f010 ff97 	bl	80178f8 <siprintf>
                        break;
 80069ca:	f002 b922 	b.w	8008c12 <obd+0x26da>
                    case ENGINE_COOLANT_TEMP:               //     A-40              [degree C]
                        engine_data = R[3] - 40;
 80069ce:	4b67      	ldr	r3, [pc, #412]	@ (8006b6c <obd+0x634>)
 80069d0:	78db      	ldrb	r3, [r3, #3]
 80069d2:	3b28      	subs	r3, #40	@ 0x28
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069dc:	4b64      	ldr	r3, [pc, #400]	@ (8006b70 <obd+0x638>)
 80069de:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d degC ",(int) engine_data);
 80069e2:	4b63      	ldr	r3, [pc, #396]	@ (8006b70 <obd+0x638>)
 80069e4:	edd3 7a00 	vldr	s15, [r3]
 80069e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ec:	ee17 2a90 	vmov	r2, s15
 80069f0:	496a      	ldr	r1, [pc, #424]	@ (8006b9c <obd+0x664>)
 80069f2:	4861      	ldr	r0, [pc, #388]	@ (8006b78 <obd+0x640>)
 80069f4:	f010 ff80 	bl	80178f8 <siprintf>
                        break;
 80069f8:	f002 b90b 	b.w	8008c12 <obd+0x26da>
                    case ST_FUEL_TRIM_1:                    // (A-128)*100/128
                        engine_data = ((R[3]-128)*(100/128));
 80069fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b70 <obd+0x638>)
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %% ", (int) engine_data);
 8006a04:	4b5a      	ldr	r3, [pc, #360]	@ (8006b70 <obd+0x638>)
 8006a06:	edd3 7a00 	vldr	s15, [r3]
 8006a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a0e:	ee17 2a90 	vmov	r2, s15
 8006a12:	4961      	ldr	r1, [pc, #388]	@ (8006b98 <obd+0x660>)
 8006a14:	4858      	ldr	r0, [pc, #352]	@ (8006b78 <obd+0x640>)
 8006a16:	f010 ff6f 	bl	80178f8 <siprintf>
                        break;
 8006a1a:	f002 b8fa 	b.w	8008c12 <obd+0x26da>
                    case LT_FUEL_TRIM_1:                    // (A-128)*100/128
                        engine_data = ((R[3]-128)*(100/128));
 8006a1e:	4b54      	ldr	r3, [pc, #336]	@ (8006b70 <obd+0x638>)
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %% ", (int) engine_data);
 8006a26:	4b52      	ldr	r3, [pc, #328]	@ (8006b70 <obd+0x638>)
 8006a28:	edd3 7a00 	vldr	s15, [r3]
 8006a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a30:	ee17 2a90 	vmov	r2, s15
 8006a34:	4958      	ldr	r1, [pc, #352]	@ (8006b98 <obd+0x660>)
 8006a36:	4850      	ldr	r0, [pc, #320]	@ (8006b78 <obd+0x640>)
 8006a38:	f010 ff5e 	bl	80178f8 <siprintf>
                        break;
 8006a3c:	f002 b8e9 	b.w	8008c12 <obd+0x26da>
                    case ST_FUEL_TRIM_2:                    // (A-128)*100/128
                        engine_data = ((R[3]-128)*(100/128));
 8006a40:	4b4b      	ldr	r3, [pc, #300]	@ (8006b70 <obd+0x638>)
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %% ", (int) engine_data);
 8006a48:	4b49      	ldr	r3, [pc, #292]	@ (8006b70 <obd+0x638>)
 8006a4a:	edd3 7a00 	vldr	s15, [r3]
 8006a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a52:	ee17 2a90 	vmov	r2, s15
 8006a56:	4950      	ldr	r1, [pc, #320]	@ (8006b98 <obd+0x660>)
 8006a58:	4847      	ldr	r0, [pc, #284]	@ (8006b78 <obd+0x640>)
 8006a5a:	f010 ff4d 	bl	80178f8 <siprintf>
                        break;
 8006a5e:	f002 b8d8 	b.w	8008c12 <obd+0x26da>
                    case LT_FUEL_TRIM_2:                    // (A-128)*100/128
                        engine_data = ((R[3]-128)*(100/128));
 8006a62:	4b43      	ldr	r3, [pc, #268]	@ (8006b70 <obd+0x638>)
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %% ", (int) engine_data);
 8006a6a:	4b41      	ldr	r3, [pc, #260]	@ (8006b70 <obd+0x638>)
 8006a6c:	edd3 7a00 	vldr	s15, [r3]
 8006a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a74:	ee17 2a90 	vmov	r2, s15
 8006a78:	4947      	ldr	r1, [pc, #284]	@ (8006b98 <obd+0x660>)
 8006a7a:	483f      	ldr	r0, [pc, #252]	@ (8006b78 <obd+0x640>)
 8006a7c:	f010 ff3c 	bl	80178f8 <siprintf>
                        break;
 8006a80:	f002 b8c7 	b.w	8008c12 <obd+0x26da>
                    case FUEL_PRESSURE:                     // A*3
                        engine_data = (R[3]*3);
 8006a84:	4b39      	ldr	r3, [pc, #228]	@ (8006b6c <obd+0x634>)
 8006a86:	78db      	ldrb	r3, [r3, #3]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a98:	4b35      	ldr	r3, [pc, #212]	@ (8006b70 <obd+0x638>)
 8006a9a:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,40,"The fuel pressure :%d kPa\n",(int) engine_data);
 8006a9e:	4b34      	ldr	r3, [pc, #208]	@ (8006b70 <obd+0x638>)
 8006aa0:	edd3 7a00 	vldr	s15, [r3]
 8006aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa8:	ee17 3a90 	vmov	r3, s15
 8006aac:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba0 <obd+0x668>)
 8006aae:	2128      	movs	r1, #40	@ 0x28
 8006ab0:	4831      	ldr	r0, [pc, #196]	@ (8006b78 <obd+0x640>)
 8006ab2:	f010 feed 	bl	8017890 <sniprintf>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	4b30      	ldr	r3, [pc, #192]	@ (8006b7c <obd+0x644>)
 8006abc:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer, s);
                        break;
 8006abe:	f002 b8a8 	b.w	8008c12 <obd+0x26da>
                    case INTAKE_PRESSURE:                   // A
                        engine_data = R[3];
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b6c <obd+0x634>)
 8006ac4:	78db      	ldrb	r3, [r3, #3]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	4b28      	ldr	r3, [pc, #160]	@ (8006b70 <obd+0x638>)
 8006ad0:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d kPa",(int) engine_data);
 8006ad4:	4b26      	ldr	r3, [pc, #152]	@ (8006b70 <obd+0x638>)
 8006ad6:	edd3 7a00 	vldr	s15, [r3]
 8006ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ade:	ee17 2a90 	vmov	r2, s15
 8006ae2:	4930      	ldr	r1, [pc, #192]	@ (8006ba4 <obd+0x66c>)
 8006ae4:	4824      	ldr	r0, [pc, #144]	@ (8006b78 <obd+0x640>)
 8006ae6:	f010 ff07 	bl	80178f8 <siprintf>
                        break;
 8006aea:	f002 b892 	b.w	8008c12 <obd+0x26da>
                    case ENGINE_RPM:                        //   ((A*256)+B)/4    [RPM]
                        engine_data = ((R[3]*256) + R[4])/4;
 8006aee:	4b1f      	ldr	r3, [pc, #124]	@ (8006b6c <obd+0x634>)
 8006af0:	78db      	ldrb	r3, [r3, #3]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b6c <obd+0x634>)
 8006af6:	7912      	ldrb	r2, [r2, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da00      	bge.n	8006b00 <obd+0x5c8>
 8006afe:	3303      	adds	r3, #3
 8006b00:	109b      	asrs	r3, r3, #2
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0a:	4b19      	ldr	r3, [pc, #100]	@ (8006b70 <obd+0x638>)
 8006b0c:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d rpm ",(int) engine_data);
 8006b10:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <obd+0x638>)
 8006b12:	edd3 7a00 	vldr	s15, [r3]
 8006b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b1a:	ee17 2a90 	vmov	r2, s15
 8006b1e:	4922      	ldr	r1, [pc, #136]	@ (8006ba8 <obd+0x670>)
 8006b20:	4815      	ldr	r0, [pc, #84]	@ (8006b78 <obd+0x640>)
 8006b22:	f010 fee9 	bl	80178f8 <siprintf>
                        break;
 8006b26:	f002 b874 	b.w	8008c12 <obd+0x26da>
                    case VEHICLE_SPEED:                     // A                  [km]
                        engine_data = R[3];
 8006b2a:	4b10      	ldr	r3, [pc, #64]	@ (8006b6c <obd+0x634>)
 8006b2c:	78db      	ldrb	r3, [r3, #3]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <obd+0x638>)
 8006b38:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,30,"The speed car: %dkm\n",(int) engine_data);
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <obd+0x638>)
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b46:	ee17 3a90 	vmov	r3, s15
 8006b4a:	4a18      	ldr	r2, [pc, #96]	@ (8006bac <obd+0x674>)
 8006b4c:	211e      	movs	r1, #30
 8006b4e:	480a      	ldr	r0, [pc, #40]	@ (8006b78 <obd+0x640>)
 8006b50:	f010 fe9e 	bl	8017890 <sniprintf>
 8006b54:	4603      	mov	r3, r0
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <obd+0x644>)
 8006b5a:	701a      	strb	r2, [r3, #0]
                        CDC_Transmit_FS(buffer,s);
 8006b5c:	4b07      	ldr	r3, [pc, #28]	@ (8006b7c <obd+0x644>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	4619      	mov	r1, r3
 8006b62:	4805      	ldr	r0, [pc, #20]	@ (8006b78 <obd+0x640>)
 8006b64:	f010 f914 	bl	8016d90 <CDC_Transmit_FS>
                        break;
 8006b68:	f002 b853 	b.w	8008c12 <obd+0x26da>
 8006b6c:	2400226c 	.word	0x2400226c
 8006b70:	2400245c 	.word	0x2400245c
 8006b74:	0801901c 	.word	0x0801901c
 8006b78:	24002284 	.word	0x24002284
 8006b7c:	240022c4 	.word	0x240022c4
 8006b80:	08019054 	.word	0x08019054
 8006b84:	0801908c 	.word	0x0801908c
 8006b88:	080190c4 	.word	0x080190c4
 8006b8c:	080190fc 	.word	0x080190fc
 8006b90:	08019134 	.word	0x08019134
 8006b94:	80808081 	.word	0x80808081
 8006b98:	0801916c 	.word	0x0801916c
 8006b9c:	08019174 	.word	0x08019174
 8006ba0:	08019180 	.word	0x08019180
 8006ba4:	0801919c 	.word	0x0801919c
 8006ba8:	080191a4 	.word	0x080191a4
 8006bac:	080191ac 	.word	0x080191ac
                    case TIMING_ADVANCE:                    // A/2 - 64
                        engine_data = (R[3]/2) - 64;
 8006bb0:	4baf      	ldr	r3, [pc, #700]	@ (8006e70 <obd+0x938>)
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	3b40      	subs	r3, #64	@ 0x40
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bc2:	4bac      	ldr	r3, [pc, #688]	@ (8006e74 <obd+0x93c>)
 8006bc4:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Deg",(int) engine_data);
 8006bc8:	4baa      	ldr	r3, [pc, #680]	@ (8006e74 <obd+0x93c>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	49a8      	ldr	r1, [pc, #672]	@ (8006e78 <obd+0x940>)
 8006bd8:	48a8      	ldr	r0, [pc, #672]	@ (8006e7c <obd+0x944>)
 8006bda:	f010 fe8d 	bl	80178f8 <siprintf>
                        break;
 8006bde:	f002 b818 	b.w	8008c12 <obd+0x26da>
                    case INTAKE_TEMP:                       // A - 40
                        engine_data = (R[3] - 40);
 8006be2:	4ba3      	ldr	r3, [pc, #652]	@ (8006e70 <obd+0x938>)
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	3b28      	subs	r3, #40	@ 0x28
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8006e74 <obd+0x93c>)
 8006bf2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 8006bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e74 <obd+0x93c>)
 8006bf8:	edd3 7a00 	vldr	s15, [r3]
 8006bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c00:	ee17 2a90 	vmov	r2, s15
 8006c04:	499e      	ldr	r1, [pc, #632]	@ (8006e80 <obd+0x948>)
 8006c06:	489d      	ldr	r0, [pc, #628]	@ (8006e7c <obd+0x944>)
 8006c08:	f010 fe76 	bl	80178f8 <siprintf>
                        break;
 8006c0c:	f002 b801 	b.w	8008c12 <obd+0x26da>
                    case MAF_SENSOR:                        // ((256*A)+B) / 100  [g/s]
                        engine_data = ((R[3]*256) + R[4])/100;
 8006c10:	4b97      	ldr	r3, [pc, #604]	@ (8006e70 <obd+0x938>)
 8006c12:	78db      	ldrb	r3, [r3, #3]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	4a96      	ldr	r2, [pc, #600]	@ (8006e70 <obd+0x938>)
 8006c18:	7912      	ldrb	r2, [r2, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	4a99      	ldr	r2, [pc, #612]	@ (8006e84 <obd+0x94c>)
 8006c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8006c22:	1152      	asrs	r2, r2, #5
 8006c24:	17db      	asrs	r3, r3, #31
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c30:	4b90      	ldr	r3, [pc, #576]	@ (8006e74 <obd+0x93c>)
 8006c32:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d g/s",(int) engine_data);
 8006c36:	4b8f      	ldr	r3, [pc, #572]	@ (8006e74 <obd+0x93c>)
 8006c38:	edd3 7a00 	vldr	s15, [r3]
 8006c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	4990      	ldr	r1, [pc, #576]	@ (8006e88 <obd+0x950>)
 8006c46:	488d      	ldr	r0, [pc, #564]	@ (8006e7c <obd+0x944>)
 8006c48:	f010 fe56 	bl	80178f8 <siprintf>
                        break;
 8006c4c:	f001 bfe1 	b.w	8008c12 <obd+0x26da>
                    case THROTTLE:                          // A*100/255
                        engine_data = (R[3]*100)/255;
 8006c50:	4b87      	ldr	r3, [pc, #540]	@ (8006e70 <obd+0x938>)
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	461a      	mov	r2, r3
 8006c56:	2364      	movs	r3, #100	@ 0x64
 8006c58:	fb02 f303 	mul.w	r3, r2, r3
 8006c5c:	4a8b      	ldr	r2, [pc, #556]	@ (8006e8c <obd+0x954>)
 8006c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8006c62:	441a      	add	r2, r3
 8006c64:	11d2      	asrs	r2, r2, #7
 8006c66:	17db      	asrs	r3, r3, #31
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c72:	4b80      	ldr	r3, [pc, #512]	@ (8006e74 <obd+0x93c>)
 8006c74:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %% ",(int) engine_data);
 8006c78:	4b7e      	ldr	r3, [pc, #504]	@ (8006e74 <obd+0x93c>)
 8006c7a:	edd3 7a00 	vldr	s15, [r3]
 8006c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	4982      	ldr	r1, [pc, #520]	@ (8006e90 <obd+0x958>)
 8006c88:	487c      	ldr	r0, [pc, #496]	@ (8006e7c <obd+0x944>)
 8006c8a:	f010 fe35 	bl	80178f8 <siprintf>
                        break;
 8006c8e:	f001 bfc0 	b.w	8008c12 <obd+0x26da>
                    case COMMANDED_SEC_AIR:                 // bit encoded
                        engine_data = R[3];
 8006c92:	4b77      	ldr	r3, [pc, #476]	@ (8006e70 <obd+0x938>)
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	4b75      	ldr	r3, [pc, #468]	@ (8006e74 <obd+0x93c>)
 8006ca0:	edc3 7a00 	vstr	s15, [r3]
                        if (((int) engine_data) & 0x01) {           //Upstream of Catalytic Converter
 8006ca4:	4b73      	ldr	r3, [pc, #460]	@ (8006e74 <obd+0x93c>)
 8006ca6:	edd3 7a00 	vldr	s15, [r3]
 8006caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cae:	ee17 3a90 	vmov	r3, s15
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <obd+0x78a>
                            sprintf(buffer,"Upstream of Cat.");
 8006cba:	4976      	ldr	r1, [pc, #472]	@ (8006e94 <obd+0x95c>)
 8006cbc:	486f      	ldr	r0, [pc, #444]	@ (8006e7c <obd+0x944>)
 8006cbe:	f010 fe1b 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x02) {           //Downstream of Catalytic Converter
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006e74 <obd+0x93c>)
 8006cc4:	edd3 7a00 	vldr	s15, [r3]
 8006cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ccc:	ee17 3a90 	vmov	r3, s15
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <obd+0x7a8>
                            sprintf(buffer,"Downstream of Cat.");
 8006cd8:	496f      	ldr	r1, [pc, #444]	@ (8006e98 <obd+0x960>)
 8006cda:	4868      	ldr	r0, [pc, #416]	@ (8006e7c <obd+0x944>)
 8006cdc:	f010 fe0c 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x04) {           //From outside atmosphere or off
 8006ce0:	4b64      	ldr	r3, [pc, #400]	@ (8006e74 <obd+0x93c>)
 8006ce2:	edd3 7a00 	vldr	s15, [r3]
 8006ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cea:	ee17 3a90 	vmov	r3, s15
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f001 878a 	beq.w	8008c0c <obd+0x26d4>
                            sprintf(buffer,"Off");
 8006cf8:	4968      	ldr	r1, [pc, #416]	@ (8006e9c <obd+0x964>)
 8006cfa:	4860      	ldr	r0, [pc, #384]	@ (8006e7c <obd+0x944>)
 8006cfc:	f010 fdfc 	bl	80178f8 <siprintf>
                        }
                        break;
 8006d00:	f001 bf84 	b.w	8008c0c <obd+0x26d4>
                    case O2_SENS_PRES: {                    // A [A0..A3] == Bank 1, [A4..A7] == Bank 2
                        engine_data = (R[3]);  //Check # of O2 sensors present by masking individual bits and counting
 8006d04:	4b5a      	ldr	r3, [pc, #360]	@ (8006e70 <obd+0x938>)
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d10:	4b58      	ldr	r3, [pc, #352]	@ (8006e74 <obd+0x93c>)
 8006d12:	edc3 7a00 	vstr	s15, [r3]
                        int o2pres = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]
                        if (((int) engine_data) & 0x01) {           // Bank 1 Sensor 1
 8006d1a:	4b56      	ldr	r3, [pc, #344]	@ (8006e74 <obd+0x93c>)
 8006d1c:	edd3 7a00 	vldr	s15, [r3]
 8006d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d24:	ee17 3a90 	vmov	r3, s15
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <obd+0x7fe>
                            o2pres++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3301      	adds	r3, #1
 8006d34:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x02) {           // Bank 1 Sensor 2
 8006d36:	4b4f      	ldr	r3, [pc, #316]	@ (8006e74 <obd+0x93c>)
 8006d38:	edd3 7a00 	vldr	s15, [r3]
 8006d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d40:	ee17 3a90 	vmov	r3, s15
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <obd+0x81a>
                            o2pres++;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x04) {           // Bank 1 Sensor 3
 8006d52:	4b48      	ldr	r3, [pc, #288]	@ (8006e74 <obd+0x93c>)
 8006d54:	edd3 7a00 	vldr	s15, [r3]
 8006d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d5c:	ee17 3a90 	vmov	r3, s15
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <obd+0x836>
                            o2pres++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x08) {           // Bank 1 Sensor 4
 8006d6e:	4b41      	ldr	r3, [pc, #260]	@ (8006e74 <obd+0x93c>)
 8006d70:	edd3 7a00 	vldr	s15, [r3]
 8006d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d78:	ee17 3a90 	vmov	r3, s15
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <obd+0x852>
                            o2pres++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3301      	adds	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x10) {           // Bank 2 Sensor 1
 8006d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e74 <obd+0x93c>)
 8006d8c:	edd3 7a00 	vldr	s15, [r3]
 8006d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d94:	ee17 3a90 	vmov	r3, s15
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <obd+0x86e>
                            o2pres++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x20) {           // Bank 2 Sensor 2
 8006da6:	4b33      	ldr	r3, [pc, #204]	@ (8006e74 <obd+0x93c>)
 8006da8:	edd3 7a00 	vldr	s15, [r3]
 8006dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db0:	ee17 3a90 	vmov	r3, s15
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <obd+0x88a>
                            o2pres++;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x40) {           // Bank 2 Sensor 3
 8006dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e74 <obd+0x93c>)
 8006dc4:	edd3 7a00 	vldr	s15, [r3]
 8006dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dcc:	ee17 3a90 	vmov	r3, s15
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <obd+0x8a6>
                            o2pres++;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	607b      	str	r3, [r7, #4]
                        }
                        if (((int) engine_data) & 0x80) {           // Bank 2 Sensor 4
 8006dde:	4b25      	ldr	r3, [pc, #148]	@ (8006e74 <obd+0x93c>)
 8006de0:	edd3 7a00 	vldr	s15, [r3]
 8006de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de8:	ee17 3a90 	vmov	r3, s15
 8006dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <obd+0x8c2>
                            o2pres++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
                        }
                        sprintf(buffer,"%d Present",(int) o2pres);
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4928      	ldr	r1, [pc, #160]	@ (8006ea0 <obd+0x968>)
 8006dfe:	481f      	ldr	r0, [pc, #124]	@ (8006e7c <obd+0x944>)
 8006e00:	f010 fd7a 	bl	80178f8 <siprintf>
                        break;
 8006e04:	f001 bf05 	b.w	8008c12 <obd+0x26da>
                    }
                    case O2_B1S1_VOLTAGE:                   // A/200, (B-128) * 100/128
                        engine_data = (R[3]/200);
 8006e08:	4b19      	ldr	r3, [pc, #100]	@ (8006e70 <obd+0x938>)
 8006e0a:	78db      	ldrb	r3, [r3, #3]
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e84 <obd+0x94c>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	099b      	lsrs	r3, r3, #6
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1e:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <obd+0x93c>)
 8006e20:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);              //Raw O2 Voltage
 8006e24:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <obd+0x93c>)
 8006e26:	edd3 7a00 	vldr	s15, [r3]
 8006e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e2e:	ee17 2a90 	vmov	r2, s15
 8006e32:	491c      	ldr	r1, [pc, #112]	@ (8006ea4 <obd+0x96c>)
 8006e34:	4811      	ldr	r0, [pc, #68]	@ (8006e7c <obd+0x944>)
 8006e36:	f010 fd5f 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <obd+0x938>)
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <obd+0x916>
                            sprintf(buffer,"Not Present");
 8006e42:	4919      	ldr	r1, [pc, #100]	@ (8006ea8 <obd+0x970>)
 8006e44:	480d      	ldr	r0, [pc, #52]	@ (8006e7c <obd+0x944>)
 8006e46:	f010 fd57 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);        //Calculated lean/rich
                        }
                        break;
 8006e4a:	f001 bee2 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <obd+0x93c>)
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);        //Calculated lean/rich
 8006e56:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <obd+0x93c>)
 8006e58:	edd3 7a00 	vldr	s15, [r3]
 8006e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e60:	ee17 2a90 	vmov	r2, s15
 8006e64:	490a      	ldr	r1, [pc, #40]	@ (8006e90 <obd+0x958>)
 8006e66:	4811      	ldr	r0, [pc, #68]	@ (8006eac <obd+0x974>)
 8006e68:	f010 fd46 	bl	80178f8 <siprintf>
                        break;
 8006e6c:	f001 bed1 	b.w	8008c12 <obd+0x26da>
 8006e70:	2400226c 	.word	0x2400226c
 8006e74:	2400245c 	.word	0x2400245c
 8006e78:	080191c4 	.word	0x080191c4
 8006e7c:	24002284 	.word	0x24002284
 8006e80:	080191cc 	.word	0x080191cc
 8006e84:	51eb851f 	.word	0x51eb851f
 8006e88:	080191d4 	.word	0x080191d4
 8006e8c:	80808081 	.word	0x80808081
 8006e90:	0801916c 	.word	0x0801916c
 8006e94:	080191dc 	.word	0x080191dc
 8006e98:	080191f0 	.word	0x080191f0
 8006e9c:	08019204 	.word	0x08019204
 8006ea0:	08019208 	.word	0x08019208
 8006ea4:	08019214 	.word	0x08019214
 8006ea8:	0801921c 	.word	0x0801921c
 8006eac:	24002324 	.word	0x24002324
                    case O2_B1S2_VOLTAGE:                   //
                        engine_data = (R[3]/200);
 8006eb0:	4bb5      	ldr	r3, [pc, #724]	@ (8007188 <obd+0xc50>)
 8006eb2:	78db      	ldrb	r3, [r3, #3]
 8006eb4:	4ab5      	ldr	r2, [pc, #724]	@ (800718c <obd+0xc54>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	099b      	lsrs	r3, r3, #6
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ec6:	4bb2      	ldr	r3, [pc, #712]	@ (8007190 <obd+0xc58>)
 8006ec8:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 8006ecc:	4bb0      	ldr	r3, [pc, #704]	@ (8007190 <obd+0xc58>)
 8006ece:	edd3 7a00 	vldr	s15, [r3]
 8006ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	49ae      	ldr	r1, [pc, #696]	@ (8007194 <obd+0xc5c>)
 8006edc:	48ae      	ldr	r0, [pc, #696]	@ (8007198 <obd+0xc60>)
 8006ede:	f010 fd0b 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8006ee2:	4ba9      	ldr	r3, [pc, #676]	@ (8007188 <obd+0xc50>)
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <obd+0x9be>
                            sprintf(buffer,"Not Present");
 8006eea:	49ac      	ldr	r1, [pc, #688]	@ (800719c <obd+0xc64>)
 8006eec:	48aa      	ldr	r0, [pc, #680]	@ (8007198 <obd+0xc60>)
 8006eee:	f010 fd03 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 8006ef2:	f001 be8e 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8006ef6:	4ba6      	ldr	r3, [pc, #664]	@ (8007190 <obd+0xc58>)
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 8006efe:	4ba4      	ldr	r3, [pc, #656]	@ (8007190 <obd+0xc58>)
 8006f00:	edd3 7a00 	vldr	s15, [r3]
 8006f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f08:	ee17 2a90 	vmov	r2, s15
 8006f0c:	49a4      	ldr	r1, [pc, #656]	@ (80071a0 <obd+0xc68>)
 8006f0e:	48a5      	ldr	r0, [pc, #660]	@ (80071a4 <obd+0xc6c>)
 8006f10:	f010 fcf2 	bl	80178f8 <siprintf>
                        break;
 8006f14:	f001 be7d 	b.w	8008c12 <obd+0x26da>
                    case O2_B1S3_VOLTAGE:                   //
                        engine_data = (R[3]/200);
 8006f18:	4b9b      	ldr	r3, [pc, #620]	@ (8007188 <obd+0xc50>)
 8006f1a:	78db      	ldrb	r3, [r3, #3]
 8006f1c:	4a9b      	ldr	r2, [pc, #620]	@ (800718c <obd+0xc54>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	099b      	lsrs	r3, r3, #6
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f2e:	4b98      	ldr	r3, [pc, #608]	@ (8007190 <obd+0xc58>)
 8006f30:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 8006f34:	4b96      	ldr	r3, [pc, #600]	@ (8007190 <obd+0xc58>)
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f3e:	ee17 2a90 	vmov	r2, s15
 8006f42:	4994      	ldr	r1, [pc, #592]	@ (8007194 <obd+0xc5c>)
 8006f44:	4894      	ldr	r0, [pc, #592]	@ (8007198 <obd+0xc60>)
 8006f46:	f010 fcd7 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8007188 <obd+0xc50>)
 8006f4c:	791b      	ldrb	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <obd+0xa26>
                            sprintf(buffer,"Not Present");
 8006f52:	4992      	ldr	r1, [pc, #584]	@ (800719c <obd+0xc64>)
 8006f54:	4890      	ldr	r0, [pc, #576]	@ (8007198 <obd+0xc60>)
 8006f56:	f010 fccf 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 8006f5a:	f001 be5a 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8006f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8007190 <obd+0xc58>)
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 8006f66:	4b8a      	ldr	r3, [pc, #552]	@ (8007190 <obd+0xc58>)
 8006f68:	edd3 7a00 	vldr	s15, [r3]
 8006f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f70:	ee17 2a90 	vmov	r2, s15
 8006f74:	498a      	ldr	r1, [pc, #552]	@ (80071a0 <obd+0xc68>)
 8006f76:	488b      	ldr	r0, [pc, #556]	@ (80071a4 <obd+0xc6c>)
 8006f78:	f010 fcbe 	bl	80178f8 <siprintf>
                        break;
 8006f7c:	f001 be49 	b.w	8008c12 <obd+0x26da>
                    case O2_B1S4_VOLTAGE:                   //
                        engine_data = (R[3]/200);
 8006f80:	4b81      	ldr	r3, [pc, #516]	@ (8007188 <obd+0xc50>)
 8006f82:	78db      	ldrb	r3, [r3, #3]
 8006f84:	4a81      	ldr	r2, [pc, #516]	@ (800718c <obd+0xc54>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	099b      	lsrs	r3, r3, #6
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f96:	4b7e      	ldr	r3, [pc, #504]	@ (8007190 <obd+0xc58>)
 8006f98:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 8006f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8007190 <obd+0xc58>)
 8006f9e:	edd3 7a00 	vldr	s15, [r3]
 8006fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa6:	ee17 2a90 	vmov	r2, s15
 8006faa:	497a      	ldr	r1, [pc, #488]	@ (8007194 <obd+0xc5c>)
 8006fac:	487a      	ldr	r0, [pc, #488]	@ (8007198 <obd+0xc60>)
 8006fae:	f010 fca3 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8006fb2:	4b75      	ldr	r3, [pc, #468]	@ (8007188 <obd+0xc50>)
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <obd+0xa8e>
                            sprintf(buffer,"Not Present");
 8006fba:	4978      	ldr	r1, [pc, #480]	@ (800719c <obd+0xc64>)
 8006fbc:	4876      	ldr	r0, [pc, #472]	@ (8007198 <obd+0xc60>)
 8006fbe:	f010 fc9b 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 8006fc2:	f001 be26 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8006fc6:	4b72      	ldr	r3, [pc, #456]	@ (8007190 <obd+0xc58>)
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 8006fce:	4b70      	ldr	r3, [pc, #448]	@ (8007190 <obd+0xc58>)
 8006fd0:	edd3 7a00 	vldr	s15, [r3]
 8006fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fd8:	ee17 2a90 	vmov	r2, s15
 8006fdc:	4970      	ldr	r1, [pc, #448]	@ (80071a0 <obd+0xc68>)
 8006fde:	4871      	ldr	r0, [pc, #452]	@ (80071a4 <obd+0xc6c>)
 8006fe0:	f010 fc8a 	bl	80178f8 <siprintf>
                        break;
 8006fe4:	f001 be15 	b.w	8008c12 <obd+0x26da>
                    case O2_B2S1_VOLTAGE:                   //
                        engine_data = (R[3]/200);
 8006fe8:	4b67      	ldr	r3, [pc, #412]	@ (8007188 <obd+0xc50>)
 8006fea:	78db      	ldrb	r3, [r3, #3]
 8006fec:	4a67      	ldr	r2, [pc, #412]	@ (800718c <obd+0xc54>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffe:	4b64      	ldr	r3, [pc, #400]	@ (8007190 <obd+0xc58>)
 8007000:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 8007004:	4b62      	ldr	r3, [pc, #392]	@ (8007190 <obd+0xc58>)
 8007006:	edd3 7a00 	vldr	s15, [r3]
 800700a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700e:	ee17 2a90 	vmov	r2, s15
 8007012:	4960      	ldr	r1, [pc, #384]	@ (8007194 <obd+0xc5c>)
 8007014:	4860      	ldr	r0, [pc, #384]	@ (8007198 <obd+0xc60>)
 8007016:	f010 fc6f 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 800701a:	4b5b      	ldr	r3, [pc, #364]	@ (8007188 <obd+0xc50>)
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <obd+0xaf6>
                            sprintf(buffer,"Not Present");
 8007022:	495e      	ldr	r1, [pc, #376]	@ (800719c <obd+0xc64>)
 8007024:	485c      	ldr	r0, [pc, #368]	@ (8007198 <obd+0xc60>)
 8007026:	f010 fc67 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 800702a:	f001 bdf2 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 800702e:	4b58      	ldr	r3, [pc, #352]	@ (8007190 <obd+0xc58>)
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 8007036:	4b56      	ldr	r3, [pc, #344]	@ (8007190 <obd+0xc58>)
 8007038:	edd3 7a00 	vldr	s15, [r3]
 800703c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007040:	ee17 2a90 	vmov	r2, s15
 8007044:	4956      	ldr	r1, [pc, #344]	@ (80071a0 <obd+0xc68>)
 8007046:	4857      	ldr	r0, [pc, #348]	@ (80071a4 <obd+0xc6c>)
 8007048:	f010 fc56 	bl	80178f8 <siprintf>
                        break;
 800704c:	f001 bde1 	b.w	8008c12 <obd+0x26da>
                    case O2_B2S2_VOLTAGE:                   //
                        engine_data = (R[3]/200);
 8007050:	4b4d      	ldr	r3, [pc, #308]	@ (8007188 <obd+0xc50>)
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	4a4d      	ldr	r2, [pc, #308]	@ (800718c <obd+0xc54>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	099b      	lsrs	r3, r3, #6
 800705c:	b2db      	uxtb	r3, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007066:	4b4a      	ldr	r3, [pc, #296]	@ (8007190 <obd+0xc58>)
 8007068:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 800706c:	4b48      	ldr	r3, [pc, #288]	@ (8007190 <obd+0xc58>)
 800706e:	edd3 7a00 	vldr	s15, [r3]
 8007072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007076:	ee17 2a90 	vmov	r2, s15
 800707a:	4946      	ldr	r1, [pc, #280]	@ (8007194 <obd+0xc5c>)
 800707c:	4846      	ldr	r0, [pc, #280]	@ (8007198 <obd+0xc60>)
 800707e:	f010 fc3b 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8007082:	4b41      	ldr	r3, [pc, #260]	@ (8007188 <obd+0xc50>)
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <obd+0xb5e>
                            sprintf(buffer,"Not Present");
 800708a:	4944      	ldr	r1, [pc, #272]	@ (800719c <obd+0xc64>)
 800708c:	4842      	ldr	r0, [pc, #264]	@ (8007198 <obd+0xc60>)
 800708e:	f010 fc33 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 8007092:	f001 bdbe 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8007096:	4b3e      	ldr	r3, [pc, #248]	@ (8007190 <obd+0xc58>)
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 800709e:	4b3c      	ldr	r3, [pc, #240]	@ (8007190 <obd+0xc58>)
 80070a0:	edd3 7a00 	vldr	s15, [r3]
 80070a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070a8:	ee17 2a90 	vmov	r2, s15
 80070ac:	493c      	ldr	r1, [pc, #240]	@ (80071a0 <obd+0xc68>)
 80070ae:	483d      	ldr	r0, [pc, #244]	@ (80071a4 <obd+0xc6c>)
 80070b0:	f010 fc22 	bl	80178f8 <siprintf>
                        break;
 80070b4:	f001 bdad 	b.w	8008c12 <obd+0x26da>
                    case O2_B2S3_VOLTAGE: {                 //
                        engine_data = (R[3]/200);
 80070b8:	4b33      	ldr	r3, [pc, #204]	@ (8007188 <obd+0xc50>)
 80070ba:	78db      	ldrb	r3, [r3, #3]
 80070bc:	4a33      	ldr	r2, [pc, #204]	@ (800718c <obd+0xc54>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	099b      	lsrs	r3, r3, #6
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ce:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <obd+0xc58>)
 80070d0:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 80070d4:	4b2e      	ldr	r3, [pc, #184]	@ (8007190 <obd+0xc58>)
 80070d6:	edd3 7a00 	vldr	s15, [r3]
 80070da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070de:	ee17 2a90 	vmov	r2, s15
 80070e2:	492c      	ldr	r1, [pc, #176]	@ (8007194 <obd+0xc5c>)
 80070e4:	482c      	ldr	r0, [pc, #176]	@ (8007198 <obd+0xc60>)
 80070e6:	f010 fc07 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 80070ea:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <obd+0xc50>)
 80070ec:	791b      	ldrb	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <obd+0xbc6>
                            sprintf(buffer,"Not Present");
 80070f2:	492a      	ldr	r1, [pc, #168]	@ (800719c <obd+0xc64>)
 80070f4:	4828      	ldr	r0, [pc, #160]	@ (8007198 <obd+0xc60>)
 80070f6:	f010 fbff 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 80070fa:	f001 bd8a 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 80070fe:	4b24      	ldr	r3, [pc, #144]	@ (8007190 <obd+0xc58>)
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 8007106:	4b22      	ldr	r3, [pc, #136]	@ (8007190 <obd+0xc58>)
 8007108:	edd3 7a00 	vldr	s15, [r3]
 800710c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007110:	ee17 2a90 	vmov	r2, s15
 8007114:	4922      	ldr	r1, [pc, #136]	@ (80071a0 <obd+0xc68>)
 8007116:	4823      	ldr	r0, [pc, #140]	@ (80071a4 <obd+0xc6c>)
 8007118:	f010 fbee 	bl	80178f8 <siprintf>
                        break;
 800711c:	f001 bd79 	b.w	8008c12 <obd+0x26da>
                    }
                    case O2_B2S4_VOLTAGE: {                 //
                        engine_data = (R[3]/200);
 8007120:	4b19      	ldr	r3, [pc, #100]	@ (8007188 <obd+0xc50>)
 8007122:	78db      	ldrb	r3, [r3, #3]
 8007124:	4a19      	ldr	r2, [pc, #100]	@ (800718c <obd+0xc54>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	099b      	lsrs	r3, r3, #6
 800712c:	b2db      	uxtb	r3, r3
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007136:	4b16      	ldr	r3, [pc, #88]	@ (8007190 <obd+0xc58>)
 8007138:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V ",(int) engine_data);
 800713c:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <obd+0xc58>)
 800713e:	edd3 7a00 	vldr	s15, [r3]
 8007142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007146:	ee17 2a90 	vmov	r2, s15
 800714a:	4912      	ldr	r1, [pc, #72]	@ (8007194 <obd+0xc5c>)
 800714c:	4812      	ldr	r0, [pc, #72]	@ (8007198 <obd+0xc60>)
 800714e:	f010 fbd3 	bl	80178f8 <siprintf>
                        if (R[4] & 0xFF) {
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <obd+0xc50>)
 8007154:	791b      	ldrb	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <obd+0xc2e>
                            sprintf(buffer,"Not Present");
 800715a:	4910      	ldr	r1, [pc, #64]	@ (800719c <obd+0xc64>)
 800715c:	480e      	ldr	r0, [pc, #56]	@ (8007198 <obd+0xc60>)
 800715e:	f010 fbcb 	bl	80178f8 <siprintf>
                        } else {
                            engine_data = ((R[4]-128)*(100/128));
                            sprintf(buffer2,"%d %% ",(int) engine_data);
                        }
                        break;
 8007162:	f001 bd56 	b.w	8008c12 <obd+0x26da>
                            engine_data = ((R[4]-128)*(100/128));
 8007166:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <obd+0xc58>)
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
                            sprintf(buffer2,"%d %% ",(int) engine_data);
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <obd+0xc58>)
 8007170:	edd3 7a00 	vldr	s15, [r3]
 8007174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007178:	ee17 2a90 	vmov	r2, s15
 800717c:	4908      	ldr	r1, [pc, #32]	@ (80071a0 <obd+0xc68>)
 800717e:	4809      	ldr	r0, [pc, #36]	@ (80071a4 <obd+0xc6c>)
 8007180:	f010 fbba 	bl	80178f8 <siprintf>
                        break;
 8007184:	f001 bd45 	b.w	8008c12 <obd+0x26da>
 8007188:	2400226c 	.word	0x2400226c
 800718c:	51eb851f 	.word	0x51eb851f
 8007190:	2400245c 	.word	0x2400245c
 8007194:	08019214 	.word	0x08019214
 8007198:	24002284 	.word	0x24002284
 800719c:	0801921c 	.word	0x0801921c
 80071a0:	0801916c 	.word	0x0801916c
 80071a4:	24002324 	.word	0x24002324
                    }
                    case OBDII_STANDARDS: {                 //bit encoded NOT DONE
                        engine_data = R[3];
 80071a8:	4bb9      	ldr	r3, [pc, #740]	@ (8007490 <obd+0xf58>)
 80071aa:	78db      	ldrb	r3, [r3, #3]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b4:	4bb7      	ldr	r3, [pc, #732]	@ (8007494 <obd+0xf5c>)
 80071b6:	edc3 7a00 	vstr	s15, [r3]
                        if (((int) engine_data) & 0x0D) {           //JOBD, EOBD, and OBD II
 80071ba:	4bb6      	ldr	r3, [pc, #728]	@ (8007494 <obd+0xf5c>)
 80071bc:	edd3 7a00 	vldr	s15, [r3]
 80071c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c4:	ee17 3a90 	vmov	r3, s15
 80071c8:	f003 030d 	and.w	r3, r3, #13
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <obd+0xca0>
                            sprintf(buffer,"JOBD,EOBD,OBDII");
 80071d0:	49b1      	ldr	r1, [pc, #708]	@ (8007498 <obd+0xf60>)
 80071d2:	48b2      	ldr	r0, [pc, #712]	@ (800749c <obd+0xf64>)
 80071d4:	f010 fb90 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x0C) {           //JOBD and EOBD
 80071d8:	4bae      	ldr	r3, [pc, #696]	@ (8007494 <obd+0xf5c>)
 80071da:	edd3 7a00 	vldr	s15, [r3]
 80071de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071e2:	ee17 3a90 	vmov	r3, s15
 80071e6:	f003 030c 	and.w	r3, r3, #12
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <obd+0xcbe>
                            sprintf(buffer,"JOBD,EOBD");
 80071ee:	49ac      	ldr	r1, [pc, #688]	@ (80074a0 <obd+0xf68>)
 80071f0:	48aa      	ldr	r0, [pc, #680]	@ (800749c <obd+0xf64>)
 80071f2:	f010 fb81 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x0B) {           //JOBD and OBDII
 80071f6:	4ba7      	ldr	r3, [pc, #668]	@ (8007494 <obd+0xf5c>)
 80071f8:	edd3 7a00 	vldr	s15, [r3]
 80071fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007200:	ee17 3a90 	vmov	r3, s15
 8007204:	f003 030b 	and.w	r3, r3, #11
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <obd+0xcdc>
                            sprintf(buffer,"JOBD,OBDII");
 800720c:	49a5      	ldr	r1, [pc, #660]	@ (80074a4 <obd+0xf6c>)
 800720e:	48a3      	ldr	r0, [pc, #652]	@ (800749c <obd+0xf64>)
 8007210:	f010 fb72 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x0A) {           //JOBD
 8007214:	4b9f      	ldr	r3, [pc, #636]	@ (8007494 <obd+0xf5c>)
 8007216:	edd3 7a00 	vldr	s15, [r3]
 800721a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800721e:	ee17 3a90 	vmov	r3, s15
 8007222:	f003 030a 	and.w	r3, r3, #10
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <obd+0xcfa>
                            sprintf(buffer,"JOBD");
 800722a:	499f      	ldr	r1, [pc, #636]	@ (80074a8 <obd+0xf70>)
 800722c:	489b      	ldr	r0, [pc, #620]	@ (800749c <obd+0xf64>)
 800722e:	f010 fb63 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x09) {           //EOBD, OBD, and OBD II
 8007232:	4b98      	ldr	r3, [pc, #608]	@ (8007494 <obd+0xf5c>)
 8007234:	edd3 7a00 	vldr	s15, [r3]
 8007238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723c:	ee17 3a90 	vmov	r3, s15
 8007240:	f003 0309 	and.w	r3, r3, #9
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <obd+0xd18>
                            sprintf(buffer,"EOBD,OBDI,OBDII");
 8007248:	4998      	ldr	r1, [pc, #608]	@ (80074ac <obd+0xf74>)
 800724a:	4894      	ldr	r0, [pc, #592]	@ (800749c <obd+0xf64>)
 800724c:	f010 fb54 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x08) {           //EOBD and OBD
 8007250:	4b90      	ldr	r3, [pc, #576]	@ (8007494 <obd+0xf5c>)
 8007252:	edd3 7a00 	vldr	s15, [r3]
 8007256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800725a:	ee17 3a90 	vmov	r3, s15
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <obd+0xd36>
                            sprintf(buffer,"EOBD,OBDI");
 8007266:	4992      	ldr	r1, [pc, #584]	@ (80074b0 <obd+0xf78>)
 8007268:	488c      	ldr	r0, [pc, #560]	@ (800749c <obd+0xf64>)
 800726a:	f010 fb45 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x07) {           //EOBD and OBDII
 800726e:	4b89      	ldr	r3, [pc, #548]	@ (8007494 <obd+0xf5c>)
 8007270:	edd3 7a00 	vldr	s15, [r3]
 8007274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007278:	ee17 3a90 	vmov	r3, s15
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <obd+0xd54>
                            sprintf(buffer,"EOBD,OBDII");
 8007284:	498b      	ldr	r1, [pc, #556]	@ (80074b4 <obd+0xf7c>)
 8007286:	4885      	ldr	r0, [pc, #532]	@ (800749c <obd+0xf64>)
 8007288:	f010 fb36 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x06) {           //EOBD
 800728c:	4b81      	ldr	r3, [pc, #516]	@ (8007494 <obd+0xf5c>)
 800728e:	edd3 7a00 	vldr	s15, [r3]
 8007292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007296:	ee17 3a90 	vmov	r3, s15
 800729a:	f003 0306 	and.w	r3, r3, #6
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <obd+0xd72>
                            sprintf(buffer,"EOBD");
 80072a2:	4985      	ldr	r1, [pc, #532]	@ (80074b8 <obd+0xf80>)
 80072a4:	487d      	ldr	r0, [pc, #500]	@ (800749c <obd+0xf64>)
 80072a6:	f010 fb27 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x05) {           //Not meant to comply with any OBD standard
 80072aa:	4b7a      	ldr	r3, [pc, #488]	@ (8007494 <obd+0xf5c>)
 80072ac:	edd3 7a00 	vldr	s15, [r3]
 80072b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072b4:	ee17 3a90 	vmov	r3, s15
 80072b8:	f003 0305 	and.w	r3, r3, #5
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <obd+0xd90>
                            sprintf(buffer,"No Compliance");
 80072c0:	497e      	ldr	r1, [pc, #504]	@ (80074bc <obd+0xf84>)
 80072c2:	4876      	ldr	r0, [pc, #472]	@ (800749c <obd+0xf64>)
 80072c4:	f010 fb18 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x04) {           //OBDI
 80072c8:	4b72      	ldr	r3, [pc, #456]	@ (8007494 <obd+0xf5c>)
 80072ca:	edd3 7a00 	vldr	s15, [r3]
 80072ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d2:	ee17 3a90 	vmov	r3, s15
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <obd+0xdae>
                            sprintf(buffer,"OBDI");
 80072de:	4978      	ldr	r1, [pc, #480]	@ (80074c0 <obd+0xf88>)
 80072e0:	486e      	ldr	r0, [pc, #440]	@ (800749c <obd+0xf64>)
 80072e2:	f010 fb09 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x03) {           //OBD and OBDII
 80072e6:	4b6b      	ldr	r3, [pc, #428]	@ (8007494 <obd+0xf5c>)
 80072e8:	edd3 7a00 	vldr	s15, [r3]
 80072ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072f0:	ee17 3a90 	vmov	r3, s15
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <obd+0xdcc>
                            sprintf(buffer,"OBDI,OBDII");
 80072fc:	4971      	ldr	r1, [pc, #452]	@ (80074c4 <obd+0xf8c>)
 80072fe:	4867      	ldr	r0, [pc, #412]	@ (800749c <obd+0xf64>)
 8007300:	f010 fafa 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x02) {           //OBD and defined by the EPA
 8007304:	4b63      	ldr	r3, [pc, #396]	@ (8007494 <obd+0xf5c>)
 8007306:	edd3 7a00 	vldr	s15, [r3]
 800730a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800730e:	ee17 3a90 	vmov	r3, s15
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <obd+0xdea>
                            sprintf(buffer,"OBD");
 800731a:	496b      	ldr	r1, [pc, #428]	@ (80074c8 <obd+0xf90>)
 800731c:	485f      	ldr	r0, [pc, #380]	@ (800749c <obd+0xf64>)
 800731e:	f010 faeb 	bl	80178f8 <siprintf>
                        }
                        if (((int) engine_data) & 0x01) {           //OBD-II as defined by CARB
 8007322:	4b5c      	ldr	r3, [pc, #368]	@ (8007494 <obd+0xf5c>)
 8007324:	edd3 7a00 	vldr	s15, [r3]
 8007328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732c:	ee17 3a90 	vmov	r3, s15
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <obd+0xe08>
                            sprintf(buffer,"OBDII");
 8007338:	4964      	ldr	r1, [pc, #400]	@ (80074cc <obd+0xf94>)
 800733a:	4858      	ldr	r0, [pc, #352]	@ (800749c <obd+0xf64>)
 800733c:	f010 fadc 	bl	80178f8 <siprintf>
                        }
                        sprintf(buffer,"ERROR");
 8007340:	4963      	ldr	r1, [pc, #396]	@ (80074d0 <obd+0xf98>)
 8007342:	4856      	ldr	r0, [pc, #344]	@ (800749c <obd+0xf64>)
 8007344:	f010 fad8 	bl	80178f8 <siprintf>
                        break;
 8007348:	f001 bc63 	b.w	8008c12 <obd+0x26da>
                    }
                    case O2_SENS_PRES_ALT: {                //*******************
                        engine_data = (R[3]);  //Check # of O2 sensors present by masking individual bits and counting
 800734c:	4b50      	ldr	r3, [pc, #320]	@ (8007490 <obd+0xf58>)
 800734e:	78db      	ldrb	r3, [r3, #3]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007358:	4b4e      	ldr	r3, [pc, #312]	@ (8007494 <obd+0xf5c>)
 800735a:	edc3 7a00 	vstr	s15, [r3]
                        int o2presalt = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	603b      	str	r3, [r7, #0]
                        if (((int) engine_data) & 0x01) {           // Bank 1 Sensor 1
 8007362:	4b4c      	ldr	r3, [pc, #304]	@ (8007494 <obd+0xf5c>)
 8007364:	edd3 7a00 	vldr	s15, [r3]
 8007368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800736c:	ee17 3a90 	vmov	r3, s15
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <obd+0xe46>
                            o2presalt++;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x02) {           // Bank 1 Sensor 2
 800737e:	4b45      	ldr	r3, [pc, #276]	@ (8007494 <obd+0xf5c>)
 8007380:	edd3 7a00 	vldr	s15, [r3]
 8007384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007388:	ee17 3a90 	vmov	r3, s15
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <obd+0xe62>
                            o2presalt++;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	3301      	adds	r3, #1
 8007398:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x04) {           // Bank 2 Sensor 1
 800739a:	4b3e      	ldr	r3, [pc, #248]	@ (8007494 <obd+0xf5c>)
 800739c:	edd3 7a00 	vldr	s15, [r3]
 80073a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073a4:	ee17 3a90 	vmov	r3, s15
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <obd+0xe7e>
                            o2presalt++;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x08) {           // Bank 2 Sensor 2
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <obd+0xf5c>)
 80073b8:	edd3 7a00 	vldr	s15, [r3]
 80073bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073c0:	ee17 3a90 	vmov	r3, s15
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <obd+0xe9a>
                            o2presalt++;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x10) {           // Bank 3 Sensor 1
 80073d2:	4b30      	ldr	r3, [pc, #192]	@ (8007494 <obd+0xf5c>)
 80073d4:	edd3 7a00 	vldr	s15, [r3]
 80073d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073dc:	ee17 3a90 	vmov	r3, s15
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <obd+0xeb6>
                            o2presalt++;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x20) {           // Bank 3 Sensor 2
 80073ee:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <obd+0xf5c>)
 80073f0:	edd3 7a00 	vldr	s15, [r3]
 80073f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f8:	ee17 3a90 	vmov	r3, s15
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <obd+0xed2>
                            o2presalt++;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	3301      	adds	r3, #1
 8007408:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x40) {           // Bank 4 Sensor 1
 800740a:	4b22      	ldr	r3, [pc, #136]	@ (8007494 <obd+0xf5c>)
 800740c:	edd3 7a00 	vldr	s15, [r3]
 8007410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007414:	ee17 3a90 	vmov	r3, s15
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <obd+0xeee>
                            o2presalt++;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	603b      	str	r3, [r7, #0]
                        }
                        if (((int) engine_data) & 0x80) {           // Bank 4 Sensor 2
 8007426:	4b1b      	ldr	r3, [pc, #108]	@ (8007494 <obd+0xf5c>)
 8007428:	edd3 7a00 	vldr	s15, [r3]
 800742c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007430:	ee17 3a90 	vmov	r3, s15
 8007434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <obd+0xf0a>
                            o2presalt++;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	3301      	adds	r3, #1
 8007440:	603b      	str	r3, [r7, #0]
                        }
                        sprintf(buffer,"%d Present",(int) o2presalt);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	4923      	ldr	r1, [pc, #140]	@ (80074d4 <obd+0xf9c>)
 8007446:	4815      	ldr	r0, [pc, #84]	@ (800749c <obd+0xf64>)
 8007448:	f010 fa56 	bl	80178f8 <siprintf>
                        break;
 800744c:	f001 bbe1 	b.w	8008c12 <obd+0x26da>
                    }
                    case AUX_IN_STATUS: {                   // A (A0 == PTO Active)
                        engine_data = R[3];
 8007450:	4b0f      	ldr	r3, [pc, #60]	@ (8007490 <obd+0xf58>)
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <obd+0xf5c>)
 800745e:	edc3 7a00 	vstr	s15, [r3]
                        if (((int) engine_data) & 0x01) {
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <obd+0xf5c>)
 8007464:	edd3 7a00 	vldr	s15, [r3]
 8007468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800746c:	ee17 3a90 	vmov	r3, s15
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <obd+0xf4c>
                            sprintf(buffer,"PTO Active");
 8007478:	4917      	ldr	r1, [pc, #92]	@ (80074d8 <obd+0xfa0>)
 800747a:	4808      	ldr	r0, [pc, #32]	@ (800749c <obd+0xf64>)
 800747c:	f010 fa3c 	bl	80178f8 <siprintf>
                        } else {
                            sprintf(buffer,"PTO Inactive");
                        }
                        break;
 8007480:	f001 bbc7 	b.w	8008c12 <obd+0x26da>
                            sprintf(buffer,"PTO Inactive");
 8007484:	4915      	ldr	r1, [pc, #84]	@ (80074dc <obd+0xfa4>)
 8007486:	4805      	ldr	r0, [pc, #20]	@ (800749c <obd+0xf64>)
 8007488:	f010 fa36 	bl	80178f8 <siprintf>
                        break;
 800748c:	f001 bbc1 	b.w	8008c12 <obd+0x26da>
 8007490:	2400226c 	.word	0x2400226c
 8007494:	2400245c 	.word	0x2400245c
 8007498:	08019228 	.word	0x08019228
 800749c:	24002284 	.word	0x24002284
 80074a0:	08019238 	.word	0x08019238
 80074a4:	08019244 	.word	0x08019244
 80074a8:	08019250 	.word	0x08019250
 80074ac:	08019258 	.word	0x08019258
 80074b0:	08019268 	.word	0x08019268
 80074b4:	08019274 	.word	0x08019274
 80074b8:	08019280 	.word	0x08019280
 80074bc:	08019288 	.word	0x08019288
 80074c0:	08019298 	.word	0x08019298
 80074c4:	080192a0 	.word	0x080192a0
 80074c8:	080192ac 	.word	0x080192ac
 80074cc:	080192b0 	.word	0x080192b0
 80074d0:	080192b8 	.word	0x080192b8
 80074d4:	08019208 	.word	0x08019208
 80074d8:	080192c0 	.word	0x080192c0
 80074dc:	080192cc 	.word	0x080192cc
                    }
                    case ENGINE_RUNTIME:                    // (A*256)+B
                        engine_data = (R[3]*256)+(R[4]);
 80074e0:	4bab      	ldr	r3, [pc, #684]	@ (8007790 <obd+0x1258>)
 80074e2:	78db      	ldrb	r3, [r3, #3]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	4aaa      	ldr	r2, [pc, #680]	@ (8007790 <obd+0x1258>)
 80074e8:	7912      	ldrb	r2, [r2, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f4:	4ba7      	ldr	r3, [pc, #668]	@ (8007794 <obd+0x125c>)
 80074f6:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,64,"The car has been running for :%d Sec\n",(int) engine_data);
 80074fa:	4ba6      	ldr	r3, [pc, #664]	@ (8007794 <obd+0x125c>)
 80074fc:	edd3 7a00 	vldr	s15, [r3]
 8007500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007504:	ee17 3a90 	vmov	r3, s15
 8007508:	4aa3      	ldr	r2, [pc, #652]	@ (8007798 <obd+0x1260>)
 800750a:	2140      	movs	r1, #64	@ 0x40
 800750c:	48a3      	ldr	r0, [pc, #652]	@ (800779c <obd+0x1264>)
 800750e:	f010 f9bf 	bl	8017890 <sniprintf>
 8007512:	4603      	mov	r3, r0
 8007514:	b2da      	uxtb	r2, r3
 8007516:	4ba2      	ldr	r3, [pc, #648]	@ (80077a0 <obd+0x1268>)
 8007518:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer, s);
                        break;
 800751a:	f001 bb7a 	b.w	8008c12 <obd+0x26da>
                    case PID_21_40:                         // bit encoded NOT DONE
                        PID_2140 = ((R[3] << 24) | (R[4] << 16) | (R[5] << 8) | (R[6]));
 800751e:	4b9c      	ldr	r3, [pc, #624]	@ (8007790 <obd+0x1258>)
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	061a      	lsls	r2, r3, #24
 8007524:	4b9a      	ldr	r3, [pc, #616]	@ (8007790 <obd+0x1258>)
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	431a      	orrs	r2, r3
 800752c:	4b98      	ldr	r3, [pc, #608]	@ (8007790 <obd+0x1258>)
 800752e:	795b      	ldrb	r3, [r3, #5]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	4313      	orrs	r3, r2
 8007534:	4a96      	ldr	r2, [pc, #600]	@ (8007790 <obd+0x1258>)
 8007536:	7992      	ldrb	r2, [r2, #6]
 8007538:	4313      	orrs	r3, r2
 800753a:	4a9a      	ldr	r2, [pc, #616]	@ (80077a4 <obd+0x126c>)
 800753c:	6013      	str	r3, [r2, #0]
                        break;
 800753e:	f001 bb68 	b.w	8008c12 <obd+0x26da>
                    case DIST_TRAVELED_MIL:                 // (A*256) + B
                        engine_data = ((R[3] * 256) + R[4]);
 8007542:	4b93      	ldr	r3, [pc, #588]	@ (8007790 <obd+0x1258>)
 8007544:	78db      	ldrb	r3, [r3, #3]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	4a91      	ldr	r2, [pc, #580]	@ (8007790 <obd+0x1258>)
 800754a:	7912      	ldrb	r2, [r2, #4]
 800754c:	4413      	add	r3, r2
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007556:	4b8f      	ldr	r3, [pc, #572]	@ (8007794 <obd+0x125c>)
 8007558:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,40,"The car has traveled %d km\n",(int) engine_data);
 800755c:	4b8d      	ldr	r3, [pc, #564]	@ (8007794 <obd+0x125c>)
 800755e:	edd3 7a00 	vldr	s15, [r3]
 8007562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007566:	ee17 3a90 	vmov	r3, s15
 800756a:	4a8f      	ldr	r2, [pc, #572]	@ (80077a8 <obd+0x1270>)
 800756c:	2128      	movs	r1, #40	@ 0x28
 800756e:	488b      	ldr	r0, [pc, #556]	@ (800779c <obd+0x1264>)
 8007570:	f010 f98e 	bl	8017890 <sniprintf>
 8007574:	4603      	mov	r3, r0
 8007576:	b2da      	uxtb	r2, r3
 8007578:	4b89      	ldr	r3, [pc, #548]	@ (80077a0 <obd+0x1268>)
 800757a:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer, s);
                        break;
 800757c:	f001 bb49 	b.w	8008c12 <obd+0x26da>
                    case FUEL_RAIL_PRESSURE:                // ((A*256)+B)*0.079
                        engine_data = ((R[3] * 256)+R[4])*0.079;
 8007580:	4b83      	ldr	r3, [pc, #524]	@ (8007790 <obd+0x1258>)
 8007582:	78db      	ldrb	r3, [r3, #3]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	4a82      	ldr	r2, [pc, #520]	@ (8007790 <obd+0x1258>)
 8007588:	7912      	ldrb	r2, [r2, #4]
 800758a:	4413      	add	r3, r2
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007594:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8007788 <obd+0x1250>
 8007598:	ee27 7b06 	vmul.f64	d7, d7, d6
 800759c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80075a0:	4b7c      	ldr	r3, [pc, #496]	@ (8007794 <obd+0x125c>)
 80075a2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d kPa",(int) engine_data);
 80075a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007794 <obd+0x125c>)
 80075a8:	edd3 7a00 	vldr	s15, [r3]
 80075ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b0:	ee17 2a90 	vmov	r2, s15
 80075b4:	497d      	ldr	r1, [pc, #500]	@ (80077ac <obd+0x1274>)
 80075b6:	4879      	ldr	r0, [pc, #484]	@ (800779c <obd+0x1264>)
 80075b8:	f010 f99e 	bl	80178f8 <siprintf>
                        break;
 80075bc:	f001 bb29 	b.w	8008c12 <obd+0x26da>
                    case FUEL_RAIL_PRES_ALT:                // ((A*256)+B)*0.079
                        engine_data = ((R[3] * 256) + R[4])*10;
 80075c0:	4b73      	ldr	r3, [pc, #460]	@ (8007790 <obd+0x1258>)
 80075c2:	78db      	ldrb	r3, [r3, #3]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	4a72      	ldr	r2, [pc, #456]	@ (8007790 <obd+0x1258>)
 80075c8:	7912      	ldrb	r2, [r2, #4]
 80075ca:	441a      	add	r2, r3
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007794 <obd+0x125c>)
 80075de:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d kPa",(int) engine_data);
 80075e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007794 <obd+0x125c>)
 80075e4:	edd3 7a00 	vldr	s15, [r3]
 80075e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ec:	ee17 2a90 	vmov	r2, s15
 80075f0:	496e      	ldr	r1, [pc, #440]	@ (80077ac <obd+0x1274>)
 80075f2:	486a      	ldr	r0, [pc, #424]	@ (800779c <obd+0x1264>)
 80075f4:	f010 f980 	bl	80178f8 <siprintf>
                        break;
 80075f8:	f001 bb0b 	b.w	8008c12 <obd+0x26da>
                    case O2S1_WR_LAMBDA_V:                  // ((A*256)+B)*2/65535 [ratio], ((C*256)+D)*8/65535 [V]
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 80075fc:	4b64      	ldr	r3, [pc, #400]	@ (8007790 <obd+0x1258>)
 80075fe:	78db      	ldrb	r3, [r3, #3]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	4a63      	ldr	r2, [pc, #396]	@ (8007790 <obd+0x1258>)
 8007604:	7912      	ldrb	r2, [r2, #4]
 8007606:	4413      	add	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4a69      	ldr	r2, [pc, #420]	@ (80077b0 <obd+0x1278>)
 800760c:	fb82 1203 	smull	r1, r2, r2, r3
 8007610:	441a      	add	r2, r3
 8007612:	13d2      	asrs	r2, r2, #15
 8007614:	17db      	asrs	r3, r3, #31
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007620:	4b5c      	ldr	r3, [pc, #368]	@ (8007794 <obd+0x125c>)
 8007622:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007626:	4b5b      	ldr	r3, [pc, #364]	@ (8007794 <obd+0x125c>)
 8007628:	edd3 7a00 	vldr	s15, [r3]
 800762c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007630:	ee17 2a90 	vmov	r2, s15
 8007634:	495f      	ldr	r1, [pc, #380]	@ (80077b4 <obd+0x127c>)
 8007636:	4859      	ldr	r0, [pc, #356]	@ (800779c <obd+0x1264>)
 8007638:	f010 f95e 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 800763c:	4b54      	ldr	r3, [pc, #336]	@ (8007790 <obd+0x1258>)
 800763e:	795b      	ldrb	r3, [r3, #5]
 8007640:	021b      	lsls	r3, r3, #8
 8007642:	4a53      	ldr	r2, [pc, #332]	@ (8007790 <obd+0x1258>)
 8007644:	7992      	ldrb	r2, [r2, #6]
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4a59      	ldr	r2, [pc, #356]	@ (80077b0 <obd+0x1278>)
 800764c:	fb82 1203 	smull	r1, r2, r2, r3
 8007650:	441a      	add	r2, r3
 8007652:	13d2      	asrs	r2, r2, #15
 8007654:	17db      	asrs	r3, r3, #31
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007660:	4b4c      	ldr	r3, [pc, #304]	@ (8007794 <obd+0x125c>)
 8007662:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 8007666:	4b4b      	ldr	r3, [pc, #300]	@ (8007794 <obd+0x125c>)
 8007668:	edd3 7a00 	vldr	s15, [r3]
 800766c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007670:	ee17 2a90 	vmov	r2, s15
 8007674:	4950      	ldr	r1, [pc, #320]	@ (80077b8 <obd+0x1280>)
 8007676:	4851      	ldr	r0, [pc, #324]	@ (80077bc <obd+0x1284>)
 8007678:	f010 f93e 	bl	80178f8 <siprintf>
                        break;
 800767c:	f001 bac9 	b.w	8008c12 <obd+0x26da>
                    case O2S2_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 8007680:	4b43      	ldr	r3, [pc, #268]	@ (8007790 <obd+0x1258>)
 8007682:	78db      	ldrb	r3, [r3, #3]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	4a42      	ldr	r2, [pc, #264]	@ (8007790 <obd+0x1258>)
 8007688:	7912      	ldrb	r2, [r2, #4]
 800768a:	4413      	add	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4a48      	ldr	r2, [pc, #288]	@ (80077b0 <obd+0x1278>)
 8007690:	fb82 1203 	smull	r1, r2, r2, r3
 8007694:	441a      	add	r2, r3
 8007696:	13d2      	asrs	r2, r2, #15
 8007698:	17db      	asrs	r3, r3, #31
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007794 <obd+0x125c>)
 80076a6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 80076aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007794 <obd+0x125c>)
 80076ac:	edd3 7a00 	vldr	s15, [r3]
 80076b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b4:	ee17 2a90 	vmov	r2, s15
 80076b8:	493e      	ldr	r1, [pc, #248]	@ (80077b4 <obd+0x127c>)
 80076ba:	4838      	ldr	r0, [pc, #224]	@ (800779c <obd+0x1264>)
 80076bc:	f010 f91c 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 80076c0:	4b33      	ldr	r3, [pc, #204]	@ (8007790 <obd+0x1258>)
 80076c2:	795b      	ldrb	r3, [r3, #5]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	4a32      	ldr	r2, [pc, #200]	@ (8007790 <obd+0x1258>)
 80076c8:	7992      	ldrb	r2, [r2, #6]
 80076ca:	4413      	add	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4a38      	ldr	r2, [pc, #224]	@ (80077b0 <obd+0x1278>)
 80076d0:	fb82 1203 	smull	r1, r2, r2, r3
 80076d4:	441a      	add	r2, r3
 80076d6:	13d2      	asrs	r2, r2, #15
 80076d8:	17db      	asrs	r3, r3, #31
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007794 <obd+0x125c>)
 80076e6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 80076ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007794 <obd+0x125c>)
 80076ec:	edd3 7a00 	vldr	s15, [r3]
 80076f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076f4:	ee17 2a90 	vmov	r2, s15
 80076f8:	492f      	ldr	r1, [pc, #188]	@ (80077b8 <obd+0x1280>)
 80076fa:	4830      	ldr	r0, [pc, #192]	@ (80077bc <obd+0x1284>)
 80076fc:	f010 f8fc 	bl	80178f8 <siprintf>
                        break;
 8007700:	f001 ba87 	b.w	8008c12 <obd+0x26da>
                    case O2S3_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 8007704:	4b22      	ldr	r3, [pc, #136]	@ (8007790 <obd+0x1258>)
 8007706:	78db      	ldrb	r3, [r3, #3]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <obd+0x1258>)
 800770c:	7912      	ldrb	r2, [r2, #4]
 800770e:	4413      	add	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4a27      	ldr	r2, [pc, #156]	@ (80077b0 <obd+0x1278>)
 8007714:	fb82 1203 	smull	r1, r2, r2, r3
 8007718:	441a      	add	r2, r3
 800771a:	13d2      	asrs	r2, r2, #15
 800771c:	17db      	asrs	r3, r3, #31
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007728:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <obd+0x125c>)
 800772a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 800772e:	4b19      	ldr	r3, [pc, #100]	@ (8007794 <obd+0x125c>)
 8007730:	edd3 7a00 	vldr	s15, [r3]
 8007734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007738:	ee17 2a90 	vmov	r2, s15
 800773c:	491d      	ldr	r1, [pc, #116]	@ (80077b4 <obd+0x127c>)
 800773e:	4817      	ldr	r0, [pc, #92]	@ (800779c <obd+0x1264>)
 8007740:	f010 f8da 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 8007744:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <obd+0x1258>)
 8007746:	795b      	ldrb	r3, [r3, #5]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <obd+0x1258>)
 800774c:	7992      	ldrb	r2, [r2, #6]
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4a17      	ldr	r2, [pc, #92]	@ (80077b0 <obd+0x1278>)
 8007754:	fb82 1203 	smull	r1, r2, r2, r3
 8007758:	441a      	add	r2, r3
 800775a:	13d2      	asrs	r2, r2, #15
 800775c:	17db      	asrs	r3, r3, #31
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <obd+0x125c>)
 800776a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <obd+0x125c>)
 8007770:	edd3 7a00 	vldr	s15, [r3]
 8007774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007778:	ee17 2a90 	vmov	r2, s15
 800777c:	490e      	ldr	r1, [pc, #56]	@ (80077b8 <obd+0x1280>)
 800777e:	480f      	ldr	r0, [pc, #60]	@ (80077bc <obd+0x1284>)
 8007780:	f010 f8ba 	bl	80178f8 <siprintf>
                        break;
 8007784:	f001 ba45 	b.w	8008c12 <obd+0x26da>
 8007788:	10624dd3 	.word	0x10624dd3
 800778c:	3fb43958 	.word	0x3fb43958
 8007790:	2400226c 	.word	0x2400226c
 8007794:	2400245c 	.word	0x2400245c
 8007798:	080192dc 	.word	0x080192dc
 800779c:	24002284 	.word	0x24002284
 80077a0:	240022c4 	.word	0x240022c4
 80077a4:	240023b0 	.word	0x240023b0
 80077a8:	08019304 	.word	0x08019304
 80077ac:	0801919c 	.word	0x0801919c
 80077b0:	80008001 	.word	0x80008001
 80077b4:	08019320 	.word	0x08019320
 80077b8:	0801932c 	.word	0x0801932c
 80077bc:	24002324 	.word	0x24002324
                    case O2S4_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 80077c0:	4bbd      	ldr	r3, [pc, #756]	@ (8007ab8 <obd+0x1580>)
 80077c2:	78db      	ldrb	r3, [r3, #3]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	4abc      	ldr	r2, [pc, #752]	@ (8007ab8 <obd+0x1580>)
 80077c8:	7912      	ldrb	r2, [r2, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4abb      	ldr	r2, [pc, #748]	@ (8007abc <obd+0x1584>)
 80077d0:	fb82 1203 	smull	r1, r2, r2, r3
 80077d4:	441a      	add	r2, r3
 80077d6:	13d2      	asrs	r2, r2, #15
 80077d8:	17db      	asrs	r3, r3, #31
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077e4:	4bb6      	ldr	r3, [pc, #728]	@ (8007ac0 <obd+0x1588>)
 80077e6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 80077ea:	4bb5      	ldr	r3, [pc, #724]	@ (8007ac0 <obd+0x1588>)
 80077ec:	edd3 7a00 	vldr	s15, [r3]
 80077f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f4:	ee17 2a90 	vmov	r2, s15
 80077f8:	49b2      	ldr	r1, [pc, #712]	@ (8007ac4 <obd+0x158c>)
 80077fa:	48b3      	ldr	r0, [pc, #716]	@ (8007ac8 <obd+0x1590>)
 80077fc:	f010 f87c 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 8007800:	4bad      	ldr	r3, [pc, #692]	@ (8007ab8 <obd+0x1580>)
 8007802:	795b      	ldrb	r3, [r3, #5]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	4aac      	ldr	r2, [pc, #688]	@ (8007ab8 <obd+0x1580>)
 8007808:	7992      	ldrb	r2, [r2, #6]
 800780a:	4413      	add	r3, r2
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4aab      	ldr	r2, [pc, #684]	@ (8007abc <obd+0x1584>)
 8007810:	fb82 1203 	smull	r1, r2, r2, r3
 8007814:	441a      	add	r2, r3
 8007816:	13d2      	asrs	r2, r2, #15
 8007818:	17db      	asrs	r3, r3, #31
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007824:	4ba6      	ldr	r3, [pc, #664]	@ (8007ac0 <obd+0x1588>)
 8007826:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 800782a:	4ba5      	ldr	r3, [pc, #660]	@ (8007ac0 <obd+0x1588>)
 800782c:	edd3 7a00 	vldr	s15, [r3]
 8007830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007834:	ee17 2a90 	vmov	r2, s15
 8007838:	49a4      	ldr	r1, [pc, #656]	@ (8007acc <obd+0x1594>)
 800783a:	48a5      	ldr	r0, [pc, #660]	@ (8007ad0 <obd+0x1598>)
 800783c:	f010 f85c 	bl	80178f8 <siprintf>
                        break;
 8007840:	f001 b9e7 	b.w	8008c12 <obd+0x26da>
                    case O2S5_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 8007844:	4b9c      	ldr	r3, [pc, #624]	@ (8007ab8 <obd+0x1580>)
 8007846:	78db      	ldrb	r3, [r3, #3]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	4a9b      	ldr	r2, [pc, #620]	@ (8007ab8 <obd+0x1580>)
 800784c:	7912      	ldrb	r2, [r2, #4]
 800784e:	4413      	add	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4a9a      	ldr	r2, [pc, #616]	@ (8007abc <obd+0x1584>)
 8007854:	fb82 1203 	smull	r1, r2, r2, r3
 8007858:	441a      	add	r2, r3
 800785a:	13d2      	asrs	r2, r2, #15
 800785c:	17db      	asrs	r3, r3, #31
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007868:	4b95      	ldr	r3, [pc, #596]	@ (8007ac0 <obd+0x1588>)
 800786a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 800786e:	4b94      	ldr	r3, [pc, #592]	@ (8007ac0 <obd+0x1588>)
 8007870:	edd3 7a00 	vldr	s15, [r3]
 8007874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007878:	ee17 2a90 	vmov	r2, s15
 800787c:	4991      	ldr	r1, [pc, #580]	@ (8007ac4 <obd+0x158c>)
 800787e:	4892      	ldr	r0, [pc, #584]	@ (8007ac8 <obd+0x1590>)
 8007880:	f010 f83a 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 8007884:	4b8c      	ldr	r3, [pc, #560]	@ (8007ab8 <obd+0x1580>)
 8007886:	795b      	ldrb	r3, [r3, #5]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	4a8b      	ldr	r2, [pc, #556]	@ (8007ab8 <obd+0x1580>)
 800788c:	7992      	ldrb	r2, [r2, #6]
 800788e:	4413      	add	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4a8a      	ldr	r2, [pc, #552]	@ (8007abc <obd+0x1584>)
 8007894:	fb82 1203 	smull	r1, r2, r2, r3
 8007898:	441a      	add	r2, r3
 800789a:	13d2      	asrs	r2, r2, #15
 800789c:	17db      	asrs	r3, r3, #31
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a8:	4b85      	ldr	r3, [pc, #532]	@ (8007ac0 <obd+0x1588>)
 80078aa:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 80078ae:	4b84      	ldr	r3, [pc, #528]	@ (8007ac0 <obd+0x1588>)
 80078b0:	edd3 7a00 	vldr	s15, [r3]
 80078b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b8:	ee17 2a90 	vmov	r2, s15
 80078bc:	4983      	ldr	r1, [pc, #524]	@ (8007acc <obd+0x1594>)
 80078be:	4884      	ldr	r0, [pc, #528]	@ (8007ad0 <obd+0x1598>)
 80078c0:	f010 f81a 	bl	80178f8 <siprintf>
                        break;
 80078c4:	f001 b9a5 	b.w	8008c12 <obd+0x26da>
                    case O2S6_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 80078c8:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab8 <obd+0x1580>)
 80078ca:	78db      	ldrb	r3, [r3, #3]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4a7a      	ldr	r2, [pc, #488]	@ (8007ab8 <obd+0x1580>)
 80078d0:	7912      	ldrb	r2, [r2, #4]
 80078d2:	4413      	add	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4a79      	ldr	r2, [pc, #484]	@ (8007abc <obd+0x1584>)
 80078d8:	fb82 1203 	smull	r1, r2, r2, r3
 80078dc:	441a      	add	r2, r3
 80078de:	13d2      	asrs	r2, r2, #15
 80078e0:	17db      	asrs	r3, r3, #31
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ec:	4b74      	ldr	r3, [pc, #464]	@ (8007ac0 <obd+0x1588>)
 80078ee:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 80078f2:	4b73      	ldr	r3, [pc, #460]	@ (8007ac0 <obd+0x1588>)
 80078f4:	edd3 7a00 	vldr	s15, [r3]
 80078f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fc:	ee17 2a90 	vmov	r2, s15
 8007900:	4970      	ldr	r1, [pc, #448]	@ (8007ac4 <obd+0x158c>)
 8007902:	4871      	ldr	r0, [pc, #452]	@ (8007ac8 <obd+0x1590>)
 8007904:	f00f fff8 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 8007908:	4b6b      	ldr	r3, [pc, #428]	@ (8007ab8 <obd+0x1580>)
 800790a:	795b      	ldrb	r3, [r3, #5]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	4a6a      	ldr	r2, [pc, #424]	@ (8007ab8 <obd+0x1580>)
 8007910:	7992      	ldrb	r2, [r2, #6]
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4a69      	ldr	r2, [pc, #420]	@ (8007abc <obd+0x1584>)
 8007918:	fb82 1203 	smull	r1, r2, r2, r3
 800791c:	441a      	add	r2, r3
 800791e:	13d2      	asrs	r2, r2, #15
 8007920:	17db      	asrs	r3, r3, #31
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800792c:	4b64      	ldr	r3, [pc, #400]	@ (8007ac0 <obd+0x1588>)
 800792e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 8007932:	4b63      	ldr	r3, [pc, #396]	@ (8007ac0 <obd+0x1588>)
 8007934:	edd3 7a00 	vldr	s15, [r3]
 8007938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800793c:	ee17 2a90 	vmov	r2, s15
 8007940:	4962      	ldr	r1, [pc, #392]	@ (8007acc <obd+0x1594>)
 8007942:	4863      	ldr	r0, [pc, #396]	@ (8007ad0 <obd+0x1598>)
 8007944:	f00f ffd8 	bl	80178f8 <siprintf>
                        break;
 8007948:	f001 b963 	b.w	8008c12 <obd+0x26da>
                    case O2S7_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 800794c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ab8 <obd+0x1580>)
 800794e:	78db      	ldrb	r3, [r3, #3]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	4a59      	ldr	r2, [pc, #356]	@ (8007ab8 <obd+0x1580>)
 8007954:	7912      	ldrb	r2, [r2, #4]
 8007956:	4413      	add	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4a58      	ldr	r2, [pc, #352]	@ (8007abc <obd+0x1584>)
 800795c:	fb82 1203 	smull	r1, r2, r2, r3
 8007960:	441a      	add	r2, r3
 8007962:	13d2      	asrs	r2, r2, #15
 8007964:	17db      	asrs	r3, r3, #31
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007970:	4b53      	ldr	r3, [pc, #332]	@ (8007ac0 <obd+0x1588>)
 8007972:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007976:	4b52      	ldr	r3, [pc, #328]	@ (8007ac0 <obd+0x1588>)
 8007978:	edd3 7a00 	vldr	s15, [r3]
 800797c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007980:	ee17 2a90 	vmov	r2, s15
 8007984:	494f      	ldr	r1, [pc, #316]	@ (8007ac4 <obd+0x158c>)
 8007986:	4850      	ldr	r0, [pc, #320]	@ (8007ac8 <obd+0x1590>)
 8007988:	f00f ffb6 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 800798c:	4b4a      	ldr	r3, [pc, #296]	@ (8007ab8 <obd+0x1580>)
 800798e:	795b      	ldrb	r3, [r3, #5]
 8007990:	021b      	lsls	r3, r3, #8
 8007992:	4a49      	ldr	r2, [pc, #292]	@ (8007ab8 <obd+0x1580>)
 8007994:	7992      	ldrb	r2, [r2, #6]
 8007996:	4413      	add	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4a48      	ldr	r2, [pc, #288]	@ (8007abc <obd+0x1584>)
 800799c:	fb82 1203 	smull	r1, r2, r2, r3
 80079a0:	441a      	add	r2, r3
 80079a2:	13d2      	asrs	r2, r2, #15
 80079a4:	17db      	asrs	r3, r3, #31
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079b0:	4b43      	ldr	r3, [pc, #268]	@ (8007ac0 <obd+0x1588>)
 80079b2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 80079b6:	4b42      	ldr	r3, [pc, #264]	@ (8007ac0 <obd+0x1588>)
 80079b8:	edd3 7a00 	vldr	s15, [r3]
 80079bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079c0:	ee17 2a90 	vmov	r2, s15
 80079c4:	4941      	ldr	r1, [pc, #260]	@ (8007acc <obd+0x1594>)
 80079c6:	4842      	ldr	r0, [pc, #264]	@ (8007ad0 <obd+0x1598>)
 80079c8:	f00f ff96 	bl	80178f8 <siprintf>
                        break;
 80079cc:	f001 b921 	b.w	8008c12 <obd+0x26da>
                    case O2S8_WR_LAMBDA_V:                  //
                        engine_data = ((((R[3]*256)+R[4])*2)/65535);
 80079d0:	4b39      	ldr	r3, [pc, #228]	@ (8007ab8 <obd+0x1580>)
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	4a38      	ldr	r2, [pc, #224]	@ (8007ab8 <obd+0x1580>)
 80079d8:	7912      	ldrb	r2, [r2, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4a37      	ldr	r2, [pc, #220]	@ (8007abc <obd+0x1584>)
 80079e0:	fb82 1203 	smull	r1, r2, r2, r3
 80079e4:	441a      	add	r2, r3
 80079e6:	13d2      	asrs	r2, r2, #15
 80079e8:	17db      	asrs	r3, r3, #31
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079f4:	4b32      	ldr	r3, [pc, #200]	@ (8007ac0 <obd+0x1588>)
 80079f6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 80079fa:	4b31      	ldr	r3, [pc, #196]	@ (8007ac0 <obd+0x1588>)
 80079fc:	edd3 7a00 	vldr	s15, [r3]
 8007a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a04:	ee17 2a90 	vmov	r2, s15
 8007a08:	492e      	ldr	r1, [pc, #184]	@ (8007ac4 <obd+0x158c>)
 8007a0a:	482f      	ldr	r0, [pc, #188]	@ (8007ac8 <obd+0x1590>)
 8007a0c:	f00f ff74 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])*8)/65535);
 8007a10:	4b29      	ldr	r3, [pc, #164]	@ (8007ab8 <obd+0x1580>)
 8007a12:	795b      	ldrb	r3, [r3, #5]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	4a28      	ldr	r2, [pc, #160]	@ (8007ab8 <obd+0x1580>)
 8007a18:	7992      	ldrb	r2, [r2, #6]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	4a27      	ldr	r2, [pc, #156]	@ (8007abc <obd+0x1584>)
 8007a20:	fb82 1203 	smull	r1, r2, r2, r3
 8007a24:	441a      	add	r2, r3
 8007a26:	13d2      	asrs	r2, r2, #15
 8007a28:	17db      	asrs	r3, r3, #31
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a34:	4b22      	ldr	r3, [pc, #136]	@ (8007ac0 <obd+0x1588>)
 8007a36:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d V",(int) engine_data);
 8007a3a:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <obd+0x1588>)
 8007a3c:	edd3 7a00 	vldr	s15, [r3]
 8007a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a44:	ee17 2a90 	vmov	r2, s15
 8007a48:	4920      	ldr	r1, [pc, #128]	@ (8007acc <obd+0x1594>)
 8007a4a:	4821      	ldr	r0, [pc, #132]	@ (8007ad0 <obd+0x1598>)
 8007a4c:	f00f ff54 	bl	80178f8 <siprintf>
                        break;
 8007a50:	f001 b8df 	b.w	8008c12 <obd+0x26da>
                    case COMMANDED_EGR:                     // 100*A/255
                        engine_data = (R[3]*100/255);
 8007a54:	4b18      	ldr	r3, [pc, #96]	@ (8007ab8 <obd+0x1580>)
 8007a56:	78db      	ldrb	r3, [r3, #3]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	2364      	movs	r3, #100	@ 0x64
 8007a5c:	fb02 f303 	mul.w	r3, r2, r3
 8007a60:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad4 <obd+0x159c>)
 8007a62:	fb82 1203 	smull	r1, r2, r2, r3
 8007a66:	441a      	add	r2, r3
 8007a68:	11d2      	asrs	r2, r2, #7
 8007a6a:	17db      	asrs	r3, r3, #31
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a76:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <obd+0x1588>)
 8007a78:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8007a7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <obd+0x1588>)
 8007a7e:	edd3 7a00 	vldr	s15, [r3]
 8007a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a86:	ee17 2a90 	vmov	r2, s15
 8007a8a:	4913      	ldr	r1, [pc, #76]	@ (8007ad8 <obd+0x15a0>)
 8007a8c:	480e      	ldr	r0, [pc, #56]	@ (8007ac8 <obd+0x1590>)
 8007a8e:	f00f ff33 	bl	80178f8 <siprintf>
                        break;
 8007a92:	f001 b8be 	b.w	8008c12 <obd+0x26da>
                    case EGR_ERROR:                         // (A-128)*100/128
                        engine_data = ((R[3]-128)*(100/128));
 8007a96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <obd+0x1588>)
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8007a9e:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <obd+0x1588>)
 8007aa0:	edd3 7a00 	vldr	s15, [r3]
 8007aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aa8:	ee17 2a90 	vmov	r2, s15
 8007aac:	490a      	ldr	r1, [pc, #40]	@ (8007ad8 <obd+0x15a0>)
 8007aae:	4806      	ldr	r0, [pc, #24]	@ (8007ac8 <obd+0x1590>)
 8007ab0:	f00f ff22 	bl	80178f8 <siprintf>
                        break;
 8007ab4:	f001 b8ad 	b.w	8008c12 <obd+0x26da>
 8007ab8:	2400226c 	.word	0x2400226c
 8007abc:	80008001 	.word	0x80008001
 8007ac0:	2400245c 	.word	0x2400245c
 8007ac4:	08019320 	.word	0x08019320
 8007ac8:	24002284 	.word	0x24002284
 8007acc:	0801932c 	.word	0x0801932c
 8007ad0:	24002324 	.word	0x24002324
 8007ad4:	80808081 	.word	0x80808081
 8007ad8:	08019334 	.word	0x08019334
                    case COMMANDED_EVAP_P:                  // 100*A/255 [%]
                        engine_data = ((R[3]*100)/255);
 8007adc:	4bb2      	ldr	r3, [pc, #712]	@ (8007da8 <obd+0x1870>)
 8007ade:	78db      	ldrb	r3, [r3, #3]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2364      	movs	r3, #100	@ 0x64
 8007ae4:	fb02 f303 	mul.w	r3, r2, r3
 8007ae8:	4ab0      	ldr	r2, [pc, #704]	@ (8007dac <obd+0x1874>)
 8007aea:	fb82 1203 	smull	r1, r2, r2, r3
 8007aee:	441a      	add	r2, r3
 8007af0:	11d2      	asrs	r2, r2, #7
 8007af2:	17db      	asrs	r3, r3, #31
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007afe:	4bac      	ldr	r3, [pc, #688]	@ (8007db0 <obd+0x1878>)
 8007b00:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8007b04:	4baa      	ldr	r3, [pc, #680]	@ (8007db0 <obd+0x1878>)
 8007b06:	edd3 7a00 	vldr	s15, [r3]
 8007b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b0e:	ee17 2a90 	vmov	r2, s15
 8007b12:	49a8      	ldr	r1, [pc, #672]	@ (8007db4 <obd+0x187c>)
 8007b14:	48a8      	ldr	r0, [pc, #672]	@ (8007db8 <obd+0x1880>)
 8007b16:	f00f feef 	bl	80178f8 <siprintf>
                        break;
 8007b1a:	f001 b87a 	b.w	8008c12 <obd+0x26da>
                    case FUEL_LEVEL:                        //100*A/255
                        engine_data = ((100*R[3])/255);
 8007b1e:	4ba2      	ldr	r3, [pc, #648]	@ (8007da8 <obd+0x1870>)
 8007b20:	78db      	ldrb	r3, [r3, #3]
 8007b22:	461a      	mov	r2, r3
 8007b24:	2364      	movs	r3, #100	@ 0x64
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	4aa0      	ldr	r2, [pc, #640]	@ (8007dac <obd+0x1874>)
 8007b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8007b30:	441a      	add	r2, r3
 8007b32:	11d2      	asrs	r2, r2, #7
 8007b34:	17db      	asrs	r3, r3, #31
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b40:	4b9b      	ldr	r3, [pc, #620]	@ (8007db0 <obd+0x1878>)
 8007b42:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8007b46:	4b9a      	ldr	r3, [pc, #616]	@ (8007db0 <obd+0x1878>)
 8007b48:	edd3 7a00 	vldr	s15, [r3]
 8007b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b50:	ee17 2a90 	vmov	r2, s15
 8007b54:	4997      	ldr	r1, [pc, #604]	@ (8007db4 <obd+0x187c>)
 8007b56:	4898      	ldr	r0, [pc, #608]	@ (8007db8 <obd+0x1880>)
 8007b58:	f00f fece 	bl	80178f8 <siprintf>
                        break;
 8007b5c:	f001 b859 	b.w	8008c12 <obd+0x26da>
                    case WARMUPS_SINCE_CLR:                 //A
                        engine_data = (R[3]);
 8007b60:	4b91      	ldr	r3, [pc, #580]	@ (8007da8 <obd+0x1870>)
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	4b90      	ldr	r3, [pc, #576]	@ (8007db0 <obd+0x1878>)
 8007b6e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Warmups",(int) engine_data);
 8007b72:	4b8f      	ldr	r3, [pc, #572]	@ (8007db0 <obd+0x1878>)
 8007b74:	edd3 7a00 	vldr	s15, [r3]
 8007b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b7c:	ee17 2a90 	vmov	r2, s15
 8007b80:	498e      	ldr	r1, [pc, #568]	@ (8007dbc <obd+0x1884>)
 8007b82:	488d      	ldr	r0, [pc, #564]	@ (8007db8 <obd+0x1880>)
 8007b84:	f00f feb8 	bl	80178f8 <siprintf>
                        break;
 8007b88:	f001 b843 	b.w	8008c12 <obd+0x26da>
                    case DIST_SINCE_CLR:                    //A*256+B   [km]
                        engine_data = ((R[3]*256)+R[4]);
 8007b8c:	4b86      	ldr	r3, [pc, #536]	@ (8007da8 <obd+0x1870>)
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	4a85      	ldr	r2, [pc, #532]	@ (8007da8 <obd+0x1870>)
 8007b94:	7912      	ldrb	r2, [r2, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba0:	4b83      	ldr	r3, [pc, #524]	@ (8007db0 <obd+0x1878>)
 8007ba2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d km",(int) engine_data);
 8007ba6:	4b82      	ldr	r3, [pc, #520]	@ (8007db0 <obd+0x1878>)
 8007ba8:	edd3 7a00 	vldr	s15, [r3]
 8007bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb0:	ee17 2a90 	vmov	r2, s15
 8007bb4:	4982      	ldr	r1, [pc, #520]	@ (8007dc0 <obd+0x1888>)
 8007bb6:	4880      	ldr	r0, [pc, #512]	@ (8007db8 <obd+0x1880>)
 8007bb8:	f00f fe9e 	bl	80178f8 <siprintf>
                        break;
 8007bbc:	f001 b829 	b.w	8008c12 <obd+0x26da>
                    case EVAP_PRESSURE:                     //((A*256)+B)/4
                        engine_data = (((R[3]*256)+R[4])/4);
 8007bc0:	4b79      	ldr	r3, [pc, #484]	@ (8007da8 <obd+0x1870>)
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	4a78      	ldr	r2, [pc, #480]	@ (8007da8 <obd+0x1870>)
 8007bc8:	7912      	ldrb	r2, [r2, #4]
 8007bca:	4413      	add	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da00      	bge.n	8007bd2 <obd+0x169a>
 8007bd0:	3303      	adds	r3, #3
 8007bd2:	109b      	asrs	r3, r3, #2
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bdc:	4b74      	ldr	r3, [pc, #464]	@ (8007db0 <obd+0x1878>)
 8007bde:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Pa",(int) engine_data); //Yes it's in pascals
 8007be2:	4b73      	ldr	r3, [pc, #460]	@ (8007db0 <obd+0x1878>)
 8007be4:	edd3 7a00 	vldr	s15, [r3]
 8007be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bec:	ee17 2a90 	vmov	r2, s15
 8007bf0:	4974      	ldr	r1, [pc, #464]	@ (8007dc4 <obd+0x188c>)
 8007bf2:	4871      	ldr	r0, [pc, #452]	@ (8007db8 <obd+0x1880>)
 8007bf4:	f00f fe80 	bl	80178f8 <siprintf>
                        break;
 8007bf8:	f001 b80b 	b.w	8008c12 <obd+0x26da>
                    case BAROMETRIC_PRESSURE:               //A
                        engine_data = R[3];
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8007da8 <obd+0x1870>)
 8007bfe:	78db      	ldrb	r3, [r3, #3]
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c08:	4b69      	ldr	r3, [pc, #420]	@ (8007db0 <obd+0x1878>)
 8007c0a:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,64,"The barrometric pressure inside the car is:%d kPa\n",(int) engine_data);
 8007c0e:	4b68      	ldr	r3, [pc, #416]	@ (8007db0 <obd+0x1878>)
 8007c10:	edd3 7a00 	vldr	s15, [r3]
 8007c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c18:	ee17 3a90 	vmov	r3, s15
 8007c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8007dc8 <obd+0x1890>)
 8007c1e:	2140      	movs	r1, #64	@ 0x40
 8007c20:	4865      	ldr	r0, [pc, #404]	@ (8007db8 <obd+0x1880>)
 8007c22:	f00f fe35 	bl	8017890 <sniprintf>
 8007c26:	4603      	mov	r3, r0
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	4b68      	ldr	r3, [pc, #416]	@ (8007dcc <obd+0x1894>)
 8007c2c:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer,s);
                        break;
 8007c2e:	f000 bff0 	b.w	8008c12 <obd+0x26da>
                    case O2S1_WR_LAMBDA_I:                  //((A*256)+B)/32,768 [Ratio], ((C*256)+D)/256 - 128 [mA]
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007c32:	4b5d      	ldr	r3, [pc, #372]	@ (8007da8 <obd+0x1870>)
 8007c34:	78db      	ldrb	r3, [r3, #3]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	4a5b      	ldr	r2, [pc, #364]	@ (8007da8 <obd+0x1870>)
 8007c3a:	7912      	ldrb	r2, [r2, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da03      	bge.n	8007c4a <obd+0x1712>
 8007c42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007c46:	441a      	add	r2, r3
 8007c48:	4613      	mov	r3, r2
 8007c4a:	13db      	asrs	r3, r3, #15
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c54:	4b56      	ldr	r3, [pc, #344]	@ (8007db0 <obd+0x1878>)
 8007c56:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007c5a:	4b55      	ldr	r3, [pc, #340]	@ (8007db0 <obd+0x1878>)
 8007c5c:	edd3 7a00 	vldr	s15, [r3]
 8007c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c64:	ee17 2a90 	vmov	r2, s15
 8007c68:	4959      	ldr	r1, [pc, #356]	@ (8007dd0 <obd+0x1898>)
 8007c6a:	4853      	ldr	r0, [pc, #332]	@ (8007db8 <obd+0x1880>)
 8007c6c:	f00f fe44 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007c70:	4b4d      	ldr	r3, [pc, #308]	@ (8007da8 <obd+0x1870>)
 8007c72:	795b      	ldrb	r3, [r3, #5]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	4a4c      	ldr	r2, [pc, #304]	@ (8007da8 <obd+0x1870>)
 8007c78:	7992      	ldrb	r2, [r2, #6]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da00      	bge.n	8007c82 <obd+0x174a>
 8007c80:	33ff      	adds	r3, #255	@ 0xff
 8007c82:	121b      	asrs	r3, r3, #8
 8007c84:	3b80      	subs	r3, #128	@ 0x80
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c8e:	4b48      	ldr	r3, [pc, #288]	@ (8007db0 <obd+0x1878>)
 8007c90:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007c94:	4b46      	ldr	r3, [pc, #280]	@ (8007db0 <obd+0x1878>)
 8007c96:	edd3 7a00 	vldr	s15, [r3]
 8007c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c9e:	ee17 2a90 	vmov	r2, s15
 8007ca2:	494c      	ldr	r1, [pc, #304]	@ (8007dd4 <obd+0x189c>)
 8007ca4:	484c      	ldr	r0, [pc, #304]	@ (8007dd8 <obd+0x18a0>)
 8007ca6:	f00f fe27 	bl	80178f8 <siprintf>
                        break;
 8007caa:	f000 bfb2 	b.w	8008c12 <obd+0x26da>
                    case O2S2_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007cae:	4b3e      	ldr	r3, [pc, #248]	@ (8007da8 <obd+0x1870>)
 8007cb0:	78db      	ldrb	r3, [r3, #3]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007da8 <obd+0x1870>)
 8007cb6:	7912      	ldrb	r2, [r2, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	da03      	bge.n	8007cc6 <obd+0x178e>
 8007cbe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007cc2:	441a      	add	r2, r3
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	13db      	asrs	r3, r3, #15
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cd0:	4b37      	ldr	r3, [pc, #220]	@ (8007db0 <obd+0x1878>)
 8007cd2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007cd6:	4b36      	ldr	r3, [pc, #216]	@ (8007db0 <obd+0x1878>)
 8007cd8:	edd3 7a00 	vldr	s15, [r3]
 8007cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ce0:	ee17 2a90 	vmov	r2, s15
 8007ce4:	493a      	ldr	r1, [pc, #232]	@ (8007dd0 <obd+0x1898>)
 8007ce6:	4834      	ldr	r0, [pc, #208]	@ (8007db8 <obd+0x1880>)
 8007ce8:	f00f fe06 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007cec:	4b2e      	ldr	r3, [pc, #184]	@ (8007da8 <obd+0x1870>)
 8007cee:	795b      	ldrb	r3, [r3, #5]
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8007da8 <obd+0x1870>)
 8007cf4:	7992      	ldrb	r2, [r2, #6]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da00      	bge.n	8007cfe <obd+0x17c6>
 8007cfc:	33ff      	adds	r3, #255	@ 0xff
 8007cfe:	121b      	asrs	r3, r3, #8
 8007d00:	3b80      	subs	r3, #128	@ 0x80
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d0a:	4b29      	ldr	r3, [pc, #164]	@ (8007db0 <obd+0x1878>)
 8007d0c:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007d10:	4b27      	ldr	r3, [pc, #156]	@ (8007db0 <obd+0x1878>)
 8007d12:	edd3 7a00 	vldr	s15, [r3]
 8007d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d1a:	ee17 2a90 	vmov	r2, s15
 8007d1e:	492d      	ldr	r1, [pc, #180]	@ (8007dd4 <obd+0x189c>)
 8007d20:	482d      	ldr	r0, [pc, #180]	@ (8007dd8 <obd+0x18a0>)
 8007d22:	f00f fde9 	bl	80178f8 <siprintf>
                        break;
 8007d26:	f000 bf74 	b.w	8008c12 <obd+0x26da>
                    case O2S3_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007da8 <obd+0x1870>)
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <obd+0x1870>)
 8007d32:	7912      	ldrb	r2, [r2, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da03      	bge.n	8007d42 <obd+0x180a>
 8007d3a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007d3e:	441a      	add	r2, r3
 8007d40:	4613      	mov	r3, r2
 8007d42:	13db      	asrs	r3, r3, #15
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d4c:	4b18      	ldr	r3, [pc, #96]	@ (8007db0 <obd+0x1878>)
 8007d4e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007d52:	4b17      	ldr	r3, [pc, #92]	@ (8007db0 <obd+0x1878>)
 8007d54:	edd3 7a00 	vldr	s15, [r3]
 8007d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d5c:	ee17 2a90 	vmov	r2, s15
 8007d60:	491b      	ldr	r1, [pc, #108]	@ (8007dd0 <obd+0x1898>)
 8007d62:	4815      	ldr	r0, [pc, #84]	@ (8007db8 <obd+0x1880>)
 8007d64:	f00f fdc8 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <obd+0x1870>)
 8007d6a:	795b      	ldrb	r3, [r3, #5]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007da8 <obd+0x1870>)
 8007d70:	7992      	ldrb	r2, [r2, #6]
 8007d72:	4413      	add	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da00      	bge.n	8007d7a <obd+0x1842>
 8007d78:	33ff      	adds	r3, #255	@ 0xff
 8007d7a:	121b      	asrs	r3, r3, #8
 8007d7c:	3b80      	subs	r3, #128	@ 0x80
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d86:	4b0a      	ldr	r3, [pc, #40]	@ (8007db0 <obd+0x1878>)
 8007d88:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007d8c:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <obd+0x1878>)
 8007d8e:	edd3 7a00 	vldr	s15, [r3]
 8007d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d96:	ee17 2a90 	vmov	r2, s15
 8007d9a:	490e      	ldr	r1, [pc, #56]	@ (8007dd4 <obd+0x189c>)
 8007d9c:	480e      	ldr	r0, [pc, #56]	@ (8007dd8 <obd+0x18a0>)
 8007d9e:	f00f fdab 	bl	80178f8 <siprintf>
                        break;
 8007da2:	f000 bf36 	b.w	8008c12 <obd+0x26da>
 8007da6:	bf00      	nop
 8007da8:	2400226c 	.word	0x2400226c
 8007dac:	80808081 	.word	0x80808081
 8007db0:	2400245c 	.word	0x2400245c
 8007db4:	08019334 	.word	0x08019334
 8007db8:	24002284 	.word	0x24002284
 8007dbc:	0801933c 	.word	0x0801933c
 8007dc0:	08019348 	.word	0x08019348
 8007dc4:	08019350 	.word	0x08019350
 8007dc8:	08019358 	.word	0x08019358
 8007dcc:	240022c4 	.word	0x240022c4
 8007dd0:	08019320 	.word	0x08019320
 8007dd4:	0801938c 	.word	0x0801938c
 8007dd8:	24002324 	.word	0x24002324
                    case O2S4_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007ddc:	4bbb      	ldr	r3, [pc, #748]	@ (80080cc <obd+0x1b94>)
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	4aba      	ldr	r2, [pc, #744]	@ (80080cc <obd+0x1b94>)
 8007de4:	7912      	ldrb	r2, [r2, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	da03      	bge.n	8007df4 <obd+0x18bc>
 8007dec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007df0:	441a      	add	r2, r3
 8007df2:	4613      	mov	r3, r2
 8007df4:	13db      	asrs	r3, r3, #15
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80080d0 <obd+0x1b98>)
 8007e00:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007e04:	4bb2      	ldr	r3, [pc, #712]	@ (80080d0 <obd+0x1b98>)
 8007e06:	edd3 7a00 	vldr	s15, [r3]
 8007e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e0e:	ee17 2a90 	vmov	r2, s15
 8007e12:	49b0      	ldr	r1, [pc, #704]	@ (80080d4 <obd+0x1b9c>)
 8007e14:	48b0      	ldr	r0, [pc, #704]	@ (80080d8 <obd+0x1ba0>)
 8007e16:	f00f fd6f 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007e1a:	4bac      	ldr	r3, [pc, #688]	@ (80080cc <obd+0x1b94>)
 8007e1c:	795b      	ldrb	r3, [r3, #5]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	4aaa      	ldr	r2, [pc, #680]	@ (80080cc <obd+0x1b94>)
 8007e22:	7992      	ldrb	r2, [r2, #6]
 8007e24:	4413      	add	r3, r2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da00      	bge.n	8007e2c <obd+0x18f4>
 8007e2a:	33ff      	adds	r3, #255	@ 0xff
 8007e2c:	121b      	asrs	r3, r3, #8
 8007e2e:	3b80      	subs	r3, #128	@ 0x80
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e38:	4ba5      	ldr	r3, [pc, #660]	@ (80080d0 <obd+0x1b98>)
 8007e3a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007e3e:	4ba4      	ldr	r3, [pc, #656]	@ (80080d0 <obd+0x1b98>)
 8007e40:	edd3 7a00 	vldr	s15, [r3]
 8007e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e48:	ee17 2a90 	vmov	r2, s15
 8007e4c:	49a3      	ldr	r1, [pc, #652]	@ (80080dc <obd+0x1ba4>)
 8007e4e:	48a4      	ldr	r0, [pc, #656]	@ (80080e0 <obd+0x1ba8>)
 8007e50:	f00f fd52 	bl	80178f8 <siprintf>
                        break;
 8007e54:	f000 bedd 	b.w	8008c12 <obd+0x26da>
                    case O2S5_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007e58:	4b9c      	ldr	r3, [pc, #624]	@ (80080cc <obd+0x1b94>)
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	4a9b      	ldr	r2, [pc, #620]	@ (80080cc <obd+0x1b94>)
 8007e60:	7912      	ldrb	r2, [r2, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da03      	bge.n	8007e70 <obd+0x1938>
 8007e68:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007e6c:	441a      	add	r2, r3
 8007e6e:	4613      	mov	r3, r2
 8007e70:	13db      	asrs	r3, r3, #15
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e7a:	4b95      	ldr	r3, [pc, #596]	@ (80080d0 <obd+0x1b98>)
 8007e7c:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007e80:	4b93      	ldr	r3, [pc, #588]	@ (80080d0 <obd+0x1b98>)
 8007e82:	edd3 7a00 	vldr	s15, [r3]
 8007e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e8a:	ee17 2a90 	vmov	r2, s15
 8007e8e:	4991      	ldr	r1, [pc, #580]	@ (80080d4 <obd+0x1b9c>)
 8007e90:	4891      	ldr	r0, [pc, #580]	@ (80080d8 <obd+0x1ba0>)
 8007e92:	f00f fd31 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007e96:	4b8d      	ldr	r3, [pc, #564]	@ (80080cc <obd+0x1b94>)
 8007e98:	795b      	ldrb	r3, [r3, #5]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	4a8b      	ldr	r2, [pc, #556]	@ (80080cc <obd+0x1b94>)
 8007e9e:	7992      	ldrb	r2, [r2, #6]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da00      	bge.n	8007ea8 <obd+0x1970>
 8007ea6:	33ff      	adds	r3, #255	@ 0xff
 8007ea8:	121b      	asrs	r3, r3, #8
 8007eaa:	3b80      	subs	r3, #128	@ 0x80
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eb4:	4b86      	ldr	r3, [pc, #536]	@ (80080d0 <obd+0x1b98>)
 8007eb6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007eba:	4b85      	ldr	r3, [pc, #532]	@ (80080d0 <obd+0x1b98>)
 8007ebc:	edd3 7a00 	vldr	s15, [r3]
 8007ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec4:	ee17 2a90 	vmov	r2, s15
 8007ec8:	4984      	ldr	r1, [pc, #528]	@ (80080dc <obd+0x1ba4>)
 8007eca:	4885      	ldr	r0, [pc, #532]	@ (80080e0 <obd+0x1ba8>)
 8007ecc:	f00f fd14 	bl	80178f8 <siprintf>
                        break;
 8007ed0:	f000 be9f 	b.w	8008c12 <obd+0x26da>
                    case O2S6_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007ed4:	4b7d      	ldr	r3, [pc, #500]	@ (80080cc <obd+0x1b94>)
 8007ed6:	78db      	ldrb	r3, [r3, #3]
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	4a7c      	ldr	r2, [pc, #496]	@ (80080cc <obd+0x1b94>)
 8007edc:	7912      	ldrb	r2, [r2, #4]
 8007ede:	4413      	add	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da03      	bge.n	8007eec <obd+0x19b4>
 8007ee4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007ee8:	441a      	add	r2, r3
 8007eea:	4613      	mov	r3, r2
 8007eec:	13db      	asrs	r3, r3, #15
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ef6:	4b76      	ldr	r3, [pc, #472]	@ (80080d0 <obd+0x1b98>)
 8007ef8:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007efc:	4b74      	ldr	r3, [pc, #464]	@ (80080d0 <obd+0x1b98>)
 8007efe:	edd3 7a00 	vldr	s15, [r3]
 8007f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f06:	ee17 2a90 	vmov	r2, s15
 8007f0a:	4972      	ldr	r1, [pc, #456]	@ (80080d4 <obd+0x1b9c>)
 8007f0c:	4872      	ldr	r0, [pc, #456]	@ (80080d8 <obd+0x1ba0>)
 8007f0e:	f00f fcf3 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007f12:	4b6e      	ldr	r3, [pc, #440]	@ (80080cc <obd+0x1b94>)
 8007f14:	795b      	ldrb	r3, [r3, #5]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	4a6c      	ldr	r2, [pc, #432]	@ (80080cc <obd+0x1b94>)
 8007f1a:	7992      	ldrb	r2, [r2, #6]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da00      	bge.n	8007f24 <obd+0x19ec>
 8007f22:	33ff      	adds	r3, #255	@ 0xff
 8007f24:	121b      	asrs	r3, r3, #8
 8007f26:	3b80      	subs	r3, #128	@ 0x80
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f30:	4b67      	ldr	r3, [pc, #412]	@ (80080d0 <obd+0x1b98>)
 8007f32:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007f36:	4b66      	ldr	r3, [pc, #408]	@ (80080d0 <obd+0x1b98>)
 8007f38:	edd3 7a00 	vldr	s15, [r3]
 8007f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f40:	ee17 2a90 	vmov	r2, s15
 8007f44:	4965      	ldr	r1, [pc, #404]	@ (80080dc <obd+0x1ba4>)
 8007f46:	4866      	ldr	r0, [pc, #408]	@ (80080e0 <obd+0x1ba8>)
 8007f48:	f00f fcd6 	bl	80178f8 <siprintf>
                        break;
 8007f4c:	f000 be61 	b.w	8008c12 <obd+0x26da>
                    case O2S7_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007f50:	4b5e      	ldr	r3, [pc, #376]	@ (80080cc <obd+0x1b94>)
 8007f52:	78db      	ldrb	r3, [r3, #3]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	4a5d      	ldr	r2, [pc, #372]	@ (80080cc <obd+0x1b94>)
 8007f58:	7912      	ldrb	r2, [r2, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da03      	bge.n	8007f68 <obd+0x1a30>
 8007f60:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007f64:	441a      	add	r2, r3
 8007f66:	4613      	mov	r3, r2
 8007f68:	13db      	asrs	r3, r3, #15
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f72:	4b57      	ldr	r3, [pc, #348]	@ (80080d0 <obd+0x1b98>)
 8007f74:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007f78:	4b55      	ldr	r3, [pc, #340]	@ (80080d0 <obd+0x1b98>)
 8007f7a:	edd3 7a00 	vldr	s15, [r3]
 8007f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f82:	ee17 2a90 	vmov	r2, s15
 8007f86:	4953      	ldr	r1, [pc, #332]	@ (80080d4 <obd+0x1b9c>)
 8007f88:	4853      	ldr	r0, [pc, #332]	@ (80080d8 <obd+0x1ba0>)
 8007f8a:	f00f fcb5 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 8007f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80080cc <obd+0x1b94>)
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	4a4d      	ldr	r2, [pc, #308]	@ (80080cc <obd+0x1b94>)
 8007f96:	7992      	ldrb	r2, [r2, #6]
 8007f98:	4413      	add	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da00      	bge.n	8007fa0 <obd+0x1a68>
 8007f9e:	33ff      	adds	r3, #255	@ 0xff
 8007fa0:	121b      	asrs	r3, r3, #8
 8007fa2:	3b80      	subs	r3, #128	@ 0x80
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fac:	4b48      	ldr	r3, [pc, #288]	@ (80080d0 <obd+0x1b98>)
 8007fae:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 8007fb2:	4b47      	ldr	r3, [pc, #284]	@ (80080d0 <obd+0x1b98>)
 8007fb4:	edd3 7a00 	vldr	s15, [r3]
 8007fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fbc:	ee17 2a90 	vmov	r2, s15
 8007fc0:	4946      	ldr	r1, [pc, #280]	@ (80080dc <obd+0x1ba4>)
 8007fc2:	4847      	ldr	r0, [pc, #284]	@ (80080e0 <obd+0x1ba8>)
 8007fc4:	f00f fc98 	bl	80178f8 <siprintf>
                        break;
 8007fc8:	f000 be23 	b.w	8008c12 <obd+0x26da>
                    case O2S8_WR_LAMBDA_I:
                        engine_data = (((R[3]*256)+R[4])/32768);
 8007fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80080cc <obd+0x1b94>)
 8007fce:	78db      	ldrb	r3, [r3, #3]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80080cc <obd+0x1b94>)
 8007fd4:	7912      	ldrb	r2, [r2, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da03      	bge.n	8007fe4 <obd+0x1aac>
 8007fdc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007fe0:	441a      	add	r2, r3
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	13db      	asrs	r3, r3, #15
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fee:	4b38      	ldr	r3, [pc, #224]	@ (80080d0 <obd+0x1b98>)
 8007ff0:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8007ff4:	4b36      	ldr	r3, [pc, #216]	@ (80080d0 <obd+0x1b98>)
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ffe:	ee17 2a90 	vmov	r2, s15
 8008002:	4934      	ldr	r1, [pc, #208]	@ (80080d4 <obd+0x1b9c>)
 8008004:	4834      	ldr	r0, [pc, #208]	@ (80080d8 <obd+0x1ba0>)
 8008006:	f00f fc77 	bl	80178f8 <siprintf>
                        engine_data = ((((R[5]*256)+R[6])/256)-128);
 800800a:	4b30      	ldr	r3, [pc, #192]	@ (80080cc <obd+0x1b94>)
 800800c:	795b      	ldrb	r3, [r3, #5]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	4a2e      	ldr	r2, [pc, #184]	@ (80080cc <obd+0x1b94>)
 8008012:	7992      	ldrb	r2, [r2, #6]
 8008014:	4413      	add	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	da00      	bge.n	800801c <obd+0x1ae4>
 800801a:	33ff      	adds	r3, #255	@ 0xff
 800801c:	121b      	asrs	r3, r3, #8
 800801e:	3b80      	subs	r3, #128	@ 0x80
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008028:	4b29      	ldr	r3, [pc, #164]	@ (80080d0 <obd+0x1b98>)
 800802a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d mA",(int) engine_data);
 800802e:	4b28      	ldr	r3, [pc, #160]	@ (80080d0 <obd+0x1b98>)
 8008030:	edd3 7a00 	vldr	s15, [r3]
 8008034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008038:	ee17 2a90 	vmov	r2, s15
 800803c:	4927      	ldr	r1, [pc, #156]	@ (80080dc <obd+0x1ba4>)
 800803e:	4828      	ldr	r0, [pc, #160]	@ (80080e0 <obd+0x1ba8>)
 8008040:	f00f fc5a 	bl	80178f8 <siprintf>
                        break;
 8008044:	f000 bde5 	b.w	8008c12 <obd+0x26da>
                    case CAT_TEMP_B1S1:                     //((A*256)+B)/10 - 40 [DegC]
                        engine_data = ((((R[3]*256)+R[4])/10)-40);
 8008048:	4b20      	ldr	r3, [pc, #128]	@ (80080cc <obd+0x1b94>)
 800804a:	78db      	ldrb	r3, [r3, #3]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	4a1f      	ldr	r2, [pc, #124]	@ (80080cc <obd+0x1b94>)
 8008050:	7912      	ldrb	r2, [r2, #4]
 8008052:	4413      	add	r3, r2
 8008054:	4a23      	ldr	r2, [pc, #140]	@ (80080e4 <obd+0x1bac>)
 8008056:	fb82 1203 	smull	r1, r2, r2, r3
 800805a:	1092      	asrs	r2, r2, #2
 800805c:	17db      	asrs	r3, r3, #31
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	3b28      	subs	r3, #40	@ 0x28
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800806a:	4b19      	ldr	r3, [pc, #100]	@ (80080d0 <obd+0x1b98>)
 800806c:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 8008070:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <obd+0x1b98>)
 8008072:	edd3 7a00 	vldr	s15, [r3]
 8008076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800807a:	ee17 2a90 	vmov	r2, s15
 800807e:	491a      	ldr	r1, [pc, #104]	@ (80080e8 <obd+0x1bb0>)
 8008080:	4815      	ldr	r0, [pc, #84]	@ (80080d8 <obd+0x1ba0>)
 8008082:	f00f fc39 	bl	80178f8 <siprintf>
                        break;
 8008086:	f000 bdc4 	b.w	8008c12 <obd+0x26da>
                    case CAT_TEMP_B1S2:
                        engine_data = ((((R[3]*256)+R[4])/10)-40);
 800808a:	4b10      	ldr	r3, [pc, #64]	@ (80080cc <obd+0x1b94>)
 800808c:	78db      	ldrb	r3, [r3, #3]
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	4a0e      	ldr	r2, [pc, #56]	@ (80080cc <obd+0x1b94>)
 8008092:	7912      	ldrb	r2, [r2, #4]
 8008094:	4413      	add	r3, r2
 8008096:	4a13      	ldr	r2, [pc, #76]	@ (80080e4 <obd+0x1bac>)
 8008098:	fb82 1203 	smull	r1, r2, r2, r3
 800809c:	1092      	asrs	r2, r2, #2
 800809e:	17db      	asrs	r3, r3, #31
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	3b28      	subs	r3, #40	@ 0x28
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080ac:	4b08      	ldr	r3, [pc, #32]	@ (80080d0 <obd+0x1b98>)
 80080ae:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 80080b2:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <obd+0x1b98>)
 80080b4:	edd3 7a00 	vldr	s15, [r3]
 80080b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080bc:	ee17 2a90 	vmov	r2, s15
 80080c0:	4909      	ldr	r1, [pc, #36]	@ (80080e8 <obd+0x1bb0>)
 80080c2:	4805      	ldr	r0, [pc, #20]	@ (80080d8 <obd+0x1ba0>)
 80080c4:	f00f fc18 	bl	80178f8 <siprintf>
                        break;
 80080c8:	f000 bda3 	b.w	8008c12 <obd+0x26da>
 80080cc:	2400226c 	.word	0x2400226c
 80080d0:	2400245c 	.word	0x2400245c
 80080d4:	08019320 	.word	0x08019320
 80080d8:	24002284 	.word	0x24002284
 80080dc:	0801938c 	.word	0x0801938c
 80080e0:	24002324 	.word	0x24002324
 80080e4:	66666667 	.word	0x66666667
 80080e8:	080191cc 	.word	0x080191cc
                    case CAT_TEMP_B2S1:
                        engine_data = ((((R[3]*256)+R[4])/10)-40);
 80080ec:	4bbc      	ldr	r3, [pc, #752]	@ (80083e0 <obd+0x1ea8>)
 80080ee:	78db      	ldrb	r3, [r3, #3]
 80080f0:	021b      	lsls	r3, r3, #8
 80080f2:	4abb      	ldr	r2, [pc, #748]	@ (80083e0 <obd+0x1ea8>)
 80080f4:	7912      	ldrb	r2, [r2, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	4aba      	ldr	r2, [pc, #744]	@ (80083e4 <obd+0x1eac>)
 80080fa:	fb82 1203 	smull	r1, r2, r2, r3
 80080fe:	1092      	asrs	r2, r2, #2
 8008100:	17db      	asrs	r3, r3, #31
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	3b28      	subs	r3, #40	@ 0x28
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800810e:	4bb6      	ldr	r3, [pc, #728]	@ (80083e8 <obd+0x1eb0>)
 8008110:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 8008114:	4bb4      	ldr	r3, [pc, #720]	@ (80083e8 <obd+0x1eb0>)
 8008116:	edd3 7a00 	vldr	s15, [r3]
 800811a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800811e:	ee17 2a90 	vmov	r2, s15
 8008122:	49b2      	ldr	r1, [pc, #712]	@ (80083ec <obd+0x1eb4>)
 8008124:	48b2      	ldr	r0, [pc, #712]	@ (80083f0 <obd+0x1eb8>)
 8008126:	f00f fbe7 	bl	80178f8 <siprintf>
                        break;
 800812a:	f000 bd72 	b.w	8008c12 <obd+0x26da>
                    case CAT_TEMP_B2S2:
                        engine_data = ((((R[3]*256)+R[4])/10)-40);
 800812e:	4bac      	ldr	r3, [pc, #688]	@ (80083e0 <obd+0x1ea8>)
 8008130:	78db      	ldrb	r3, [r3, #3]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	4aaa      	ldr	r2, [pc, #680]	@ (80083e0 <obd+0x1ea8>)
 8008136:	7912      	ldrb	r2, [r2, #4]
 8008138:	4413      	add	r3, r2
 800813a:	4aaa      	ldr	r2, [pc, #680]	@ (80083e4 <obd+0x1eac>)
 800813c:	fb82 1203 	smull	r1, r2, r2, r3
 8008140:	1092      	asrs	r2, r2, #2
 8008142:	17db      	asrs	r3, r3, #31
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	3b28      	subs	r3, #40	@ 0x28
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008150:	4ba5      	ldr	r3, [pc, #660]	@ (80083e8 <obd+0x1eb0>)
 8008152:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 8008156:	4ba4      	ldr	r3, [pc, #656]	@ (80083e8 <obd+0x1eb0>)
 8008158:	edd3 7a00 	vldr	s15, [r3]
 800815c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008160:	ee17 2a90 	vmov	r2, s15
 8008164:	49a1      	ldr	r1, [pc, #644]	@ (80083ec <obd+0x1eb4>)
 8008166:	48a2      	ldr	r0, [pc, #648]	@ (80083f0 <obd+0x1eb8>)
 8008168:	f00f fbc6 	bl	80178f8 <siprintf>
                        break;
 800816c:	f000 bd51 	b.w	8008c12 <obd+0x26da>
                    case PID_41_60:                         //bit encoded NOT DONE
                        PID4160 = ((R[3] << 24) | (R[4] << 16) | (R[5] << 8) | (R[6]));
 8008170:	4b9b      	ldr	r3, [pc, #620]	@ (80083e0 <obd+0x1ea8>)
 8008172:	78db      	ldrb	r3, [r3, #3]
 8008174:	061a      	lsls	r2, r3, #24
 8008176:	4b9a      	ldr	r3, [pc, #616]	@ (80083e0 <obd+0x1ea8>)
 8008178:	791b      	ldrb	r3, [r3, #4]
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	431a      	orrs	r2, r3
 800817e:	4b98      	ldr	r3, [pc, #608]	@ (80083e0 <obd+0x1ea8>)
 8008180:	795b      	ldrb	r3, [r3, #5]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	4313      	orrs	r3, r2
 8008186:	4a96      	ldr	r2, [pc, #600]	@ (80083e0 <obd+0x1ea8>)
 8008188:	7992      	ldrb	r2, [r2, #6]
 800818a:	4313      	orrs	r3, r2
 800818c:	4a99      	ldr	r2, [pc, #612]	@ (80083f4 <obd+0x1ebc>)
 800818e:	6013      	str	r3, [r2, #0]
                        break;
 8008190:	f000 bd3f 	b.w	8008c12 <obd+0x26da>
                        // O2 Sensor        C5              D5
                        // O2 Sensor Heater C6              D6
                        // EGR System       C7              D7
                        break;
                    case ECU_VOLTAGE:                       //((A*256)+B)/1000 [V]
                        engine_data = (((R[3]*256)+R[4])/1000);
 8008194:	4b92      	ldr	r3, [pc, #584]	@ (80083e0 <obd+0x1ea8>)
 8008196:	78db      	ldrb	r3, [r3, #3]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	4a91      	ldr	r2, [pc, #580]	@ (80083e0 <obd+0x1ea8>)
 800819c:	7912      	ldrb	r2, [r2, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	4a95      	ldr	r2, [pc, #596]	@ (80083f8 <obd+0x1ec0>)
 80081a2:	fb82 1203 	smull	r1, r2, r2, r3
 80081a6:	1192      	asrs	r2, r2, #6
 80081a8:	17db      	asrs	r3, r3, #31
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081b4:	4b8c      	ldr	r3, [pc, #560]	@ (80083e8 <obd+0x1eb0>)
 80081b6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V",(int) engine_data);
 80081ba:	4b8b      	ldr	r3, [pc, #556]	@ (80083e8 <obd+0x1eb0>)
 80081bc:	edd3 7a00 	vldr	s15, [r3]
 80081c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c4:	ee17 2a90 	vmov	r2, s15
 80081c8:	498c      	ldr	r1, [pc, #560]	@ (80083fc <obd+0x1ec4>)
 80081ca:	4889      	ldr	r0, [pc, #548]	@ (80083f0 <obd+0x1eb8>)
 80081cc:	f00f fb94 	bl	80178f8 <siprintf>
                        break;
 80081d0:	f000 bd1f 	b.w	8008c12 <obd+0x26da>
                    case ABSOLUTE_LOAD:                     //((A*256)+B)*100/255 [%]
                        engine_data = ((((R[3]*256)+R[4])*100)/255);
 80081d4:	4b82      	ldr	r3, [pc, #520]	@ (80083e0 <obd+0x1ea8>)
 80081d6:	78db      	ldrb	r3, [r3, #3]
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	4a81      	ldr	r2, [pc, #516]	@ (80083e0 <obd+0x1ea8>)
 80081dc:	7912      	ldrb	r2, [r2, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	2264      	movs	r2, #100	@ 0x64
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	4a86      	ldr	r2, [pc, #536]	@ (8008400 <obd+0x1ec8>)
 80081e8:	fb82 1203 	smull	r1, r2, r2, r3
 80081ec:	441a      	add	r2, r3
 80081ee:	11d2      	asrs	r2, r2, #7
 80081f0:	17db      	asrs	r3, r3, #31
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081fc:	4b7a      	ldr	r3, [pc, #488]	@ (80083e8 <obd+0x1eb0>)
 80081fe:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008202:	4b79      	ldr	r3, [pc, #484]	@ (80083e8 <obd+0x1eb0>)
 8008204:	edd3 7a00 	vldr	s15, [r3]
 8008208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800820c:	ee17 2a90 	vmov	r2, s15
 8008210:	497c      	ldr	r1, [pc, #496]	@ (8008404 <obd+0x1ecc>)
 8008212:	4877      	ldr	r0, [pc, #476]	@ (80083f0 <obd+0x1eb8>)
 8008214:	f00f fb70 	bl	80178f8 <siprintf>
                        break;
 8008218:	f000 bcfb 	b.w	8008c12 <obd+0x26da>
                    case COMMANDED_EQUIV_R:                 //((A*256)+B)/32768 [Ratio]
                        engine_data = (((R[3]*256)+R[4])/32768);
 800821c:	4b70      	ldr	r3, [pc, #448]	@ (80083e0 <obd+0x1ea8>)
 800821e:	78db      	ldrb	r3, [r3, #3]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	4a6f      	ldr	r2, [pc, #444]	@ (80083e0 <obd+0x1ea8>)
 8008224:	7912      	ldrb	r2, [r2, #4]
 8008226:	4413      	add	r3, r2
 8008228:	2b00      	cmp	r3, #0
 800822a:	da03      	bge.n	8008234 <obd+0x1cfc>
 800822c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008230:	441a      	add	r2, r3
 8008232:	4613      	mov	r3, r2
 8008234:	13db      	asrs	r3, r3, #15
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800823e:	4b6a      	ldr	r3, [pc, #424]	@ (80083e8 <obd+0x1eb0>)
 8008240:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio %d",(int) engine_data);
 8008244:	4b68      	ldr	r3, [pc, #416]	@ (80083e8 <obd+0x1eb0>)
 8008246:	edd3 7a00 	vldr	s15, [r3]
 800824a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800824e:	ee17 2a90 	vmov	r2, s15
 8008252:	496d      	ldr	r1, [pc, #436]	@ (8008408 <obd+0x1ed0>)
 8008254:	4866      	ldr	r0, [pc, #408]	@ (80083f0 <obd+0x1eb8>)
 8008256:	f00f fb4f 	bl	80178f8 <siprintf>
                        break;
 800825a:	f000 bcda 	b.w	8008c12 <obd+0x26da>
                    case REL_THROTTLE_POS:                  // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 800825e:	4b60      	ldr	r3, [pc, #384]	@ (80083e0 <obd+0x1ea8>)
 8008260:	78db      	ldrb	r3, [r3, #3]
 8008262:	461a      	mov	r2, r3
 8008264:	2364      	movs	r3, #100	@ 0x64
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	4a65      	ldr	r2, [pc, #404]	@ (8008400 <obd+0x1ec8>)
 800826c:	fb82 1203 	smull	r1, r2, r2, r3
 8008270:	441a      	add	r2, r3
 8008272:	11d2      	asrs	r2, r2, #7
 8008274:	17db      	asrs	r3, r3, #31
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	ee07 3a90 	vmov	s15, r3
 800827c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008280:	4b59      	ldr	r3, [pc, #356]	@ (80083e8 <obd+0x1eb0>)
 8008282:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008286:	4b58      	ldr	r3, [pc, #352]	@ (80083e8 <obd+0x1eb0>)
 8008288:	edd3 7a00 	vldr	s15, [r3]
 800828c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008290:	ee17 2a90 	vmov	r2, s15
 8008294:	495b      	ldr	r1, [pc, #364]	@ (8008404 <obd+0x1ecc>)
 8008296:	4856      	ldr	r0, [pc, #344]	@ (80083f0 <obd+0x1eb8>)
 8008298:	f00f fb2e 	bl	80178f8 <siprintf>
                        break;
 800829c:	f000 bcb9 	b.w	8008c12 <obd+0x26da>
                    case AMB_AIR_TEMP:                      // A-40 [DegC]
                        engine_data = (R[3]-40);
 80082a0:	4b4f      	ldr	r3, [pc, #316]	@ (80083e0 <obd+0x1ea8>)
 80082a2:	78db      	ldrb	r3, [r3, #3]
 80082a4:	3b28      	subs	r3, #40	@ 0x28
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ae:	4b4e      	ldr	r3, [pc, #312]	@ (80083e8 <obd+0x1eb0>)
 80082b0:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,40,"The temperature:%dDegC\n",(int) engine_data);
 80082b4:	4b4c      	ldr	r3, [pc, #304]	@ (80083e8 <obd+0x1eb0>)
 80082b6:	edd3 7a00 	vldr	s15, [r3]
 80082ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082be:	ee17 3a90 	vmov	r3, s15
 80082c2:	4a52      	ldr	r2, [pc, #328]	@ (800840c <obd+0x1ed4>)
 80082c4:	2128      	movs	r1, #40	@ 0x28
 80082c6:	484a      	ldr	r0, [pc, #296]	@ (80083f0 <obd+0x1eb8>)
 80082c8:	f00f fae2 	bl	8017890 <sniprintf>
 80082cc:	4603      	mov	r3, r0
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008410 <obd+0x1ed8>)
 80082d2:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer,s);
                        break;
 80082d4:	f000 bc9d 	b.w	8008c12 <obd+0x26da>
                    case ABS_THROTTLE_POS_B:                // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 80082d8:	4b41      	ldr	r3, [pc, #260]	@ (80083e0 <obd+0x1ea8>)
 80082da:	78db      	ldrb	r3, [r3, #3]
 80082dc:	461a      	mov	r2, r3
 80082de:	2364      	movs	r3, #100	@ 0x64
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
 80082e4:	4a46      	ldr	r2, [pc, #280]	@ (8008400 <obd+0x1ec8>)
 80082e6:	fb82 1203 	smull	r1, r2, r2, r3
 80082ea:	441a      	add	r2, r3
 80082ec:	11d2      	asrs	r2, r2, #7
 80082ee:	17db      	asrs	r3, r3, #31
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fa:	4b3b      	ldr	r3, [pc, #236]	@ (80083e8 <obd+0x1eb0>)
 80082fc:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008300:	4b39      	ldr	r3, [pc, #228]	@ (80083e8 <obd+0x1eb0>)
 8008302:	edd3 7a00 	vldr	s15, [r3]
 8008306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800830a:	ee17 2a90 	vmov	r2, s15
 800830e:	493d      	ldr	r1, [pc, #244]	@ (8008404 <obd+0x1ecc>)
 8008310:	4837      	ldr	r0, [pc, #220]	@ (80083f0 <obd+0x1eb8>)
 8008312:	f00f faf1 	bl	80178f8 <siprintf>
                        break;
 8008316:	f000 bc7c 	b.w	8008c12 <obd+0x26da>
                    case ABS_THROTTLE_POS_C:                // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 800831a:	4b31      	ldr	r3, [pc, #196]	@ (80083e0 <obd+0x1ea8>)
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	461a      	mov	r2, r3
 8008320:	2364      	movs	r3, #100	@ 0x64
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	4a36      	ldr	r2, [pc, #216]	@ (8008400 <obd+0x1ec8>)
 8008328:	fb82 1203 	smull	r1, r2, r2, r3
 800832c:	441a      	add	r2, r3
 800832e:	11d2      	asrs	r2, r2, #7
 8008330:	17db      	asrs	r3, r3, #31
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800833c:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <obd+0x1eb0>)
 800833e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008342:	4b29      	ldr	r3, [pc, #164]	@ (80083e8 <obd+0x1eb0>)
 8008344:	edd3 7a00 	vldr	s15, [r3]
 8008348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800834c:	ee17 2a90 	vmov	r2, s15
 8008350:	492c      	ldr	r1, [pc, #176]	@ (8008404 <obd+0x1ecc>)
 8008352:	4827      	ldr	r0, [pc, #156]	@ (80083f0 <obd+0x1eb8>)
 8008354:	f00f fad0 	bl	80178f8 <siprintf>
                        break;
 8008358:	f000 bc5b 	b.w	8008c12 <obd+0x26da>
                    case ACCEL_POS_D:                       // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 800835c:	4b20      	ldr	r3, [pc, #128]	@ (80083e0 <obd+0x1ea8>)
 800835e:	78db      	ldrb	r3, [r3, #3]
 8008360:	461a      	mov	r2, r3
 8008362:	2364      	movs	r3, #100	@ 0x64
 8008364:	fb02 f303 	mul.w	r3, r2, r3
 8008368:	4a25      	ldr	r2, [pc, #148]	@ (8008400 <obd+0x1ec8>)
 800836a:	fb82 1203 	smull	r1, r2, r2, r3
 800836e:	441a      	add	r2, r3
 8008370:	11d2      	asrs	r2, r2, #7
 8008372:	17db      	asrs	r3, r3, #31
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800837e:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <obd+0x1eb0>)
 8008380:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008384:	4b18      	ldr	r3, [pc, #96]	@ (80083e8 <obd+0x1eb0>)
 8008386:	edd3 7a00 	vldr	s15, [r3]
 800838a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800838e:	ee17 2a90 	vmov	r2, s15
 8008392:	491c      	ldr	r1, [pc, #112]	@ (8008404 <obd+0x1ecc>)
 8008394:	4816      	ldr	r0, [pc, #88]	@ (80083f0 <obd+0x1eb8>)
 8008396:	f00f faaf 	bl	80178f8 <siprintf>
                        break;
 800839a:	f000 bc3a 	b.w	8008c12 <obd+0x26da>
                    case ACCEL_POS_E:                       // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 800839e:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <obd+0x1ea8>)
 80083a0:	78db      	ldrb	r3, [r3, #3]
 80083a2:	461a      	mov	r2, r3
 80083a4:	2364      	movs	r3, #100	@ 0x64
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <obd+0x1ec8>)
 80083ac:	fb82 1203 	smull	r1, r2, r2, r3
 80083b0:	441a      	add	r2, r3
 80083b2:	11d2      	asrs	r2, r2, #7
 80083b4:	17db      	asrs	r3, r3, #31
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <obd+0x1eb0>)
 80083c2:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80083c6:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <obd+0x1eb0>)
 80083c8:	edd3 7a00 	vldr	s15, [r3]
 80083cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083d0:	ee17 2a90 	vmov	r2, s15
 80083d4:	490b      	ldr	r1, [pc, #44]	@ (8008404 <obd+0x1ecc>)
 80083d6:	4806      	ldr	r0, [pc, #24]	@ (80083f0 <obd+0x1eb8>)
 80083d8:	f00f fa8e 	bl	80178f8 <siprintf>
                        break;
 80083dc:	f000 bc19 	b.w	8008c12 <obd+0x26da>
 80083e0:	2400226c 	.word	0x2400226c
 80083e4:	66666667 	.word	0x66666667
 80083e8:	2400245c 	.word	0x2400245c
 80083ec:	080191cc 	.word	0x080191cc
 80083f0:	24002284 	.word	0x24002284
 80083f4:	240023b4 	.word	0x240023b4
 80083f8:	10624dd3 	.word	0x10624dd3
 80083fc:	0801932c 	.word	0x0801932c
 8008400:	80808081 	.word	0x80808081
 8008404:	08019334 	.word	0x08019334
 8008408:	08019394 	.word	0x08019394
 800840c:	080193a0 	.word	0x080193a0
 8008410:	240022c4 	.word	0x240022c4
                    case ACCEL_POS_F:                       // A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 8008414:	4bba      	ldr	r3, [pc, #744]	@ (8008700 <obd+0x21c8>)
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	461a      	mov	r2, r3
 800841a:	2364      	movs	r3, #100	@ 0x64
 800841c:	fb02 f303 	mul.w	r3, r2, r3
 8008420:	4ab8      	ldr	r2, [pc, #736]	@ (8008704 <obd+0x21cc>)
 8008422:	fb82 1203 	smull	r1, r2, r2, r3
 8008426:	441a      	add	r2, r3
 8008428:	11d2      	asrs	r2, r2, #7
 800842a:	17db      	asrs	r3, r3, #31
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008436:	4bb4      	ldr	r3, [pc, #720]	@ (8008708 <obd+0x21d0>)
 8008438:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 800843c:	4bb2      	ldr	r3, [pc, #712]	@ (8008708 <obd+0x21d0>)
 800843e:	edd3 7a00 	vldr	s15, [r3]
 8008442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008446:	ee17 2a90 	vmov	r2, s15
 800844a:	49b0      	ldr	r1, [pc, #704]	@ (800870c <obd+0x21d4>)
 800844c:	48b0      	ldr	r0, [pc, #704]	@ (8008710 <obd+0x21d8>)
 800844e:	f00f fa53 	bl	80178f8 <siprintf>
                        break;
 8008452:	e3de      	b.n	8008c12 <obd+0x26da>
                    case COMMANDED_THROTTLE:                //A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 8008454:	4baa      	ldr	r3, [pc, #680]	@ (8008700 <obd+0x21c8>)
 8008456:	78db      	ldrb	r3, [r3, #3]
 8008458:	461a      	mov	r2, r3
 800845a:	2364      	movs	r3, #100	@ 0x64
 800845c:	fb02 f303 	mul.w	r3, r2, r3
 8008460:	4aa8      	ldr	r2, [pc, #672]	@ (8008704 <obd+0x21cc>)
 8008462:	fb82 1203 	smull	r1, r2, r2, r3
 8008466:	441a      	add	r2, r3
 8008468:	11d2      	asrs	r2, r2, #7
 800846a:	17db      	asrs	r3, r3, #31
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008476:	4ba4      	ldr	r3, [pc, #656]	@ (8008708 <obd+0x21d0>)
 8008478:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 800847c:	4ba2      	ldr	r3, [pc, #648]	@ (8008708 <obd+0x21d0>)
 800847e:	edd3 7a00 	vldr	s15, [r3]
 8008482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008486:	ee17 2a90 	vmov	r2, s15
 800848a:	49a0      	ldr	r1, [pc, #640]	@ (800870c <obd+0x21d4>)
 800848c:	48a0      	ldr	r0, [pc, #640]	@ (8008710 <obd+0x21d8>)
 800848e:	f00f fa33 	bl	80178f8 <siprintf>
                        break;
 8008492:	e3be      	b.n	8008c12 <obd+0x26da>
                    case TIME_RUN_WITH_MIL:                 //(A*256)+B [minutes]
                        engine_data = ((R[3]*256)/(R[4]));
 8008494:	4b9a      	ldr	r3, [pc, #616]	@ (8008700 <obd+0x21c8>)
 8008496:	78db      	ldrb	r3, [r3, #3]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	4a99      	ldr	r2, [pc, #612]	@ (8008700 <obd+0x21c8>)
 800849c:	7912      	ldrb	r2, [r2, #4]
 800849e:	fb93 f3f2 	sdiv	r3, r3, r2
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084aa:	4b97      	ldr	r3, [pc, #604]	@ (8008708 <obd+0x21d0>)
 80084ac:	edc3 7a00 	vstr	s15, [r3]
                        s=snprintf(buffer,64,"The car has been running for :%d Min\n",(int) engine_data);
 80084b0:	4b95      	ldr	r3, [pc, #596]	@ (8008708 <obd+0x21d0>)
 80084b2:	edd3 7a00 	vldr	s15, [r3]
 80084b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ba:	ee17 3a90 	vmov	r3, s15
 80084be:	4a95      	ldr	r2, [pc, #596]	@ (8008714 <obd+0x21dc>)
 80084c0:	2140      	movs	r1, #64	@ 0x40
 80084c2:	4893      	ldr	r0, [pc, #588]	@ (8008710 <obd+0x21d8>)
 80084c4:	f00f f9e4 	bl	8017890 <sniprintf>
 80084c8:	4603      	mov	r3, r0
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	4b92      	ldr	r3, [pc, #584]	@ (8008718 <obd+0x21e0>)
 80084ce:	701a      	strb	r2, [r3, #0]
//                        CDC_Transmit_FS(buffer, s);
                        break;
 80084d0:	e39f      	b.n	8008c12 <obd+0x26da>
                    case TIME_SINCE_CLR:                    //(A*256)+B [minutes]
                        engine_data = ((R[3]*256)/(R[4]));
 80084d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008700 <obd+0x21c8>)
 80084d4:	78db      	ldrb	r3, [r3, #3]
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	4a89      	ldr	r2, [pc, #548]	@ (8008700 <obd+0x21c8>)
 80084da:	7912      	ldrb	r2, [r2, #4]
 80084dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084e8:	4b87      	ldr	r3, [pc, #540]	@ (8008708 <obd+0x21d0>)
 80084ea:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Mins",(int) engine_data);
 80084ee:	4b86      	ldr	r3, [pc, #536]	@ (8008708 <obd+0x21d0>)
 80084f0:	edd3 7a00 	vldr	s15, [r3]
 80084f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084f8:	ee17 2a90 	vmov	r2, s15
 80084fc:	4987      	ldr	r1, [pc, #540]	@ (800871c <obd+0x21e4>)
 80084fe:	4884      	ldr	r0, [pc, #528]	@ (8008710 <obd+0x21d8>)
 8008500:	f00f f9fa 	bl	80178f8 <siprintf>
                        break;
 8008504:	e385      	b.n	8008c12 <obd+0x26da>
                    case MAX_R_O2_VI_PRES:                  //A,B,C,D*10 [Ratio,V,mA,kPa]
                        engine_data = R[3];
 8008506:	4b7e      	ldr	r3, [pc, #504]	@ (8008700 <obd+0x21c8>)
 8008508:	78db      	ldrb	r3, [r3, #3]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	4b7d      	ldr	r3, [pc, #500]	@ (8008708 <obd+0x21d0>)
 8008514:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"Ratio: %d",(int) engine_data);
 8008518:	4b7b      	ldr	r3, [pc, #492]	@ (8008708 <obd+0x21d0>)
 800851a:	edd3 7a00 	vldr	s15, [r3]
 800851e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008522:	ee17 2a90 	vmov	r2, s15
 8008526:	497e      	ldr	r1, [pc, #504]	@ (8008720 <obd+0x21e8>)
 8008528:	4879      	ldr	r0, [pc, #484]	@ (8008710 <obd+0x21d8>)
 800852a:	f00f f9e5 	bl	80178f8 <siprintf>
                        engine_data = R[4];
 800852e:	4b74      	ldr	r3, [pc, #464]	@ (8008700 <obd+0x21c8>)
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	4b73      	ldr	r3, [pc, #460]	@ (8008708 <obd+0x21d0>)
 800853c:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d V",(int) engine_data);
 8008540:	4b71      	ldr	r3, [pc, #452]	@ (8008708 <obd+0x21d0>)
 8008542:	edd3 7a00 	vldr	s15, [r3]
 8008546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800854a:	ee17 2a90 	vmov	r2, s15
 800854e:	4975      	ldr	r1, [pc, #468]	@ (8008724 <obd+0x21ec>)
 8008550:	486f      	ldr	r0, [pc, #444]	@ (8008710 <obd+0x21d8>)
 8008552:	f00f f9d1 	bl	80178f8 <siprintf>
                        engine_data = R[5];
 8008556:	4b6a      	ldr	r3, [pc, #424]	@ (8008700 <obd+0x21c8>)
 8008558:	795b      	ldrb	r3, [r3, #5]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	4b69      	ldr	r3, [pc, #420]	@ (8008708 <obd+0x21d0>)
 8008564:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d mA",(int) engine_data);
 8008568:	4b67      	ldr	r3, [pc, #412]	@ (8008708 <obd+0x21d0>)
 800856a:	edd3 7a00 	vldr	s15, [r3]
 800856e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008572:	ee17 2a90 	vmov	r2, s15
 8008576:	496c      	ldr	r1, [pc, #432]	@ (8008728 <obd+0x21f0>)
 8008578:	4865      	ldr	r0, [pc, #404]	@ (8008710 <obd+0x21d8>)
 800857a:	f00f f9bd 	bl	80178f8 <siprintf>
                        engine_data = (R[6]*10);
 800857e:	4b60      	ldr	r3, [pc, #384]	@ (8008700 <obd+0x21c8>)
 8008580:	799b      	ldrb	r3, [r3, #6]
 8008582:	461a      	mov	r2, r3
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008594:	4b5c      	ldr	r3, [pc, #368]	@ (8008708 <obd+0x21d0>)
 8008596:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d kPa",(int) engine_data);
 800859a:	4b5b      	ldr	r3, [pc, #364]	@ (8008708 <obd+0x21d0>)
 800859c:	edd3 7a00 	vldr	s15, [r3]
 80085a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085a4:	ee17 2a90 	vmov	r2, s15
 80085a8:	4960      	ldr	r1, [pc, #384]	@ (800872c <obd+0x21f4>)
 80085aa:	4859      	ldr	r0, [pc, #356]	@ (8008710 <obd+0x21d8>)
 80085ac:	f00f f9a4 	bl	80178f8 <siprintf>
                        break;
 80085b0:	e32f      	b.n	8008c12 <obd+0x26da>
                    case MAX_AIRFLOW_MAF:                   //A*10 [g/s]
                        engine_data = (R[3]*10);
 80085b2:	4b53      	ldr	r3, [pc, #332]	@ (8008700 <obd+0x21c8>)
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	461a      	mov	r2, r3
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008708 <obd+0x21d0>)
 80085ca:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d g/s",(int) engine_data);
 80085ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008708 <obd+0x21d0>)
 80085d0:	edd3 7a00 	vldr	s15, [r3]
 80085d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d8:	ee17 2a90 	vmov	r2, s15
 80085dc:	4954      	ldr	r1, [pc, #336]	@ (8008730 <obd+0x21f8>)
 80085de:	484c      	ldr	r0, [pc, #304]	@ (8008710 <obd+0x21d8>)
 80085e0:	f00f f98a 	bl	80178f8 <siprintf>
                        break;
 80085e4:	e315      	b.n	8008c12 <obd+0x26da>
                    case FUEL_TYPE:
                        engine_data = R[3];
 80085e6:	4b46      	ldr	r3, [pc, #280]	@ (8008700 <obd+0x21c8>)
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	4b45      	ldr	r3, [pc, #276]	@ (8008708 <obd+0x21d0>)
 80085f4:	edc3 7a00 	vstr	s15, [r3]
                        if (((int) engine_data) & 0x01) {   // Open loop - Engine warmup
 80085f8:	4b43      	ldr	r3, [pc, #268]	@ (8008708 <obd+0x21d0>)
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008602:	ee17 3a90 	vmov	r3, s15
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d008      	beq.n	8008620 <obd+0x20e8>
                           s= snprintf(buffer,40,"The fuel type: Diesel\n");
 800860e:	4a49      	ldr	r2, [pc, #292]	@ (8008734 <obd+0x21fc>)
 8008610:	2128      	movs	r1, #40	@ 0x28
 8008612:	483f      	ldr	r0, [pc, #252]	@ (8008710 <obd+0x21d8>)
 8008614:	f00f f93c 	bl	8017890 <sniprintf>
 8008618:	4603      	mov	r3, r0
 800861a:	b2da      	uxtb	r2, r3
 800861c:	4b3e      	ldr	r3, [pc, #248]	@ (8008718 <obd+0x21e0>)
 800861e:	701a      	strb	r2, [r3, #0]
//                           CDC_Transmit_FS(buffer, s);
                        }
                        if (((int) engine_data) & 0x02) {   // Closed Loop - O2 Sensor feedback
 8008620:	4b39      	ldr	r3, [pc, #228]	@ (8008708 <obd+0x21d0>)
 8008622:	edd3 7a00 	vldr	s15, [r3]
 8008626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862a:	ee17 3a90 	vmov	r3, s15
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 82ec 	beq.w	8008c10 <obd+0x26d8>
                            s= snprintf(buffer,40,"The fuel type: Essence\n");
 8008638:	4a3f      	ldr	r2, [pc, #252]	@ (8008738 <obd+0x2200>)
 800863a:	2128      	movs	r1, #40	@ 0x28
 800863c:	4834      	ldr	r0, [pc, #208]	@ (8008710 <obd+0x21d8>)
 800863e:	f00f f927 	bl	8017890 <sniprintf>
 8008642:	4603      	mov	r3, r0
 8008644:	b2da      	uxtb	r2, r3
 8008646:	4b34      	ldr	r3, [pc, #208]	@ (8008718 <obd+0x21e0>)
 8008648:	701a      	strb	r2, [r3, #0]
//                            CDC_Transmit_FS(buffer, s);
                        }
                    	// USE LUT NOT DONE
                        break;
 800864a:	e2e1      	b.n	8008c10 <obd+0x26d8>
                    case ETHANOL_PERCENT:                   //A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 800864c:	4b2c      	ldr	r3, [pc, #176]	@ (8008700 <obd+0x21c8>)
 800864e:	78db      	ldrb	r3, [r3, #3]
 8008650:	461a      	mov	r2, r3
 8008652:	2364      	movs	r3, #100	@ 0x64
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	4a2a      	ldr	r2, [pc, #168]	@ (8008704 <obd+0x21cc>)
 800865a:	fb82 1203 	smull	r1, r2, r2, r3
 800865e:	441a      	add	r2, r3
 8008660:	11d2      	asrs	r2, r2, #7
 8008662:	17db      	asrs	r3, r3, #31
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800866e:	4b26      	ldr	r3, [pc, #152]	@ (8008708 <obd+0x21d0>)
 8008670:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008674:	4b24      	ldr	r3, [pc, #144]	@ (8008708 <obd+0x21d0>)
 8008676:	edd3 7a00 	vldr	s15, [r3]
 800867a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800867e:	ee17 2a90 	vmov	r2, s15
 8008682:	4922      	ldr	r1, [pc, #136]	@ (800870c <obd+0x21d4>)
 8008684:	4822      	ldr	r0, [pc, #136]	@ (8008710 <obd+0x21d8>)
 8008686:	f00f f937 	bl	80178f8 <siprintf>
                        break;
 800868a:	e2c2      	b.n	8008c12 <obd+0x26da>
                    case ABS_EVAP_SYS_PRES:                 //1/200 per bit [kPa] ----NOT DONE----
                        break;
                    case EVAP_SYS_PRES:                     // (A*256)+B - 32768 [Pa]
                        engine_data = ((R[3]*256)+R[4]-32768);
 800868c:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <obd+0x21c8>)
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <obd+0x21c8>)
 8008694:	7912      	ldrb	r2, [r2, #4]
 8008696:	4413      	add	r3, r2
 8008698:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086a4:	4b18      	ldr	r3, [pc, #96]	@ (8008708 <obd+0x21d0>)
 80086a6:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Pa",(int) engine_data);
 80086aa:	4b17      	ldr	r3, [pc, #92]	@ (8008708 <obd+0x21d0>)
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	4920      	ldr	r1, [pc, #128]	@ (800873c <obd+0x2204>)
 80086ba:	4815      	ldr	r0, [pc, #84]	@ (8008710 <obd+0x21d8>)
 80086bc:	f00f f91c 	bl	80178f8 <siprintf>
                        break;
 80086c0:	e2a7      	b.n	8008c12 <obd+0x26da>
                    case ST_O2_TRIM_B1B3:                   // ((A-128)*100/128 (B-128)*100/128 [%]
                        engine_data = ((R[3]-128)*(100/128));
 80086c2:	4b11      	ldr	r3, [pc, #68]	@ (8008708 <obd+0x21d0>)
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80086ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <obd+0x21d0>)
 80086cc:	edd3 7a00 	vldr	s15, [r3]
 80086d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d4:	ee17 2a90 	vmov	r2, s15
 80086d8:	490c      	ldr	r1, [pc, #48]	@ (800870c <obd+0x21d4>)
 80086da:	480d      	ldr	r0, [pc, #52]	@ (8008710 <obd+0x21d8>)
 80086dc:	f00f f90c 	bl	80178f8 <siprintf>
                        engine_data = ((R[4]-128)*(100/128));
 80086e0:	4b09      	ldr	r3, [pc, #36]	@ (8008708 <obd+0x21d0>)
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80086e8:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <obd+0x21d0>)
 80086ea:	edd3 7a00 	vldr	s15, [r3]
 80086ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086f2:	ee17 2a90 	vmov	r2, s15
 80086f6:	4905      	ldr	r1, [pc, #20]	@ (800870c <obd+0x21d4>)
 80086f8:	4805      	ldr	r0, [pc, #20]	@ (8008710 <obd+0x21d8>)
 80086fa:	f00f f8fd 	bl	80178f8 <siprintf>
                        break;
 80086fe:	e288      	b.n	8008c12 <obd+0x26da>
 8008700:	2400226c 	.word	0x2400226c
 8008704:	80808081 	.word	0x80808081
 8008708:	2400245c 	.word	0x2400245c
 800870c:	08019334 	.word	0x08019334
 8008710:	24002284 	.word	0x24002284
 8008714:	080193b8 	.word	0x080193b8
 8008718:	240022c4 	.word	0x240022c4
 800871c:	080193e0 	.word	0x080193e0
 8008720:	08019320 	.word	0x08019320
 8008724:	0801932c 	.word	0x0801932c
 8008728:	0801938c 	.word	0x0801938c
 800872c:	0801919c 	.word	0x0801919c
 8008730:	080191d4 	.word	0x080191d4
 8008734:	080193e8 	.word	0x080193e8
 8008738:	08019400 	.word	0x08019400
 800873c:	08019350 	.word	0x08019350
                    case LT_O2_TRIM_B1B3:
                        engine_data = ((R[3]-128)*(100/128));
 8008740:	4bab      	ldr	r3, [pc, #684]	@ (80089f0 <obd+0x24b8>)
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008748:	4ba9      	ldr	r3, [pc, #676]	@ (80089f0 <obd+0x24b8>)
 800874a:	edd3 7a00 	vldr	s15, [r3]
 800874e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008752:	ee17 2a90 	vmov	r2, s15
 8008756:	49a7      	ldr	r1, [pc, #668]	@ (80089f4 <obd+0x24bc>)
 8008758:	48a7      	ldr	r0, [pc, #668]	@ (80089f8 <obd+0x24c0>)
 800875a:	f00f f8cd 	bl	80178f8 <siprintf>
                        engine_data = ((R[4]-128)*(100/128));
 800875e:	4ba4      	ldr	r3, [pc, #656]	@ (80089f0 <obd+0x24b8>)
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008766:	4ba2      	ldr	r3, [pc, #648]	@ (80089f0 <obd+0x24b8>)
 8008768:	edd3 7a00 	vldr	s15, [r3]
 800876c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008770:	ee17 2a90 	vmov	r2, s15
 8008774:	499f      	ldr	r1, [pc, #636]	@ (80089f4 <obd+0x24bc>)
 8008776:	48a0      	ldr	r0, [pc, #640]	@ (80089f8 <obd+0x24c0>)
 8008778:	f00f f8be 	bl	80178f8 <siprintf>
                        break;
 800877c:	e249      	b.n	8008c12 <obd+0x26da>
                    case ST_02_TRIM_B2B4:
                        engine_data = ((R[3]-128)*(100/128));
 800877e:	4b9c      	ldr	r3, [pc, #624]	@ (80089f0 <obd+0x24b8>)
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008786:	4b9a      	ldr	r3, [pc, #616]	@ (80089f0 <obd+0x24b8>)
 8008788:	edd3 7a00 	vldr	s15, [r3]
 800878c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008790:	ee17 2a90 	vmov	r2, s15
 8008794:	4997      	ldr	r1, [pc, #604]	@ (80089f4 <obd+0x24bc>)
 8008796:	4898      	ldr	r0, [pc, #608]	@ (80089f8 <obd+0x24c0>)
 8008798:	f00f f8ae 	bl	80178f8 <siprintf>
                        engine_data = ((R[4]-128)*(100/128));
 800879c:	4b94      	ldr	r3, [pc, #592]	@ (80089f0 <obd+0x24b8>)
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80087a4:	4b92      	ldr	r3, [pc, #584]	@ (80089f0 <obd+0x24b8>)
 80087a6:	edd3 7a00 	vldr	s15, [r3]
 80087aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ae:	ee17 2a90 	vmov	r2, s15
 80087b2:	4990      	ldr	r1, [pc, #576]	@ (80089f4 <obd+0x24bc>)
 80087b4:	4890      	ldr	r0, [pc, #576]	@ (80089f8 <obd+0x24c0>)
 80087b6:	f00f f89f 	bl	80178f8 <siprintf>
                        break;
 80087ba:	e22a      	b.n	8008c12 <obd+0x26da>
                    case LT_O2_TRIM_B2B4:
                        engine_data = ((R[3]-128)*(100/128));
 80087bc:	4b8c      	ldr	r3, [pc, #560]	@ (80089f0 <obd+0x24b8>)
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80087c4:	4b8a      	ldr	r3, [pc, #552]	@ (80089f0 <obd+0x24b8>)
 80087c6:	edd3 7a00 	vldr	s15, [r3]
 80087ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ce:	ee17 2a90 	vmov	r2, s15
 80087d2:	4988      	ldr	r1, [pc, #544]	@ (80089f4 <obd+0x24bc>)
 80087d4:	4888      	ldr	r0, [pc, #544]	@ (80089f8 <obd+0x24c0>)
 80087d6:	f00f f88f 	bl	80178f8 <siprintf>
                        engine_data = ((R[4]-128)*(100/128));
 80087da:	4b85      	ldr	r3, [pc, #532]	@ (80089f0 <obd+0x24b8>)
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]
                        sprintf(buffer,"%d %%",(int) engine_data);
 80087e2:	4b83      	ldr	r3, [pc, #524]	@ (80089f0 <obd+0x24b8>)
 80087e4:	edd3 7a00 	vldr	s15, [r3]
 80087e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ec:	ee17 2a90 	vmov	r2, s15
 80087f0:	4980      	ldr	r1, [pc, #512]	@ (80089f4 <obd+0x24bc>)
 80087f2:	4881      	ldr	r0, [pc, #516]	@ (80089f8 <obd+0x24c0>)
 80087f4:	f00f f880 	bl	80178f8 <siprintf>
                        break;
 80087f8:	e20b      	b.n	8008c12 <obd+0x26da>
                    case ABS_FUEL_RAIL_PRES:                //((A*256)+B)*10 [kPa]
                        engine_data = (((R[3]*256)+R[4])*10);
 80087fa:	4b80      	ldr	r3, [pc, #512]	@ (80089fc <obd+0x24c4>)
 80087fc:	78db      	ldrb	r3, [r3, #3]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	4a7e      	ldr	r2, [pc, #504]	@ (80089fc <obd+0x24c4>)
 8008802:	7912      	ldrb	r2, [r2, #4]
 8008804:	441a      	add	r2, r3
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008816:	4b76      	ldr	r3, [pc, #472]	@ (80089f0 <obd+0x24b8>)
 8008818:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d kPa",(int) engine_data);
 800881c:	4b74      	ldr	r3, [pc, #464]	@ (80089f0 <obd+0x24b8>)
 800881e:	edd3 7a00 	vldr	s15, [r3]
 8008822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008826:	ee17 2a90 	vmov	r2, s15
 800882a:	4975      	ldr	r1, [pc, #468]	@ (8008a00 <obd+0x24c8>)
 800882c:	4872      	ldr	r0, [pc, #456]	@ (80089f8 <obd+0x24c0>)
 800882e:	f00f f863 	bl	80178f8 <siprintf>
                        break;
 8008832:	e1ee      	b.n	8008c12 <obd+0x26da>
                    case REL_ACCEL_POS:                     //A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 8008834:	4b71      	ldr	r3, [pc, #452]	@ (80089fc <obd+0x24c4>)
 8008836:	78db      	ldrb	r3, [r3, #3]
 8008838:	461a      	mov	r2, r3
 800883a:	2364      	movs	r3, #100	@ 0x64
 800883c:	fb02 f303 	mul.w	r3, r2, r3
 8008840:	4a70      	ldr	r2, [pc, #448]	@ (8008a04 <obd+0x24cc>)
 8008842:	fb82 1203 	smull	r1, r2, r2, r3
 8008846:	441a      	add	r2, r3
 8008848:	11d2      	asrs	r2, r2, #7
 800884a:	17db      	asrs	r3, r3, #31
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008856:	4b66      	ldr	r3, [pc, #408]	@ (80089f0 <obd+0x24b8>)
 8008858:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 800885c:	4b64      	ldr	r3, [pc, #400]	@ (80089f0 <obd+0x24b8>)
 800885e:	edd3 7a00 	vldr	s15, [r3]
 8008862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008866:	ee17 2a90 	vmov	r2, s15
 800886a:	4962      	ldr	r1, [pc, #392]	@ (80089f4 <obd+0x24bc>)
 800886c:	4862      	ldr	r0, [pc, #392]	@ (80089f8 <obd+0x24c0>)
 800886e:	f00f f843 	bl	80178f8 <siprintf>
                        break;
 8008872:	e1ce      	b.n	8008c12 <obd+0x26da>
                    case HYBRID_BATT_PCT:                   //A*100/255 [%]
                        engine_data = ((R[3]*100)/255);
 8008874:	4b61      	ldr	r3, [pc, #388]	@ (80089fc <obd+0x24c4>)
 8008876:	78db      	ldrb	r3, [r3, #3]
 8008878:	461a      	mov	r2, r3
 800887a:	2364      	movs	r3, #100	@ 0x64
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	4a60      	ldr	r2, [pc, #384]	@ (8008a04 <obd+0x24cc>)
 8008882:	fb82 1203 	smull	r1, r2, r2, r3
 8008886:	441a      	add	r2, r3
 8008888:	11d2      	asrs	r2, r2, #7
 800888a:	17db      	asrs	r3, r3, #31
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008896:	4b56      	ldr	r3, [pc, #344]	@ (80089f0 <obd+0x24b8>)
 8008898:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 800889c:	4b54      	ldr	r3, [pc, #336]	@ (80089f0 <obd+0x24b8>)
 800889e:	edd3 7a00 	vldr	s15, [r3]
 80088a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088a6:	ee17 2a90 	vmov	r2, s15
 80088aa:	4952      	ldr	r1, [pc, #328]	@ (80089f4 <obd+0x24bc>)
 80088ac:	4852      	ldr	r0, [pc, #328]	@ (80089f8 <obd+0x24c0>)
 80088ae:	f00f f823 	bl	80178f8 <siprintf>
                        break;
 80088b2:	e1ae      	b.n	8008c12 <obd+0x26da>
                    case ENGINE_OIL_TEMP:                   //A-40 [DegC]
                        engine_data = (R[3]-40);
 80088b4:	4b51      	ldr	r3, [pc, #324]	@ (80089fc <obd+0x24c4>)
 80088b6:	78db      	ldrb	r3, [r3, #3]
 80088b8:	3b28      	subs	r3, #40	@ 0x28
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c2:	4b4b      	ldr	r3, [pc, #300]	@ (80089f0 <obd+0x24b8>)
 80088c4:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d DegC",(int) engine_data);
 80088c8:	4b49      	ldr	r3, [pc, #292]	@ (80089f0 <obd+0x24b8>)
 80088ca:	edd3 7a00 	vldr	s15, [r3]
 80088ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088d2:	ee17 2a90 	vmov	r2, s15
 80088d6:	494c      	ldr	r1, [pc, #304]	@ (8008a08 <obd+0x24d0>)
 80088d8:	4847      	ldr	r0, [pc, #284]	@ (80089f8 <obd+0x24c0>)
 80088da:	f00f f80d 	bl	80178f8 <siprintf>
                        break;
 80088de:	e198      	b.n	8008c12 <obd+0x26da>
                    case FUEL_TIMING:                       //(38655-((A*256)+B))/128
                        engine_data = ((38655 - ((R[3]*256)+R[4]))/128);
 80088e0:	4b46      	ldr	r3, [pc, #280]	@ (80089fc <obd+0x24c4>)
 80088e2:	78db      	ldrb	r3, [r3, #3]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	4a45      	ldr	r2, [pc, #276]	@ (80089fc <obd+0x24c4>)
 80088e8:	7912      	ldrb	r2, [r2, #4]
 80088ea:	441a      	add	r2, r3
 80088ec:	f249 63ff 	movw	r3, #38655	@ 0x96ff
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	da00      	bge.n	80088f8 <obd+0x23c0>
 80088f6:	337f      	adds	r3, #127	@ 0x7f
 80088f8:	11db      	asrs	r3, r3, #7
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008902:	4b3b      	ldr	r3, [pc, #236]	@ (80089f0 <obd+0x24b8>)
 8008904:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Deg",(int) engine_data);
 8008908:	4b39      	ldr	r3, [pc, #228]	@ (80089f0 <obd+0x24b8>)
 800890a:	edd3 7a00 	vldr	s15, [r3]
 800890e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008912:	ee17 2a90 	vmov	r2, s15
 8008916:	493d      	ldr	r1, [pc, #244]	@ (8008a0c <obd+0x24d4>)
 8008918:	4837      	ldr	r0, [pc, #220]	@ (80089f8 <obd+0x24c0>)
 800891a:	f00e ffed 	bl	80178f8 <siprintf>
                        break;
 800891e:	e178      	b.n	8008c12 <obd+0x26da>
                    case FUEL_RATE:                         //((A*256)+B)*0.05
                        engine_data = (((R[3]*256)+R[4])*0.05);
 8008920:	4b36      	ldr	r3, [pc, #216]	@ (80089fc <obd+0x24c4>)
 8008922:	78db      	ldrb	r3, [r3, #3]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	4a35      	ldr	r2, [pc, #212]	@ (80089fc <obd+0x24c4>)
 8008928:	7912      	ldrb	r2, [r2, #4]
 800892a:	4413      	add	r3, r2
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008934:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 80089e8 <obd+0x24b0>
 8008938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800893c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008940:	4b2b      	ldr	r3, [pc, #172]	@ (80089f0 <obd+0x24b8>)
 8008942:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d L/m\n",(int) engine_data);
 8008946:	4b2a      	ldr	r3, [pc, #168]	@ (80089f0 <obd+0x24b8>)
 8008948:	edd3 7a00 	vldr	s15, [r3]
 800894c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008950:	ee17 2a90 	vmov	r2, s15
 8008954:	492e      	ldr	r1, [pc, #184]	@ (8008a10 <obd+0x24d8>)
 8008956:	4828      	ldr	r0, [pc, #160]	@ (80089f8 <obd+0x24c0>)
 8008958:	f00e ffce 	bl	80178f8 <siprintf>
                        break;
 800895c:	e159      	b.n	8008c12 <obd+0x26da>
                    case EMISSIONS_STANDARD:                //bit encoded ----NOT DONE----
                        break;
                    case DEMANDED_TORQUE:                   //A-125 [%]
                        engine_data = (R[3]-125);
 800895e:	4b27      	ldr	r3, [pc, #156]	@ (80089fc <obd+0x24c4>)
 8008960:	78db      	ldrb	r3, [r3, #3]
 8008962:	3b7d      	subs	r3, #125	@ 0x7d
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800896c:	4b20      	ldr	r3, [pc, #128]	@ (80089f0 <obd+0x24b8>)
 800896e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 8008972:	4b1f      	ldr	r3, [pc, #124]	@ (80089f0 <obd+0x24b8>)
 8008974:	edd3 7a00 	vldr	s15, [r3]
 8008978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800897c:	ee17 2a90 	vmov	r2, s15
 8008980:	491c      	ldr	r1, [pc, #112]	@ (80089f4 <obd+0x24bc>)
 8008982:	481d      	ldr	r0, [pc, #116]	@ (80089f8 <obd+0x24c0>)
 8008984:	f00e ffb8 	bl	80178f8 <siprintf>
                        break;
 8008988:	e143      	b.n	8008c12 <obd+0x26da>
                    case ACTUAL_TORQUE:                     //A-125 [%]
                        engine_data = (R[3]-125);
 800898a:	4b1c      	ldr	r3, [pc, #112]	@ (80089fc <obd+0x24c4>)
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	3b7d      	subs	r3, #125	@ 0x7d
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008998:	4b15      	ldr	r3, [pc, #84]	@ (80089f0 <obd+0x24b8>)
 800899a:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %%",(int) engine_data);
 800899e:	4b14      	ldr	r3, [pc, #80]	@ (80089f0 <obd+0x24b8>)
 80089a0:	edd3 7a00 	vldr	s15, [r3]
 80089a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089a8:	ee17 2a90 	vmov	r2, s15
 80089ac:	4911      	ldr	r1, [pc, #68]	@ (80089f4 <obd+0x24bc>)
 80089ae:	4812      	ldr	r0, [pc, #72]	@ (80089f8 <obd+0x24c0>)
 80089b0:	f00e ffa2 	bl	80178f8 <siprintf>
                        break;
 80089b4:	e12d      	b.n	8008c12 <obd+0x26da>
                    case REFERENCE_TORQUE:                  //A*256+b [Nm]
                        engine_data = ((R[3]*256)+R[4]);
 80089b6:	4b11      	ldr	r3, [pc, #68]	@ (80089fc <obd+0x24c4>)
 80089b8:	78db      	ldrb	r3, [r3, #3]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	4a0f      	ldr	r2, [pc, #60]	@ (80089fc <obd+0x24c4>)
 80089be:	7912      	ldrb	r2, [r2, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089ca:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <obd+0x24b8>)
 80089cc:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d Nm",(int) engine_data);
 80089d0:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <obd+0x24b8>)
 80089d2:	edd3 7a00 	vldr	s15, [r3]
 80089d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089da:	ee17 2a90 	vmov	r2, s15
 80089de:	490d      	ldr	r1, [pc, #52]	@ (8008a14 <obd+0x24dc>)
 80089e0:	4805      	ldr	r0, [pc, #20]	@ (80089f8 <obd+0x24c0>)
 80089e2:	f00e ff89 	bl	80178f8 <siprintf>
                        break;
 80089e6:	e114      	b.n	8008c12 <obd+0x26da>
 80089e8:	9999999a 	.word	0x9999999a
 80089ec:	3fa99999 	.word	0x3fa99999
 80089f0:	2400245c 	.word	0x2400245c
 80089f4:	08019334 	.word	0x08019334
 80089f8:	24002284 	.word	0x24002284
 80089fc:	2400226c 	.word	0x2400226c
 8008a00:	0801919c 	.word	0x0801919c
 8008a04:	80808081 	.word	0x80808081
 8008a08:	080191cc 	.word	0x080191cc
 8008a0c:	080191c4 	.word	0x080191c4
 8008a10:	08019418 	.word	0x08019418
 8008a14:	08019420 	.word	0x08019420
                    case ENGINE_PCT_TORQUE:                 //A-125 idle, B-125 pt 1, C-125, D-125
                        engine_data = (R[3]);
 8008a18:	4b80      	ldr	r3, [pc, #512]	@ (8008c1c <obd+0x26e4>)
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a24:	4b7e      	ldr	r3, [pc, #504]	@ (8008c20 <obd+0x26e8>)
 8008a26:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer,"%d %% - Idle",(int) engine_data);
 8008a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8008c20 <obd+0x26e8>)
 8008a2c:	edd3 7a00 	vldr	s15, [r3]
 8008a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a34:	ee17 2a90 	vmov	r2, s15
 8008a38:	497a      	ldr	r1, [pc, #488]	@ (8008c24 <obd+0x26ec>)
 8008a3a:	487b      	ldr	r0, [pc, #492]	@ (8008c28 <obd+0x26f0>)
 8008a3c:	f00e ff5c 	bl	80178f8 <siprintf>
                        engine_data = (R[4]);
 8008a40:	4b76      	ldr	r3, [pc, #472]	@ (8008c1c <obd+0x26e4>)
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	ee07 3a90 	vmov	s15, r3
 8008a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4c:	4b74      	ldr	r3, [pc, #464]	@ (8008c20 <obd+0x26e8>)
 8008a4e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer2,"%d %% - Point 1",(int) engine_data);
 8008a52:	4b73      	ldr	r3, [pc, #460]	@ (8008c20 <obd+0x26e8>)
 8008a54:	edd3 7a00 	vldr	s15, [r3]
 8008a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a5c:	ee17 2a90 	vmov	r2, s15
 8008a60:	4972      	ldr	r1, [pc, #456]	@ (8008c2c <obd+0x26f4>)
 8008a62:	4873      	ldr	r0, [pc, #460]	@ (8008c30 <obd+0x26f8>)
 8008a64:	f00e ff48 	bl	80178f8 <siprintf>
                        engine_data = (R[5]);
 8008a68:	4b6c      	ldr	r3, [pc, #432]	@ (8008c1c <obd+0x26e4>)
 8008a6a:	795b      	ldrb	r3, [r3, #5]
 8008a6c:	ee07 3a90 	vmov	s15, r3
 8008a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a74:	4b6a      	ldr	r3, [pc, #424]	@ (8008c20 <obd+0x26e8>)
 8008a76:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer3,"%d %% - Point 2",(int) engine_data);
 8008a7a:	4b69      	ldr	r3, [pc, #420]	@ (8008c20 <obd+0x26e8>)
 8008a7c:	edd3 7a00 	vldr	s15, [r3]
 8008a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a84:	ee17 2a90 	vmov	r2, s15
 8008a88:	496a      	ldr	r1, [pc, #424]	@ (8008c34 <obd+0x26fc>)
 8008a8a:	486b      	ldr	r0, [pc, #428]	@ (8008c38 <obd+0x2700>)
 8008a8c:	f00e ff34 	bl	80178f8 <siprintf>
                        engine_data = (R[6]);
 8008a90:	4b62      	ldr	r3, [pc, #392]	@ (8008c1c <obd+0x26e4>)
 8008a92:	799b      	ldrb	r3, [r3, #6]
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9c:	4b60      	ldr	r3, [pc, #384]	@ (8008c20 <obd+0x26e8>)
 8008a9e:	edc3 7a00 	vstr	s15, [r3]
                        sprintf(buffer4,"%d %% - Point 3",(int) engine_data);
 8008aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8008c20 <obd+0x26e8>)
 8008aa4:	edd3 7a00 	vldr	s15, [r3]
 8008aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aac:	ee17 2a90 	vmov	r2, s15
 8008ab0:	4962      	ldr	r1, [pc, #392]	@ (8008c3c <obd+0x2704>)
 8008ab2:	4863      	ldr	r0, [pc, #396]	@ (8008c40 <obd+0x2708>)
 8008ab4:	f00e ff20 	bl	80178f8 <siprintf>
                        break;
 8008ab8:	e0ab      	b.n	8008c12 <obd+0x26da>
                    case AUX_IO_SUPPORTED:                  //Bit encoded ----NOT DONE----
                        break;
                    case P_MAF_SENSOR:
                        sprintf(buffer,"Not supported");
 8008aba:	4962      	ldr	r1, [pc, #392]	@ (8008c44 <obd+0x270c>)
 8008abc:	485a      	ldr	r0, [pc, #360]	@ (8008c28 <obd+0x26f0>)
 8008abe:	f00e ff1b 	bl	80178f8 <siprintf>
                        break;
 8008ac2:	e0a6      	b.n	8008c12 <obd+0x26da>
                    case P_ENGINE_COOLANT_T:
                        sprintf(buffer,"Not supported");
 8008ac4:	495f      	ldr	r1, [pc, #380]	@ (8008c44 <obd+0x270c>)
 8008ac6:	4858      	ldr	r0, [pc, #352]	@ (8008c28 <obd+0x26f0>)
 8008ac8:	f00e ff16 	bl	80178f8 <siprintf>
                        break;
 8008acc:	e0a1      	b.n	8008c12 <obd+0x26da>
                    case P_INTAKE_TEMP:
                        sprintf(buffer,"Not supported");
 8008ace:	495d      	ldr	r1, [pc, #372]	@ (8008c44 <obd+0x270c>)
 8008ad0:	4855      	ldr	r0, [pc, #340]	@ (8008c28 <obd+0x26f0>)
 8008ad2:	f00e ff11 	bl	80178f8 <siprintf>
                        break;
 8008ad6:	e09c      	b.n	8008c12 <obd+0x26da>
                    case P_COMMANDED_EGR:
                        sprintf(buffer,"Not supported");
 8008ad8:	495a      	ldr	r1, [pc, #360]	@ (8008c44 <obd+0x270c>)
 8008ada:	4853      	ldr	r0, [pc, #332]	@ (8008c28 <obd+0x26f0>)
 8008adc:	f00e ff0c 	bl	80178f8 <siprintf>
                        break;
 8008ae0:	e097      	b.n	8008c12 <obd+0x26da>
                    case P_COMMANDED_INTAKE:
                        sprintf(buffer,"Not supported");
 8008ae2:	4958      	ldr	r1, [pc, #352]	@ (8008c44 <obd+0x270c>)
 8008ae4:	4850      	ldr	r0, [pc, #320]	@ (8008c28 <obd+0x26f0>)
 8008ae6:	f00e ff07 	bl	80178f8 <siprintf>
                        break;
 8008aea:	e092      	b.n	8008c12 <obd+0x26da>
                    case P_EGR_TEMP:
                        sprintf(buffer,"Not supported");
 8008aec:	4955      	ldr	r1, [pc, #340]	@ (8008c44 <obd+0x270c>)
 8008aee:	484e      	ldr	r0, [pc, #312]	@ (8008c28 <obd+0x26f0>)
 8008af0:	f00e ff02 	bl	80178f8 <siprintf>
                        break;
 8008af4:	e08d      	b.n	8008c12 <obd+0x26da>
                    case P_COMMANDED_THROT:
                        sprintf(buffer,"Not supported");
 8008af6:	4953      	ldr	r1, [pc, #332]	@ (8008c44 <obd+0x270c>)
 8008af8:	484b      	ldr	r0, [pc, #300]	@ (8008c28 <obd+0x26f0>)
 8008afa:	f00e fefd 	bl	80178f8 <siprintf>
                        break;
 8008afe:	e088      	b.n	8008c12 <obd+0x26da>
                    case P_FUEL_PRESSURE:
                        sprintf(buffer,"Not supported");
 8008b00:	4950      	ldr	r1, [pc, #320]	@ (8008c44 <obd+0x270c>)
 8008b02:	4849      	ldr	r0, [pc, #292]	@ (8008c28 <obd+0x26f0>)
 8008b04:	f00e fef8 	bl	80178f8 <siprintf>
                        break;
 8008b08:	e083      	b.n	8008c12 <obd+0x26da>
                    case P_FUEL_INJ_PRES:
                        sprintf(buffer,"Not supported");
 8008b0a:	494e      	ldr	r1, [pc, #312]	@ (8008c44 <obd+0x270c>)
 8008b0c:	4846      	ldr	r0, [pc, #280]	@ (8008c28 <obd+0x26f0>)
 8008b0e:	f00e fef3 	bl	80178f8 <siprintf>
                        break;
 8008b12:	e07e      	b.n	8008c12 <obd+0x26da>
                    case P_TURBO_PRESSURE:
                        sprintf(buffer,"Not supported");
 8008b14:	494b      	ldr	r1, [pc, #300]	@ (8008c44 <obd+0x270c>)
 8008b16:	4844      	ldr	r0, [pc, #272]	@ (8008c28 <obd+0x26f0>)
 8008b18:	f00e feee 	bl	80178f8 <siprintf>
                        break;
 8008b1c:	e079      	b.n	8008c12 <obd+0x26da>
                    case P_BOOST_PRES_CONT:
                        sprintf(buffer,"Not supported");
 8008b1e:	4949      	ldr	r1, [pc, #292]	@ (8008c44 <obd+0x270c>)
 8008b20:	4841      	ldr	r0, [pc, #260]	@ (8008c28 <obd+0x26f0>)
 8008b22:	f00e fee9 	bl	80178f8 <siprintf>
                        break;
 8008b26:	e074      	b.n	8008c12 <obd+0x26da>
                    case P_VGT_CONTROL:
                        sprintf(buffer,"Not supported");
 8008b28:	4946      	ldr	r1, [pc, #280]	@ (8008c44 <obd+0x270c>)
 8008b2a:	483f      	ldr	r0, [pc, #252]	@ (8008c28 <obd+0x26f0>)
 8008b2c:	f00e fee4 	bl	80178f8 <siprintf>
                        break;
 8008b30:	e06f      	b.n	8008c12 <obd+0x26da>
                    case P_WASTEGATE_CONT:
                        sprintf(buffer,"Not supported");
 8008b32:	4944      	ldr	r1, [pc, #272]	@ (8008c44 <obd+0x270c>)
 8008b34:	483c      	ldr	r0, [pc, #240]	@ (8008c28 <obd+0x26f0>)
 8008b36:	f00e fedf 	bl	80178f8 <siprintf>
                        break;
 8008b3a:	e06a      	b.n	8008c12 <obd+0x26da>
                    case P_EXHAUST_PRESSURE:
                        sprintf(buffer,"Not supported");
 8008b3c:	4941      	ldr	r1, [pc, #260]	@ (8008c44 <obd+0x270c>)
 8008b3e:	483a      	ldr	r0, [pc, #232]	@ (8008c28 <obd+0x26f0>)
 8008b40:	f00e feda 	bl	80178f8 <siprintf>
                        break;
 8008b44:	e065      	b.n	8008c12 <obd+0x26da>
                    case P_TURBO_RPM:
                        sprintf(buffer,"Not supported");
 8008b46:	493f      	ldr	r1, [pc, #252]	@ (8008c44 <obd+0x270c>)
 8008b48:	4837      	ldr	r0, [pc, #220]	@ (8008c28 <obd+0x26f0>)
 8008b4a:	f00e fed5 	bl	80178f8 <siprintf>
                        break;
 8008b4e:	e060      	b.n	8008c12 <obd+0x26da>
                    case P_TURBO_TEMP1:
                        sprintf(buffer,"Not supported");
 8008b50:	493c      	ldr	r1, [pc, #240]	@ (8008c44 <obd+0x270c>)
 8008b52:	4835      	ldr	r0, [pc, #212]	@ (8008c28 <obd+0x26f0>)
 8008b54:	f00e fed0 	bl	80178f8 <siprintf>
                        break;
 8008b58:	e05b      	b.n	8008c12 <obd+0x26da>
                    case P_TURBO_TEMP2:
                        sprintf(buffer,"Not supported");
 8008b5a:	493a      	ldr	r1, [pc, #232]	@ (8008c44 <obd+0x270c>)
 8008b5c:	4832      	ldr	r0, [pc, #200]	@ (8008c28 <obd+0x26f0>)
 8008b5e:	f00e fecb 	bl	80178f8 <siprintf>
                        break;
 8008b62:	e056      	b.n	8008c12 <obd+0x26da>
                    case P_CACT:
                        sprintf(buffer,"Not supported");
 8008b64:	4937      	ldr	r1, [pc, #220]	@ (8008c44 <obd+0x270c>)
 8008b66:	4830      	ldr	r0, [pc, #192]	@ (8008c28 <obd+0x26f0>)
 8008b68:	f00e fec6 	bl	80178f8 <siprintf>
                        break;
 8008b6c:	e051      	b.n	8008c12 <obd+0x26da>
                    case P_EGT_B1:
                        sprintf(buffer,"Not supported");
 8008b6e:	4935      	ldr	r1, [pc, #212]	@ (8008c44 <obd+0x270c>)
 8008b70:	482d      	ldr	r0, [pc, #180]	@ (8008c28 <obd+0x26f0>)
 8008b72:	f00e fec1 	bl	80178f8 <siprintf>
                        break;
 8008b76:	e04c      	b.n	8008c12 <obd+0x26da>
                    case P_EGT_B2:
                        sprintf(buffer,"Not supported");
 8008b78:	4932      	ldr	r1, [pc, #200]	@ (8008c44 <obd+0x270c>)
 8008b7a:	482b      	ldr	r0, [pc, #172]	@ (8008c28 <obd+0x26f0>)
 8008b7c:	f00e febc 	bl	80178f8 <siprintf>
                        break;
 8008b80:	e047      	b.n	8008c12 <obd+0x26da>
                    case P_DPF1:
                        sprintf(buffer,"Not supported");
 8008b82:	4930      	ldr	r1, [pc, #192]	@ (8008c44 <obd+0x270c>)
 8008b84:	4828      	ldr	r0, [pc, #160]	@ (8008c28 <obd+0x26f0>)
 8008b86:	f00e feb7 	bl	80178f8 <siprintf>
                        break;
 8008b8a:	e042      	b.n	8008c12 <obd+0x26da>
                    case P_DPF2:
                        sprintf(buffer,"Not supported");
 8008b8c:	492d      	ldr	r1, [pc, #180]	@ (8008c44 <obd+0x270c>)
 8008b8e:	4826      	ldr	r0, [pc, #152]	@ (8008c28 <obd+0x26f0>)
 8008b90:	f00e feb2 	bl	80178f8 <siprintf>
                        break;
 8008b94:	e03d      	b.n	8008c12 <obd+0x26da>
                    case P_DPF_TEMP:
                        sprintf(buffer,"Not supported");
 8008b96:	492b      	ldr	r1, [pc, #172]	@ (8008c44 <obd+0x270c>)
 8008b98:	4823      	ldr	r0, [pc, #140]	@ (8008c28 <obd+0x26f0>)
 8008b9a:	f00e fead 	bl	80178f8 <siprintf>
                        break;
 8008b9e:	e038      	b.n	8008c12 <obd+0x26da>
                    case P_NOX_NTE_STATUS:
                        sprintf(buffer,"Not supported");
 8008ba0:	4928      	ldr	r1, [pc, #160]	@ (8008c44 <obd+0x270c>)
 8008ba2:	4821      	ldr	r0, [pc, #132]	@ (8008c28 <obd+0x26f0>)
 8008ba4:	f00e fea8 	bl	80178f8 <siprintf>
                        break;
 8008ba8:	e033      	b.n	8008c12 <obd+0x26da>
                    case P_PM_NTE_STATUS:
                        sprintf(buffer,"Not supported");
 8008baa:	4926      	ldr	r1, [pc, #152]	@ (8008c44 <obd+0x270c>)
 8008bac:	481e      	ldr	r0, [pc, #120]	@ (8008c28 <obd+0x26f0>)
 8008bae:	f00e fea3 	bl	80178f8 <siprintf>
                        break;
 8008bb2:	e02e      	b.n	8008c12 <obd+0x26da>
                    case P_ENGINE_RUNTUME:
                        sprintf(buffer,"Not supported");
 8008bb4:	4923      	ldr	r1, [pc, #140]	@ (8008c44 <obd+0x270c>)
 8008bb6:	481c      	ldr	r0, [pc, #112]	@ (8008c28 <obd+0x26f0>)
 8008bb8:	f00e fe9e 	bl	80178f8 <siprintf>
                        break;
 8008bbc:	e029      	b.n	8008c12 <obd+0x26da>
                    case P_ENGINE_AECD_1:
                        sprintf(buffer,"Not supported");
 8008bbe:	4921      	ldr	r1, [pc, #132]	@ (8008c44 <obd+0x270c>)
 8008bc0:	4819      	ldr	r0, [pc, #100]	@ (8008c28 <obd+0x26f0>)
 8008bc2:	f00e fe99 	bl	80178f8 <siprintf>
                        break;
 8008bc6:	e024      	b.n	8008c12 <obd+0x26da>
                    case P_ENGINE_AECD_2:
                        sprintf(buffer,"Not supported");
 8008bc8:	491e      	ldr	r1, [pc, #120]	@ (8008c44 <obd+0x270c>)
 8008bca:	4817      	ldr	r0, [pc, #92]	@ (8008c28 <obd+0x26f0>)
 8008bcc:	f00e fe94 	bl	80178f8 <siprintf>
                        break;
 8008bd0:	e01f      	b.n	8008c12 <obd+0x26da>
                    case P_NOX_SENSOR:
                        sprintf(buffer,"Not supported");
 8008bd2:	491c      	ldr	r1, [pc, #112]	@ (8008c44 <obd+0x270c>)
 8008bd4:	4814      	ldr	r0, [pc, #80]	@ (8008c28 <obd+0x26f0>)
 8008bd6:	f00e fe8f 	bl	80178f8 <siprintf>
                        break;
 8008bda:	e01a      	b.n	8008c12 <obd+0x26da>
                    case P_MANIFOLD_TEMP:
                        sprintf(buffer,"Not supported");
 8008bdc:	4919      	ldr	r1, [pc, #100]	@ (8008c44 <obd+0x270c>)
 8008bde:	4812      	ldr	r0, [pc, #72]	@ (8008c28 <obd+0x26f0>)
 8008be0:	f00e fe8a 	bl	80178f8 <siprintf>
                        break;
 8008be4:	e015      	b.n	8008c12 <obd+0x26da>
                    case P_NOX_SYSTEM:
                        sprintf(buffer,"Not supported");
 8008be6:	4917      	ldr	r1, [pc, #92]	@ (8008c44 <obd+0x270c>)
 8008be8:	480f      	ldr	r0, [pc, #60]	@ (8008c28 <obd+0x26f0>)
 8008bea:	f00e fe85 	bl	80178f8 <siprintf>
                        break;
 8008bee:	e010      	b.n	8008c12 <obd+0x26da>
                    case P_PM_SENSOR:
                        sprintf(buffer,"Not supported");
 8008bf0:	4914      	ldr	r1, [pc, #80]	@ (8008c44 <obd+0x270c>)
 8008bf2:	480d      	ldr	r0, [pc, #52]	@ (8008c28 <obd+0x26f0>)
 8008bf4:	f00e fe80 	bl	80178f8 <siprintf>
                        break;
 8008bf8:	e00b      	b.n	8008c12 <obd+0x26da>
                    case P_IN_MANIF_TEMP:
                        sprintf(buffer,"Not supported");
 8008bfa:	4912      	ldr	r1, [pc, #72]	@ (8008c44 <obd+0x270c>)
 8008bfc:	480a      	ldr	r0, [pc, #40]	@ (8008c28 <obd+0x26f0>)
 8008bfe:	f00e fe7b 	bl	80178f8 <siprintf>
                        break;
 8008c02:	e006      	b.n	8008c12 <obd+0x26da>
                        break;
 8008c04:	bf00      	nop
 8008c06:	e004      	b.n	8008c12 <obd+0x26da>
                        break;
 8008c08:	bf00      	nop
 8008c0a:	e002      	b.n	8008c12 <obd+0x26da>
                        break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <obd+0x26da>
                        break;
 8008c10:	bf00      	nop
                }
            }
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2400226c 	.word	0x2400226c
 8008c20:	2400245c 	.word	0x2400245c
 8008c24:	08019428 	.word	0x08019428
 8008c28:	24002284 	.word	0x24002284
 8008c2c:	08019438 	.word	0x08019438
 8008c30:	24002324 	.word	0x24002324
 8008c34:	08019448 	.word	0x08019448
 8008c38:	24002334 	.word	0x24002334
 8008c3c:	08019458 	.word	0x08019458
 8008c40:	24002344 	.word	0x24002344
 8008c44:	08019468 	.word	0x08019468

08008c48 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8008c4c:	4b27      	ldr	r3, [pc, #156]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c4e:	4a28      	ldr	r2, [pc, #160]	@ (8008cf0 <MX_SPI4_Init+0xa8>)
 8008c50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008c52:	4b26      	ldr	r3, [pc, #152]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c54:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008c58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008c5a:	4b24      	ldr	r3, [pc, #144]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c60:	4b22      	ldr	r3, [pc, #136]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c62:	2207      	movs	r2, #7
 8008c64:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c66:	4b21      	ldr	r3, [pc, #132]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008c72:	4b1e      	ldr	r3, [pc, #120]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008c78:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c80:	4b1a      	ldr	r3, [pc, #104]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c86:	4b19      	ldr	r3, [pc, #100]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8008c92:	4b16      	ldr	r3, [pc, #88]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008c98:	4b14      	ldr	r3, [pc, #80]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008c9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008ca0:	4b12      	ldr	r3, [pc, #72]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8008ca6:	4b11      	ldr	r3, [pc, #68]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008cac:	4b0f      	ldr	r3, [pc, #60]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008cc4:	4b09      	ldr	r3, [pc, #36]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008cca:	4b08      	ldr	r3, [pc, #32]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008cd6:	4805      	ldr	r0, [pc, #20]	@ (8008cec <MX_SPI4_Init+0xa4>)
 8008cd8:	f008 fb86 	bl	80113e8 <HAL_SPI_Init>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8008ce2:	f7fd fc21 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8008ce6:	bf00      	nop
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	24002460 	.word	0x24002460
 8008cf0:	40013400 	.word	0x40013400

08008cf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	609a      	str	r2, [r3, #8]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	22c0      	movs	r2, #192	@ 0xc0
 8008d12:	2100      	movs	r1, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f00e fe52 	bl	80179be <memset>

  if(spiHandle->Instance==SPI4)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e48 <HAL_SPI_MspInit+0x154>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f040 808d 	bne.w	8008e40 <HAL_SPI_MspInit+0x14c>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8008d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8008d32:	2305      	movs	r3, #5
 8008d34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8008d36:	23c0      	movs	r3, #192	@ 0xc0
 8008d38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008d42:	2302      	movs	r3, #2
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8008d46:	2380      	movs	r3, #128	@ 0x80
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8008d52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008d56:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f006 ffd5 	bl	800fd0c <HAL_RCCEx_PeriphCLKConfig>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8008d68:	f7fd fbde 	bl	8006528 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008d6c:	4b37      	ldr	r3, [pc, #220]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d72:	4a36      	ldr	r2, [pc, #216]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008d78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d7c:	4b33      	ldr	r3, [pc, #204]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d8a:	4b30      	ldr	r3, [pc, #192]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d90:	4a2e      	ldr	r2, [pc, #184]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d92:	f043 0310 	orr.w	r3, r3, #16
 8008d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8008e4c <HAL_SPI_MspInit+0x158>)
 8008d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|SPI4_MISO_Pin|SPI4_MOSI_Pin;
 8008da8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8008dac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db0:	2302      	movs	r3, #2
 8008db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008dc2:	2305      	movs	r3, #5
 8008dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008dc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4820      	ldr	r0, [pc, #128]	@ (8008e50 <HAL_SPI_MspInit+0x15c>)
 8008dd0:	f004 fb16 	bl	800d400 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8008dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008dd6:	4a20      	ldr	r2, [pc, #128]	@ (8008e58 <HAL_SPI_MspInit+0x164>)
 8008dd8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8008dda:	4b1e      	ldr	r3, [pc, #120]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008ddc:	2254      	movs	r2, #84	@ 0x54
 8008dde:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008de0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008de2:	2240      	movs	r2, #64	@ 0x40
 8008de4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008de6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008dec:	4b19      	ldr	r3, [pc, #100]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008df2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008df4:	4b17      	ldr	r3, [pc, #92]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008dfa:	4b16      	ldr	r3, [pc, #88]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8008e00:	4b14      	ldr	r3, [pc, #80]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008e0c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e0e:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008e14:	480f      	ldr	r0, [pc, #60]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e16:	f000 fd47 	bl	80098a8 <HAL_DMA_Init>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8008e20:	f7fd fb82 	bl	8006528 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a0b      	ldr	r2, [pc, #44]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e28:	679a      	str	r2, [r3, #120]	@ 0x78
 8008e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e54 <HAL_SPI_MspInit+0x160>)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	2054      	movs	r0, #84	@ 0x54
 8008e36:	f000 fd02 	bl	800983e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8008e3a:	2054      	movs	r0, #84	@ 0x54
 8008e3c:	f000 fd19 	bl	8009872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8008e40:	bf00      	nop
 8008e42:	37e8      	adds	r7, #232	@ 0xe8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40013400 	.word	0x40013400
 8008e4c:	58024400 	.word	0x58024400
 8008e50:	58021000 	.word	0x58021000
 8008e54:	240024e8 	.word	0x240024e8
 8008e58:	40020010 	.word	0x40020010

08008e5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	605a      	str	r2, [r3, #4]
 8008e6e:	609a      	str	r2, [r3, #8]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	22c0      	movs	r2, #192	@ 0xc0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f00e fd9e 	bl	80179be <memset>
  if(hfdcan->Instance==FDCAN1)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a2b      	ldr	r2, [pc, #172]	@ (8008f34 <HAL_FDCAN_MspInit+0xd8>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d14f      	bne.n	8008f2c <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8008e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f006 ff31 	bl	800fd0c <HAL_RCCEx_PeriphCLKConfig>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8008eb0:	f7fd fb3a 	bl	8006528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008eb4:	4b20      	ldr	r3, [pc, #128]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008eb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008eba:	4a1f      	ldr	r2, [pc, #124]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8008ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008ec6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ed2:	4b19      	ldr	r3, [pc, #100]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ed8:	4a17      	ldr	r2, [pc, #92]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008eda:	f043 0302 	orr.w	r3, r3, #2
 8008ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ee2:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <HAL_FDCAN_MspInit+0xdc>)
 8008ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	60bb      	str	r3, [r7, #8]
 8008eee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008ef0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008f0a:	2309      	movs	r3, #9
 8008f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4809      	ldr	r0, [pc, #36]	@ (8008f3c <HAL_FDCAN_MspInit+0xe0>)
 8008f18:	f004 fa72 	bl	800d400 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2104      	movs	r1, #4
 8008f20:	2013      	movs	r0, #19
 8008f22:	f000 fc8c 	bl	800983e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8008f26:	2013      	movs	r0, #19
 8008f28:	f000 fca3 	bl	8009872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8008f2c:	bf00      	nop
 8008f2e:	37e8      	adds	r7, #232	@ 0xe8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	4000a000 	.word	0x4000a000
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	58020400 	.word	0x58020400

08008f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <NMI_Handler+0x4>

08008f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <HardFault_Handler+0x4>

08008f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <MemManage_Handler+0x4>

08008f58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <BusFault_Handler+0x4>

08008f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <UsageFault_Handler+0x4>

08008f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f6c:	bf00      	nop
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f76:	b480      	push	{r7}
 8008f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f7a:	bf00      	nop
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f88:	bf00      	nop
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f96:	f000 fb27 	bl	80095e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f9a:	bf00      	nop
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8008fa4:	4802      	ldr	r0, [pc, #8]	@ (8008fb0 <DMA1_Stream0_IRQHandler+0x10>)
 8008fa6:	f001 fc8b 	bl	800a8c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008faa:	bf00      	nop
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	240024e8 	.word	0x240024e8

08008fb4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8008fb8:	4802      	ldr	r0, [pc, #8]	@ (8008fc4 <FDCAN1_IT0_IRQHandler+0x10>)
 8008fba:	f003 fd25 	bl	800ca08 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8008fbe:	bf00      	nop
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	240021ac 	.word	0x240021ac

08008fc8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8008fcc:	4802      	ldr	r0, [pc, #8]	@ (8008fd8 <SPI4_IRQHandler+0x10>)
 8008fce:	f008 fe7f 	bl	8011cd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8008fd2:	bf00      	nop
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	24002460 	.word	0x24002460

08008fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008fe0:	4802      	ldr	r0, [pc, #8]	@ (8008fec <OTG_FS_IRQHandler+0x10>)
 8008fe2:	f004 fd2f 	bl	800da44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008fe6:	bf00      	nop
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	24003a94 	.word	0x24003a94

08008ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return 1;
 8008ff4:	2301      	movs	r3, #1
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <_kill>:

int _kill(int pid, int sig)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800900a:	f00e fd27 	bl	8017a5c <__errno>
 800900e:	4603      	mov	r3, r0
 8009010:	2216      	movs	r2, #22
 8009012:	601a      	str	r2, [r3, #0]
  return -1;
 8009014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <_exit>:

void _exit (int status)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009028:	f04f 31ff 	mov.w	r1, #4294967295
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff ffe7 	bl	8009000 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <_exit+0x12>

08009036 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	e00a      	b.n	800905e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009048:	f3af 8000 	nop.w
 800904c:	4601      	mov	r1, r0
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	60ba      	str	r2, [r7, #8]
 8009054:	b2ca      	uxtb	r2, r1
 8009056:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	3301      	adds	r3, #1
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	dbf0      	blt.n	8009048 <_read+0x12>
  }

  return len;
 8009066:	687b      	ldr	r3, [r7, #4]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	e009      	b.n	8009096 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	60ba      	str	r2, [r7, #8]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3301      	adds	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	dbf1      	blt.n	8009082 <_write+0x12>
  }
  return len;
 800909e:	687b      	ldr	r3, [r7, #4]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <_close>:

int _close(int file)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80090d0:	605a      	str	r2, [r3, #4]
  return 0;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <_isatty>:

int _isatty(int file)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80090e8:	2301      	movs	r3, #1
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009118:	4a14      	ldr	r2, [pc, #80]	@ (800916c <_sbrk+0x5c>)
 800911a:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <_sbrk+0x60>)
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009124:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <_sbrk+0x64>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800912c:	4b11      	ldr	r3, [pc, #68]	@ (8009174 <_sbrk+0x64>)
 800912e:	4a12      	ldr	r2, [pc, #72]	@ (8009178 <_sbrk+0x68>)
 8009130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009132:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <_sbrk+0x64>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	429a      	cmp	r2, r3
 800913e:	d207      	bcs.n	8009150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009140:	f00e fc8c 	bl	8017a5c <__errno>
 8009144:	4603      	mov	r3, r0
 8009146:	220c      	movs	r2, #12
 8009148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
 800914e:	e009      	b.n	8009164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009150:	4b08      	ldr	r3, [pc, #32]	@ (8009174 <_sbrk+0x64>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009156:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <_sbrk+0x64>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	4a05      	ldr	r2, [pc, #20]	@ (8009174 <_sbrk+0x64>)
 8009160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009162:	68fb      	ldr	r3, [r7, #12]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	24080000 	.word	0x24080000
 8009170:	00000400 	.word	0x00000400
 8009174:	24002560 	.word	0x24002560
 8009178:	24004310 	.word	0x24004310

0800917c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009180:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <SystemInit+0xe4>)
 8009182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009186:	4a36      	ldr	r2, [pc, #216]	@ (8009260 <SystemInit+0xe4>)
 8009188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800918c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009190:	4b34      	ldr	r3, [pc, #208]	@ (8009264 <SystemInit+0xe8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	2b06      	cmp	r3, #6
 800919a:	d807      	bhi.n	80091ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800919c:	4b31      	ldr	r3, [pc, #196]	@ (8009264 <SystemInit+0xe8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f023 030f 	bic.w	r3, r3, #15
 80091a4:	4a2f      	ldr	r2, [pc, #188]	@ (8009264 <SystemInit+0xe8>)
 80091a6:	f043 0307 	orr.w	r3, r3, #7
 80091aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80091ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009268 <SystemInit+0xec>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009268 <SystemInit+0xec>)
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80091b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009268 <SystemInit+0xec>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80091be:	4b2a      	ldr	r3, [pc, #168]	@ (8009268 <SystemInit+0xec>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4929      	ldr	r1, [pc, #164]	@ (8009268 <SystemInit+0xec>)
 80091c4:	4b29      	ldr	r3, [pc, #164]	@ (800926c <SystemInit+0xf0>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80091ca:	4b26      	ldr	r3, [pc, #152]	@ (8009264 <SystemInit+0xe8>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80091d6:	4b23      	ldr	r3, [pc, #140]	@ (8009264 <SystemInit+0xe8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f023 030f 	bic.w	r3, r3, #15
 80091de:	4a21      	ldr	r2, [pc, #132]	@ (8009264 <SystemInit+0xe8>)
 80091e0:	f043 0307 	orr.w	r3, r3, #7
 80091e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80091e6:	4b20      	ldr	r3, [pc, #128]	@ (8009268 <SystemInit+0xec>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80091ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009268 <SystemInit+0xec>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80091f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009268 <SystemInit+0xec>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80091f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009268 <SystemInit+0xec>)
 80091fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009270 <SystemInit+0xf4>)
 80091fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80091fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009268 <SystemInit+0xec>)
 8009200:	4a1c      	ldr	r2, [pc, #112]	@ (8009274 <SystemInit+0xf8>)
 8009202:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009204:	4b18      	ldr	r3, [pc, #96]	@ (8009268 <SystemInit+0xec>)
 8009206:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <SystemInit+0xfc>)
 8009208:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800920a:	4b17      	ldr	r3, [pc, #92]	@ (8009268 <SystemInit+0xec>)
 800920c:	2200      	movs	r2, #0
 800920e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009210:	4b15      	ldr	r3, [pc, #84]	@ (8009268 <SystemInit+0xec>)
 8009212:	4a19      	ldr	r2, [pc, #100]	@ (8009278 <SystemInit+0xfc>)
 8009214:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009216:	4b14      	ldr	r3, [pc, #80]	@ (8009268 <SystemInit+0xec>)
 8009218:	2200      	movs	r2, #0
 800921a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800921c:	4b12      	ldr	r3, [pc, #72]	@ (8009268 <SystemInit+0xec>)
 800921e:	4a16      	ldr	r2, [pc, #88]	@ (8009278 <SystemInit+0xfc>)
 8009220:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009222:	4b11      	ldr	r3, [pc, #68]	@ (8009268 <SystemInit+0xec>)
 8009224:	2200      	movs	r2, #0
 8009226:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <SystemInit+0xec>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0e      	ldr	r2, [pc, #56]	@ (8009268 <SystemInit+0xec>)
 800922e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009234:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <SystemInit+0xec>)
 8009236:	2200      	movs	r2, #0
 8009238:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800923a:	4b10      	ldr	r3, [pc, #64]	@ (800927c <SystemInit+0x100>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <SystemInit+0x104>)
 8009240:	4013      	ands	r3, r2
 8009242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009246:	d202      	bcs.n	800924e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009248:	4b0e      	ldr	r3, [pc, #56]	@ (8009284 <SystemInit+0x108>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800924e:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <SystemInit+0x10c>)
 8009250:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8009254:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	e000ed00 	.word	0xe000ed00
 8009264:	52002000 	.word	0x52002000
 8009268:	58024400 	.word	0x58024400
 800926c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009270:	02020200 	.word	0x02020200
 8009274:	01ff0000 	.word	0x01ff0000
 8009278:	01010280 	.word	0x01010280
 800927c:	5c001000 	.word	0x5c001000
 8009280:	ffff0000 	.word	0xffff0000
 8009284:	51008108 	.word	0x51008108
 8009288:	52004000 	.word	0x52004000

0800928c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef CANTimer;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b09a      	sub	sp, #104	@ 0x68
 8009290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009292:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009296:	2200      	movs	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	605a      	str	r2, [r3, #4]
 800929c:	609a      	str	r2, [r3, #8]
 800929e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	605a      	str	r2, [r3, #4]
 80092aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80092ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	605a      	str	r2, [r3, #4]
 80092b6:	609a      	str	r2, [r3, #8]
 80092b8:	60da      	str	r2, [r3, #12]
 80092ba:	611a      	str	r2, [r3, #16]
 80092bc:	615a      	str	r2, [r3, #20]
 80092be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	222c      	movs	r2, #44	@ 0x2c
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f00e fb79 	bl	80179be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80092cc:	4b43      	ldr	r3, [pc, #268]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092ce:	4a44      	ldr	r2, [pc, #272]	@ (80093e0 <MX_TIM1_Init+0x154>)
 80092d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000;
 80092d2:	4b42      	ldr	r3, [pc, #264]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092d4:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80092d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092da:	4b40      	ldr	r3, [pc, #256]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092dc:	2200      	movs	r2, #0
 80092de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80092e0:	4b3e      	ldr	r3, [pc, #248]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092e2:	2264      	movs	r2, #100	@ 0x64
 80092e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092e6:	4b3d      	ldr	r3, [pc, #244]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80092ec:	4b3b      	ldr	r3, [pc, #236]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80092f2:	4b3a      	ldr	r3, [pc, #232]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092f4:	2280      	movs	r2, #128	@ 0x80
 80092f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80092f8:	4838      	ldr	r0, [pc, #224]	@ (80093dc <MX_TIM1_Init+0x150>)
 80092fa:	f009 f840 	bl	801237e <HAL_TIM_Base_Init>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8009304:	f7fd f910 	bl	8006528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800930c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800930e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009312:	4619      	mov	r1, r3
 8009314:	4831      	ldr	r0, [pc, #196]	@ (80093dc <MX_TIM1_Init+0x150>)
 8009316:	f009 fb0d 	bl	8012934 <HAL_TIM_ConfigClockSource>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8009320:	f7fd f902 	bl	8006528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009324:	482d      	ldr	r0, [pc, #180]	@ (80093dc <MX_TIM1_Init+0x150>)
 8009326:	f009 f881 	bl	801242c <HAL_TIM_PWM_Init>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8009330:	f7fd f8fa 	bl	8006528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009334:	2300      	movs	r3, #0
 8009336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009338:	2300      	movs	r3, #0
 800933a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800933c:	2300      	movs	r3, #0
 800933e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009340:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009344:	4619      	mov	r1, r3
 8009346:	4825      	ldr	r0, [pc, #148]	@ (80093dc <MX_TIM1_Init+0x150>)
 8009348:	f00a f820 	bl	801338c <HAL_TIMEx_MasterConfigSynchronization>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8009352:	f7fd f8e9 	bl	8006528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009356:	2360      	movs	r3, #96	@ 0x60
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 800935a:	2364      	movs	r3, #100	@ 0x64
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800935e:	2300      	movs	r3, #0
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009366:	2300      	movs	r3, #0
 8009368:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800936a:	2300      	movs	r3, #0
 800936c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800936e:	2300      	movs	r3, #0
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009372:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009376:	2204      	movs	r2, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4818      	ldr	r0, [pc, #96]	@ (80093dc <MX_TIM1_Init+0x150>)
 800937c:	f009 f9c6 	bl	801270c <HAL_TIM_PWM_ConfigChannel>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8009386:	f7fd f8cf 	bl	8006528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800938a:	2300      	movs	r3, #0
 800938c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800939e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80093ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80093ba:	1d3b      	adds	r3, r7, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4807      	ldr	r0, [pc, #28]	@ (80093dc <MX_TIM1_Init+0x150>)
 80093c0:	f00a f872 	bl	80134a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80093ca:	f7fd f8ad 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80093ce:	4803      	ldr	r0, [pc, #12]	@ (80093dc <MX_TIM1_Init+0x150>)
 80093d0:	f000 f82a 	bl	8009428 <HAL_TIM_MspPostInit>

}
 80093d4:	bf00      	nop
 80093d6:	3768      	adds	r7, #104	@ 0x68
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	24002564 	.word	0x24002564
 80093e0:	40010000 	.word	0x40010000

080093e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a0b      	ldr	r2, [pc, #44]	@ (8009420 <HAL_TIM_Base_MspInit+0x3c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d10e      	bne.n	8009414 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80093f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <HAL_TIM_Base_MspInit+0x40>)
 80093f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fc:	4a09      	ldr	r2, [pc, #36]	@ (8009424 <HAL_TIM_Base_MspInit+0x40>)
 80093fe:	f043 0301 	orr.w	r3, r3, #1
 8009402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009406:	4b07      	ldr	r3, [pc, #28]	@ (8009424 <HAL_TIM_Base_MspInit+0x40>)
 8009408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009414:	bf00      	nop
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	40010000 	.word	0x40010000
 8009424:	58024400 	.word	0x58024400

08009428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009430:	f107 030c 	add.w	r3, r7, #12
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a13      	ldr	r2, [pc, #76]	@ (8009494 <HAL_TIM_MspPostInit+0x6c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d11f      	bne.n	800948a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800944a:	4b13      	ldr	r3, [pc, #76]	@ (8009498 <HAL_TIM_MspPostInit+0x70>)
 800944c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009450:	4a11      	ldr	r2, [pc, #68]	@ (8009498 <HAL_TIM_MspPostInit+0x70>)
 8009452:	f043 0310 	orr.w	r3, r3, #16
 8009456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800945a:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <HAL_TIM_MspPostInit+0x70>)
 800945c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009460:	f003 0310 	and.w	r3, r3, #16
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_Pin;
 8009468:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800946c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800946e:	2302      	movs	r3, #2
 8009470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009476:	2300      	movs	r3, #0
 8009478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800947a:	2301      	movs	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	4619      	mov	r1, r3
 8009484:	4805      	ldr	r0, [pc, #20]	@ (800949c <HAL_TIM_MspPostInit+0x74>)
 8009486:	f003 ffbb 	bl	800d400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800948a:	bf00      	nop
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40010000 	.word	0x40010000
 8009498:	58024400 	.word	0x58024400
 800949c:	58021000 	.word	0x58021000

080094a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80094a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80094d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80094a4:	f7ff fe6a 	bl	800917c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80094a8:	480c      	ldr	r0, [pc, #48]	@ (80094dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80094aa:	490d      	ldr	r1, [pc, #52]	@ (80094e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80094ac:	4a0d      	ldr	r2, [pc, #52]	@ (80094e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80094ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80094b0:	e002      	b.n	80094b8 <LoopCopyDataInit>

080094b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80094b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80094b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80094b6:	3304      	adds	r3, #4

080094b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80094b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80094ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80094bc:	d3f9      	bcc.n	80094b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80094be:	4a0a      	ldr	r2, [pc, #40]	@ (80094e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80094c0:	4c0a      	ldr	r4, [pc, #40]	@ (80094ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80094c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80094c4:	e001      	b.n	80094ca <LoopFillZerobss>

080094c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80094c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80094c8:	3204      	adds	r2, #4

080094ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80094ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80094cc:	d3fb      	bcc.n	80094c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80094ce:	f00e facb 	bl	8017a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80094d2:	f7f8 f9c3 	bl	800185c <main>
  bx  lr
 80094d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80094d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80094dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80094e0:	24000188 	.word	0x24000188
  ldr r2, =_sidata
 80094e4:	0801bcbc 	.word	0x0801bcbc
  ldr r2, =_sbss
 80094e8:	24000188 	.word	0x24000188
  ldr r4, =_ebss
 80094ec:	2400430c 	.word	0x2400430c

080094f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094f0:	e7fe      	b.n	80094f0 <ADC3_IRQHandler>
	...

080094f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094fa:	2003      	movs	r0, #3
 80094fc:	f000 f994 	bl	8009828 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009500:	f006 fa5a 	bl	800f9b8 <HAL_RCC_GetSysClockFreq>
 8009504:	4602      	mov	r2, r0
 8009506:	4b15      	ldr	r3, [pc, #84]	@ (800955c <HAL_Init+0x68>)
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	0a1b      	lsrs	r3, r3, #8
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	4913      	ldr	r1, [pc, #76]	@ (8009560 <HAL_Init+0x6c>)
 8009512:	5ccb      	ldrb	r3, [r1, r3]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	fa22 f303 	lsr.w	r3, r2, r3
 800951c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800951e:	4b0f      	ldr	r3, [pc, #60]	@ (800955c <HAL_Init+0x68>)
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	4a0e      	ldr	r2, [pc, #56]	@ (8009560 <HAL_Init+0x6c>)
 8009528:	5cd3      	ldrb	r3, [r2, r3]
 800952a:	f003 031f 	and.w	r3, r3, #31
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
 8009534:	4a0b      	ldr	r2, [pc, #44]	@ (8009564 <HAL_Init+0x70>)
 8009536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009538:	4a0b      	ldr	r2, [pc, #44]	@ (8009568 <HAL_Init+0x74>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800953e:	200f      	movs	r0, #15
 8009540:	f000 f81c 	bl	800957c <HAL_InitTick>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e002      	b.n	8009554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800954e:	f000 f80d 	bl	800956c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	58024400 	.word	0x58024400
 8009560:	0801bba4 	.word	0x0801bba4
 8009564:	24000030 	.word	0x24000030
 8009568:	2400002c 	.word	0x2400002c

0800956c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009584:	4b15      	ldr	r3, [pc, #84]	@ (80095dc <HAL_InitTick+0x60>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e021      	b.n	80095d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009590:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <HAL_InitTick+0x64>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <HAL_InitTick+0x60>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4619      	mov	r1, r3
 800959a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800959e:	fbb3 f3f1 	udiv	r3, r3, r1
 80095a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f971 	bl	800988e <HAL_SYSTICK_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e00e      	b.n	80095d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b0f      	cmp	r3, #15
 80095ba:	d80a      	bhi.n	80095d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80095bc:	2200      	movs	r2, #0
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	f000 f93b 	bl	800983e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80095c8:	4a06      	ldr	r2, [pc, #24]	@ (80095e4 <HAL_InitTick+0x68>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e000      	b.n	80095d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	24000038 	.word	0x24000038
 80095e0:	2400002c 	.word	0x2400002c
 80095e4:	24000034 	.word	0x24000034

080095e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80095ec:	4b06      	ldr	r3, [pc, #24]	@ (8009608 <HAL_IncTick+0x20>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	4b06      	ldr	r3, [pc, #24]	@ (800960c <HAL_IncTick+0x24>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4413      	add	r3, r2
 80095f8:	4a04      	ldr	r2, [pc, #16]	@ (800960c <HAL_IncTick+0x24>)
 80095fa:	6013      	str	r3, [r2, #0]
}
 80095fc:	bf00      	nop
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	24000038 	.word	0x24000038
 800960c:	240025b0 	.word	0x240025b0

08009610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  return uwTick;
 8009614:	4b03      	ldr	r3, [pc, #12]	@ (8009624 <HAL_GetTick+0x14>)
 8009616:	681b      	ldr	r3, [r3, #0]
}
 8009618:	4618      	mov	r0, r3
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	240025b0 	.word	0x240025b0

08009628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009630:	f7ff ffee 	bl	8009610 <HAL_GetTick>
 8009634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009640:	d005      	beq.n	800964e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009642:	4b0a      	ldr	r3, [pc, #40]	@ (800966c <HAL_Delay+0x44>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800964e:	bf00      	nop
 8009650:	f7ff ffde 	bl	8009610 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	429a      	cmp	r2, r3
 800965e:	d8f7      	bhi.n	8009650 <HAL_Delay+0x28>
  {
  }
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	24000038 	.word	0x24000038

08009670 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8009674:	4b03      	ldr	r3, [pc, #12]	@ (8009684 <HAL_GetREVID+0x14>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	0c1b      	lsrs	r3, r3, #16
}
 800967a:	4618      	mov	r0, r3
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	5c001000 	.word	0x5c001000

08009688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009698:	4b0b      	ldr	r3, [pc, #44]	@ (80096c8 <__NVIC_SetPriorityGrouping+0x40>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80096a4:	4013      	ands	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80096b0:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <__NVIC_SetPriorityGrouping+0x44>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096b6:	4a04      	ldr	r2, [pc, #16]	@ (80096c8 <__NVIC_SetPriorityGrouping+0x40>)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	60d3      	str	r3, [r2, #12]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	e000ed00 	.word	0xe000ed00
 80096cc:	05fa0000 	.word	0x05fa0000

080096d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <__NVIC_GetPriorityGrouping+0x18>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	f003 0307 	and.w	r3, r3, #7
}
 80096de:	4618      	mov	r0, r3
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80096f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	db0b      	blt.n	8009716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	f003 021f 	and.w	r2, r3, #31
 8009704:	4907      	ldr	r1, [pc, #28]	@ (8009724 <__NVIC_EnableIRQ+0x38>)
 8009706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	2001      	movs	r0, #1
 800970e:	fa00 f202 	lsl.w	r2, r0, r2
 8009712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	e000e100 	.word	0xe000e100

08009728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	db0a      	blt.n	8009752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	490c      	ldr	r1, [pc, #48]	@ (8009774 <__NVIC_SetPriority+0x4c>)
 8009742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009746:	0112      	lsls	r2, r2, #4
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	440b      	add	r3, r1
 800974c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009750:	e00a      	b.n	8009768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	4908      	ldr	r1, [pc, #32]	@ (8009778 <__NVIC_SetPriority+0x50>)
 8009758:	88fb      	ldrh	r3, [r7, #6]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	3b04      	subs	r3, #4
 8009760:	0112      	lsls	r2, r2, #4
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	440b      	add	r3, r1
 8009766:	761a      	strb	r2, [r3, #24]
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	e000e100 	.word	0xe000e100
 8009778:	e000ed00 	.word	0xe000ed00

0800977c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800977c:	b480      	push	{r7}
 800977e:	b089      	sub	sp, #36	@ 0x24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f1c3 0307 	rsb	r3, r3, #7
 8009796:	2b04      	cmp	r3, #4
 8009798:	bf28      	it	cs
 800979a:	2304      	movcs	r3, #4
 800979c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2b06      	cmp	r3, #6
 80097a4:	d902      	bls.n	80097ac <NVIC_EncodePriority+0x30>
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	3b03      	subs	r3, #3
 80097aa:	e000      	b.n	80097ae <NVIC_EncodePriority+0x32>
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ba:	43da      	mvns	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	401a      	ands	r2, r3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097c4:	f04f 31ff 	mov.w	r1, #4294967295
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	fa01 f303 	lsl.w	r3, r1, r3
 80097ce:	43d9      	mvns	r1, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d4:	4313      	orrs	r3, r2
         );
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3724      	adds	r7, #36	@ 0x24
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097f4:	d301      	bcc.n	80097fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80097f6:	2301      	movs	r3, #1
 80097f8:	e00f      	b.n	800981a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009824 <SysTick_Config+0x40>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3b01      	subs	r3, #1
 8009800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009802:	210f      	movs	r1, #15
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	f7ff ff8e 	bl	8009728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800980c:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <SysTick_Config+0x40>)
 800980e:	2200      	movs	r2, #0
 8009810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009812:	4b04      	ldr	r3, [pc, #16]	@ (8009824 <SysTick_Config+0x40>)
 8009814:	2207      	movs	r2, #7
 8009816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	e000e010 	.word	0xe000e010

08009828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff ff29 	bl	8009688 <__NVIC_SetPriorityGrouping>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	4603      	mov	r3, r0
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
 800984a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800984c:	f7ff ff40 	bl	80096d0 <__NVIC_GetPriorityGrouping>
 8009850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	6978      	ldr	r0, [r7, #20]
 8009858:	f7ff ff90 	bl	800977c <NVIC_EncodePriority>
 800985c:	4602      	mov	r2, r0
 800985e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff ff5f 	bl	8009728 <__NVIC_SetPriority>
}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	4603      	mov	r3, r0
 800987a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800987c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff ff33 	bl	80096ec <__NVIC_EnableIRQ>
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff ffa4 	bl	80097e4 <SysTick_Config>
 800989c:	4603      	mov	r3, r0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80098b0:	f7ff feae 	bl	8009610 <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e316      	b.n	8009eee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a66      	ldr	r2, [pc, #408]	@ (8009a60 <HAL_DMA_Init+0x1b8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d04a      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a65      	ldr	r2, [pc, #404]	@ (8009a64 <HAL_DMA_Init+0x1bc>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d045      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a63      	ldr	r2, [pc, #396]	@ (8009a68 <HAL_DMA_Init+0x1c0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d040      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a62      	ldr	r2, [pc, #392]	@ (8009a6c <HAL_DMA_Init+0x1c4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d03b      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a60      	ldr	r2, [pc, #384]	@ (8009a70 <HAL_DMA_Init+0x1c8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d036      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a5f      	ldr	r2, [pc, #380]	@ (8009a74 <HAL_DMA_Init+0x1cc>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d031      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a5d      	ldr	r2, [pc, #372]	@ (8009a78 <HAL_DMA_Init+0x1d0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d02c      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a5c      	ldr	r2, [pc, #368]	@ (8009a7c <HAL_DMA_Init+0x1d4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d027      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a5a      	ldr	r2, [pc, #360]	@ (8009a80 <HAL_DMA_Init+0x1d8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d022      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a59      	ldr	r2, [pc, #356]	@ (8009a84 <HAL_DMA_Init+0x1dc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d01d      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a57      	ldr	r2, [pc, #348]	@ (8009a88 <HAL_DMA_Init+0x1e0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d018      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a56      	ldr	r2, [pc, #344]	@ (8009a8c <HAL_DMA_Init+0x1e4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d013      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a54      	ldr	r2, [pc, #336]	@ (8009a90 <HAL_DMA_Init+0x1e8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00e      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a53      	ldr	r2, [pc, #332]	@ (8009a94 <HAL_DMA_Init+0x1ec>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d009      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a51      	ldr	r2, [pc, #324]	@ (8009a98 <HAL_DMA_Init+0x1f0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d004      	beq.n	8009960 <HAL_DMA_Init+0xb8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a50      	ldr	r2, [pc, #320]	@ (8009a9c <HAL_DMA_Init+0x1f4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d101      	bne.n	8009964 <HAL_DMA_Init+0xbc>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <HAL_DMA_Init+0xbe>
 8009964:	2300      	movs	r3, #0
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 813b 	beq.w	8009be2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a37      	ldr	r2, [pc, #220]	@ (8009a60 <HAL_DMA_Init+0x1b8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d04a      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a36      	ldr	r2, [pc, #216]	@ (8009a64 <HAL_DMA_Init+0x1bc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d045      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a34      	ldr	r2, [pc, #208]	@ (8009a68 <HAL_DMA_Init+0x1c0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d040      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a33      	ldr	r2, [pc, #204]	@ (8009a6c <HAL_DMA_Init+0x1c4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d03b      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a31      	ldr	r2, [pc, #196]	@ (8009a70 <HAL_DMA_Init+0x1c8>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d036      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a30      	ldr	r2, [pc, #192]	@ (8009a74 <HAL_DMA_Init+0x1cc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d031      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009a78 <HAL_DMA_Init+0x1d0>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d02c      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2d      	ldr	r2, [pc, #180]	@ (8009a7c <HAL_DMA_Init+0x1d4>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d027      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009a80 <HAL_DMA_Init+0x1d8>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d022      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a2a      	ldr	r2, [pc, #168]	@ (8009a84 <HAL_DMA_Init+0x1dc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d01d      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a28      	ldr	r2, [pc, #160]	@ (8009a88 <HAL_DMA_Init+0x1e0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d018      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a27      	ldr	r2, [pc, #156]	@ (8009a8c <HAL_DMA_Init+0x1e4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d013      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a25      	ldr	r2, [pc, #148]	@ (8009a90 <HAL_DMA_Init+0x1e8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00e      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a24      	ldr	r2, [pc, #144]	@ (8009a94 <HAL_DMA_Init+0x1ec>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d009      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a22      	ldr	r2, [pc, #136]	@ (8009a98 <HAL_DMA_Init+0x1f0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_DMA_Init+0x174>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a21      	ldr	r2, [pc, #132]	@ (8009a9c <HAL_DMA_Init+0x1f4>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d108      	bne.n	8009a2e <HAL_DMA_Init+0x186>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e007      	b.n	8009a3e <HAL_DMA_Init+0x196>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a3e:	e02f      	b.n	8009aa0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009a40:	f7ff fde6 	bl	8009610 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d928      	bls.n	8009aa0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2203      	movs	r2, #3
 8009a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e246      	b.n	8009eee <HAL_DMA_Init+0x646>
 8009a60:	40020010 	.word	0x40020010
 8009a64:	40020028 	.word	0x40020028
 8009a68:	40020040 	.word	0x40020040
 8009a6c:	40020058 	.word	0x40020058
 8009a70:	40020070 	.word	0x40020070
 8009a74:	40020088 	.word	0x40020088
 8009a78:	400200a0 	.word	0x400200a0
 8009a7c:	400200b8 	.word	0x400200b8
 8009a80:	40020410 	.word	0x40020410
 8009a84:	40020428 	.word	0x40020428
 8009a88:	40020440 	.word	0x40020440
 8009a8c:	40020458 	.word	0x40020458
 8009a90:	40020470 	.word	0x40020470
 8009a94:	40020488 	.word	0x40020488
 8009a98:	400204a0 	.word	0x400204a0
 8009a9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1c8      	bne.n	8009a40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4b83      	ldr	r3, [pc, #524]	@ (8009cc8 <HAL_DMA_Init+0x420>)
 8009aba:	4013      	ands	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009ac6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ad2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ade:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d107      	bne.n	8009b04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afc:	4313      	orrs	r3, r2
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009b04:	4b71      	ldr	r3, [pc, #452]	@ (8009ccc <HAL_DMA_Init+0x424>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4b71      	ldr	r3, [pc, #452]	@ (8009cd0 <HAL_DMA_Init+0x428>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b10:	d328      	bcc.n	8009b64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b28      	cmp	r3, #40	@ 0x28
 8009b18:	d903      	bls.n	8009b22 <HAL_DMA_Init+0x27a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b20:	d917      	bls.n	8009b52 <HAL_DMA_Init+0x2aa>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b28:	d903      	bls.n	8009b32 <HAL_DMA_Init+0x28a>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	2b42      	cmp	r3, #66	@ 0x42
 8009b30:	d90f      	bls.n	8009b52 <HAL_DMA_Init+0x2aa>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	2b46      	cmp	r3, #70	@ 0x46
 8009b38:	d903      	bls.n	8009b42 <HAL_DMA_Init+0x29a>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2b48      	cmp	r3, #72	@ 0x48
 8009b40:	d907      	bls.n	8009b52 <HAL_DMA_Init+0x2aa>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2b4e      	cmp	r3, #78	@ 0x4e
 8009b48:	d905      	bls.n	8009b56 <HAL_DMA_Init+0x2ae>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b52      	cmp	r3, #82	@ 0x52
 8009b50:	d801      	bhi.n	8009b56 <HAL_DMA_Init+0x2ae>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <HAL_DMA_Init+0x2b0>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0307 	bic.w	r3, r3, #7
 8009b7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d117      	bne.n	8009bbe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00e      	beq.n	8009bbe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 f821 	bl	800bbe8 <DMA_CheckFifoParam>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d008      	beq.n	8009bbe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2240      	movs	r2, #64	@ 0x40
 8009bb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e197      	b.n	8009eee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 ff5c 	bl	800ba84 <DMA_CalcBaseAndBitshift>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	223f      	movs	r2, #63	@ 0x3f
 8009bda:	409a      	lsls	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	609a      	str	r2, [r3, #8]
 8009be0:	e0cd      	b.n	8009d7e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a3b      	ldr	r2, [pc, #236]	@ (8009cd4 <HAL_DMA_Init+0x42c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d022      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a39      	ldr	r2, [pc, #228]	@ (8009cd8 <HAL_DMA_Init+0x430>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d01d      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a38      	ldr	r2, [pc, #224]	@ (8009cdc <HAL_DMA_Init+0x434>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d018      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a36      	ldr	r2, [pc, #216]	@ (8009ce0 <HAL_DMA_Init+0x438>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a35      	ldr	r2, [pc, #212]	@ (8009ce4 <HAL_DMA_Init+0x43c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00e      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a33      	ldr	r2, [pc, #204]	@ (8009ce8 <HAL_DMA_Init+0x440>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d009      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a32      	ldr	r2, [pc, #200]	@ (8009cec <HAL_DMA_Init+0x444>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d004      	beq.n	8009c32 <HAL_DMA_Init+0x38a>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a30      	ldr	r2, [pc, #192]	@ (8009cf0 <HAL_DMA_Init+0x448>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d101      	bne.n	8009c36 <HAL_DMA_Init+0x38e>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <HAL_DMA_Init+0x390>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 8097 	beq.w	8009d6c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a24      	ldr	r2, [pc, #144]	@ (8009cd4 <HAL_DMA_Init+0x42c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d021      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a22      	ldr	r2, [pc, #136]	@ (8009cd8 <HAL_DMA_Init+0x430>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d01c      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a21      	ldr	r2, [pc, #132]	@ (8009cdc <HAL_DMA_Init+0x434>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d017      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce0 <HAL_DMA_Init+0x438>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d012      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ce4 <HAL_DMA_Init+0x43c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00d      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1c      	ldr	r2, [pc, #112]	@ (8009ce8 <HAL_DMA_Init+0x440>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d008      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009cec <HAL_DMA_Init+0x444>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d003      	beq.n	8009c8c <HAL_DMA_Init+0x3e4>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a19      	ldr	r2, [pc, #100]	@ (8009cf0 <HAL_DMA_Init+0x448>)
 8009c8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4b13      	ldr	r3, [pc, #76]	@ (8009cf4 <HAL_DMA_Init+0x44c>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b40      	cmp	r3, #64	@ 0x40
 8009cb2:	d021      	beq.n	8009cf8 <HAL_DMA_Init+0x450>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	2b80      	cmp	r3, #128	@ 0x80
 8009cba:	d102      	bne.n	8009cc2 <HAL_DMA_Init+0x41a>
 8009cbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009cc0:	e01b      	b.n	8009cfa <HAL_DMA_Init+0x452>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e019      	b.n	8009cfa <HAL_DMA_Init+0x452>
 8009cc6:	bf00      	nop
 8009cc8:	fe10803f 	.word	0xfe10803f
 8009ccc:	5c001000 	.word	0x5c001000
 8009cd0:	ffff0000 	.word	0xffff0000
 8009cd4:	58025408 	.word	0x58025408
 8009cd8:	5802541c 	.word	0x5802541c
 8009cdc:	58025430 	.word	0x58025430
 8009ce0:	58025444 	.word	0x58025444
 8009ce4:	58025458 	.word	0x58025458
 8009ce8:	5802546c 	.word	0x5802546c
 8009cec:	58025480 	.word	0x58025480
 8009cf0:	58025494 	.word	0x58025494
 8009cf4:	fffe000f 	.word	0xfffe000f
 8009cf8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	68d2      	ldr	r2, [r2, #12]
 8009cfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009d08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009d10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009d28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8009ef8 <HAL_DMA_Init+0x650>)
 8009d40:	4413      	add	r3, r2
 8009d42:	4a6e      	ldr	r2, [pc, #440]	@ (8009efc <HAL_DMA_Init+0x654>)
 8009d44:	fba2 2303 	umull	r2, r3, r2, r3
 8009d48:	091b      	lsrs	r3, r3, #4
 8009d4a:	009a      	lsls	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fe97 	bl	800ba84 <DMA_CalcBaseAndBitshift>
 8009d56:	4603      	mov	r3, r0
 8009d58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	2201      	movs	r2, #1
 8009d64:	409a      	lsls	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	e008      	b.n	8009d7e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2240      	movs	r2, #64	@ 0x40
 8009d70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2203      	movs	r2, #3
 8009d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e0b7      	b.n	8009eee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a5f      	ldr	r2, [pc, #380]	@ (8009f00 <HAL_DMA_Init+0x658>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d072      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8009f04 <HAL_DMA_Init+0x65c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d06d      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a5c      	ldr	r2, [pc, #368]	@ (8009f08 <HAL_DMA_Init+0x660>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d068      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a5a      	ldr	r2, [pc, #360]	@ (8009f0c <HAL_DMA_Init+0x664>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d063      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a59      	ldr	r2, [pc, #356]	@ (8009f10 <HAL_DMA_Init+0x668>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d05e      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a57      	ldr	r2, [pc, #348]	@ (8009f14 <HAL_DMA_Init+0x66c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d059      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a56      	ldr	r2, [pc, #344]	@ (8009f18 <HAL_DMA_Init+0x670>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d054      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a54      	ldr	r2, [pc, #336]	@ (8009f1c <HAL_DMA_Init+0x674>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d04f      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a53      	ldr	r2, [pc, #332]	@ (8009f20 <HAL_DMA_Init+0x678>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d04a      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a51      	ldr	r2, [pc, #324]	@ (8009f24 <HAL_DMA_Init+0x67c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d045      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a50      	ldr	r2, [pc, #320]	@ (8009f28 <HAL_DMA_Init+0x680>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d040      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a4e      	ldr	r2, [pc, #312]	@ (8009f2c <HAL_DMA_Init+0x684>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d03b      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8009f30 <HAL_DMA_Init+0x688>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d036      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a4b      	ldr	r2, [pc, #300]	@ (8009f34 <HAL_DMA_Init+0x68c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d031      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8009f38 <HAL_DMA_Init+0x690>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d02c      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a48      	ldr	r2, [pc, #288]	@ (8009f3c <HAL_DMA_Init+0x694>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d027      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a47      	ldr	r2, [pc, #284]	@ (8009f40 <HAL_DMA_Init+0x698>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d022      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a45      	ldr	r2, [pc, #276]	@ (8009f44 <HAL_DMA_Init+0x69c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d01d      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a44      	ldr	r2, [pc, #272]	@ (8009f48 <HAL_DMA_Init+0x6a0>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d018      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a42      	ldr	r2, [pc, #264]	@ (8009f4c <HAL_DMA_Init+0x6a4>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a41      	ldr	r2, [pc, #260]	@ (8009f50 <HAL_DMA_Init+0x6a8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00e      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a3f      	ldr	r2, [pc, #252]	@ (8009f54 <HAL_DMA_Init+0x6ac>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d009      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8009f58 <HAL_DMA_Init+0x6b0>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d004      	beq.n	8009e6e <HAL_DMA_Init+0x5c6>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a3c      	ldr	r2, [pc, #240]	@ (8009f5c <HAL_DMA_Init+0x6b4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d101      	bne.n	8009e72 <HAL_DMA_Init+0x5ca>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <HAL_DMA_Init+0x5cc>
 8009e72:	2300      	movs	r3, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d032      	beq.n	8009ede <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 ff31 	bl	800bce0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	2b80      	cmp	r3, #128	@ 0x80
 8009e84:	d102      	bne.n	8009e8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e94:	b2d2      	uxtb	r2, r2
 8009e96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009ea0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d010      	beq.n	8009ecc <HAL_DMA_Init+0x624>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d80c      	bhi.n	8009ecc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 ffae 	bl	800be14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009ec8:	605a      	str	r2, [r3, #4]
 8009eca:	e008      	b.n	8009ede <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	a7fdabf8 	.word	0xa7fdabf8
 8009efc:	cccccccd 	.word	0xcccccccd
 8009f00:	40020010 	.word	0x40020010
 8009f04:	40020028 	.word	0x40020028
 8009f08:	40020040 	.word	0x40020040
 8009f0c:	40020058 	.word	0x40020058
 8009f10:	40020070 	.word	0x40020070
 8009f14:	40020088 	.word	0x40020088
 8009f18:	400200a0 	.word	0x400200a0
 8009f1c:	400200b8 	.word	0x400200b8
 8009f20:	40020410 	.word	0x40020410
 8009f24:	40020428 	.word	0x40020428
 8009f28:	40020440 	.word	0x40020440
 8009f2c:	40020458 	.word	0x40020458
 8009f30:	40020470 	.word	0x40020470
 8009f34:	40020488 	.word	0x40020488
 8009f38:	400204a0 	.word	0x400204a0
 8009f3c:	400204b8 	.word	0x400204b8
 8009f40:	58025408 	.word	0x58025408
 8009f44:	5802541c 	.word	0x5802541c
 8009f48:	58025430 	.word	0x58025430
 8009f4c:	58025444 	.word	0x58025444
 8009f50:	58025458 	.word	0x58025458
 8009f54:	5802546c 	.word	0x5802546c
 8009f58:	58025480 	.word	0x58025480
 8009f5c:	58025494 	.word	0x58025494

08009f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e226      	b.n	800a3ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_DMA_Start_IT+0x2a>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e21f      	b.n	800a3ca <HAL_DMA_Start_IT+0x46a>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	f040 820a 	bne.w	800a3b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a68      	ldr	r2, [pc, #416]	@ (800a154 <HAL_DMA_Start_IT+0x1f4>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d04a      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a66      	ldr	r2, [pc, #408]	@ (800a158 <HAL_DMA_Start_IT+0x1f8>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d045      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a65      	ldr	r2, [pc, #404]	@ (800a15c <HAL_DMA_Start_IT+0x1fc>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d040      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a63      	ldr	r2, [pc, #396]	@ (800a160 <HAL_DMA_Start_IT+0x200>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d03b      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a62      	ldr	r2, [pc, #392]	@ (800a164 <HAL_DMA_Start_IT+0x204>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d036      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a60      	ldr	r2, [pc, #384]	@ (800a168 <HAL_DMA_Start_IT+0x208>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d031      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a5f      	ldr	r2, [pc, #380]	@ (800a16c <HAL_DMA_Start_IT+0x20c>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d02c      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a5d      	ldr	r2, [pc, #372]	@ (800a170 <HAL_DMA_Start_IT+0x210>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d027      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a5c      	ldr	r2, [pc, #368]	@ (800a174 <HAL_DMA_Start_IT+0x214>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d022      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a5a      	ldr	r2, [pc, #360]	@ (800a178 <HAL_DMA_Start_IT+0x218>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d01d      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a59      	ldr	r2, [pc, #356]	@ (800a17c <HAL_DMA_Start_IT+0x21c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d018      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a57      	ldr	r2, [pc, #348]	@ (800a180 <HAL_DMA_Start_IT+0x220>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d013      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a56      	ldr	r2, [pc, #344]	@ (800a184 <HAL_DMA_Start_IT+0x224>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00e      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a54      	ldr	r2, [pc, #336]	@ (800a188 <HAL_DMA_Start_IT+0x228>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d009      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a53      	ldr	r2, [pc, #332]	@ (800a18c <HAL_DMA_Start_IT+0x22c>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d004      	beq.n	800a04e <HAL_DMA_Start_IT+0xee>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a51      	ldr	r2, [pc, #324]	@ (800a190 <HAL_DMA_Start_IT+0x230>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d108      	bne.n	800a060 <HAL_DMA_Start_IT+0x100>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f022 0201 	bic.w	r2, r2, #1
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	e007      	b.n	800a070 <HAL_DMA_Start_IT+0x110>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 0201 	bic.w	r2, r2, #1
 800a06e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f001 fb58 	bl	800b72c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a34      	ldr	r2, [pc, #208]	@ (800a154 <HAL_DMA_Start_IT+0x1f4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d04a      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a33      	ldr	r2, [pc, #204]	@ (800a158 <HAL_DMA_Start_IT+0x1f8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d045      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a31      	ldr	r2, [pc, #196]	@ (800a15c <HAL_DMA_Start_IT+0x1fc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d040      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a30      	ldr	r2, [pc, #192]	@ (800a160 <HAL_DMA_Start_IT+0x200>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d03b      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a164 <HAL_DMA_Start_IT+0x204>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d036      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a2d      	ldr	r2, [pc, #180]	@ (800a168 <HAL_DMA_Start_IT+0x208>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d031      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a16c <HAL_DMA_Start_IT+0x20c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d02c      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a170 <HAL_DMA_Start_IT+0x210>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d027      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a28      	ldr	r2, [pc, #160]	@ (800a174 <HAL_DMA_Start_IT+0x214>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d022      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a27      	ldr	r2, [pc, #156]	@ (800a178 <HAL_DMA_Start_IT+0x218>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d01d      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a25      	ldr	r2, [pc, #148]	@ (800a17c <HAL_DMA_Start_IT+0x21c>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d018      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a24      	ldr	r2, [pc, #144]	@ (800a180 <HAL_DMA_Start_IT+0x220>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d013      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a22      	ldr	r2, [pc, #136]	@ (800a184 <HAL_DMA_Start_IT+0x224>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00e      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a21      	ldr	r2, [pc, #132]	@ (800a188 <HAL_DMA_Start_IT+0x228>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d009      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1f      	ldr	r2, [pc, #124]	@ (800a18c <HAL_DMA_Start_IT+0x22c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d004      	beq.n	800a11c <HAL_DMA_Start_IT+0x1bc>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1e      	ldr	r2, [pc, #120]	@ (800a190 <HAL_DMA_Start_IT+0x230>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d101      	bne.n	800a120 <HAL_DMA_Start_IT+0x1c0>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <HAL_DMA_Start_IT+0x1c2>
 800a120:	2300      	movs	r3, #0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d036      	beq.n	800a194 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f023 021e 	bic.w	r2, r3, #30
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f042 0216 	orr.w	r2, r2, #22
 800a138:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d03e      	beq.n	800a1c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f042 0208 	orr.w	r2, r2, #8
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e035      	b.n	800a1c0 <HAL_DMA_Start_IT+0x260>
 800a154:	40020010 	.word	0x40020010
 800a158:	40020028 	.word	0x40020028
 800a15c:	40020040 	.word	0x40020040
 800a160:	40020058 	.word	0x40020058
 800a164:	40020070 	.word	0x40020070
 800a168:	40020088 	.word	0x40020088
 800a16c:	400200a0 	.word	0x400200a0
 800a170:	400200b8 	.word	0x400200b8
 800a174:	40020410 	.word	0x40020410
 800a178:	40020428 	.word	0x40020428
 800a17c:	40020440 	.word	0x40020440
 800a180:	40020458 	.word	0x40020458
 800a184:	40020470 	.word	0x40020470
 800a188:	40020488 	.word	0x40020488
 800a18c:	400204a0 	.word	0x400204a0
 800a190:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f023 020e 	bic.w	r2, r3, #14
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 020a 	orr.w	r2, r2, #10
 800a1a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d007      	beq.n	800a1c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0204 	orr.w	r2, r2, #4
 800a1be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a83      	ldr	r2, [pc, #524]	@ (800a3d4 <HAL_DMA_Start_IT+0x474>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d072      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a82      	ldr	r2, [pc, #520]	@ (800a3d8 <HAL_DMA_Start_IT+0x478>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d06d      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a80      	ldr	r2, [pc, #512]	@ (800a3dc <HAL_DMA_Start_IT+0x47c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d068      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a7f      	ldr	r2, [pc, #508]	@ (800a3e0 <HAL_DMA_Start_IT+0x480>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d063      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a7d      	ldr	r2, [pc, #500]	@ (800a3e4 <HAL_DMA_Start_IT+0x484>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d05e      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a7c      	ldr	r2, [pc, #496]	@ (800a3e8 <HAL_DMA_Start_IT+0x488>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d059      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a7a      	ldr	r2, [pc, #488]	@ (800a3ec <HAL_DMA_Start_IT+0x48c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d054      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a79      	ldr	r2, [pc, #484]	@ (800a3f0 <HAL_DMA_Start_IT+0x490>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d04f      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a77      	ldr	r2, [pc, #476]	@ (800a3f4 <HAL_DMA_Start_IT+0x494>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d04a      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a76      	ldr	r2, [pc, #472]	@ (800a3f8 <HAL_DMA_Start_IT+0x498>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d045      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a74      	ldr	r2, [pc, #464]	@ (800a3fc <HAL_DMA_Start_IT+0x49c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d040      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a73      	ldr	r2, [pc, #460]	@ (800a400 <HAL_DMA_Start_IT+0x4a0>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d03b      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a71      	ldr	r2, [pc, #452]	@ (800a404 <HAL_DMA_Start_IT+0x4a4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d036      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a70      	ldr	r2, [pc, #448]	@ (800a408 <HAL_DMA_Start_IT+0x4a8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d031      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a6e      	ldr	r2, [pc, #440]	@ (800a40c <HAL_DMA_Start_IT+0x4ac>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d02c      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a6d      	ldr	r2, [pc, #436]	@ (800a410 <HAL_DMA_Start_IT+0x4b0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d027      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a6b      	ldr	r2, [pc, #428]	@ (800a414 <HAL_DMA_Start_IT+0x4b4>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d022      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a6a      	ldr	r2, [pc, #424]	@ (800a418 <HAL_DMA_Start_IT+0x4b8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d01d      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a68      	ldr	r2, [pc, #416]	@ (800a41c <HAL_DMA_Start_IT+0x4bc>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d018      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a67      	ldr	r2, [pc, #412]	@ (800a420 <HAL_DMA_Start_IT+0x4c0>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d013      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a65      	ldr	r2, [pc, #404]	@ (800a424 <HAL_DMA_Start_IT+0x4c4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00e      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a64      	ldr	r2, [pc, #400]	@ (800a428 <HAL_DMA_Start_IT+0x4c8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d009      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a62      	ldr	r2, [pc, #392]	@ (800a42c <HAL_DMA_Start_IT+0x4cc>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x350>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a61      	ldr	r2, [pc, #388]	@ (800a430 <HAL_DMA_Start_IT+0x4d0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d101      	bne.n	800a2b4 <HAL_DMA_Start_IT+0x354>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <HAL_DMA_Start_IT+0x356>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d01a      	beq.n	800a2f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a37      	ldr	r2, [pc, #220]	@ (800a3d4 <HAL_DMA_Start_IT+0x474>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d04a      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a36      	ldr	r2, [pc, #216]	@ (800a3d8 <HAL_DMA_Start_IT+0x478>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d045      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a34      	ldr	r2, [pc, #208]	@ (800a3dc <HAL_DMA_Start_IT+0x47c>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d040      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a33      	ldr	r2, [pc, #204]	@ (800a3e0 <HAL_DMA_Start_IT+0x480>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d03b      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a31      	ldr	r2, [pc, #196]	@ (800a3e4 <HAL_DMA_Start_IT+0x484>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d036      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a30      	ldr	r2, [pc, #192]	@ (800a3e8 <HAL_DMA_Start_IT+0x488>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d031      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a2e      	ldr	r2, [pc, #184]	@ (800a3ec <HAL_DMA_Start_IT+0x48c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d02c      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a2d      	ldr	r2, [pc, #180]	@ (800a3f0 <HAL_DMA_Start_IT+0x490>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d027      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a2b      	ldr	r2, [pc, #172]	@ (800a3f4 <HAL_DMA_Start_IT+0x494>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d022      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f8 <HAL_DMA_Start_IT+0x498>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d01d      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a28      	ldr	r2, [pc, #160]	@ (800a3fc <HAL_DMA_Start_IT+0x49c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d018      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a27      	ldr	r2, [pc, #156]	@ (800a400 <HAL_DMA_Start_IT+0x4a0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d013      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a25      	ldr	r2, [pc, #148]	@ (800a404 <HAL_DMA_Start_IT+0x4a4>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d00e      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a24      	ldr	r2, [pc, #144]	@ (800a408 <HAL_DMA_Start_IT+0x4a8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d009      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a22      	ldr	r2, [pc, #136]	@ (800a40c <HAL_DMA_Start_IT+0x4ac>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d004      	beq.n	800a390 <HAL_DMA_Start_IT+0x430>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a21      	ldr	r2, [pc, #132]	@ (800a410 <HAL_DMA_Start_IT+0x4b0>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d108      	bne.n	800a3a2 <HAL_DMA_Start_IT+0x442>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0201 	orr.w	r2, r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	e012      	b.n	800a3c8 <HAL_DMA_Start_IT+0x468>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0201 	orr.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	e009      	b.n	800a3c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	40020010 	.word	0x40020010
 800a3d8:	40020028 	.word	0x40020028
 800a3dc:	40020040 	.word	0x40020040
 800a3e0:	40020058 	.word	0x40020058
 800a3e4:	40020070 	.word	0x40020070
 800a3e8:	40020088 	.word	0x40020088
 800a3ec:	400200a0 	.word	0x400200a0
 800a3f0:	400200b8 	.word	0x400200b8
 800a3f4:	40020410 	.word	0x40020410
 800a3f8:	40020428 	.word	0x40020428
 800a3fc:	40020440 	.word	0x40020440
 800a400:	40020458 	.word	0x40020458
 800a404:	40020470 	.word	0x40020470
 800a408:	40020488 	.word	0x40020488
 800a40c:	400204a0 	.word	0x400204a0
 800a410:	400204b8 	.word	0x400204b8
 800a414:	58025408 	.word	0x58025408
 800a418:	5802541c 	.word	0x5802541c
 800a41c:	58025430 	.word	0x58025430
 800a420:	58025444 	.word	0x58025444
 800a424:	58025458 	.word	0x58025458
 800a428:	5802546c 	.word	0x5802546c
 800a42c:	58025480 	.word	0x58025480
 800a430:	58025494 	.word	0x58025494

0800a434 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e237      	b.n	800a8b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d004      	beq.n	800a45c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2280      	movs	r2, #128	@ 0x80
 800a456:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e22c      	b.n	800a8b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a5c      	ldr	r2, [pc, #368]	@ (800a5d4 <HAL_DMA_Abort_IT+0x1a0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d04a      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a5b      	ldr	r2, [pc, #364]	@ (800a5d8 <HAL_DMA_Abort_IT+0x1a4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d045      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a59      	ldr	r2, [pc, #356]	@ (800a5dc <HAL_DMA_Abort_IT+0x1a8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d040      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a58      	ldr	r2, [pc, #352]	@ (800a5e0 <HAL_DMA_Abort_IT+0x1ac>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d03b      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a56      	ldr	r2, [pc, #344]	@ (800a5e4 <HAL_DMA_Abort_IT+0x1b0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d036      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a55      	ldr	r2, [pc, #340]	@ (800a5e8 <HAL_DMA_Abort_IT+0x1b4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d031      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a53      	ldr	r2, [pc, #332]	@ (800a5ec <HAL_DMA_Abort_IT+0x1b8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d02c      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a52      	ldr	r2, [pc, #328]	@ (800a5f0 <HAL_DMA_Abort_IT+0x1bc>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d027      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a50      	ldr	r2, [pc, #320]	@ (800a5f4 <HAL_DMA_Abort_IT+0x1c0>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d022      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a4f      	ldr	r2, [pc, #316]	@ (800a5f8 <HAL_DMA_Abort_IT+0x1c4>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d01d      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a4d      	ldr	r2, [pc, #308]	@ (800a5fc <HAL_DMA_Abort_IT+0x1c8>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d018      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a4c      	ldr	r2, [pc, #304]	@ (800a600 <HAL_DMA_Abort_IT+0x1cc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d013      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a4a      	ldr	r2, [pc, #296]	@ (800a604 <HAL_DMA_Abort_IT+0x1d0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d00e      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a49      	ldr	r2, [pc, #292]	@ (800a608 <HAL_DMA_Abort_IT+0x1d4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d009      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a47      	ldr	r2, [pc, #284]	@ (800a60c <HAL_DMA_Abort_IT+0x1d8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d004      	beq.n	800a4fc <HAL_DMA_Abort_IT+0xc8>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a46      	ldr	r2, [pc, #280]	@ (800a610 <HAL_DMA_Abort_IT+0x1dc>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d101      	bne.n	800a500 <HAL_DMA_Abort_IT+0xcc>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <HAL_DMA_Abort_IT+0xce>
 800a500:	2300      	movs	r3, #0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8086 	beq.w	800a614 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2204      	movs	r2, #4
 800a50c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d4 <HAL_DMA_Abort_IT+0x1a0>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d04a      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d8 <HAL_DMA_Abort_IT+0x1a4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d045      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a2c      	ldr	r2, [pc, #176]	@ (800a5dc <HAL_DMA_Abort_IT+0x1a8>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d040      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a2b      	ldr	r2, [pc, #172]	@ (800a5e0 <HAL_DMA_Abort_IT+0x1ac>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d03b      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a29      	ldr	r2, [pc, #164]	@ (800a5e4 <HAL_DMA_Abort_IT+0x1b0>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d036      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a28      	ldr	r2, [pc, #160]	@ (800a5e8 <HAL_DMA_Abort_IT+0x1b4>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d031      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a26      	ldr	r2, [pc, #152]	@ (800a5ec <HAL_DMA_Abort_IT+0x1b8>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d02c      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a25      	ldr	r2, [pc, #148]	@ (800a5f0 <HAL_DMA_Abort_IT+0x1bc>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d027      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a23      	ldr	r2, [pc, #140]	@ (800a5f4 <HAL_DMA_Abort_IT+0x1c0>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d022      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a22      	ldr	r2, [pc, #136]	@ (800a5f8 <HAL_DMA_Abort_IT+0x1c4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d01d      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a20      	ldr	r2, [pc, #128]	@ (800a5fc <HAL_DMA_Abort_IT+0x1c8>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d018      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a1f      	ldr	r2, [pc, #124]	@ (800a600 <HAL_DMA_Abort_IT+0x1cc>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d013      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1d      	ldr	r2, [pc, #116]	@ (800a604 <HAL_DMA_Abort_IT+0x1d0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d00e      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a1c      	ldr	r2, [pc, #112]	@ (800a608 <HAL_DMA_Abort_IT+0x1d4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d009      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a60c <HAL_DMA_Abort_IT+0x1d8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d004      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x17c>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a19      	ldr	r2, [pc, #100]	@ (800a610 <HAL_DMA_Abort_IT+0x1dc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d108      	bne.n	800a5c2 <HAL_DMA_Abort_IT+0x18e>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0201 	bic.w	r2, r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e178      	b.n	800a8b4 <HAL_DMA_Abort_IT+0x480>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	e16f      	b.n	800a8b4 <HAL_DMA_Abort_IT+0x480>
 800a5d4:	40020010 	.word	0x40020010
 800a5d8:	40020028 	.word	0x40020028
 800a5dc:	40020040 	.word	0x40020040
 800a5e0:	40020058 	.word	0x40020058
 800a5e4:	40020070 	.word	0x40020070
 800a5e8:	40020088 	.word	0x40020088
 800a5ec:	400200a0 	.word	0x400200a0
 800a5f0:	400200b8 	.word	0x400200b8
 800a5f4:	40020410 	.word	0x40020410
 800a5f8:	40020428 	.word	0x40020428
 800a5fc:	40020440 	.word	0x40020440
 800a600:	40020458 	.word	0x40020458
 800a604:	40020470 	.word	0x40020470
 800a608:	40020488 	.word	0x40020488
 800a60c:	400204a0 	.word	0x400204a0
 800a610:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 020e 	bic.w	r2, r2, #14
 800a622:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a6c      	ldr	r2, [pc, #432]	@ (800a7dc <HAL_DMA_Abort_IT+0x3a8>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d04a      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a6b      	ldr	r2, [pc, #428]	@ (800a7e0 <HAL_DMA_Abort_IT+0x3ac>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d045      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a69      	ldr	r2, [pc, #420]	@ (800a7e4 <HAL_DMA_Abort_IT+0x3b0>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d040      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a68      	ldr	r2, [pc, #416]	@ (800a7e8 <HAL_DMA_Abort_IT+0x3b4>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d03b      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a66      	ldr	r2, [pc, #408]	@ (800a7ec <HAL_DMA_Abort_IT+0x3b8>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d036      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a65      	ldr	r2, [pc, #404]	@ (800a7f0 <HAL_DMA_Abort_IT+0x3bc>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d031      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a63      	ldr	r2, [pc, #396]	@ (800a7f4 <HAL_DMA_Abort_IT+0x3c0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d02c      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a62      	ldr	r2, [pc, #392]	@ (800a7f8 <HAL_DMA_Abort_IT+0x3c4>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d027      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a60      	ldr	r2, [pc, #384]	@ (800a7fc <HAL_DMA_Abort_IT+0x3c8>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a5f      	ldr	r2, [pc, #380]	@ (800a800 <HAL_DMA_Abort_IT+0x3cc>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d01d      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a5d      	ldr	r2, [pc, #372]	@ (800a804 <HAL_DMA_Abort_IT+0x3d0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a5c      	ldr	r2, [pc, #368]	@ (800a808 <HAL_DMA_Abort_IT+0x3d4>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a5a      	ldr	r2, [pc, #360]	@ (800a80c <HAL_DMA_Abort_IT+0x3d8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a59      	ldr	r2, [pc, #356]	@ (800a810 <HAL_DMA_Abort_IT+0x3dc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a57      	ldr	r2, [pc, #348]	@ (800a814 <HAL_DMA_Abort_IT+0x3e0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_DMA_Abort_IT+0x290>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a56      	ldr	r2, [pc, #344]	@ (800a818 <HAL_DMA_Abort_IT+0x3e4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d108      	bne.n	800a6d6 <HAL_DMA_Abort_IT+0x2a2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0201 	bic.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e007      	b.n	800a6e6 <HAL_DMA_Abort_IT+0x2b2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0201 	bic.w	r2, r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a3c      	ldr	r2, [pc, #240]	@ (800a7dc <HAL_DMA_Abort_IT+0x3a8>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d072      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a3a      	ldr	r2, [pc, #232]	@ (800a7e0 <HAL_DMA_Abort_IT+0x3ac>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d06d      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a39      	ldr	r2, [pc, #228]	@ (800a7e4 <HAL_DMA_Abort_IT+0x3b0>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d068      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a37      	ldr	r2, [pc, #220]	@ (800a7e8 <HAL_DMA_Abort_IT+0x3b4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d063      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a36      	ldr	r2, [pc, #216]	@ (800a7ec <HAL_DMA_Abort_IT+0x3b8>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d05e      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a34      	ldr	r2, [pc, #208]	@ (800a7f0 <HAL_DMA_Abort_IT+0x3bc>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d059      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a33      	ldr	r2, [pc, #204]	@ (800a7f4 <HAL_DMA_Abort_IT+0x3c0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d054      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a31      	ldr	r2, [pc, #196]	@ (800a7f8 <HAL_DMA_Abort_IT+0x3c4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d04f      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a30      	ldr	r2, [pc, #192]	@ (800a7fc <HAL_DMA_Abort_IT+0x3c8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d04a      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a2e      	ldr	r2, [pc, #184]	@ (800a800 <HAL_DMA_Abort_IT+0x3cc>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d045      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2d      	ldr	r2, [pc, #180]	@ (800a804 <HAL_DMA_Abort_IT+0x3d0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d040      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a2b      	ldr	r2, [pc, #172]	@ (800a808 <HAL_DMA_Abort_IT+0x3d4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d03b      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a2a      	ldr	r2, [pc, #168]	@ (800a80c <HAL_DMA_Abort_IT+0x3d8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d036      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a28      	ldr	r2, [pc, #160]	@ (800a810 <HAL_DMA_Abort_IT+0x3dc>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d031      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a27      	ldr	r2, [pc, #156]	@ (800a814 <HAL_DMA_Abort_IT+0x3e0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d02c      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a25      	ldr	r2, [pc, #148]	@ (800a818 <HAL_DMA_Abort_IT+0x3e4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d027      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a24      	ldr	r2, [pc, #144]	@ (800a81c <HAL_DMA_Abort_IT+0x3e8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d022      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a22      	ldr	r2, [pc, #136]	@ (800a820 <HAL_DMA_Abort_IT+0x3ec>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d01d      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a21      	ldr	r2, [pc, #132]	@ (800a824 <HAL_DMA_Abort_IT+0x3f0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d018      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800a828 <HAL_DMA_Abort_IT+0x3f4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d013      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a82c <HAL_DMA_Abort_IT+0x3f8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00e      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1c      	ldr	r2, [pc, #112]	@ (800a830 <HAL_DMA_Abort_IT+0x3fc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d009      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <HAL_DMA_Abort_IT+0x400>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d004      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x3a2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a19      	ldr	r2, [pc, #100]	@ (800a838 <HAL_DMA_Abort_IT+0x404>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d132      	bne.n	800a83c <HAL_DMA_Abort_IT+0x408>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e031      	b.n	800a83e <HAL_DMA_Abort_IT+0x40a>
 800a7da:	bf00      	nop
 800a7dc:	40020010 	.word	0x40020010
 800a7e0:	40020028 	.word	0x40020028
 800a7e4:	40020040 	.word	0x40020040
 800a7e8:	40020058 	.word	0x40020058
 800a7ec:	40020070 	.word	0x40020070
 800a7f0:	40020088 	.word	0x40020088
 800a7f4:	400200a0 	.word	0x400200a0
 800a7f8:	400200b8 	.word	0x400200b8
 800a7fc:	40020410 	.word	0x40020410
 800a800:	40020428 	.word	0x40020428
 800a804:	40020440 	.word	0x40020440
 800a808:	40020458 	.word	0x40020458
 800a80c:	40020470 	.word	0x40020470
 800a810:	40020488 	.word	0x40020488
 800a814:	400204a0 	.word	0x400204a0
 800a818:	400204b8 	.word	0x400204b8
 800a81c:	58025408 	.word	0x58025408
 800a820:	5802541c 	.word	0x5802541c
 800a824:	58025430 	.word	0x58025430
 800a828:	58025444 	.word	0x58025444
 800a82c:	58025458 	.word	0x58025458
 800a830:	5802546c 	.word	0x5802546c
 800a834:	58025480 	.word	0x58025480
 800a838:	58025494 	.word	0x58025494
 800a83c:	2300      	movs	r3, #0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d028      	beq.n	800a894 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a84c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a850:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a856:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a85c:	f003 031f 	and.w	r3, r3, #31
 800a860:	2201      	movs	r2, #1
 800a862:	409a      	lsls	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a870:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00c      	beq.n	800a894 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a888:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a892:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop

0800a8c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	@ 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a8cc:	4b67      	ldr	r3, [pc, #412]	@ (800aa6c <HAL_DMA_IRQHandler+0x1ac>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a67      	ldr	r2, [pc, #412]	@ (800aa70 <HAL_DMA_IRQHandler+0x1b0>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	0a9b      	lsrs	r3, r3, #10
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a5f      	ldr	r2, [pc, #380]	@ (800aa74 <HAL_DMA_IRQHandler+0x1b4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d04a      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a5d      	ldr	r2, [pc, #372]	@ (800aa78 <HAL_DMA_IRQHandler+0x1b8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d045      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a5c      	ldr	r2, [pc, #368]	@ (800aa7c <HAL_DMA_IRQHandler+0x1bc>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d040      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a5a      	ldr	r2, [pc, #360]	@ (800aa80 <HAL_DMA_IRQHandler+0x1c0>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d03b      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a59      	ldr	r2, [pc, #356]	@ (800aa84 <HAL_DMA_IRQHandler+0x1c4>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d036      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a57      	ldr	r2, [pc, #348]	@ (800aa88 <HAL_DMA_IRQHandler+0x1c8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d031      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a56      	ldr	r2, [pc, #344]	@ (800aa8c <HAL_DMA_IRQHandler+0x1cc>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d02c      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a54      	ldr	r2, [pc, #336]	@ (800aa90 <HAL_DMA_IRQHandler+0x1d0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d027      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a53      	ldr	r2, [pc, #332]	@ (800aa94 <HAL_DMA_IRQHandler+0x1d4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d022      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a51      	ldr	r2, [pc, #324]	@ (800aa98 <HAL_DMA_IRQHandler+0x1d8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d01d      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a50      	ldr	r2, [pc, #320]	@ (800aa9c <HAL_DMA_IRQHandler+0x1dc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d018      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a4e      	ldr	r2, [pc, #312]	@ (800aaa0 <HAL_DMA_IRQHandler+0x1e0>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a4d      	ldr	r2, [pc, #308]	@ (800aaa4 <HAL_DMA_IRQHandler+0x1e4>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00e      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a4b      	ldr	r2, [pc, #300]	@ (800aaa8 <HAL_DMA_IRQHandler+0x1e8>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d009      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a4a      	ldr	r2, [pc, #296]	@ (800aaac <HAL_DMA_IRQHandler+0x1ec>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d004      	beq.n	800a992 <HAL_DMA_IRQHandler+0xd2>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a48      	ldr	r2, [pc, #288]	@ (800aab0 <HAL_DMA_IRQHandler+0x1f0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d101      	bne.n	800a996 <HAL_DMA_IRQHandler+0xd6>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <HAL_DMA_IRQHandler+0xd8>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 842b 	beq.w	800b1f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9a2:	f003 031f 	and.w	r3, r3, #31
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	409a      	lsls	r2, r3
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 80a2 	beq.w	800aaf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a2e      	ldr	r2, [pc, #184]	@ (800aa74 <HAL_DMA_IRQHandler+0x1b4>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d04a      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a2d      	ldr	r2, [pc, #180]	@ (800aa78 <HAL_DMA_IRQHandler+0x1b8>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d045      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a2b      	ldr	r2, [pc, #172]	@ (800aa7c <HAL_DMA_IRQHandler+0x1bc>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d040      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a2a      	ldr	r2, [pc, #168]	@ (800aa80 <HAL_DMA_IRQHandler+0x1c0>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d03b      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a28      	ldr	r2, [pc, #160]	@ (800aa84 <HAL_DMA_IRQHandler+0x1c4>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d036      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a27      	ldr	r2, [pc, #156]	@ (800aa88 <HAL_DMA_IRQHandler+0x1c8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d031      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a25      	ldr	r2, [pc, #148]	@ (800aa8c <HAL_DMA_IRQHandler+0x1cc>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d02c      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a24      	ldr	r2, [pc, #144]	@ (800aa90 <HAL_DMA_IRQHandler+0x1d0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d027      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a22      	ldr	r2, [pc, #136]	@ (800aa94 <HAL_DMA_IRQHandler+0x1d4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d022      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a21      	ldr	r2, [pc, #132]	@ (800aa98 <HAL_DMA_IRQHandler+0x1d8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d01d      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1f      	ldr	r2, [pc, #124]	@ (800aa9c <HAL_DMA_IRQHandler+0x1dc>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d018      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a1e      	ldr	r2, [pc, #120]	@ (800aaa0 <HAL_DMA_IRQHandler+0x1e0>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d013      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa4 <HAL_DMA_IRQHandler+0x1e4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00e      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aaa8 <HAL_DMA_IRQHandler+0x1e8>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d009      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a19      	ldr	r2, [pc, #100]	@ (800aaac <HAL_DMA_IRQHandler+0x1ec>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d004      	beq.n	800aa54 <HAL_DMA_IRQHandler+0x194>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a18      	ldr	r2, [pc, #96]	@ (800aab0 <HAL_DMA_IRQHandler+0x1f0>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d12f      	bne.n	800aab4 <HAL_DMA_IRQHandler+0x1f4>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bf14      	ite	ne
 800aa62:	2301      	movne	r3, #1
 800aa64:	2300      	moveq	r3, #0
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	e02e      	b.n	800aac8 <HAL_DMA_IRQHandler+0x208>
 800aa6a:	bf00      	nop
 800aa6c:	2400002c 	.word	0x2400002c
 800aa70:	1b4e81b5 	.word	0x1b4e81b5
 800aa74:	40020010 	.word	0x40020010
 800aa78:	40020028 	.word	0x40020028
 800aa7c:	40020040 	.word	0x40020040
 800aa80:	40020058 	.word	0x40020058
 800aa84:	40020070 	.word	0x40020070
 800aa88:	40020088 	.word	0x40020088
 800aa8c:	400200a0 	.word	0x400200a0
 800aa90:	400200b8 	.word	0x400200b8
 800aa94:	40020410 	.word	0x40020410
 800aa98:	40020428 	.word	0x40020428
 800aa9c:	40020440 	.word	0x40020440
 800aaa0:	40020458 	.word	0x40020458
 800aaa4:	40020470 	.word	0x40020470
 800aaa8:	40020488 	.word	0x40020488
 800aaac:	400204a0 	.word	0x400204a0
 800aab0:	400204b8 	.word	0x400204b8
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0308 	and.w	r3, r3, #8
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bf14      	ite	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	2300      	moveq	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d015      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 0204 	bic.w	r2, r2, #4
 800aada:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aae0:	f003 031f 	and.w	r3, r3, #31
 800aae4:	2208      	movs	r2, #8
 800aae6:	409a      	lsls	r2, r3
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf0:	f043 0201 	orr.w	r2, r3, #1
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aafc:	f003 031f 	and.w	r3, r3, #31
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	fa22 f303 	lsr.w	r3, r2, r3
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d06e      	beq.n	800abec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a69      	ldr	r2, [pc, #420]	@ (800acb8 <HAL_DMA_IRQHandler+0x3f8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d04a      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a67      	ldr	r2, [pc, #412]	@ (800acbc <HAL_DMA_IRQHandler+0x3fc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d045      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a66      	ldr	r2, [pc, #408]	@ (800acc0 <HAL_DMA_IRQHandler+0x400>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d040      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a64      	ldr	r2, [pc, #400]	@ (800acc4 <HAL_DMA_IRQHandler+0x404>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d03b      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a63      	ldr	r2, [pc, #396]	@ (800acc8 <HAL_DMA_IRQHandler+0x408>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d036      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a61      	ldr	r2, [pc, #388]	@ (800accc <HAL_DMA_IRQHandler+0x40c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d031      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a60      	ldr	r2, [pc, #384]	@ (800acd0 <HAL_DMA_IRQHandler+0x410>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d02c      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a5e      	ldr	r2, [pc, #376]	@ (800acd4 <HAL_DMA_IRQHandler+0x414>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d027      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a5d      	ldr	r2, [pc, #372]	@ (800acd8 <HAL_DMA_IRQHandler+0x418>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d022      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a5b      	ldr	r2, [pc, #364]	@ (800acdc <HAL_DMA_IRQHandler+0x41c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d01d      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a5a      	ldr	r2, [pc, #360]	@ (800ace0 <HAL_DMA_IRQHandler+0x420>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d018      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a58      	ldr	r2, [pc, #352]	@ (800ace4 <HAL_DMA_IRQHandler+0x424>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d013      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a57      	ldr	r2, [pc, #348]	@ (800ace8 <HAL_DMA_IRQHandler+0x428>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00e      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a55      	ldr	r2, [pc, #340]	@ (800acec <HAL_DMA_IRQHandler+0x42c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d009      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a54      	ldr	r2, [pc, #336]	@ (800acf0 <HAL_DMA_IRQHandler+0x430>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d004      	beq.n	800abae <HAL_DMA_IRQHandler+0x2ee>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a52      	ldr	r2, [pc, #328]	@ (800acf4 <HAL_DMA_IRQHandler+0x434>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d10a      	bne.n	800abc4 <HAL_DMA_IRQHandler+0x304>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bf14      	ite	ne
 800abbc:	2301      	movne	r3, #1
 800abbe:	2300      	moveq	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	e003      	b.n	800abcc <HAL_DMA_IRQHandler+0x30c>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00d      	beq.n	800abec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abd4:	f003 031f 	and.w	r3, r3, #31
 800abd8:	2201      	movs	r2, #1
 800abda:	409a      	lsls	r2, r3
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe4:	f043 0202 	orr.w	r2, r3, #2
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	2204      	movs	r2, #4
 800abf6:	409a      	lsls	r2, r3
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	4013      	ands	r3, r2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 808f 	beq.w	800ad20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a2c      	ldr	r2, [pc, #176]	@ (800acb8 <HAL_DMA_IRQHandler+0x3f8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d04a      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a2a      	ldr	r2, [pc, #168]	@ (800acbc <HAL_DMA_IRQHandler+0x3fc>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d045      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a29      	ldr	r2, [pc, #164]	@ (800acc0 <HAL_DMA_IRQHandler+0x400>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d040      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a27      	ldr	r2, [pc, #156]	@ (800acc4 <HAL_DMA_IRQHandler+0x404>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d03b      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a26      	ldr	r2, [pc, #152]	@ (800acc8 <HAL_DMA_IRQHandler+0x408>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d036      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a24      	ldr	r2, [pc, #144]	@ (800accc <HAL_DMA_IRQHandler+0x40c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d031      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a23      	ldr	r2, [pc, #140]	@ (800acd0 <HAL_DMA_IRQHandler+0x410>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d02c      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a21      	ldr	r2, [pc, #132]	@ (800acd4 <HAL_DMA_IRQHandler+0x414>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d027      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a20      	ldr	r2, [pc, #128]	@ (800acd8 <HAL_DMA_IRQHandler+0x418>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d022      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a1e      	ldr	r2, [pc, #120]	@ (800acdc <HAL_DMA_IRQHandler+0x41c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d01d      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a1d      	ldr	r2, [pc, #116]	@ (800ace0 <HAL_DMA_IRQHandler+0x420>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d018      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a1b      	ldr	r2, [pc, #108]	@ (800ace4 <HAL_DMA_IRQHandler+0x424>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d013      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ace8 <HAL_DMA_IRQHandler+0x428>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d00e      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a18      	ldr	r2, [pc, #96]	@ (800acec <HAL_DMA_IRQHandler+0x42c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d009      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a17      	ldr	r2, [pc, #92]	@ (800acf0 <HAL_DMA_IRQHandler+0x430>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d004      	beq.n	800aca2 <HAL_DMA_IRQHandler+0x3e2>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <HAL_DMA_IRQHandler+0x434>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d12a      	bne.n	800acf8 <HAL_DMA_IRQHandler+0x438>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	bf14      	ite	ne
 800acb0:	2301      	movne	r3, #1
 800acb2:	2300      	moveq	r3, #0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	e023      	b.n	800ad00 <HAL_DMA_IRQHandler+0x440>
 800acb8:	40020010 	.word	0x40020010
 800acbc:	40020028 	.word	0x40020028
 800acc0:	40020040 	.word	0x40020040
 800acc4:	40020058 	.word	0x40020058
 800acc8:	40020070 	.word	0x40020070
 800accc:	40020088 	.word	0x40020088
 800acd0:	400200a0 	.word	0x400200a0
 800acd4:	400200b8 	.word	0x400200b8
 800acd8:	40020410 	.word	0x40020410
 800acdc:	40020428 	.word	0x40020428
 800ace0:	40020440 	.word	0x40020440
 800ace4:	40020458 	.word	0x40020458
 800ace8:	40020470 	.word	0x40020470
 800acec:	40020488 	.word	0x40020488
 800acf0:	400204a0 	.word	0x400204a0
 800acf4:	400204b8 	.word	0x400204b8
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2300      	movs	r3, #0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad08:	f003 031f 	and.w	r3, r3, #31
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	409a      	lsls	r2, r3
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad18:	f043 0204 	orr.w	r2, r3, #4
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	2210      	movs	r2, #16
 800ad2a:	409a      	lsls	r2, r3
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80a6 	beq.w	800ae82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a85      	ldr	r2, [pc, #532]	@ (800af50 <HAL_DMA_IRQHandler+0x690>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d04a      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a83      	ldr	r2, [pc, #524]	@ (800af54 <HAL_DMA_IRQHandler+0x694>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d045      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a82      	ldr	r2, [pc, #520]	@ (800af58 <HAL_DMA_IRQHandler+0x698>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d040      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a80      	ldr	r2, [pc, #512]	@ (800af5c <HAL_DMA_IRQHandler+0x69c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d03b      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a7f      	ldr	r2, [pc, #508]	@ (800af60 <HAL_DMA_IRQHandler+0x6a0>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d036      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a7d      	ldr	r2, [pc, #500]	@ (800af64 <HAL_DMA_IRQHandler+0x6a4>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d031      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a7c      	ldr	r2, [pc, #496]	@ (800af68 <HAL_DMA_IRQHandler+0x6a8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d02c      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a7a      	ldr	r2, [pc, #488]	@ (800af6c <HAL_DMA_IRQHandler+0x6ac>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d027      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a79      	ldr	r2, [pc, #484]	@ (800af70 <HAL_DMA_IRQHandler+0x6b0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d022      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a77      	ldr	r2, [pc, #476]	@ (800af74 <HAL_DMA_IRQHandler+0x6b4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d01d      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a76      	ldr	r2, [pc, #472]	@ (800af78 <HAL_DMA_IRQHandler+0x6b8>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d018      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a74      	ldr	r2, [pc, #464]	@ (800af7c <HAL_DMA_IRQHandler+0x6bc>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d013      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a73      	ldr	r2, [pc, #460]	@ (800af80 <HAL_DMA_IRQHandler+0x6c0>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d00e      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a71      	ldr	r2, [pc, #452]	@ (800af84 <HAL_DMA_IRQHandler+0x6c4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d009      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a70      	ldr	r2, [pc, #448]	@ (800af88 <HAL_DMA_IRQHandler+0x6c8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d004      	beq.n	800add6 <HAL_DMA_IRQHandler+0x516>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a6e      	ldr	r2, [pc, #440]	@ (800af8c <HAL_DMA_IRQHandler+0x6cc>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d10a      	bne.n	800adec <HAL_DMA_IRQHandler+0x52c>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bf14      	ite	ne
 800ade4:	2301      	movne	r3, #1
 800ade6:	2300      	moveq	r3, #0
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	e009      	b.n	800ae00 <HAL_DMA_IRQHandler+0x540>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bf14      	ite	ne
 800adfa:	2301      	movne	r3, #1
 800adfc:	2300      	moveq	r3, #0
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d03e      	beq.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae08:	f003 031f 	and.w	r3, r3, #31
 800ae0c:	2210      	movs	r2, #16
 800ae0e:	409a      	lsls	r2, r3
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d018      	beq.n	800ae54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d024      	beq.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
 800ae40:	e01f      	b.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01b      	beq.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
 800ae52:	e016      	b.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d107      	bne.n	800ae72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0208 	bic.w	r2, r2, #8
 800ae70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae86:	f003 031f 	and.w	r3, r3, #31
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	409a      	lsls	r2, r3
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	4013      	ands	r3, r2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 8110 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a2c      	ldr	r2, [pc, #176]	@ (800af50 <HAL_DMA_IRQHandler+0x690>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d04a      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a2b      	ldr	r2, [pc, #172]	@ (800af54 <HAL_DMA_IRQHandler+0x694>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d045      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a29      	ldr	r2, [pc, #164]	@ (800af58 <HAL_DMA_IRQHandler+0x698>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d040      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a28      	ldr	r2, [pc, #160]	@ (800af5c <HAL_DMA_IRQHandler+0x69c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d03b      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a26      	ldr	r2, [pc, #152]	@ (800af60 <HAL_DMA_IRQHandler+0x6a0>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d036      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a25      	ldr	r2, [pc, #148]	@ (800af64 <HAL_DMA_IRQHandler+0x6a4>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d031      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a23      	ldr	r2, [pc, #140]	@ (800af68 <HAL_DMA_IRQHandler+0x6a8>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d02c      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a22      	ldr	r2, [pc, #136]	@ (800af6c <HAL_DMA_IRQHandler+0x6ac>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d027      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a20      	ldr	r2, [pc, #128]	@ (800af70 <HAL_DMA_IRQHandler+0x6b0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d022      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1f      	ldr	r2, [pc, #124]	@ (800af74 <HAL_DMA_IRQHandler+0x6b4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d01d      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a1d      	ldr	r2, [pc, #116]	@ (800af78 <HAL_DMA_IRQHandler+0x6b8>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d018      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a1c      	ldr	r2, [pc, #112]	@ (800af7c <HAL_DMA_IRQHandler+0x6bc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d013      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a1a      	ldr	r2, [pc, #104]	@ (800af80 <HAL_DMA_IRQHandler+0x6c0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d00e      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a19      	ldr	r2, [pc, #100]	@ (800af84 <HAL_DMA_IRQHandler+0x6c4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d009      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a17      	ldr	r2, [pc, #92]	@ (800af88 <HAL_DMA_IRQHandler+0x6c8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_DMA_IRQHandler+0x678>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a16      	ldr	r2, [pc, #88]	@ (800af8c <HAL_DMA_IRQHandler+0x6cc>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d12b      	bne.n	800af90 <HAL_DMA_IRQHandler+0x6d0>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0310 	and.w	r3, r3, #16
 800af42:	2b00      	cmp	r3, #0
 800af44:	bf14      	ite	ne
 800af46:	2301      	movne	r3, #1
 800af48:	2300      	moveq	r3, #0
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	e02a      	b.n	800afa4 <HAL_DMA_IRQHandler+0x6e4>
 800af4e:	bf00      	nop
 800af50:	40020010 	.word	0x40020010
 800af54:	40020028 	.word	0x40020028
 800af58:	40020040 	.word	0x40020040
 800af5c:	40020058 	.word	0x40020058
 800af60:	40020070 	.word	0x40020070
 800af64:	40020088 	.word	0x40020088
 800af68:	400200a0 	.word	0x400200a0
 800af6c:	400200b8 	.word	0x400200b8
 800af70:	40020410 	.word	0x40020410
 800af74:	40020428 	.word	0x40020428
 800af78:	40020440 	.word	0x40020440
 800af7c:	40020458 	.word	0x40020458
 800af80:	40020470 	.word	0x40020470
 800af84:	40020488 	.word	0x40020488
 800af88:	400204a0 	.word	0x400204a0
 800af8c:	400204b8 	.word	0x400204b8
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	bf14      	ite	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	2300      	moveq	r3, #0
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8087 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afae:	f003 031f 	and.w	r3, r3, #31
 800afb2:	2220      	movs	r2, #32
 800afb4:	409a      	lsls	r2, r3
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d139      	bne.n	800b03a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0216 	bic.w	r2, r2, #22
 800afd4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	695a      	ldr	r2, [r3, #20]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afe4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d103      	bne.n	800aff6 <HAL_DMA_IRQHandler+0x736>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f022 0208 	bic.w	r2, r2, #8
 800b004:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b00a:	f003 031f 	and.w	r3, r3, #31
 800b00e:	223f      	movs	r2, #63	@ 0x3f
 800b010:	409a      	lsls	r2, r3
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 834a 	beq.w	800b6c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	4798      	blx	r3
          }
          return;
 800b038:	e344      	b.n	800b6c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d018      	beq.n	800b07a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d108      	bne.n	800b068 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d02c      	beq.n	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
 800b066:	e027      	b.n	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d023      	beq.n	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
 800b078:	e01e      	b.n	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10f      	bne.n	800b0a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f022 0210 	bic.w	r2, r2, #16
 800b096:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 8306 	beq.w	800b6ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 8088 	beq.w	800b1e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2204      	movs	r2, #4
 800b0d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a7a      	ldr	r2, [pc, #488]	@ (800b2c8 <HAL_DMA_IRQHandler+0xa08>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d04a      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a79      	ldr	r2, [pc, #484]	@ (800b2cc <HAL_DMA_IRQHandler+0xa0c>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d045      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a77      	ldr	r2, [pc, #476]	@ (800b2d0 <HAL_DMA_IRQHandler+0xa10>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d040      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a76      	ldr	r2, [pc, #472]	@ (800b2d4 <HAL_DMA_IRQHandler+0xa14>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d03b      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a74      	ldr	r2, [pc, #464]	@ (800b2d8 <HAL_DMA_IRQHandler+0xa18>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d036      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a73      	ldr	r2, [pc, #460]	@ (800b2dc <HAL_DMA_IRQHandler+0xa1c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d031      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a71      	ldr	r2, [pc, #452]	@ (800b2e0 <HAL_DMA_IRQHandler+0xa20>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d02c      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a70      	ldr	r2, [pc, #448]	@ (800b2e4 <HAL_DMA_IRQHandler+0xa24>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d027      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a6e      	ldr	r2, [pc, #440]	@ (800b2e8 <HAL_DMA_IRQHandler+0xa28>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d022      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a6d      	ldr	r2, [pc, #436]	@ (800b2ec <HAL_DMA_IRQHandler+0xa2c>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d01d      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a6b      	ldr	r2, [pc, #428]	@ (800b2f0 <HAL_DMA_IRQHandler+0xa30>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d018      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a6a      	ldr	r2, [pc, #424]	@ (800b2f4 <HAL_DMA_IRQHandler+0xa34>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d013      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a68      	ldr	r2, [pc, #416]	@ (800b2f8 <HAL_DMA_IRQHandler+0xa38>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00e      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a67      	ldr	r2, [pc, #412]	@ (800b2fc <HAL_DMA_IRQHandler+0xa3c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d009      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a65      	ldr	r2, [pc, #404]	@ (800b300 <HAL_DMA_IRQHandler+0xa40>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d004      	beq.n	800b178 <HAL_DMA_IRQHandler+0x8b8>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a64      	ldr	r2, [pc, #400]	@ (800b304 <HAL_DMA_IRQHandler+0xa44>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d108      	bne.n	800b18a <HAL_DMA_IRQHandler+0x8ca>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 0201 	bic.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e007      	b.n	800b19a <HAL_DMA_IRQHandler+0x8da>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f022 0201 	bic.w	r2, r2, #1
 800b198:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3301      	adds	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d307      	bcc.n	800b1b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1f2      	bne.n	800b19a <HAL_DMA_IRQHandler+0x8da>
 800b1b4:	e000      	b.n	800b1b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b1b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2203      	movs	r2, #3
 800b1ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b1ce:	e003      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 8272 	beq.w	800b6ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	4798      	blx	r3
 800b1f2:	e26c      	b.n	800b6ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a43      	ldr	r2, [pc, #268]	@ (800b308 <HAL_DMA_IRQHandler+0xa48>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d022      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a42      	ldr	r2, [pc, #264]	@ (800b30c <HAL_DMA_IRQHandler+0xa4c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d01d      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a40      	ldr	r2, [pc, #256]	@ (800b310 <HAL_DMA_IRQHandler+0xa50>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d018      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a3f      	ldr	r2, [pc, #252]	@ (800b314 <HAL_DMA_IRQHandler+0xa54>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d013      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a3d      	ldr	r2, [pc, #244]	@ (800b318 <HAL_DMA_IRQHandler+0xa58>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d00e      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a3c      	ldr	r2, [pc, #240]	@ (800b31c <HAL_DMA_IRQHandler+0xa5c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d009      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a3a      	ldr	r2, [pc, #232]	@ (800b320 <HAL_DMA_IRQHandler+0xa60>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d004      	beq.n	800b244 <HAL_DMA_IRQHandler+0x984>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a39      	ldr	r2, [pc, #228]	@ (800b324 <HAL_DMA_IRQHandler+0xa64>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d101      	bne.n	800b248 <HAL_DMA_IRQHandler+0x988>
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <HAL_DMA_IRQHandler+0x98a>
 800b248:	2300      	movs	r3, #0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 823f 	beq.w	800b6ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b25c:	f003 031f 	and.w	r3, r3, #31
 800b260:	2204      	movs	r2, #4
 800b262:	409a      	lsls	r2, r3
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	4013      	ands	r3, r2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80cd 	beq.w	800b408 <HAL_DMA_IRQHandler+0xb48>
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 80c7 	beq.w	800b408 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b27e:	f003 031f 	and.w	r3, r3, #31
 800b282:	2204      	movs	r2, #4
 800b284:	409a      	lsls	r2, r3
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d049      	beq.n	800b328 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d109      	bne.n	800b2b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8210 	beq.w	800b6c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2b0:	e20a      	b.n	800b6c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 8206 	beq.w	800b6c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2c4:	e200      	b.n	800b6c8 <HAL_DMA_IRQHandler+0xe08>
 800b2c6:	bf00      	nop
 800b2c8:	40020010 	.word	0x40020010
 800b2cc:	40020028 	.word	0x40020028
 800b2d0:	40020040 	.word	0x40020040
 800b2d4:	40020058 	.word	0x40020058
 800b2d8:	40020070 	.word	0x40020070
 800b2dc:	40020088 	.word	0x40020088
 800b2e0:	400200a0 	.word	0x400200a0
 800b2e4:	400200b8 	.word	0x400200b8
 800b2e8:	40020410 	.word	0x40020410
 800b2ec:	40020428 	.word	0x40020428
 800b2f0:	40020440 	.word	0x40020440
 800b2f4:	40020458 	.word	0x40020458
 800b2f8:	40020470 	.word	0x40020470
 800b2fc:	40020488 	.word	0x40020488
 800b300:	400204a0 	.word	0x400204a0
 800b304:	400204b8 	.word	0x400204b8
 800b308:	58025408 	.word	0x58025408
 800b30c:	5802541c 	.word	0x5802541c
 800b310:	58025430 	.word	0x58025430
 800b314:	58025444 	.word	0x58025444
 800b318:	58025458 	.word	0x58025458
 800b31c:	5802546c 	.word	0x5802546c
 800b320:	58025480 	.word	0x58025480
 800b324:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d160      	bne.n	800b3f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a7f      	ldr	r2, [pc, #508]	@ (800b534 <HAL_DMA_IRQHandler+0xc74>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d04a      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a7d      	ldr	r2, [pc, #500]	@ (800b538 <HAL_DMA_IRQHandler+0xc78>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d045      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a7c      	ldr	r2, [pc, #496]	@ (800b53c <HAL_DMA_IRQHandler+0xc7c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d040      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a7a      	ldr	r2, [pc, #488]	@ (800b540 <HAL_DMA_IRQHandler+0xc80>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d03b      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a79      	ldr	r2, [pc, #484]	@ (800b544 <HAL_DMA_IRQHandler+0xc84>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d036      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a77      	ldr	r2, [pc, #476]	@ (800b548 <HAL_DMA_IRQHandler+0xc88>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d031      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a76      	ldr	r2, [pc, #472]	@ (800b54c <HAL_DMA_IRQHandler+0xc8c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d02c      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a74      	ldr	r2, [pc, #464]	@ (800b550 <HAL_DMA_IRQHandler+0xc90>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d027      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a73      	ldr	r2, [pc, #460]	@ (800b554 <HAL_DMA_IRQHandler+0xc94>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d022      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a71      	ldr	r2, [pc, #452]	@ (800b558 <HAL_DMA_IRQHandler+0xc98>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d01d      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a70      	ldr	r2, [pc, #448]	@ (800b55c <HAL_DMA_IRQHandler+0xc9c>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d018      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a6e      	ldr	r2, [pc, #440]	@ (800b560 <HAL_DMA_IRQHandler+0xca0>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d013      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a6d      	ldr	r2, [pc, #436]	@ (800b564 <HAL_DMA_IRQHandler+0xca4>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d00e      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a6b      	ldr	r2, [pc, #428]	@ (800b568 <HAL_DMA_IRQHandler+0xca8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d009      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a6a      	ldr	r2, [pc, #424]	@ (800b56c <HAL_DMA_IRQHandler+0xcac>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d004      	beq.n	800b3d2 <HAL_DMA_IRQHandler+0xb12>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a68      	ldr	r2, [pc, #416]	@ (800b570 <HAL_DMA_IRQHandler+0xcb0>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d108      	bne.n	800b3e4 <HAL_DMA_IRQHandler+0xb24>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0208 	bic.w	r2, r2, #8
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	e007      	b.n	800b3f4 <HAL_DMA_IRQHandler+0xb34>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0204 	bic.w	r2, r2, #4
 800b3f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 8165 	beq.w	800b6c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b406:	e15f      	b.n	800b6c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b40c:	f003 031f 	and.w	r3, r3, #31
 800b410:	2202      	movs	r2, #2
 800b412:	409a      	lsls	r2, r3
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80c5 	beq.w	800b5a8 <HAL_DMA_IRQHandler+0xce8>
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80bf 	beq.w	800b5a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b42e:	f003 031f 	and.w	r3, r3, #31
 800b432:	2202      	movs	r2, #2
 800b434:	409a      	lsls	r2, r3
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d018      	beq.n	800b476 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d109      	bne.n	800b462 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 813a 	beq.w	800b6cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b460:	e134      	b.n	800b6cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 8130 	beq.w	800b6cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b474:	e12a      	b.n	800b6cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8089 	bne.w	800b594 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a2b      	ldr	r2, [pc, #172]	@ (800b534 <HAL_DMA_IRQHandler+0xc74>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d04a      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a29      	ldr	r2, [pc, #164]	@ (800b538 <HAL_DMA_IRQHandler+0xc78>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d045      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a28      	ldr	r2, [pc, #160]	@ (800b53c <HAL_DMA_IRQHandler+0xc7c>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d040      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a26      	ldr	r2, [pc, #152]	@ (800b540 <HAL_DMA_IRQHandler+0xc80>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d03b      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a25      	ldr	r2, [pc, #148]	@ (800b544 <HAL_DMA_IRQHandler+0xc84>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d036      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a23      	ldr	r2, [pc, #140]	@ (800b548 <HAL_DMA_IRQHandler+0xc88>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d031      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a22      	ldr	r2, [pc, #136]	@ (800b54c <HAL_DMA_IRQHandler+0xc8c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d02c      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a20      	ldr	r2, [pc, #128]	@ (800b550 <HAL_DMA_IRQHandler+0xc90>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d027      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b554 <HAL_DMA_IRQHandler+0xc94>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d022      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b558 <HAL_DMA_IRQHandler+0xc98>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d01d      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b55c <HAL_DMA_IRQHandler+0xc9c>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d018      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	@ (800b560 <HAL_DMA_IRQHandler+0xca0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d013      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a19      	ldr	r2, [pc, #100]	@ (800b564 <HAL_DMA_IRQHandler+0xca4>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00e      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a17      	ldr	r2, [pc, #92]	@ (800b568 <HAL_DMA_IRQHandler+0xca8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d009      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a16      	ldr	r2, [pc, #88]	@ (800b56c <HAL_DMA_IRQHandler+0xcac>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d004      	beq.n	800b522 <HAL_DMA_IRQHandler+0xc62>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a14      	ldr	r2, [pc, #80]	@ (800b570 <HAL_DMA_IRQHandler+0xcb0>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d128      	bne.n	800b574 <HAL_DMA_IRQHandler+0xcb4>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f022 0214 	bic.w	r2, r2, #20
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e027      	b.n	800b584 <HAL_DMA_IRQHandler+0xcc4>
 800b534:	40020010 	.word	0x40020010
 800b538:	40020028 	.word	0x40020028
 800b53c:	40020040 	.word	0x40020040
 800b540:	40020058 	.word	0x40020058
 800b544:	40020070 	.word	0x40020070
 800b548:	40020088 	.word	0x40020088
 800b54c:	400200a0 	.word	0x400200a0
 800b550:	400200b8 	.word	0x400200b8
 800b554:	40020410 	.word	0x40020410
 800b558:	40020428 	.word	0x40020428
 800b55c:	40020440 	.word	0x40020440
 800b560:	40020458 	.word	0x40020458
 800b564:	40020470 	.word	0x40020470
 800b568:	40020488 	.word	0x40020488
 800b56c:	400204a0 	.word	0x400204a0
 800b570:	400204b8 	.word	0x400204b8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 020a 	bic.w	r2, r2, #10
 800b582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8097 	beq.w	800b6cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5a6:	e091      	b.n	800b6cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5ac:	f003 031f 	and.w	r3, r3, #31
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	409a      	lsls	r2, r3
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8088 	beq.w	800b6ce <HAL_DMA_IRQHandler+0xe0e>
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8082 	beq.w	800b6ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a41      	ldr	r2, [pc, #260]	@ (800b6d4 <HAL_DMA_IRQHandler+0xe14>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d04a      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a3f      	ldr	r2, [pc, #252]	@ (800b6d8 <HAL_DMA_IRQHandler+0xe18>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d045      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a3e      	ldr	r2, [pc, #248]	@ (800b6dc <HAL_DMA_IRQHandler+0xe1c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d040      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b6e0 <HAL_DMA_IRQHandler+0xe20>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d03b      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a3b      	ldr	r2, [pc, #236]	@ (800b6e4 <HAL_DMA_IRQHandler+0xe24>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d036      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a39      	ldr	r2, [pc, #228]	@ (800b6e8 <HAL_DMA_IRQHandler+0xe28>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d031      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a38      	ldr	r2, [pc, #224]	@ (800b6ec <HAL_DMA_IRQHandler+0xe2c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d02c      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a36      	ldr	r2, [pc, #216]	@ (800b6f0 <HAL_DMA_IRQHandler+0xe30>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d027      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a35      	ldr	r2, [pc, #212]	@ (800b6f4 <HAL_DMA_IRQHandler+0xe34>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d022      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a33      	ldr	r2, [pc, #204]	@ (800b6f8 <HAL_DMA_IRQHandler+0xe38>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d01d      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a32      	ldr	r2, [pc, #200]	@ (800b6fc <HAL_DMA_IRQHandler+0xe3c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d018      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a30      	ldr	r2, [pc, #192]	@ (800b700 <HAL_DMA_IRQHandler+0xe40>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d013      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a2f      	ldr	r2, [pc, #188]	@ (800b704 <HAL_DMA_IRQHandler+0xe44>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d00e      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a2d      	ldr	r2, [pc, #180]	@ (800b708 <HAL_DMA_IRQHandler+0xe48>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d009      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a2c      	ldr	r2, [pc, #176]	@ (800b70c <HAL_DMA_IRQHandler+0xe4c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d004      	beq.n	800b66a <HAL_DMA_IRQHandler+0xdaa>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a2a      	ldr	r2, [pc, #168]	@ (800b710 <HAL_DMA_IRQHandler+0xe50>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d108      	bne.n	800b67c <HAL_DMA_IRQHandler+0xdbc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f022 021c 	bic.w	r2, r2, #28
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e007      	b.n	800b68c <HAL_DMA_IRQHandler+0xdcc>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f022 020e 	bic.w	r2, r2, #14
 800b68a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	2201      	movs	r2, #1
 800b696:	409a      	lsls	r2, r3
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d009      	beq.n	800b6ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
 800b6c2:	e004      	b.n	800b6ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b6c4:	bf00      	nop
 800b6c6:	e002      	b.n	800b6ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b6c8:	bf00      	nop
 800b6ca:	e000      	b.n	800b6ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b6cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b6ce:	3728      	adds	r7, #40	@ 0x28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	40020010 	.word	0x40020010
 800b6d8:	40020028 	.word	0x40020028
 800b6dc:	40020040 	.word	0x40020040
 800b6e0:	40020058 	.word	0x40020058
 800b6e4:	40020070 	.word	0x40020070
 800b6e8:	40020088 	.word	0x40020088
 800b6ec:	400200a0 	.word	0x400200a0
 800b6f0:	400200b8 	.word	0x400200b8
 800b6f4:	40020410 	.word	0x40020410
 800b6f8:	40020428 	.word	0x40020428
 800b6fc:	40020440 	.word	0x40020440
 800b700:	40020458 	.word	0x40020458
 800b704:	40020470 	.word	0x40020470
 800b708:	40020488 	.word	0x40020488
 800b70c:	400204a0 	.word	0x400204a0
 800b710:	400204b8 	.word	0x400204b8

0800b714 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b73e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b744:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a7f      	ldr	r2, [pc, #508]	@ (800b948 <DMA_SetConfig+0x21c>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d072      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a7d      	ldr	r2, [pc, #500]	@ (800b94c <DMA_SetConfig+0x220>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d06d      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a7c      	ldr	r2, [pc, #496]	@ (800b950 <DMA_SetConfig+0x224>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d068      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a7a      	ldr	r2, [pc, #488]	@ (800b954 <DMA_SetConfig+0x228>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d063      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a79      	ldr	r2, [pc, #484]	@ (800b958 <DMA_SetConfig+0x22c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d05e      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a77      	ldr	r2, [pc, #476]	@ (800b95c <DMA_SetConfig+0x230>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d059      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a76      	ldr	r2, [pc, #472]	@ (800b960 <DMA_SetConfig+0x234>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d054      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a74      	ldr	r2, [pc, #464]	@ (800b964 <DMA_SetConfig+0x238>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d04f      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a73      	ldr	r2, [pc, #460]	@ (800b968 <DMA_SetConfig+0x23c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d04a      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a71      	ldr	r2, [pc, #452]	@ (800b96c <DMA_SetConfig+0x240>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d045      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a70      	ldr	r2, [pc, #448]	@ (800b970 <DMA_SetConfig+0x244>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d040      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a6e      	ldr	r2, [pc, #440]	@ (800b974 <DMA_SetConfig+0x248>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d03b      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a6d      	ldr	r2, [pc, #436]	@ (800b978 <DMA_SetConfig+0x24c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d036      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a6b      	ldr	r2, [pc, #428]	@ (800b97c <DMA_SetConfig+0x250>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d031      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a6a      	ldr	r2, [pc, #424]	@ (800b980 <DMA_SetConfig+0x254>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d02c      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a68      	ldr	r2, [pc, #416]	@ (800b984 <DMA_SetConfig+0x258>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d027      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a67      	ldr	r2, [pc, #412]	@ (800b988 <DMA_SetConfig+0x25c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d022      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a65      	ldr	r2, [pc, #404]	@ (800b98c <DMA_SetConfig+0x260>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d01d      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a64      	ldr	r2, [pc, #400]	@ (800b990 <DMA_SetConfig+0x264>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d018      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a62      	ldr	r2, [pc, #392]	@ (800b994 <DMA_SetConfig+0x268>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d013      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a61      	ldr	r2, [pc, #388]	@ (800b998 <DMA_SetConfig+0x26c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00e      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a5f      	ldr	r2, [pc, #380]	@ (800b99c <DMA_SetConfig+0x270>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d009      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a5e      	ldr	r2, [pc, #376]	@ (800b9a0 <DMA_SetConfig+0x274>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d004      	beq.n	800b836 <DMA_SetConfig+0x10a>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a5c      	ldr	r2, [pc, #368]	@ (800b9a4 <DMA_SetConfig+0x278>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d101      	bne.n	800b83a <DMA_SetConfig+0x10e>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <DMA_SetConfig+0x110>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00d      	beq.n	800b85c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b848:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b85a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a39      	ldr	r2, [pc, #228]	@ (800b948 <DMA_SetConfig+0x21c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d04a      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a38      	ldr	r2, [pc, #224]	@ (800b94c <DMA_SetConfig+0x220>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d045      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a36      	ldr	r2, [pc, #216]	@ (800b950 <DMA_SetConfig+0x224>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d040      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a35      	ldr	r2, [pc, #212]	@ (800b954 <DMA_SetConfig+0x228>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d03b      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a33      	ldr	r2, [pc, #204]	@ (800b958 <DMA_SetConfig+0x22c>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d036      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a32      	ldr	r2, [pc, #200]	@ (800b95c <DMA_SetConfig+0x230>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d031      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a30      	ldr	r2, [pc, #192]	@ (800b960 <DMA_SetConfig+0x234>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d02c      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a2f      	ldr	r2, [pc, #188]	@ (800b964 <DMA_SetConfig+0x238>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d027      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b968 <DMA_SetConfig+0x23c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d022      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b96c <DMA_SetConfig+0x240>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d01d      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a2a      	ldr	r2, [pc, #168]	@ (800b970 <DMA_SetConfig+0x244>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d018      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a29      	ldr	r2, [pc, #164]	@ (800b974 <DMA_SetConfig+0x248>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d013      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a27      	ldr	r2, [pc, #156]	@ (800b978 <DMA_SetConfig+0x24c>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d00e      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a26      	ldr	r2, [pc, #152]	@ (800b97c <DMA_SetConfig+0x250>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d009      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a24      	ldr	r2, [pc, #144]	@ (800b980 <DMA_SetConfig+0x254>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d004      	beq.n	800b8fc <DMA_SetConfig+0x1d0>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a23      	ldr	r2, [pc, #140]	@ (800b984 <DMA_SetConfig+0x258>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d101      	bne.n	800b900 <DMA_SetConfig+0x1d4>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <DMA_SetConfig+0x1d6>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d059      	beq.n	800b9ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b90a:	f003 031f 	and.w	r3, r3, #31
 800b90e:	223f      	movs	r2, #63	@ 0x3f
 800b910:	409a      	lsls	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b924:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	2b40      	cmp	r3, #64	@ 0x40
 800b934:	d138      	bne.n	800b9a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b946:	e086      	b.n	800ba56 <DMA_SetConfig+0x32a>
 800b948:	40020010 	.word	0x40020010
 800b94c:	40020028 	.word	0x40020028
 800b950:	40020040 	.word	0x40020040
 800b954:	40020058 	.word	0x40020058
 800b958:	40020070 	.word	0x40020070
 800b95c:	40020088 	.word	0x40020088
 800b960:	400200a0 	.word	0x400200a0
 800b964:	400200b8 	.word	0x400200b8
 800b968:	40020410 	.word	0x40020410
 800b96c:	40020428 	.word	0x40020428
 800b970:	40020440 	.word	0x40020440
 800b974:	40020458 	.word	0x40020458
 800b978:	40020470 	.word	0x40020470
 800b97c:	40020488 	.word	0x40020488
 800b980:	400204a0 	.word	0x400204a0
 800b984:	400204b8 	.word	0x400204b8
 800b988:	58025408 	.word	0x58025408
 800b98c:	5802541c 	.word	0x5802541c
 800b990:	58025430 	.word	0x58025430
 800b994:	58025444 	.word	0x58025444
 800b998:	58025458 	.word	0x58025458
 800b99c:	5802546c 	.word	0x5802546c
 800b9a0:	58025480 	.word	0x58025480
 800b9a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	60da      	str	r2, [r3, #12]
}
 800b9b8:	e04d      	b.n	800ba56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a29      	ldr	r2, [pc, #164]	@ (800ba64 <DMA_SetConfig+0x338>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d022      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a27      	ldr	r2, [pc, #156]	@ (800ba68 <DMA_SetConfig+0x33c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d01d      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a26      	ldr	r2, [pc, #152]	@ (800ba6c <DMA_SetConfig+0x340>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d018      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a24      	ldr	r2, [pc, #144]	@ (800ba70 <DMA_SetConfig+0x344>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d013      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a23      	ldr	r2, [pc, #140]	@ (800ba74 <DMA_SetConfig+0x348>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d00e      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a21      	ldr	r2, [pc, #132]	@ (800ba78 <DMA_SetConfig+0x34c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d009      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a20      	ldr	r2, [pc, #128]	@ (800ba7c <DMA_SetConfig+0x350>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d004      	beq.n	800ba0a <DMA_SetConfig+0x2de>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a1e      	ldr	r2, [pc, #120]	@ (800ba80 <DMA_SetConfig+0x354>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d101      	bne.n	800ba0e <DMA_SetConfig+0x2e2>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <DMA_SetConfig+0x2e4>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d020      	beq.n	800ba56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba18:	f003 031f 	and.w	r3, r3, #31
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	409a      	lsls	r2, r3
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b40      	cmp	r3, #64	@ 0x40
 800ba32:	d108      	bne.n	800ba46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	60da      	str	r2, [r3, #12]
}
 800ba44:	e007      	b.n	800ba56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	60da      	str	r2, [r3, #12]
}
 800ba56:	bf00      	nop
 800ba58:	371c      	adds	r7, #28
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	58025408 	.word	0x58025408
 800ba68:	5802541c 	.word	0x5802541c
 800ba6c:	58025430 	.word	0x58025430
 800ba70:	58025444 	.word	0x58025444
 800ba74:	58025458 	.word	0x58025458
 800ba78:	5802546c 	.word	0x5802546c
 800ba7c:	58025480 	.word	0x58025480
 800ba80:	58025494 	.word	0x58025494

0800ba84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a42      	ldr	r2, [pc, #264]	@ (800bb9c <DMA_CalcBaseAndBitshift+0x118>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d04a      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a41      	ldr	r2, [pc, #260]	@ (800bba0 <DMA_CalcBaseAndBitshift+0x11c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d045      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a3f      	ldr	r2, [pc, #252]	@ (800bba4 <DMA_CalcBaseAndBitshift+0x120>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d040      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a3e      	ldr	r2, [pc, #248]	@ (800bba8 <DMA_CalcBaseAndBitshift+0x124>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d03b      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a3c      	ldr	r2, [pc, #240]	@ (800bbac <DMA_CalcBaseAndBitshift+0x128>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d036      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a3b      	ldr	r2, [pc, #236]	@ (800bbb0 <DMA_CalcBaseAndBitshift+0x12c>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d031      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a39      	ldr	r2, [pc, #228]	@ (800bbb4 <DMA_CalcBaseAndBitshift+0x130>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d02c      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a38      	ldr	r2, [pc, #224]	@ (800bbb8 <DMA_CalcBaseAndBitshift+0x134>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d027      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a36      	ldr	r2, [pc, #216]	@ (800bbbc <DMA_CalcBaseAndBitshift+0x138>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d022      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a35      	ldr	r2, [pc, #212]	@ (800bbc0 <DMA_CalcBaseAndBitshift+0x13c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d01d      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a33      	ldr	r2, [pc, #204]	@ (800bbc4 <DMA_CalcBaseAndBitshift+0x140>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d018      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a32      	ldr	r2, [pc, #200]	@ (800bbc8 <DMA_CalcBaseAndBitshift+0x144>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d013      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a30      	ldr	r2, [pc, #192]	@ (800bbcc <DMA_CalcBaseAndBitshift+0x148>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d00e      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a2f      	ldr	r2, [pc, #188]	@ (800bbd0 <DMA_CalcBaseAndBitshift+0x14c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d009      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a2d      	ldr	r2, [pc, #180]	@ (800bbd4 <DMA_CalcBaseAndBitshift+0x150>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d004      	beq.n	800bb2c <DMA_CalcBaseAndBitshift+0xa8>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a2c      	ldr	r2, [pc, #176]	@ (800bbd8 <DMA_CalcBaseAndBitshift+0x154>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d101      	bne.n	800bb30 <DMA_CalcBaseAndBitshift+0xac>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <DMA_CalcBaseAndBitshift+0xae>
 800bb30:	2300      	movs	r3, #0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d024      	beq.n	800bb80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	3b10      	subs	r3, #16
 800bb3e:	4a27      	ldr	r2, [pc, #156]	@ (800bbdc <DMA_CalcBaseAndBitshift+0x158>)
 800bb40:	fba2 2303 	umull	r2, r3, r2, r3
 800bb44:	091b      	lsrs	r3, r3, #4
 800bb46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	4a24      	ldr	r2, [pc, #144]	@ (800bbe0 <DMA_CalcBaseAndBitshift+0x15c>)
 800bb50:	5cd3      	ldrb	r3, [r2, r3]
 800bb52:	461a      	mov	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d908      	bls.n	800bb70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	4b1f      	ldr	r3, [pc, #124]	@ (800bbe4 <DMA_CalcBaseAndBitshift+0x160>)
 800bb66:	4013      	ands	r3, r2
 800bb68:	1d1a      	adds	r2, r3, #4
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb6e:	e00d      	b.n	800bb8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe4 <DMA_CalcBaseAndBitshift+0x160>)
 800bb78:	4013      	ands	r3, r2
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb7e:	e005      	b.n	800bb8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	40020010 	.word	0x40020010
 800bba0:	40020028 	.word	0x40020028
 800bba4:	40020040 	.word	0x40020040
 800bba8:	40020058 	.word	0x40020058
 800bbac:	40020070 	.word	0x40020070
 800bbb0:	40020088 	.word	0x40020088
 800bbb4:	400200a0 	.word	0x400200a0
 800bbb8:	400200b8 	.word	0x400200b8
 800bbbc:	40020410 	.word	0x40020410
 800bbc0:	40020428 	.word	0x40020428
 800bbc4:	40020440 	.word	0x40020440
 800bbc8:	40020458 	.word	0x40020458
 800bbcc:	40020470 	.word	0x40020470
 800bbd0:	40020488 	.word	0x40020488
 800bbd4:	400204a0 	.word	0x400204a0
 800bbd8:	400204b8 	.word	0x400204b8
 800bbdc:	aaaaaaab 	.word	0xaaaaaaab
 800bbe0:	0801bbb4 	.word	0x0801bbb4
 800bbe4:	fffffc00 	.word	0xfffffc00

0800bbe8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d120      	bne.n	800bc3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d858      	bhi.n	800bcb6 <DMA_CheckFifoParam+0xce>
 800bc04:	a201      	add	r2, pc, #4	@ (adr r2, 800bc0c <DMA_CheckFifoParam+0x24>)
 800bc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0a:	bf00      	nop
 800bc0c:	0800bc1d 	.word	0x0800bc1d
 800bc10:	0800bc2f 	.word	0x0800bc2f
 800bc14:	0800bc1d 	.word	0x0800bc1d
 800bc18:	0800bcb7 	.word	0x0800bcb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d048      	beq.n	800bcba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc2c:	e045      	b.n	800bcba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bc36:	d142      	bne.n	800bcbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc3c:	e03f      	b.n	800bcbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc46:	d123      	bne.n	800bc90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d838      	bhi.n	800bcc2 <DMA_CheckFifoParam+0xda>
 800bc50:	a201      	add	r2, pc, #4	@ (adr r2, 800bc58 <DMA_CheckFifoParam+0x70>)
 800bc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc56:	bf00      	nop
 800bc58:	0800bc69 	.word	0x0800bc69
 800bc5c:	0800bc6f 	.word	0x0800bc6f
 800bc60:	0800bc69 	.word	0x0800bc69
 800bc64:	0800bc81 	.word	0x0800bc81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	73fb      	strb	r3, [r7, #15]
        break;
 800bc6c:	e030      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d025      	beq.n	800bcc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc7e:	e022      	b.n	800bcc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bc88:	d11f      	bne.n	800bcca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc8e:	e01c      	b.n	800bcca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d902      	bls.n	800bc9e <DMA_CheckFifoParam+0xb6>
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d003      	beq.n	800bca4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bc9c:	e018      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	73fb      	strb	r3, [r7, #15]
        break;
 800bca2:	e015      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00e      	beq.n	800bcce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb4:	e00b      	b.n	800bcce <DMA_CheckFifoParam+0xe6>
        break;
 800bcb6:	bf00      	nop
 800bcb8:	e00a      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        break;
 800bcba:	bf00      	nop
 800bcbc:	e008      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        break;
 800bcbe:	bf00      	nop
 800bcc0:	e006      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        break;
 800bcc2:	bf00      	nop
 800bcc4:	e004      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        break;
 800bcc6:	bf00      	nop
 800bcc8:	e002      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
        break;
 800bcca:	bf00      	nop
 800bccc:	e000      	b.n	800bcd0 <DMA_CheckFifoParam+0xe8>
    break;
 800bcce:	bf00      	nop
    }
  }

  return status;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop

0800bce0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a38      	ldr	r2, [pc, #224]	@ (800bdd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d022      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a36      	ldr	r2, [pc, #216]	@ (800bdd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d01d      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a35      	ldr	r2, [pc, #212]	@ (800bddc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d018      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a33      	ldr	r2, [pc, #204]	@ (800bde0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d013      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a32      	ldr	r2, [pc, #200]	@ (800bde4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00e      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a30      	ldr	r2, [pc, #192]	@ (800bde8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d009      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a2f      	ldr	r2, [pc, #188]	@ (800bdec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d004      	beq.n	800bd3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a2d      	ldr	r2, [pc, #180]	@ (800bdf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d101      	bne.n	800bd42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bd42:	2300      	movs	r3, #0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01a      	beq.n	800bd7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	3b08      	subs	r3, #8
 800bd50:	4a28      	ldr	r2, [pc, #160]	@ (800bdf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bd52:	fba2 2303 	umull	r2, r3, r2, r3
 800bd56:	091b      	lsrs	r3, r3, #4
 800bd58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4b26      	ldr	r3, [pc, #152]	@ (800bdf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a24      	ldr	r2, [pc, #144]	@ (800bdfc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bd6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f003 031f 	and.w	r3, r3, #31
 800bd74:	2201      	movs	r2, #1
 800bd76:	409a      	lsls	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bd7c:	e024      	b.n	800bdc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	3b10      	subs	r3, #16
 800bd86:	4a1e      	ldr	r2, [pc, #120]	@ (800be00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bd88:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8c:	091b      	lsrs	r3, r3, #4
 800bd8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	4a1c      	ldr	r2, [pc, #112]	@ (800be04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d806      	bhi.n	800bda6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	4a1b      	ldr	r2, [pc, #108]	@ (800be08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d902      	bls.n	800bda6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	3308      	adds	r3, #8
 800bda4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4b18      	ldr	r3, [pc, #96]	@ (800be0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	461a      	mov	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a16      	ldr	r2, [pc, #88]	@ (800be10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bdb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f003 031f 	and.w	r3, r3, #31
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	409a      	lsls	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	58025408 	.word	0x58025408
 800bdd8:	5802541c 	.word	0x5802541c
 800bddc:	58025430 	.word	0x58025430
 800bde0:	58025444 	.word	0x58025444
 800bde4:	58025458 	.word	0x58025458
 800bde8:	5802546c 	.word	0x5802546c
 800bdec:	58025480 	.word	0x58025480
 800bdf0:	58025494 	.word	0x58025494
 800bdf4:	cccccccd 	.word	0xcccccccd
 800bdf8:	16009600 	.word	0x16009600
 800bdfc:	58025880 	.word	0x58025880
 800be00:	aaaaaaab 	.word	0xaaaaaaab
 800be04:	400204b8 	.word	0x400204b8
 800be08:	4002040f 	.word	0x4002040f
 800be0c:	10008200 	.word	0x10008200
 800be10:	40020880 	.word	0x40020880

0800be14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	b2db      	uxtb	r3, r3
 800be22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d04a      	beq.n	800bec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d847      	bhi.n	800bec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a25      	ldr	r2, [pc, #148]	@ (800becc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d022      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a24      	ldr	r2, [pc, #144]	@ (800bed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d01d      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a22      	ldr	r2, [pc, #136]	@ (800bed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d018      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a21      	ldr	r2, [pc, #132]	@ (800bed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d013      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a1f      	ldr	r2, [pc, #124]	@ (800bedc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00e      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a1e      	ldr	r2, [pc, #120]	@ (800bee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d009      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a1c      	ldr	r2, [pc, #112]	@ (800bee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d004      	beq.n	800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d101      	bne.n	800be84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800be80:	2301      	movs	r3, #1
 800be82:	e000      	b.n	800be86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800be84:	2300      	movs	r3, #0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4b17      	ldr	r3, [pc, #92]	@ (800beec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	461a      	mov	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800be9c:	671a      	str	r2, [r3, #112]	@ 0x70
 800be9e:	e009      	b.n	800beb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4b14      	ldr	r3, [pc, #80]	@ (800bef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bea4:	4413      	add	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	461a      	mov	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a11      	ldr	r2, [pc, #68]	@ (800bef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800beb2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	2201      	movs	r2, #1
 800beba:	409a      	lsls	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800bec0:	bf00      	nop
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	58025408 	.word	0x58025408
 800bed0:	5802541c 	.word	0x5802541c
 800bed4:	58025430 	.word	0x58025430
 800bed8:	58025444 	.word	0x58025444
 800bedc:	58025458 	.word	0x58025458
 800bee0:	5802546c 	.word	0x5802546c
 800bee4:	58025480 	.word	0x58025480
 800bee8:	58025494 	.word	0x58025494
 800beec:	1600963f 	.word	0x1600963f
 800bef0:	58025940 	.word	0x58025940
 800bef4:	1000823f 	.word	0x1000823f
 800bef8:	40020940 	.word	0x40020940

0800befc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b098      	sub	sp, #96	@ 0x60
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800bf04:	4a84      	ldr	r2, [pc, #528]	@ (800c118 <HAL_FDCAN_Init+0x21c>)
 800bf06:	f107 030c 	add.w	r3, r7, #12
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	224c      	movs	r2, #76	@ 0x4c
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f00b fdd1 	bl	8017ab6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e1c6      	b.n	800c2ac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a7e      	ldr	r2, [pc, #504]	@ (800c11c <HAL_FDCAN_Init+0x220>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d106      	bne.n	800bf36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800bf30:	461a      	mov	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7fc ff86 	bl	8008e5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699a      	ldr	r2, [r3, #24]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0210 	bic.w	r2, r2, #16
 800bf5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf60:	f7fd fb56 	bl	8009610 <HAL_GetTick>
 800bf64:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800bf66:	e014      	b.n	800bf92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800bf68:	f7fd fb52 	bl	8009610 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b0a      	cmp	r3, #10
 800bf74:	d90d      	bls.n	800bf92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf7c:	f043 0201 	orr.w	r2, r3, #1
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2203      	movs	r2, #3
 800bf8a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e18c      	b.n	800c2ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	f003 0308 	and.w	r3, r3, #8
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d0e3      	beq.n	800bf68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	699a      	ldr	r2, [r3, #24]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0201 	orr.w	r2, r2, #1
 800bfae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bfb0:	f7fd fb2e 	bl	8009610 <HAL_GetTick>
 800bfb4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800bfb6:	e014      	b.n	800bfe2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800bfb8:	f7fd fb2a 	bl	8009610 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b0a      	cmp	r3, #10
 800bfc4:	d90d      	bls.n	800bfe2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bfcc:	f043 0201 	orr.w	r2, r3, #1
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2203      	movs	r2, #3
 800bfda:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e164      	b.n	800c2ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0e3      	beq.n	800bfb8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0202 	orr.w	r2, r2, #2
 800bffe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7c1b      	ldrb	r3, [r3, #16]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d108      	bne.n	800c01a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c016:	619a      	str	r2, [r3, #24]
 800c018:	e007      	b.n	800c02a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c028:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	7c5b      	ldrb	r3, [r3, #17]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d108      	bne.n	800c044 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	699a      	ldr	r2, [r3, #24]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c040:	619a      	str	r2, [r3, #24]
 800c042:	e007      	b.n	800c054 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c052:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7c9b      	ldrb	r3, [r3, #18]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d108      	bne.n	800c06e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	699a      	ldr	r2, [r3, #24]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c06a:	619a      	str	r2, [r3, #24]
 800c06c:	e007      	b.n	800c07e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c07c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	689a      	ldr	r2, [r3, #8]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699a      	ldr	r2, [r3, #24]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800c0a2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0210 	bic.w	r2, r2, #16
 800c0b2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d108      	bne.n	800c0ce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	699a      	ldr	r2, [r3, #24]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0204 	orr.w	r2, r2, #4
 800c0ca:	619a      	str	r2, [r3, #24]
 800c0cc:	e030      	b.n	800c130 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d02c      	beq.n	800c130 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d020      	beq.n	800c120 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c0ec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0210 	orr.w	r2, r2, #16
 800c0fc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	2b03      	cmp	r3, #3
 800c104:	d114      	bne.n	800c130 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	699a      	ldr	r2, [r3, #24]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0220 	orr.w	r2, r2, #32
 800c114:	619a      	str	r2, [r3, #24]
 800c116:	e00b      	b.n	800c130 <HAL_FDCAN_Init+0x234>
 800c118:	08019478 	.word	0x08019478
 800c11c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f042 0220 	orr.w	r2, r2, #32
 800c12e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	3b01      	subs	r3, #1
 800c136:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800c140:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800c148:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	3b01      	subs	r3, #1
 800c152:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800c158:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800c15a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c164:	d115      	bne.n	800c192 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c170:	3b01      	subs	r3, #1
 800c172:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800c174:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c17a:	3b01      	subs	r3, #1
 800c17c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800c17e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c186:	3b01      	subs	r3, #1
 800c188:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800c18e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800c190:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1b8:	4413      	add	r3, r2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d011      	beq.n	800c1e2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c1c6:	f023 0107 	bic.w	r1, r3, #7
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	3360      	adds	r3, #96	@ 0x60
 800c1d2:	443b      	add	r3, r7
 800c1d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d011      	beq.n	800c20e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c1f2:	f023 0107 	bic.w	r1, r3, #7
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	3360      	adds	r3, #96	@ 0x60
 800c1fe:	443b      	add	r3, r7
 800c200:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	430a      	orrs	r2, r1
 800c20a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c212:	2b00      	cmp	r3, #0
 800c214:	d012      	beq.n	800c23c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c21e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	3360      	adds	r3, #96	@ 0x60
 800c22a:	443b      	add	r3, r7
 800c22c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800c230:	011a      	lsls	r2, r3, #4
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c240:	2b00      	cmp	r3, #0
 800c242:	d012      	beq.n	800c26a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c24c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	3360      	adds	r3, #96	@ 0x60
 800c258:	443b      	add	r3, r7
 800c25a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800c25e:	021a      	lsls	r2, r3, #8
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	430a      	orrs	r2, r1
 800c266:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a11      	ldr	r2, [pc, #68]	@ (800c2b4 <HAL_FDCAN_Init+0x3b8>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d107      	bne.n	800c284 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	689a      	ldr	r2, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f022 0203 	bic.w	r2, r2, #3
 800c282:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 feab 	bl	800cff8 <FDCAN_CalcultateRamBlockAddresses>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800c2a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3760      	adds	r7, #96	@ 0x60
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	4000a000 	.word	0x4000a000

0800c2b8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2c8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d002      	beq.n	800c2d6 <HAL_FDCAN_ConfigFilter+0x1e>
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d157      	bne.n	800c386 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d12b      	bne.n	800c336 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	2b07      	cmp	r3, #7
 800c2e4:	d10d      	bne.n	800c302 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800c2f2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800c2f8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800c2fa:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	e00e      	b.n	800c320 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800c30e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800c316:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800c31c:	4313      	orrs	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e025      	b.n	800c382 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	075a      	lsls	r2, r3, #29
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	2b07      	cmp	r3, #7
 800c34a:	d103      	bne.n	800c354 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	e006      	b.n	800c362 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	079a      	lsls	r2, r3, #30
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	4313      	orrs	r3, r2
 800c360:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	4413      	add	r3, r2
 800c36e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	3304      	adds	r3, #4
 800c37a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	693a      	ldr	r2, [r7, #16]
 800c380:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e008      	b.n	800c398 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c38c:	f043 0202 	orr.w	r2, r3, #2
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
  }
}
 800c398:	4618      	mov	r0, r3
 800c39a:	371c      	adds	r7, #28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d111      	bne.n	800c3dc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f022 0201 	bic.w	r2, r2, #1
 800c3ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e008      	b.n	800c3ee <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c3e2:	f043 0204 	orr.w	r2, r3, #4
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
  }
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d15b      	bne.n	800c4ca <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	699a      	ldr	r2, [r3, #24]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f042 0201 	orr.w	r2, r2, #1
 800c420:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800c422:	e013      	b.n	800c44c <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b32      	cmp	r3, #50	@ 0x32
 800c428:	d90d      	bls.n	800c446 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c430:	f043 0201 	orr.w	r2, r3, #1
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2203      	movs	r2, #3
 800c43e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e04a      	b.n	800c4dc <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0e4      	beq.n	800c424 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	699a      	ldr	r2, [r3, #24]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f022 0210 	bic.w	r2, r2, #16
 800c46c:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800c46e:	e013      	b.n	800c498 <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b32      	cmp	r3, #50	@ 0x32
 800c474:	d90d      	bls.n	800c492 <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c47c:	f043 0201 	orr.w	r2, r3, #1
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2203      	movs	r2, #3
 800c48a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e024      	b.n	800c4dc <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	f003 0308 	and.w	r3, r3, #8
 800c4a2:	2b08      	cmp	r3, #8
 800c4a4:	d0e4      	beq.n	800c470 <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	699a      	ldr	r2, [r3, #24]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f042 0202 	orr.w	r2, r2, #2
 800c4b4:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Return function status */
    return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e008      	b.n	800c4dc <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c4d0:	f043 0208 	orr.w	r2, r3, #8
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
  }
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d141      	bne.n	800c584 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c508:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d109      	bne.n	800c524 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c516:	f043 0220 	orr.w	r2, r3, #32
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	e038      	b.n	800c596 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c52c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d009      	beq.n	800c548 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c53a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e026      	b.n	800c596 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c550:	0c1b      	lsrs	r3, r3, #16
 800c552:	f003 031f 	and.w	r3, r3, #31
 800c556:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f000 fed0 	bl	800d304 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2101      	movs	r1, #1
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	fa01 f202 	lsl.w	r2, r1, r2
 800c570:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800c574:	2201      	movs	r2, #1
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	409a      	lsls	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	e008      	b.n	800c596 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c58a:	f043 0208 	orr.w	r2, r3, #8
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
  }
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b08b      	sub	sp, #44	@ 0x2c
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c5b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800c5ba:	7efb      	ldrb	r3, [r7, #27]
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	f040 814b 	bne.w	800c858 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b40      	cmp	r3, #64	@ 0x40
 800c5c6:	d14d      	bne.n	800c664 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d109      	bne.n	800c5ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c5de:	f043 0220 	orr.w	r2, r3, #32
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e13e      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d109      	bne.n	800c610 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c602:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e12c      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c618:	0e1b      	lsrs	r3, r3, #24
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d10b      	bne.n	800c63a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c62a:	0fdb      	lsrs	r3, r3, #31
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c634:	d101      	bne.n	800c63a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800c636:	2301      	movs	r3, #1
 800c638:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c642:	0a1b      	lsrs	r3, r3, #8
 800c644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c648:	69fa      	ldr	r2, [r7, #28]
 800c64a:	4413      	add	r3, r2
 800c64c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c656:	69f9      	ldr	r1, [r7, #28]
 800c658:	fb01 f303 	mul.w	r3, r1, r3
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	4413      	add	r3, r2
 800c660:	627b      	str	r3, [r7, #36]	@ 0x24
 800c662:	e069      	b.n	800c738 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b41      	cmp	r3, #65	@ 0x41
 800c668:	d14d      	bne.n	800c706 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c672:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d109      	bne.n	800c68e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c680:	f043 0220 	orr.w	r2, r3, #32
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e0ed      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e0db      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c6ba:	0e1b      	lsrs	r3, r3, #24
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d10b      	bne.n	800c6dc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c6cc:	0fdb      	lsrs	r3, r3, #31
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6d6:	d101      	bne.n	800c6dc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c6e4:	0a1b      	lsrs	r3, r3, #8
 800c6e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6f8:	69f9      	ldr	r1, [r7, #28]
 800c6fa:	fb01 f303 	mul.w	r3, r1, r3
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	627b      	str	r3, [r7, #36]	@ 0x24
 800c704:	e018      	b.n	800c738 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d309      	bcc.n	800c724 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c716:	f043 0220 	orr.w	r2, r3, #32
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	e0a2      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	fb01 f303 	mul.w	r3, r1, r3
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800c738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d107      	bne.n	800c75c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800c74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	0c9b      	lsrs	r3, r3, #18
 800c752:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	e005      	b.n	800c768 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800c75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800c768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	3304      	adds	r3, #4
 800c784:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800c786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	0e1b      	lsrs	r3, r3, #24
 800c7ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	0fda      	lsrs	r2, r3, #31
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	623b      	str	r3, [r7, #32]
 800c7da:	e00a      	b.n	800c7f2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	441a      	add	r2, r3
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	440b      	add	r3, r1
 800c7e8:	7812      	ldrb	r2, [r2, #0]
 800c7ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	623b      	str	r3, [r7, #32]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	0c1b      	lsrs	r3, r3, #16
 800c7f8:	4a1f      	ldr	r2, [pc, #124]	@ (800c878 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800c7fa:	5cd3      	ldrb	r3, [r2, r3]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	4293      	cmp	r3, r2
 800c802:	d3eb      	bcc.n	800c7dc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2b40      	cmp	r3, #64	@ 0x40
 800c808:	d105      	bne.n	800c816 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	69fa      	ldr	r2, [r7, #28]
 800c810:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800c814:	e01e      	b.n	800c854 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b41      	cmp	r3, #65	@ 0x41
 800c81a:	d105      	bne.n	800c828 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800c826:	e015      	b.n	800c854 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2b1f      	cmp	r3, #31
 800c82c:	d808      	bhi.n	800c840 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2101      	movs	r1, #1
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	fa01 f202 	lsl.w	r2, r1, r2
 800c83a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800c83e:	e009      	b.n	800c854 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f003 021f 	and.w	r2, r3, #31
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2101      	movs	r1, #1
 800c84c:	fa01 f202 	lsl.w	r2, r1, r2
 800c850:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	e008      	b.n	800c86a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c85e:	f043 0208 	orr.w	r2, r3, #8
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
  }
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	372c      	adds	r7, #44	@ 0x2c
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	0801bbbc 	.word	0x0801bbbc

0800c87c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c88e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d002      	beq.n	800c89c <HAL_FDCAN_ActivateNotification+0x20>
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d155      	bne.n	800c948 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d108      	bne.n	800c8bc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f042 0201 	orr.w	r2, r2, #1
 800c8b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c8ba:	e014      	b.n	800c8e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d108      	bne.n	800c8de <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f042 0202 	orr.w	r2, r2, #2
 800c8da:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c8dc:	e003      	b.n	800c8e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	430a      	orrs	r2, r1
 800c91e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	4b0f      	ldr	r3, [pc, #60]	@ (800c968 <HAL_FDCAN_ActivateNotification+0xec>)
 800c92c:	4013      	ands	r3, r2
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	6812      	ldr	r2, [r2, #0]
 800c932:	430b      	orrs	r3, r1
 800c934:	6553      	str	r3, [r2, #84]	@ 0x54
 800c936:	4b0d      	ldr	r3, [pc, #52]	@ (800c96c <HAL_FDCAN_ActivateNotification+0xf0>)
 800c938:	695a      	ldr	r2, [r3, #20]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	0f9b      	lsrs	r3, r3, #30
 800c93e:	490b      	ldr	r1, [pc, #44]	@ (800c96c <HAL_FDCAN_ActivateNotification+0xf0>)
 800c940:	4313      	orrs	r3, r2
 800c942:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	e008      	b.n	800c95a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c94e:	f043 0202 	orr.w	r2, r3, #2
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
  }
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	371c      	adds	r7, #28
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	3fcfffff 	.word	0x3fcfffff
 800c96c:	4000a800 	.word	0x4000a800

0800c970 <HAL_FDCAN_TT_DeactivateNotification>:
  * @param  InactiveTTITs indicates which TT interrupts will be disabled.
  *         This parameter can be any combination of @arg FDCAN_TTInterrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_TT_DeactivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t InactiveTTITs)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint32_t ITLineSelection;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c980:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_FDCAN_TT_INSTANCE(hfdcan->Instance));
  assert_param(IS_FDCAN_TT_IT(InactiveTTITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d002      	beq.n	800c98e <HAL_FDCAN_TT_DeactivateNotification+0x1e>
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d12d      	bne.n	800c9ea <HAL_FDCAN_TT_DeactivateNotification+0x7a>
  {
    /* Disable the selected TT interrupts */
    __HAL_FDCAN_TT_DISABLE_IT(hfdcan, InactiveTTITs);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	43da      	mvns	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	400a      	ands	r2, r1
 800c99e:	625a      	str	r2, [r3, #36]	@ 0x24

    ITLineSelection = hfdcan->ttcan->TTILS;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a6:	60bb      	str	r3, [r7, #8]

    if ((hfdcan->ttcan->TTIE | ITLineSelection) == ITLineSelection)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d107      	bne.n	800c9c8 <HAL_FDCAN_TT_DeactivateNotification+0x58>
    {
      /* Disable Interrupt line 0 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0201 	bic.w	r2, r2, #1
 800c9c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((hfdcan->ttcan->TTIE & ITLineSelection) == 0U)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d107      	bne.n	800c9e6 <HAL_FDCAN_TT_DeactivateNotification+0x76>
    {
      /* Disable Interrupt line 1 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f022 0202 	bic.w	r2, r2, #2
 800c9e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e008      	b.n	800c9fc <HAL_FDCAN_TT_DeactivateNotification+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c9f0:	f043 0202 	orr.w	r2, r3, #2
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
  }
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b096      	sub	sp, #88	@ 0x58
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800ca10:	4b95      	ldr	r3, [pc, #596]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	079b      	lsls	r3, r3, #30
 800ca16:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800ca18:	4b93      	ldr	r3, [pc, #588]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800ca1a:	695b      	ldr	r3, [r3, #20]
 800ca1c:	079b      	lsls	r3, r3, #30
 800ca1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca20:	4013      	ands	r3, r2
 800ca22:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca2a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ca2e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca38:	4013      	ands	r3, r2
 800ca3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca50:	4013      	ands	r3, r2
 800ca52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca68:	4013      	ands	r3, r2
 800ca6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca72:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800ca76:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca80:	4013      	ands	r3, r2
 800ca82:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca8a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800ca8e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca98:	4013      	ands	r3, r2
 800ca9a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800caac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00f      	beq.n	800cad6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800cab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00a      	beq.n	800cad6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cac8:	651a      	str	r2, [r3, #80]	@ 0x50
 800caca:	4b67      	ldr	r3, [pc, #412]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cacc:	2200      	movs	r2, #0
 800cace:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fa44 	bl	800cf5e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800cad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d01c      	beq.n	800cb1a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800cae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d017      	beq.n	800cb1a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800caf2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cafc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cafe:	4013      	ands	r3, r2
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cb0a:	651a      	str	r2, [r3, #80]	@ 0x50
 800cb0c:	4b56      	ldr	r3, [pc, #344]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800cb12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f9f9 	bl	800cf0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800cb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00d      	beq.n	800cb3c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb26:	4b51      	ldr	r3, [pc, #324]	@ (800cc6c <HAL_FDCAN_IRQHandler+0x264>)
 800cb28:	400b      	ands	r3, r1
 800cb2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb2c:	4a4e      	ldr	r2, [pc, #312]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cb2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb30:	0f9b      	lsrs	r3, r3, #30
 800cb32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800cb34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f9b2 	bl	800cea0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800cb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00d      	beq.n	800cb5e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb48:	4b48      	ldr	r3, [pc, #288]	@ (800cc6c <HAL_FDCAN_IRQHandler+0x264>)
 800cb4a:	400b      	ands	r3, r1
 800cb4c:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb4e:	4a46      	ldr	r2, [pc, #280]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cb50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb52:	0f9b      	lsrs	r3, r3, #30
 800cb54:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800cb56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f9ac 	bl	800ceb6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800cb5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb6a:	4b40      	ldr	r3, [pc, #256]	@ (800cc6c <HAL_FDCAN_IRQHandler+0x264>)
 800cb6c:	400b      	ands	r3, r1
 800cb6e:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb70:	4a3d      	ldr	r2, [pc, #244]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cb72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb74:	0f9b      	lsrs	r3, r3, #30
 800cb76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800cb78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7f7 f8f4 	bl	8003d68 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800cb80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00d      	beq.n	800cba2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cb8c:	4b37      	ldr	r3, [pc, #220]	@ (800cc6c <HAL_FDCAN_IRQHandler+0x264>)
 800cb8e:	400b      	ands	r3, r1
 800cb90:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb92:	4a35      	ldr	r2, [pc, #212]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cb94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb96:	0f9b      	lsrs	r3, r3, #30
 800cb98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800cb9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f995 	bl	800cecc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800cba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00f      	beq.n	800cbcc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00a      	beq.n	800cbcc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cbbe:	651a      	str	r2, [r3, #80]	@ 0x50
 800cbc0:	4b29      	ldr	r3, [pc, #164]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f98b 	bl	800cee2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d01c      	beq.n	800cc10 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d017      	beq.n	800cc10 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cbe8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc00:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc02:	4b19      	ldr	r3, [pc, #100]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800cc08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f973 	bl	800cef6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800cc10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00f      	beq.n	800cc3a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800cc2c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f974 	bl	800cf22 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800cc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d015      	beq.n	800cc70 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800cc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d010      	beq.n	800cc70 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800cc56:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc58:	4b03      	ldr	r3, [pc, #12]	@ (800cc68 <HAL_FDCAN_IRQHandler+0x260>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f969 	bl	800cf36 <HAL_FDCAN_TimestampWraparoundCallback>
 800cc64:	e004      	b.n	800cc70 <HAL_FDCAN_IRQHandler+0x268>
 800cc66:	bf00      	nop
 800cc68:	4000a800 	.word	0x4000a800
 800cc6c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800cc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00f      	beq.n	800cc9a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00a      	beq.n	800cc9a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800cc8c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc8e:	4b81      	ldr	r3, [pc, #516]	@ (800ce94 <HAL_FDCAN_IRQHandler+0x48c>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f958 	bl	800cf4a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800cc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d014      	beq.n	800ccce <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00f      	beq.n	800ccce <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ccb6:	651a      	str	r2, [r3, #80]	@ 0x50
 800ccb8:	4b76      	ldr	r3, [pc, #472]	@ (800ce94 <HAL_FDCAN_IRQHandler+0x48c>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ccc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800ccce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00d      	beq.n	800ccf0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccda:	4b6f      	ldr	r3, [pc, #444]	@ (800ce98 <HAL_FDCAN_IRQHandler+0x490>)
 800ccdc:	400b      	ands	r3, r1
 800ccde:	6513      	str	r3, [r2, #80]	@ 0x50
 800cce0:	4a6c      	ldr	r2, [pc, #432]	@ (800ce94 <HAL_FDCAN_IRQHandler+0x48c>)
 800cce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce4:	0f9b      	lsrs	r3, r3, #30
 800cce6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800cce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f94b 	bl	800cf86 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800ccf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d011      	beq.n	800cd1a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ccfc:	4b66      	ldr	r3, [pc, #408]	@ (800ce98 <HAL_FDCAN_IRQHandler+0x490>)
 800ccfe:	400b      	ands	r3, r1
 800cd00:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd02:	4a64      	ldr	r2, [pc, #400]	@ (800ce94 <HAL_FDCAN_IRQHandler+0x48c>)
 800cd04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd06:	0f9b      	lsrs	r3, r3, #30
 800cd08:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800cd10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a5f      	ldr	r2, [pc, #380]	@ (800ce9c <HAL_FDCAN_IRQHandler+0x494>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	f040 80aa 	bne.w	800ce7a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	f003 0303 	and.w	r3, r3, #3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 80a2 	beq.w	800ce7a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	f003 030f 	and.w	r3, r3, #15
 800cd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd58:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd62:	4013      	ands	r3, r2
 800cd64:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	6a1b      	ldr	r3, [r3, #32]
 800cd6c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800cd70:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800cd88:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd90:	6a3a      	ldr	r2, [r7, #32]
 800cd92:	4013      	ands	r3, r2
 800cd94:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800cda0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda8:	69fa      	ldr	r2, [r7, #28]
 800cdaa:	4013      	ands	r3, r2
 800cdac:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800cdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d007      	beq.n	800cdd4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800cdcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f8e4 	bl	800cf9c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800cdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d007      	beq.n	800cdea <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cde0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800cde2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f8e4 	bl	800cfb2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d019      	beq.n	800ce28 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d014      	beq.n	800ce28 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce04:	0c1b      	lsrs	r3, r3, #16
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce14:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	2240      	movs	r2, #64	@ 0x40
 800ce1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	6939      	ldr	r1, [r7, #16]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f8d0 	bl	800cfc8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d007      	beq.n	800ce3e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce34:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800ce36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f8d1 	bl	800cfe0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	6a3a      	ldr	r2, [r7, #32]
 800ce4a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	431a      	orrs	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00b      	beq.n	800ce7a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f874 	bl	800cf72 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800ce8a:	bf00      	nop
 800ce8c:	3758      	adds	r7, #88	@ 0x58
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	4000a800 	.word	0x4000a800
 800ce98:	3fcfffff 	.word	0x3fcfffff
 800ce9c:	4000a000 	.word	0x4000a000

0800cea0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800ceaa:	bf00      	nop
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b083      	sub	sp, #12
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cee2:	b480      	push	{r7}
 800cee4:	b083      	sub	sp, #12
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800ceea:	bf00      	nop
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800cf16:	bf00      	nop
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cf22:	b480      	push	{r7}
 800cf24:	b083      	sub	sp, #12
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800cf3e:	bf00      	nop
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800cf52:	bf00      	nop
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800cf66:	bf00      	nop
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800cf7a:	bf00      	nop
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800cfa6:	bf00      	nop
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
	...

0800cff8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d004:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800d00e:	4ba7      	ldr	r3, [pc, #668]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d010:	4013      	ands	r3, r2
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	0091      	lsls	r1, r2, #2
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6812      	ldr	r2, [r2, #0]
 800d01a:	430b      	orrs	r3, r1
 800d01c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d028:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d030:	041a      	lsls	r2, r3, #16
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	4413      	add	r3, r2
 800d044:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d04e:	4b97      	ldr	r3, [pc, #604]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d050:	4013      	ands	r3, r2
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	0091      	lsls	r1, r2, #2
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	6812      	ldr	r2, [r2, #0]
 800d05a:	430b      	orrs	r3, r1
 800d05c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d068:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d070:	041a      	lsls	r2, r3, #16
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	4413      	add	r3, r2
 800d086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d090:	4b86      	ldr	r3, [pc, #536]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d092:	4013      	ands	r3, r2
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	0091      	lsls	r1, r2, #2
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	6812      	ldr	r2, [r2, #0]
 800d09c:	430b      	orrs	r3, r1
 800d09e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d0aa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b2:	041a      	lsls	r2, r3, #16
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	430a      	orrs	r2, r1
 800d0ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800d0c6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800d0d8:	4b74      	ldr	r3, [pc, #464]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d0da:	4013      	ands	r3, r2
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	0091      	lsls	r1, r2, #2
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	6812      	ldr	r2, [r2, #0]
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d0f2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0fa:	041a      	lsls	r2, r3, #16
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	430a      	orrs	r2, r1
 800d102:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d10e:	fb02 f303 	mul.w	r3, r2, r3
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	4413      	add	r3, r2
 800d116:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800d120:	4b62      	ldr	r3, [pc, #392]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d122:	4013      	ands	r3, r2
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	0091      	lsls	r1, r2, #2
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	6812      	ldr	r2, [r2, #0]
 800d12c:	430b      	orrs	r3, r1
 800d12e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d13a:	fb02 f303 	mul.w	r3, r2, r3
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	4413      	add	r3, r2
 800d142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800d14c:	4b57      	ldr	r3, [pc, #348]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d14e:	4013      	ands	r3, r2
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	0091      	lsls	r1, r2, #2
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6812      	ldr	r2, [r2, #0]
 800d158:	430b      	orrs	r3, r1
 800d15a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d166:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d16e:	041a      	lsls	r2, r3, #16
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	4413      	add	r3, r2
 800d184:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800d18e:	4b47      	ldr	r3, [pc, #284]	@ (800d2ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800d190:	4013      	ands	r3, r2
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	0091      	lsls	r1, r2, #2
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6812      	ldr	r2, [r2, #0]
 800d19a:	430b      	orrs	r3, r1
 800d19c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d1a8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1b0:	041a      	lsls	r2, r3, #16
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d1c4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1cc:	061a      	lsls	r2, r3, #24
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1dc:	4b34      	ldr	r3, [pc, #208]	@ (800d2b0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800d1de:	4413      	add	r3, r2
 800d1e0:	009a      	lsls	r2, r3, #2
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	441a      	add	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	441a      	add	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d20e:	6879      	ldr	r1, [r7, #4]
 800d210:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800d212:	fb01 f303 	mul.w	r3, r1, r3
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	441a      	add	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800d22a:	fb01 f303 	mul.w	r3, r1, r3
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	441a      	add	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800d242:	fb01 f303 	mul.w	r3, r1, r3
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	441a      	add	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	441a      	add	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d26e:	6879      	ldr	r1, [r7, #4]
 800d270:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800d272:	fb01 f303 	mul.w	r3, r1, r3
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	441a      	add	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800d28e:	fb01 f303 	mul.w	r3, r1, r3
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	441a      	add	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2a2:	4a04      	ldr	r2, [pc, #16]	@ (800d2b4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d915      	bls.n	800d2d4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800d2a8:	e006      	b.n	800d2b8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800d2aa:	bf00      	nop
 800d2ac:	ffff0003 	.word	0xffff0003
 800d2b0:	10002b00 	.word	0x10002b00
 800d2b4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d2be:	f043 0220 	orr.w	r2, r3, #32
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e010      	b.n	800d2f6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	e005      	b.n	800d2e8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d3f3      	bcc.n	800d2dc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop

0800d304 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800d304:	b480      	push	{r7}
 800d306:	b089      	sub	sp, #36	@ 0x24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800d322:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d32a:	4313      	orrs	r3, r2
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	e00a      	b.n	800d346 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800d338:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800d33e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d344:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800d350:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800d356:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800d35c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800d362:	4313      	orrs	r3, r2
 800d364:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	fb01 f303 	mul.w	r3, r1, r3
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	69fa      	ldr	r2, [r7, #28]
 800d380:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	3304      	adds	r3, #4
 800d386:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	3304      	adds	r3, #4
 800d392:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]
 800d398:	e020      	b.n	800d3dc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	3303      	adds	r3, #3
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	3302      	adds	r3, #2
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	440b      	add	r3, r1
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800d3b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	440b      	add	r3, r1
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800d3c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	697a      	ldr	r2, [r7, #20]
 800d3c6:	440a      	add	r2, r1
 800d3c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800d3ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	617b      	str	r3, [r7, #20]
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	0c1b      	lsrs	r3, r3, #16
 800d3e2:	4a06      	ldr	r2, [pc, #24]	@ (800d3fc <FDCAN_CopyMessageToRAM+0xf8>)
 800d3e4:	5cd3      	ldrb	r3, [r2, r3]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d3d5      	bcc.n	800d39a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	3724      	adds	r7, #36	@ 0x24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	0801bbbc 	.word	0x0801bbbc

0800d400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d400:	b480      	push	{r7}
 800d402:	b089      	sub	sp, #36	@ 0x24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d40a:	2300      	movs	r3, #0
 800d40c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d40e:	4b89      	ldr	r3, [pc, #548]	@ (800d634 <HAL_GPIO_Init+0x234>)
 800d410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d412:	e194      	b.n	800d73e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	2101      	movs	r1, #1
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	fa01 f303 	lsl.w	r3, r1, r3
 800d420:	4013      	ands	r3, r2
 800d422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 8186 	beq.w	800d738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	2b01      	cmp	r3, #1
 800d436:	d005      	beq.n	800d444 <HAL_GPIO_Init+0x44>
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	f003 0303 	and.w	r3, r3, #3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d130      	bne.n	800d4a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	2203      	movs	r2, #3
 800d450:	fa02 f303 	lsl.w	r3, r2, r3
 800d454:	43db      	mvns	r3, r3
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	4013      	ands	r3, r2
 800d45a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	fa02 f303 	lsl.w	r3, r2, r3
 800d468:	69ba      	ldr	r2, [r7, #24]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d47a:	2201      	movs	r2, #1
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	fa02 f303 	lsl.w	r3, r2, r3
 800d482:	43db      	mvns	r3, r3
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	4013      	ands	r3, r2
 800d488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	091b      	lsrs	r3, r3, #4
 800d490:	f003 0201 	and.w	r2, r3, #1
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	fa02 f303 	lsl.w	r3, r2, r3
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	f003 0303 	and.w	r3, r3, #3
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d017      	beq.n	800d4e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	2203      	movs	r2, #3
 800d4be:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c2:	43db      	mvns	r3, r3
 800d4c4:	69ba      	ldr	r2, [r7, #24]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	69ba      	ldr	r2, [r7, #24]
 800d4e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	f003 0303 	and.w	r3, r3, #3
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d123      	bne.n	800d536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	08da      	lsrs	r2, r3, #3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3208      	adds	r2, #8
 800d4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	f003 0307 	and.w	r3, r3, #7
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	220f      	movs	r2, #15
 800d506:	fa02 f303 	lsl.w	r3, r2, r3
 800d50a:	43db      	mvns	r3, r3
 800d50c:	69ba      	ldr	r2, [r7, #24]
 800d50e:	4013      	ands	r3, r2
 800d510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	691a      	ldr	r2, [r3, #16]
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f003 0307 	and.w	r3, r3, #7
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	fa02 f303 	lsl.w	r3, r2, r3
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	4313      	orrs	r3, r2
 800d526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	08da      	lsrs	r2, r3, #3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3208      	adds	r2, #8
 800d530:	69b9      	ldr	r1, [r7, #24]
 800d532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	2203      	movs	r2, #3
 800d542:	fa02 f303 	lsl.w	r3, r2, r3
 800d546:	43db      	mvns	r3, r3
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	4013      	ands	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	f003 0203 	and.w	r2, r3, #3
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	fa02 f303 	lsl.w	r3, r2, r3
 800d55e:	69ba      	ldr	r2, [r7, #24]
 800d560:	4313      	orrs	r3, r2
 800d562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	69ba      	ldr	r2, [r7, #24]
 800d568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 80e0 	beq.w	800d738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d578:	4b2f      	ldr	r3, [pc, #188]	@ (800d638 <HAL_GPIO_Init+0x238>)
 800d57a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d57e:	4a2e      	ldr	r2, [pc, #184]	@ (800d638 <HAL_GPIO_Init+0x238>)
 800d580:	f043 0302 	orr.w	r3, r3, #2
 800d584:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d588:	4b2b      	ldr	r3, [pc, #172]	@ (800d638 <HAL_GPIO_Init+0x238>)
 800d58a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d596:	4a29      	ldr	r2, [pc, #164]	@ (800d63c <HAL_GPIO_Init+0x23c>)
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	089b      	lsrs	r3, r3, #2
 800d59c:	3302      	adds	r3, #2
 800d59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	220f      	movs	r2, #15
 800d5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b2:	43db      	mvns	r3, r3
 800d5b4:	69ba      	ldr	r2, [r7, #24]
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4a20      	ldr	r2, [pc, #128]	@ (800d640 <HAL_GPIO_Init+0x240>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d052      	beq.n	800d668 <HAL_GPIO_Init+0x268>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800d644 <HAL_GPIO_Init+0x244>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d031      	beq.n	800d62e <HAL_GPIO_Init+0x22e>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800d648 <HAL_GPIO_Init+0x248>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d02b      	beq.n	800d62a <HAL_GPIO_Init+0x22a>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a1d      	ldr	r2, [pc, #116]	@ (800d64c <HAL_GPIO_Init+0x24c>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d025      	beq.n	800d626 <HAL_GPIO_Init+0x226>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a1c      	ldr	r2, [pc, #112]	@ (800d650 <HAL_GPIO_Init+0x250>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d01f      	beq.n	800d622 <HAL_GPIO_Init+0x222>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d654 <HAL_GPIO_Init+0x254>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d019      	beq.n	800d61e <HAL_GPIO_Init+0x21e>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a1a      	ldr	r2, [pc, #104]	@ (800d658 <HAL_GPIO_Init+0x258>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d013      	beq.n	800d61a <HAL_GPIO_Init+0x21a>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a19      	ldr	r2, [pc, #100]	@ (800d65c <HAL_GPIO_Init+0x25c>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d00d      	beq.n	800d616 <HAL_GPIO_Init+0x216>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a18      	ldr	r2, [pc, #96]	@ (800d660 <HAL_GPIO_Init+0x260>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d007      	beq.n	800d612 <HAL_GPIO_Init+0x212>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a17      	ldr	r2, [pc, #92]	@ (800d664 <HAL_GPIO_Init+0x264>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d101      	bne.n	800d60e <HAL_GPIO_Init+0x20e>
 800d60a:	2309      	movs	r3, #9
 800d60c:	e02d      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d60e:	230a      	movs	r3, #10
 800d610:	e02b      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d612:	2308      	movs	r3, #8
 800d614:	e029      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d616:	2307      	movs	r3, #7
 800d618:	e027      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d61a:	2306      	movs	r3, #6
 800d61c:	e025      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d61e:	2305      	movs	r3, #5
 800d620:	e023      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d622:	2304      	movs	r3, #4
 800d624:	e021      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d626:	2303      	movs	r3, #3
 800d628:	e01f      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d62a:	2302      	movs	r3, #2
 800d62c:	e01d      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d62e:	2301      	movs	r3, #1
 800d630:	e01b      	b.n	800d66a <HAL_GPIO_Init+0x26a>
 800d632:	bf00      	nop
 800d634:	58000080 	.word	0x58000080
 800d638:	58024400 	.word	0x58024400
 800d63c:	58000400 	.word	0x58000400
 800d640:	58020000 	.word	0x58020000
 800d644:	58020400 	.word	0x58020400
 800d648:	58020800 	.word	0x58020800
 800d64c:	58020c00 	.word	0x58020c00
 800d650:	58021000 	.word	0x58021000
 800d654:	58021400 	.word	0x58021400
 800d658:	58021800 	.word	0x58021800
 800d65c:	58021c00 	.word	0x58021c00
 800d660:	58022000 	.word	0x58022000
 800d664:	58022400 	.word	0x58022400
 800d668:	2300      	movs	r3, #0
 800d66a:	69fa      	ldr	r2, [r7, #28]
 800d66c:	f002 0203 	and.w	r2, r2, #3
 800d670:	0092      	lsls	r2, r2, #2
 800d672:	4093      	lsls	r3, r2
 800d674:	69ba      	ldr	r2, [r7, #24]
 800d676:	4313      	orrs	r3, r2
 800d678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d67a:	4938      	ldr	r1, [pc, #224]	@ (800d75c <HAL_GPIO_Init+0x35c>)
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	089b      	lsrs	r3, r3, #2
 800d680:	3302      	adds	r3, #2
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	43db      	mvns	r3, r3
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	4013      	ands	r3, r2
 800d698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d6ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d6b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	43db      	mvns	r3, r3
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d003      	beq.n	800d6dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d6dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	43db      	mvns	r3, r3
 800d6ee:	69ba      	ldr	r2, [r7, #24]
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d003      	beq.n	800d708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	4313      	orrs	r3, r2
 800d706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	43db      	mvns	r3, r3
 800d718:	69ba      	ldr	r2, [r7, #24]
 800d71a:	4013      	ands	r3, r2
 800d71c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d72a:	69ba      	ldr	r2, [r7, #24]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	4313      	orrs	r3, r2
 800d730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	69ba      	ldr	r2, [r7, #24]
 800d736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	3301      	adds	r3, #1
 800d73c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	fa22 f303 	lsr.w	r3, r2, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f47f ae63 	bne.w	800d414 <HAL_GPIO_Init+0x14>
  }
}
 800d74e:	bf00      	nop
 800d750:	bf00      	nop
 800d752:	3724      	adds	r7, #36	@ 0x24
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	58000400 	.word	0x58000400

0800d760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	807b      	strh	r3, [r7, #2]
 800d76c:	4613      	mov	r3, r2
 800d76e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d770:	787b      	ldrb	r3, [r7, #1]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d776:	887a      	ldrh	r2, [r7, #2]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d77c:	e003      	b.n	800d786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d77e:	887b      	ldrh	r3, [r7, #2]
 800d780:	041a      	lsls	r2, r3, #16
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	619a      	str	r2, [r3, #24]
}
 800d786:	bf00      	nop
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d792:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d794:	b08f      	sub	sp, #60	@ 0x3c
 800d796:	af0a      	add	r7, sp, #40	@ 0x28
 800d798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e116      	b.n	800d9d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f009 fc2e 	bl	8017020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2203      	movs	r2, #3
 800d7c8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f005 ffff 	bl	80137e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	603b      	str	r3, [r7, #0]
 800d7ee:	687e      	ldr	r6, [r7, #4]
 800d7f0:	466d      	mov	r5, sp
 800d7f2:	f106 0410 	add.w	r4, r6, #16
 800d7f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d802:	e885 0003 	stmia.w	r5, {r0, r1}
 800d806:	1d33      	adds	r3, r6, #4
 800d808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d80a:	6838      	ldr	r0, [r7, #0]
 800d80c:	f005 feca 	bl	80135a4 <USB_CoreInit>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d005      	beq.n	800d822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2202      	movs	r2, #2
 800d81a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e0d7      	b.n	800d9d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2100      	movs	r1, #0
 800d828:	4618      	mov	r0, r3
 800d82a:	f005 ffed 	bl	8013808 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d82e:	2300      	movs	r3, #0
 800d830:	73fb      	strb	r3, [r7, #15]
 800d832:	e04a      	b.n	800d8ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d834:	7bfa      	ldrb	r2, [r7, #15]
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	4613      	mov	r3, r2
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	4413      	add	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	440b      	add	r3, r1
 800d842:	333d      	adds	r3, #61	@ 0x3d
 800d844:	2201      	movs	r2, #1
 800d846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d848:	7bfa      	ldrb	r2, [r7, #15]
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	4613      	mov	r3, r2
 800d84e:	00db      	lsls	r3, r3, #3
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	440b      	add	r3, r1
 800d856:	333c      	adds	r3, #60	@ 0x3c
 800d858:	7bfa      	ldrb	r2, [r7, #15]
 800d85a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d85c:	7bfa      	ldrb	r2, [r7, #15]
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	b298      	uxth	r0, r3
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	4613      	mov	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	440b      	add	r3, r1
 800d86e:	3356      	adds	r3, #86	@ 0x56
 800d870:	4602      	mov	r2, r0
 800d872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d874:	7bfa      	ldrb	r2, [r7, #15]
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	4613      	mov	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	4413      	add	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	440b      	add	r3, r1
 800d882:	3340      	adds	r3, #64	@ 0x40
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d888:	7bfa      	ldrb	r2, [r7, #15]
 800d88a:	6879      	ldr	r1, [r7, #4]
 800d88c:	4613      	mov	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	440b      	add	r3, r1
 800d896:	3344      	adds	r3, #68	@ 0x44
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d89c:	7bfa      	ldrb	r2, [r7, #15]
 800d89e:	6879      	ldr	r1, [r7, #4]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	4413      	add	r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	440b      	add	r3, r1
 800d8aa:	3348      	adds	r3, #72	@ 0x48
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d8b0:	7bfa      	ldrb	r2, [r7, #15]
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	00db      	lsls	r3, r3, #3
 800d8b8:	4413      	add	r3, r2
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	440b      	add	r3, r1
 800d8be:	334c      	adds	r3, #76	@ 0x4c
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	73fb      	strb	r3, [r7, #15]
 800d8ca:	7bfa      	ldrb	r2, [r7, #15]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d3af      	bcc.n	800d834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73fb      	strb	r3, [r7, #15]
 800d8d8:	e044      	b.n	800d964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d8da:	7bfa      	ldrb	r2, [r7, #15]
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	4413      	add	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	440b      	add	r3, r1
 800d8e8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d8f0:	7bfa      	ldrb	r2, [r7, #15]
 800d8f2:	6879      	ldr	r1, [r7, #4]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	440b      	add	r3, r1
 800d8fe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800d902:	7bfa      	ldrb	r2, [r7, #15]
 800d904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d906:	7bfa      	ldrb	r2, [r7, #15]
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	4613      	mov	r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	4413      	add	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	440b      	add	r3, r1
 800d914:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d91c:	7bfa      	ldrb	r2, [r7, #15]
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4613      	mov	r3, r2
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	440b      	add	r3, r1
 800d92a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800d92e:	2200      	movs	r2, #0
 800d930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d932:	7bfa      	ldrb	r2, [r7, #15]
 800d934:	6879      	ldr	r1, [r7, #4]
 800d936:	4613      	mov	r3, r2
 800d938:	00db      	lsls	r3, r3, #3
 800d93a:	4413      	add	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	440b      	add	r3, r1
 800d940:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d944:	2200      	movs	r2, #0
 800d946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d948:	7bfa      	ldrb	r2, [r7, #15]
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	4613      	mov	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	440b      	add	r3, r1
 800d956:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	3301      	adds	r3, #1
 800d962:	73fb      	strb	r3, [r7, #15]
 800d964:	7bfa      	ldrb	r2, [r7, #15]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d3b5      	bcc.n	800d8da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	603b      	str	r3, [r7, #0]
 800d974:	687e      	ldr	r6, [r7, #4]
 800d976:	466d      	mov	r5, sp
 800d978:	f106 0410 	add.w	r4, r6, #16
 800d97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d97e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d984:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d988:	e885 0003 	stmia.w	r5, {r0, r1}
 800d98c:	1d33      	adds	r3, r6, #4
 800d98e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d990:	6838      	ldr	r0, [r7, #0]
 800d992:	f005 ff85 	bl	80138a0 <USB_DevInit>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e014      	b.n	800d9d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d102      	bne.n	800d9c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f001 f96f 	bl	800eca4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f006 ffc7 	bl	801495e <USB_DevDisconnect>

  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d101      	bne.n	800d9f6 <HAL_PCD_Start+0x1c>
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	e022      	b.n	800da3c <HAL_PCD_Start+0x62>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d105      	bne.n	800da1e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4618      	mov	r0, r3
 800da24:	f005 fece 	bl	80137c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f006 ff75 	bl	801491c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b08d      	sub	sp, #52	@ 0x34
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f007 f833 	bl	8014ac6 <USB_GetMode>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	f040 84b7 	bne.w	800e3d6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f006 ff97 	bl	80149a0 <USB_ReadInterrupts>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 84ad 	beq.w	800e3d4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	0a1b      	lsrs	r3, r3, #8
 800da84:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4618      	mov	r0, r3
 800da94:	f006 ff84 	bl	80149a0 <USB_ReadInterrupts>
 800da98:	4603      	mov	r3, r0
 800da9a:	f003 0302 	and.w	r3, r3, #2
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d107      	bne.n	800dab2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695a      	ldr	r2, [r3, #20]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f002 0202 	and.w	r2, r2, #2
 800dab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f006 ff72 	bl	80149a0 <USB_ReadInterrupts>
 800dabc:	4603      	mov	r3, r0
 800dabe:	f003 0310 	and.w	r3, r3, #16
 800dac2:	2b10      	cmp	r3, #16
 800dac4:	d161      	bne.n	800db8a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	699a      	ldr	r2, [r3, #24]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f022 0210 	bic.w	r2, r2, #16
 800dad4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	f003 020f 	and.w	r2, r3, #15
 800dae2:	4613      	mov	r3, r2
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	4413      	add	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	4413      	add	r3, r2
 800daf2:	3304      	adds	r3, #4
 800daf4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	0c5b      	lsrs	r3, r3, #17
 800dafa:	f003 030f 	and.w	r3, r3, #15
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d124      	bne.n	800db4c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800db08:	4013      	ands	r3, r2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d035      	beq.n	800db7a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	091b      	lsrs	r3, r3, #4
 800db16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800db18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	461a      	mov	r2, r3
 800db20:	6a38      	ldr	r0, [r7, #32]
 800db22:	f006 fda9 	bl	8014678 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	68da      	ldr	r2, [r3, #12]
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	091b      	lsrs	r3, r3, #4
 800db2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db32:	441a      	add	r2, r3
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	695a      	ldr	r2, [r3, #20]
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	091b      	lsrs	r3, r3, #4
 800db40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db44:	441a      	add	r2, r3
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	615a      	str	r2, [r3, #20]
 800db4a:	e016      	b.n	800db7a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	0c5b      	lsrs	r3, r3, #17
 800db50:	f003 030f 	and.w	r3, r3, #15
 800db54:	2b06      	cmp	r3, #6
 800db56:	d110      	bne.n	800db7a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800db5e:	2208      	movs	r2, #8
 800db60:	4619      	mov	r1, r3
 800db62:	6a38      	ldr	r0, [r7, #32]
 800db64:	f006 fd88 	bl	8014678 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	695a      	ldr	r2, [r3, #20]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	091b      	lsrs	r3, r3, #4
 800db70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db74:	441a      	add	r2, r3
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	699a      	ldr	r2, [r3, #24]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f042 0210 	orr.w	r2, r2, #16
 800db88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4618      	mov	r0, r3
 800db90:	f006 ff06 	bl	80149a0 <USB_ReadInterrupts>
 800db94:	4603      	mov	r3, r0
 800db96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800db9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800db9e:	f040 80a7 	bne.w	800dcf0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800dba2:	2300      	movs	r3, #0
 800dba4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f006 ff0b 	bl	80149c6 <USB_ReadDevAllOutEpInterrupt>
 800dbb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800dbb2:	e099      	b.n	800dce8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800dbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 808e 	beq.w	800dcdc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f006 ff2f 	bl	8014a2e <USB_ReadDevOutEPInterrupt>
 800dbd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00c      	beq.n	800dbf6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbde:	015a      	lsls	r2, r3, #5
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2301      	movs	r3, #1
 800dbec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800dbee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fed1 	bl	800e998 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	f003 0308 	and.w	r3, r3, #8
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00c      	beq.n	800dc1a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	015a      	lsls	r2, r3, #5
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	4413      	add	r3, r2
 800dc08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	2308      	movs	r3, #8
 800dc10:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800dc12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 ffa7 	bl	800eb68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f003 0310 	and.w	r3, r3, #16
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d008      	beq.n	800dc36 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc30:	461a      	mov	r2, r3
 800dc32:	2310      	movs	r3, #16
 800dc34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d030      	beq.n	800dca2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc48:	2b80      	cmp	r3, #128	@ 0x80
 800dc4a:	d109      	bne.n	800dc60 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	69fa      	ldr	r2, [r7, #28]
 800dc56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dc5e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800dc60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc62:	4613      	mov	r3, r2
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	4413      	add	r3, r2
 800dc72:	3304      	adds	r3, #4
 800dc74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	78db      	ldrb	r3, [r3, #3]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d108      	bne.n	800dc90 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2200      	movs	r2, #0
 800dc82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f009 faee 	bl	801726c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800dc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc92:	015a      	lsls	r2, r3, #5
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	2302      	movs	r3, #2
 800dca0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	f003 0320 	and.w	r3, r3, #32
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d008      	beq.n	800dcbe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2320      	movs	r3, #32
 800dcbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d009      	beq.n	800dcdc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcca:	015a      	lsls	r2, r3, #5
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dcda:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcde:	3301      	adds	r3, #1
 800dce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	085b      	lsrs	r3, r3, #1
 800dce6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800dce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f47f af62 	bne.w	800dbb4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f006 fe53 	bl	80149a0 <USB_ReadInterrupts>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dd00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dd04:	f040 80db 	bne.w	800debe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f006 fe74 	bl	80149fa <USB_ReadDevAllInEpInterrupt>
 800dd12:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800dd18:	e0cd      	b.n	800deb6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800dd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 80c2 	beq.w	800deaa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd2c:	b2d2      	uxtb	r2, r2
 800dd2e:	4611      	mov	r1, r2
 800dd30:	4618      	mov	r0, r3
 800dd32:	f006 fe9a 	bl	8014a6a <USB_ReadDevInEPInterrupt>
 800dd36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f003 0301 	and.w	r3, r3, #1
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d057      	beq.n	800ddf2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd44:	f003 030f 	and.w	r3, r3, #15
 800dd48:	2201      	movs	r2, #1
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	43db      	mvns	r3, r3
 800dd5c:	69f9      	ldr	r1, [r7, #28]
 800dd5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd62:	4013      	ands	r3, r2
 800dd64:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd72:	461a      	mov	r2, r3
 800dd74:	2301      	movs	r3, #1
 800dd76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d132      	bne.n	800dde6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd84:	4613      	mov	r3, r2
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	4413      	add	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	440b      	add	r3, r1
 800dd8e:	3348      	adds	r3, #72	@ 0x48
 800dd90:	6819      	ldr	r1, [r3, #0]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd96:	4613      	mov	r3, r2
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	4413      	add	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4403      	add	r3, r0
 800dda0:	3344      	adds	r3, #68	@ 0x44
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4419      	add	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddaa:	4613      	mov	r3, r2
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	4413      	add	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4403      	add	r3, r0
 800ddb4:	3348      	adds	r3, #72	@ 0x48
 800ddb6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d113      	bne.n	800dde6 <HAL_PCD_IRQHandler+0x3a2>
 800ddbe:	6879      	ldr	r1, [r7, #4]
 800ddc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	00db      	lsls	r3, r3, #3
 800ddc6:	4413      	add	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	440b      	add	r3, r1
 800ddcc:	334c      	adds	r3, #76	@ 0x4c
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d108      	bne.n	800dde6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6818      	ldr	r0, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ddde:	461a      	mov	r2, r3
 800dde0:	2101      	movs	r1, #1
 800dde2:	f006 fea3 	bl	8014b2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f009 f9b8 	bl	8017162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	f003 0308 	and.w	r3, r3, #8
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d008      	beq.n	800de0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	015a      	lsls	r2, r3, #5
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	4413      	add	r3, r2
 800de04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de08:	461a      	mov	r2, r3
 800de0a:	2308      	movs	r3, #8
 800de0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	f003 0310 	and.w	r3, r3, #16
 800de14:	2b00      	cmp	r3, #0
 800de16:	d008      	beq.n	800de2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800de18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de24:	461a      	mov	r2, r3
 800de26:	2310      	movs	r3, #16
 800de28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de30:	2b00      	cmp	r3, #0
 800de32:	d008      	beq.n	800de46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de40:	461a      	mov	r2, r3
 800de42:	2340      	movs	r3, #64	@ 0x40
 800de44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	f003 0302 	and.w	r3, r3, #2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d023      	beq.n	800de98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800de50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de52:	6a38      	ldr	r0, [r7, #32]
 800de54:	f005 fe82 	bl	8013b5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800de58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de5a:	4613      	mov	r3, r2
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	4413      	add	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	3338      	adds	r3, #56	@ 0x38
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	4413      	add	r3, r2
 800de68:	3304      	adds	r3, #4
 800de6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	78db      	ldrb	r3, [r3, #3]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d108      	bne.n	800de86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2200      	movs	r2, #0
 800de78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f009 fa05 	bl	8017290 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800de86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de88:	015a      	lsls	r2, r3, #5
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	4413      	add	r3, r2
 800de8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de92:	461a      	mov	r2, r3
 800de94:	2302      	movs	r3, #2
 800de96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d003      	beq.n	800deaa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800dea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fcea 	bl	800e87e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	3301      	adds	r3, #1
 800deae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800deb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb2:	085b      	lsrs	r3, r3, #1
 800deb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f47f af2e 	bne.w	800dd1a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f006 fd6c 	bl	80149a0 <USB_ReadInterrupts>
 800dec8:	4603      	mov	r3, r0
 800deca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ded2:	d122      	bne.n	800df1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800deee:	2b01      	cmp	r3, #1
 800def0:	d108      	bne.n	800df04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800defa:	2100      	movs	r1, #0
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fef5 	bl	800ecec <HAL_PCDEx_LPM_Callback>
 800df02:	e002      	b.n	800df0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f009 f9a3 	bl	8017250 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	695a      	ldr	r2, [r3, #20]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800df18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4618      	mov	r0, r3
 800df20:	f006 fd3e 	bl	80149a0 <USB_ReadInterrupts>
 800df24:	4603      	mov	r3, r0
 800df26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800df2e:	d112      	bne.n	800df56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d102      	bne.n	800df46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f009 f95f 	bl	8017204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	695a      	ldr	r2, [r3, #20]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800df54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f006 fd20 	bl	80149a0 <USB_ReadInterrupts>
 800df60:	4603      	mov	r3, r0
 800df62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df6a:	d121      	bne.n	800dfb0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	695a      	ldr	r2, [r3, #20]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800df7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800df82:	2b00      	cmp	r3, #0
 800df84:	d111      	bne.n	800dfaa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df94:	089b      	lsrs	r3, r3, #2
 800df96:	f003 020f 	and.w	r2, r3, #15
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fea2 	bl	800ecec <HAL_PCDEx_LPM_Callback>
 800dfa8:	e002      	b.n	800dfb0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f009 f92a 	bl	8017204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f006 fcf3 	bl	80149a0 <USB_ReadInterrupts>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dfc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfc4:	f040 80b7 	bne.w	800e136 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	69fa      	ldr	r2, [r7, #28]
 800dfd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfd6:	f023 0301 	bic.w	r3, r3, #1
 800dfda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2110      	movs	r1, #16
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f005 fdba 	bl	8013b5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfec:	e046      	b.n	800e07c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800dfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dffa:	461a      	mov	r2, r3
 800dffc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e000:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e004:	015a      	lsls	r2, r3, #5
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	4413      	add	r3, r2
 800e00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e012:	0151      	lsls	r1, r2, #5
 800e014:	69fa      	ldr	r2, [r7, #28]
 800e016:	440a      	add	r2, r1
 800e018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e01c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e020:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e024:	015a      	lsls	r2, r3, #5
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	4413      	add	r3, r2
 800e02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e02e:	461a      	mov	r2, r3
 800e030:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e034:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e046:	0151      	lsls	r1, r2, #5
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	440a      	add	r2, r1
 800e04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e050:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e054:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	015a      	lsls	r2, r3, #5
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	4413      	add	r3, r2
 800e05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e066:	0151      	lsls	r1, r2, #5
 800e068:	69fa      	ldr	r2, [r7, #28]
 800e06a:	440a      	add	r2, r1
 800e06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e070:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e074:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e078:	3301      	adds	r3, #1
 800e07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e082:	429a      	cmp	r2, r3
 800e084:	d3b3      	bcc.n	800dfee <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e08c:	69db      	ldr	r3, [r3, #28]
 800e08e:	69fa      	ldr	r2, [r7, #28]
 800e090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e094:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800e098:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d016      	beq.n	800e0d0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0b2:	f043 030b 	orr.w	r3, r3, #11
 800e0b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0c2:	69fa      	ldr	r2, [r7, #28]
 800e0c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0c8:	f043 030b 	orr.w	r3, r3, #11
 800e0cc:	6453      	str	r3, [r2, #68]	@ 0x44
 800e0ce:	e015      	b.n	800e0fc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d6:	695a      	ldr	r2, [r3, #20]
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0de:	4619      	mov	r1, r3
 800e0e0:	f242 032b 	movw	r3, #8235	@ 0x202b
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	69fa      	ldr	r2, [r7, #28]
 800e0f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0f6:	f043 030b 	orr.w	r3, r3, #11
 800e0fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e10a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e10e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6818      	ldr	r0, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e120:	461a      	mov	r2, r3
 800e122:	f006 fd03 	bl	8014b2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	695a      	ldr	r2, [r3, #20]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800e134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f006 fc30 	bl	80149a0 <USB_ReadInterrupts>
 800e140:	4603      	mov	r3, r0
 800e142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e14a:	d124      	bne.n	800e196 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4618      	mov	r0, r3
 800e152:	f006 fcc7 	bl	8014ae4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f005 fd7b 	bl	8013c56 <USB_GetDevSpeed>
 800e160:	4603      	mov	r3, r0
 800e162:	461a      	mov	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681c      	ldr	r4, [r3, #0]
 800e16c:	f001 fd9e 	bl	800fcac <HAL_RCC_GetHCLKFreq>
 800e170:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e176:	b2db      	uxtb	r3, r3
 800e178:	461a      	mov	r2, r3
 800e17a:	4620      	mov	r0, r4
 800e17c:	f005 fa80 	bl	8013680 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f009 f816 	bl	80171b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	695a      	ldr	r2, [r3, #20]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800e194:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f006 fc00 	bl	80149a0 <USB_ReadInterrupts>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f003 0308 	and.w	r3, r3, #8
 800e1a6:	2b08      	cmp	r3, #8
 800e1a8:	d10a      	bne.n	800e1c0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f008 fff3 	bl	8017196 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	695a      	ldr	r2, [r3, #20]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f002 0208 	and.w	r2, r2, #8
 800e1be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f006 fbeb 	bl	80149a0 <USB_ReadInterrupts>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1d0:	2b80      	cmp	r3, #128	@ 0x80
 800e1d2:	d122      	bne.n	800e21a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1e4:	e014      	b.n	800e210 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e1e6:	6879      	ldr	r1, [r7, #4]
 800e1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	4413      	add	r3, r2
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	440b      	add	r3, r1
 800e1f4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d105      	bne.n	800e20a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	b2db      	uxtb	r3, r3
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 fb09 	bl	800e81c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	3301      	adds	r3, #1
 800e20e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e216:	429a      	cmp	r2, r3
 800e218:	d3e5      	bcc.n	800e1e6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4618      	mov	r0, r3
 800e220:	f006 fbbe 	bl	80149a0 <USB_ReadInterrupts>
 800e224:	4603      	mov	r3, r0
 800e226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e22a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e22e:	d13b      	bne.n	800e2a8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e230:	2301      	movs	r3, #1
 800e232:	627b      	str	r3, [r7, #36]	@ 0x24
 800e234:	e02b      	b.n	800e28e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	015a      	lsls	r2, r3, #5
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	4413      	add	r3, r2
 800e23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e24a:	4613      	mov	r3, r2
 800e24c:	00db      	lsls	r3, r3, #3
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	440b      	add	r3, r1
 800e254:	3340      	adds	r3, #64	@ 0x40
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d115      	bne.n	800e288 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e25c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da12      	bge.n	800e288 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e266:	4613      	mov	r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	4413      	add	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	440b      	add	r3, r1
 800e270:	333f      	adds	r3, #63	@ 0x3f
 800e272:	2201      	movs	r2, #1
 800e274:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 faca 	bl	800e81c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28a:	3301      	adds	r3, #1
 800e28c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e294:	429a      	cmp	r2, r3
 800e296:	d3ce      	bcc.n	800e236 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	695a      	ldr	r2, [r3, #20]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800e2a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f006 fb77 	bl	80149a0 <USB_ReadInterrupts>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e2b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2bc:	d155      	bne.n	800e36a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e2be:	2301      	movs	r3, #1
 800e2c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2c2:	e045      	b.n	800e350 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c6:	015a      	lsls	r2, r3, #5
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d8:	4613      	mov	r3, r2
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	440b      	add	r3, r1
 800e2e2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d12e      	bne.n	800e34a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e2ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	da2b      	bge.n	800e34a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800e2fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e302:	429a      	cmp	r2, r3
 800e304:	d121      	bne.n	800e34a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e306:	6879      	ldr	r1, [r7, #4]
 800e308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e30a:	4613      	mov	r3, r2
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e318:	2201      	movs	r2, #1
 800e31a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10a      	bne.n	800e34a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	69fa      	ldr	r2, [r7, #28]
 800e33e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e346:	6053      	str	r3, [r2, #4]
            break;
 800e348:	e007      	b.n	800e35a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	3301      	adds	r3, #1
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e356:	429a      	cmp	r2, r3
 800e358:	d3b4      	bcc.n	800e2c4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	695a      	ldr	r2, [r3, #20]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800e368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4618      	mov	r0, r3
 800e370:	f006 fb16 	bl	80149a0 <USB_ReadInterrupts>
 800e374:	4603      	mov	r3, r0
 800e376:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e37e:	d10a      	bne.n	800e396 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f008 ff97 	bl	80172b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	695a      	ldr	r2, [r3, #20]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800e394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f006 fb00 	bl	80149a0 <USB_ReadInterrupts>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	f003 0304 	and.w	r3, r3, #4
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	d115      	bne.n	800e3d6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f008 ff87 	bl	80172d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6859      	ldr	r1, [r3, #4]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	430a      	orrs	r2, r1
 800e3d0:	605a      	str	r2, [r3, #4]
 800e3d2:	e000      	b.n	800e3d6 <HAL_PCD_IRQHandler+0x992>
      return;
 800e3d4:	bf00      	nop
    }
  }
}
 800e3d6:	3734      	adds	r7, #52	@ 0x34
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd90      	pop	{r4, r7, pc}

0800e3dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <HAL_PCD_SetAddress+0x1a>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e013      	b.n	800e41e <HAL_PCD_SetAddress+0x42>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	78fa      	ldrb	r2, [r7, #3]
 800e402:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f006 fa5e 	bl	80148d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b084      	sub	sp, #16
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
 800e42e:	4608      	mov	r0, r1
 800e430:	4611      	mov	r1, r2
 800e432:	461a      	mov	r2, r3
 800e434:	4603      	mov	r3, r0
 800e436:	70fb      	strb	r3, [r7, #3]
 800e438:	460b      	mov	r3, r1
 800e43a:	803b      	strh	r3, [r7, #0]
 800e43c:	4613      	mov	r3, r2
 800e43e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da0f      	bge.n	800e46c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e44c:	78fb      	ldrb	r3, [r7, #3]
 800e44e:	f003 020f 	and.w	r2, r3, #15
 800e452:	4613      	mov	r3, r2
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4413      	add	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	3338      	adds	r3, #56	@ 0x38
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	4413      	add	r3, r2
 800e460:	3304      	adds	r3, #4
 800e462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	705a      	strb	r2, [r3, #1]
 800e46a:	e00f      	b.n	800e48c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e46c:	78fb      	ldrb	r3, [r7, #3]
 800e46e:	f003 020f 	and.w	r2, r3, #15
 800e472:	4613      	mov	r3, r2
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	4413      	add	r3, r2
 800e482:	3304      	adds	r3, #4
 800e484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e48c:	78fb      	ldrb	r3, [r7, #3]
 800e48e:	f003 030f 	and.w	r3, r3, #15
 800e492:	b2da      	uxtb	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e498:	883a      	ldrh	r2, [r7, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	78ba      	ldrb	r2, [r7, #2]
 800e4a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	785b      	ldrb	r3, [r3, #1]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d004      	beq.n	800e4b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e4b6:	78bb      	ldrb	r3, [r7, #2]
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d102      	bne.n	800e4c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d101      	bne.n	800e4d0 <HAL_PCD_EP_Open+0xaa>
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	e00e      	b.n	800e4ee <HAL_PCD_EP_Open+0xc8>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68f9      	ldr	r1, [r7, #12]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f005 fbde 	bl	8013ca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	460b      	mov	r3, r1
 800e500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e506:	2b00      	cmp	r3, #0
 800e508:	da0f      	bge.n	800e52a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	f003 020f 	and.w	r2, r3, #15
 800e510:	4613      	mov	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	4413      	add	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	3338      	adds	r3, #56	@ 0x38
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	4413      	add	r3, r2
 800e51e:	3304      	adds	r3, #4
 800e520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2201      	movs	r2, #1
 800e526:	705a      	strb	r2, [r3, #1]
 800e528:	e00f      	b.n	800e54a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	f003 020f 	and.w	r2, r3, #15
 800e530:	4613      	mov	r3, r2
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	4413      	add	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	4413      	add	r3, r2
 800e540:	3304      	adds	r3, #4
 800e542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e54a:	78fb      	ldrb	r3, [r7, #3]
 800e54c:	f003 030f 	and.w	r3, r3, #15
 800e550:	b2da      	uxtb	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d101      	bne.n	800e564 <HAL_PCD_EP_Close+0x6e>
 800e560:	2302      	movs	r3, #2
 800e562:	e00e      	b.n	800e582 <HAL_PCD_EP_Close+0x8c>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68f9      	ldr	r1, [r7, #12]
 800e572:	4618      	mov	r0, r3
 800e574:	f005 fc1c 	bl	8013db0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b086      	sub	sp, #24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	60f8      	str	r0, [r7, #12]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
 800e596:	460b      	mov	r3, r1
 800e598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e59a:	7afb      	ldrb	r3, [r7, #11]
 800e59c:	f003 020f 	and.w	r2, r3, #15
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	00db      	lsls	r3, r3, #3
 800e5a4:	4413      	add	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5cc:	7afb      	ldrb	r3, [r7, #11]
 800e5ce:	f003 030f 	and.w	r3, r3, #15
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d102      	bne.n	800e5e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6818      	ldr	r0, [r3, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6979      	ldr	r1, [r7, #20]
 800e5f4:	f005 fcb8 	bl	8013f68 <USB_EPStartXfer>

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	460b      	mov	r3, r1
 800e60c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e60e:	78fb      	ldrb	r3, [r7, #3]
 800e610:	f003 020f 	and.w	r2, r3, #15
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	4613      	mov	r3, r2
 800e618:	00db      	lsls	r3, r3, #3
 800e61a:	4413      	add	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	440b      	add	r3, r1
 800e620:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800e624:	681b      	ldr	r3, [r3, #0]
}
 800e626:	4618      	mov	r0, r3
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b086      	sub	sp, #24
 800e636:	af00      	add	r7, sp, #0
 800e638:	60f8      	str	r0, [r7, #12]
 800e63a:	607a      	str	r2, [r7, #4]
 800e63c:	603b      	str	r3, [r7, #0]
 800e63e:	460b      	mov	r3, r1
 800e640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e642:	7afb      	ldrb	r3, [r7, #11]
 800e644:	f003 020f 	and.w	r2, r3, #15
 800e648:	4613      	mov	r3, r2
 800e64a:	00db      	lsls	r3, r3, #3
 800e64c:	4413      	add	r3, r2
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	3338      	adds	r3, #56	@ 0x38
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	4413      	add	r3, r2
 800e656:	3304      	adds	r3, #4
 800e658:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2200      	movs	r2, #0
 800e66a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2201      	movs	r2, #1
 800e670:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e672:	7afb      	ldrb	r3, [r7, #11]
 800e674:	f003 030f 	and.w	r3, r3, #15
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d102      	bne.n	800e68c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6818      	ldr	r0, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	461a      	mov	r2, r3
 800e698:	6979      	ldr	r1, [r7, #20]
 800e69a:	f005 fc65 	bl	8013f68 <USB_EPStartXfer>

  return HAL_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e6b4:	78fb      	ldrb	r3, [r7, #3]
 800e6b6:	f003 020f 	and.w	r2, r3, #15
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d901      	bls.n	800e6c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	e050      	b.n	800e768 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e6c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	da0f      	bge.n	800e6ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6ce:	78fb      	ldrb	r3, [r7, #3]
 800e6d0:	f003 020f 	and.w	r2, r3, #15
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	4413      	add	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	3338      	adds	r3, #56	@ 0x38
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	705a      	strb	r2, [r3, #1]
 800e6ec:	e00d      	b.n	800e70a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e6ee:	78fa      	ldrb	r2, [r7, #3]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	00db      	lsls	r3, r3, #3
 800e6f4:	4413      	add	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	4413      	add	r3, r2
 800e700:	3304      	adds	r3, #4
 800e702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2201      	movs	r2, #1
 800e70e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e710:	78fb      	ldrb	r3, [r7, #3]
 800e712:	f003 030f 	and.w	r3, r3, #15
 800e716:	b2da      	uxtb	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e722:	2b01      	cmp	r3, #1
 800e724:	d101      	bne.n	800e72a <HAL_PCD_EP_SetStall+0x82>
 800e726:	2302      	movs	r3, #2
 800e728:	e01e      	b.n	800e768 <HAL_PCD_EP_SetStall+0xc0>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2201      	movs	r2, #1
 800e72e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	4618      	mov	r0, r3
 800e73a:	f005 fff5 	bl	8014728 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e73e:	78fb      	ldrb	r3, [r7, #3]
 800e740:	f003 030f 	and.w	r3, r3, #15
 800e744:	2b00      	cmp	r3, #0
 800e746:	d10a      	bne.n	800e75e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6818      	ldr	r0, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	b2d9      	uxtb	r1, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800e758:	461a      	mov	r2, r3
 800e75a:	f006 f9e7 	bl	8014b2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	f003 020f 	and.w	r2, r3, #15
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d901      	bls.n	800e78e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e042      	b.n	800e814 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e78e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e792:	2b00      	cmp	r3, #0
 800e794:	da0f      	bge.n	800e7b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	f003 020f 	and.w	r2, r3, #15
 800e79c:	4613      	mov	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	3338      	adds	r3, #56	@ 0x38
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	705a      	strb	r2, [r3, #1]
 800e7b4:	e00f      	b.n	800e7d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	f003 020f 	and.w	r2, r3, #15
 800e7bc:	4613      	mov	r3, r2
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	4413      	add	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e7dc:	78fb      	ldrb	r3, [r7, #3]
 800e7de:	f003 030f 	and.w	r3, r3, #15
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d101      	bne.n	800e7f6 <HAL_PCD_EP_ClrStall+0x86>
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	e00e      	b.n	800e814 <HAL_PCD_EP_ClrStall+0xa4>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	4618      	mov	r0, r3
 800e806:	f005 fffd 	bl	8014804 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	da0c      	bge.n	800e84a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	f003 020f 	and.w	r2, r3, #15
 800e836:	4613      	mov	r3, r2
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	3338      	adds	r3, #56	@ 0x38
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	3304      	adds	r3, #4
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	e00c      	b.n	800e864 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e84a:	78fb      	ldrb	r3, [r7, #3]
 800e84c:	f003 020f 	and.w	r2, r3, #15
 800e850:	4613      	mov	r3, r2
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	4413      	add	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	4413      	add	r3, r2
 800e860:	3304      	adds	r3, #4
 800e862:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	68f9      	ldr	r1, [r7, #12]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f005 fe1c 	bl	80144a8 <USB_EPStopXfer>
 800e870:	4603      	mov	r3, r0
 800e872:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e874:	7afb      	ldrb	r3, [r7, #11]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b08a      	sub	sp, #40	@ 0x28
 800e882:	af02      	add	r7, sp, #8
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	3338      	adds	r3, #56	@ 0x38
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	695a      	ldr	r2, [r3, #20]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d901      	bls.n	800e8b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e06c      	b.n	800e990 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	691a      	ldr	r2, [r3, #16]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d902      	bls.n	800e8d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	3303      	adds	r3, #3
 800e8d6:	089b      	lsrs	r3, r3, #2
 800e8d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e8da:	e02b      	b.n	800e934 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	691a      	ldr	r2, [r3, #16]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	695b      	ldr	r3, [r3, #20]
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d902      	bls.n	800e8f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	3303      	adds	r3, #3
 800e8fc:	089b      	lsrs	r3, r3, #2
 800e8fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68d9      	ldr	r1, [r3, #12]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	b2da      	uxtb	r2, r3
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e910:	b2db      	uxtb	r3, r3
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	4603      	mov	r3, r0
 800e916:	6978      	ldr	r0, [r7, #20]
 800e918:	f005 fe70 	bl	80145fc <USB_WritePacket>

    ep->xfer_buff  += len;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	441a      	add	r2, r3
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	695a      	ldr	r2, [r3, #20]
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	441a      	add	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	015a      	lsls	r2, r3, #5
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	4413      	add	r3, r2
 800e93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	429a      	cmp	r2, r3
 800e948:	d809      	bhi.n	800e95e <PCD_WriteEmptyTxFifo+0xe0>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	695a      	ldr	r2, [r3, #20]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e952:	429a      	cmp	r2, r3
 800e954:	d203      	bcs.n	800e95e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1be      	bne.n	800e8dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	691a      	ldr	r2, [r3, #16]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	429a      	cmp	r2, r3
 800e968:	d811      	bhi.n	800e98e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	f003 030f 	and.w	r3, r3, #15
 800e970:	2201      	movs	r2, #1
 800e972:	fa02 f303 	lsl.w	r3, r2, r3
 800e976:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e97e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	43db      	mvns	r3, r3
 800e984:	6939      	ldr	r1, [r7, #16]
 800e986:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e98a:	4013      	ands	r3, r2
 800e98c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3720      	adds	r7, #32
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	333c      	adds	r3, #60	@ 0x3c
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	015a      	lsls	r2, r3, #5
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	4413      	add	r3, r2
 800e9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d17b      	bne.n	800eac6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d015      	beq.n	800ea04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	4a61      	ldr	r2, [pc, #388]	@ (800eb60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	f240 80b9 	bls.w	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 80b3 	beq.w	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	015a      	lsls	r2, r3, #5
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea00:	6093      	str	r3, [r2, #8]
 800ea02:	e0a7      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d009      	beq.n	800ea22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	2320      	movs	r3, #32
 800ea1e:	6093      	str	r3, [r2, #8]
 800ea20:	e098      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f040 8093 	bne.w	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	4a4b      	ldr	r2, [pc, #300]	@ (800eb60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d90f      	bls.n	800ea56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00a      	beq.n	800ea56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	015a      	lsls	r2, r3, #5
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	4413      	add	r3, r2
 800ea48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea52:	6093      	str	r3, [r2, #8]
 800ea54:	e07e      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	4413      	add	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	4413      	add	r3, r2
 800ea68:	3304      	adds	r3, #4
 800ea6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6a1a      	ldr	r2, [r3, #32]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	0159      	lsls	r1, r3, #5
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	440b      	add	r3, r1
 800ea78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea82:	1ad2      	subs	r2, r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d114      	bne.n	800eab8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6818      	ldr	r0, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	f006 f842 	bl	8014b2c <USB_EP0_OutStart>
 800eaa8:	e006      	b.n	800eab8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	68da      	ldr	r2, [r3, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	695b      	ldr	r3, [r3, #20]
 800eab2:	441a      	add	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	4619      	mov	r1, r3
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f008 fb34 	bl	801712c <HAL_PCD_DataOutStageCallback>
 800eac4:	e046      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	4a26      	ldr	r2, [pc, #152]	@ (800eb64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d124      	bne.n	800eb18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00a      	beq.n	800eaee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	015a      	lsls	r2, r3, #5
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	4413      	add	r3, r2
 800eae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae4:	461a      	mov	r2, r3
 800eae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eaea:	6093      	str	r3, [r2, #8]
 800eaec:	e032      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	f003 0320 	and.w	r3, r3, #32
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d008      	beq.n	800eb0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	015a      	lsls	r2, r3, #5
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	4413      	add	r3, r2
 800eb00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb04:	461a      	mov	r2, r3
 800eb06:	2320      	movs	r3, #32
 800eb08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f008 fb0b 	bl	801712c <HAL_PCD_DataOutStageCallback>
 800eb16:	e01d      	b.n	800eb54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d114      	bne.n	800eb48 <PCD_EP_OutXfrComplete_int+0x1b0>
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	4613      	mov	r3, r2
 800eb24:	00db      	lsls	r3, r3, #3
 800eb26:	4413      	add	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	440b      	add	r3, r1
 800eb2c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d108      	bne.n	800eb48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eb40:	461a      	mov	r2, r3
 800eb42:	2100      	movs	r1, #0
 800eb44:	f005 fff2 	bl	8014b2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f008 faec 	bl	801712c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	4f54300a 	.word	0x4f54300a
 800eb64:	4f54310a 	.word	0x4f54310a

0800eb68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	333c      	adds	r3, #60	@ 0x3c
 800eb80:	3304      	adds	r3, #4
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	015a      	lsls	r2, r3, #5
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	4a15      	ldr	r2, [pc, #84]	@ (800ebf0 <PCD_EP_OutSetupPacket_int+0x88>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d90e      	bls.n	800ebbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ebba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f008 faa3 	bl	8017108 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	4a0a      	ldr	r2, [pc, #40]	@ (800ebf0 <PCD_EP_OutSetupPacket_int+0x88>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d90c      	bls.n	800ebe4 <PCD_EP_OutSetupPacket_int+0x7c>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d108      	bne.n	800ebe4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6818      	ldr	r0, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ebdc:	461a      	mov	r2, r3
 800ebde:	2101      	movs	r1, #1
 800ebe0:	f005 ffa4 	bl	8014b2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3718      	adds	r7, #24
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	4f54300a 	.word	0x4f54300a

0800ebf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	70fb      	strb	r3, [r7, #3]
 800ec00:	4613      	mov	r3, r2
 800ec02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ec0c:	78fb      	ldrb	r3, [r7, #3]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d107      	bne.n	800ec22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ec12:	883b      	ldrh	r3, [r7, #0]
 800ec14:	0419      	lsls	r1, r3, #16
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	430a      	orrs	r2, r1
 800ec1e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ec20:	e028      	b.n	800ec74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec28:	0c1b      	lsrs	r3, r3, #16
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ec30:	2300      	movs	r3, #0
 800ec32:	73fb      	strb	r3, [r7, #15]
 800ec34:	e00d      	b.n	800ec52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	3340      	adds	r3, #64	@ 0x40
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4413      	add	r3, r2
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	0c1b      	lsrs	r3, r3, #16
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	4413      	add	r3, r2
 800ec4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	73fb      	strb	r3, [r7, #15]
 800ec52:	7bfa      	ldrb	r2, [r7, #15]
 800ec54:	78fb      	ldrb	r3, [r7, #3]
 800ec56:	3b01      	subs	r3, #1
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d3ec      	bcc.n	800ec36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ec5c:	883b      	ldrh	r3, [r7, #0]
 800ec5e:	0418      	lsls	r0, r3, #16
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6819      	ldr	r1, [r3, #0]
 800ec64:	78fb      	ldrb	r3, [r7, #3]
 800ec66:	3b01      	subs	r3, #1
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	4302      	orrs	r2, r0
 800ec6c:	3340      	adds	r3, #64	@ 0x40
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	440b      	add	r3, r1
 800ec72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b083      	sub	sp, #12
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	887a      	ldrh	r2, [r7, #2]
 800ec94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ec96:	2300      	movs	r3, #0
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecd2:	4b05      	ldr	r3, [pc, #20]	@ (800ece8 <HAL_PCDEx_ActivateLPM+0x44>)
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	10000003 	.word	0x10000003

0800ecec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ed0c:	4b19      	ldr	r3, [pc, #100]	@ (800ed74 <HAL_PWREx_ConfigSupply+0x70>)
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	2b04      	cmp	r3, #4
 800ed16:	d00a      	beq.n	800ed2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ed18:	4b16      	ldr	r3, [pc, #88]	@ (800ed74 <HAL_PWREx_ConfigSupply+0x70>)
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f003 0307 	and.w	r3, r3, #7
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d001      	beq.n	800ed2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e01f      	b.n	800ed6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	e01d      	b.n	800ed6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ed2e:	4b11      	ldr	r3, [pc, #68]	@ (800ed74 <HAL_PWREx_ConfigSupply+0x70>)
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	f023 0207 	bic.w	r2, r3, #7
 800ed36:	490f      	ldr	r1, [pc, #60]	@ (800ed74 <HAL_PWREx_ConfigSupply+0x70>)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ed3e:	f7fa fc67 	bl	8009610 <HAL_GetTick>
 800ed42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ed44:	e009      	b.n	800ed5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ed46:	f7fa fc63 	bl	8009610 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed54:	d901      	bls.n	800ed5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e007      	b.n	800ed6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ed5a:	4b06      	ldr	r3, [pc, #24]	@ (800ed74 <HAL_PWREx_ConfigSupply+0x70>)
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed66:	d1ee      	bne.n	800ed46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	58024800 	.word	0x58024800

0800ed78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ed7c:	4b05      	ldr	r3, [pc, #20]	@ (800ed94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	4a04      	ldr	r2, [pc, #16]	@ (800ed94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ed82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed86:	60d3      	str	r3, [r2, #12]
}
 800ed88:	bf00      	nop
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	58024800 	.word	0x58024800

0800ed98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08c      	sub	sp, #48	@ 0x30
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d102      	bne.n	800edac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	f000 bc48 	b.w	800f63c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 0301 	and.w	r3, r3, #1
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f000 8088 	beq.w	800eeca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800edba:	4b99      	ldr	r3, [pc, #612]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800edbc:	691b      	ldr	r3, [r3, #16]
 800edbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800edc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800edc4:	4b96      	ldr	r3, [pc, #600]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800edca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edcc:	2b10      	cmp	r3, #16
 800edce:	d007      	beq.n	800ede0 <HAL_RCC_OscConfig+0x48>
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	2b18      	cmp	r3, #24
 800edd4:	d111      	bne.n	800edfa <HAL_RCC_OscConfig+0x62>
 800edd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd8:	f003 0303 	and.w	r3, r3, #3
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d10c      	bne.n	800edfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ede0:	4b8f      	ldr	r3, [pc, #572]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d06d      	beq.n	800eec8 <HAL_RCC_OscConfig+0x130>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d169      	bne.n	800eec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800edf4:	2301      	movs	r3, #1
 800edf6:	f000 bc21 	b.w	800f63c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee02:	d106      	bne.n	800ee12 <HAL_RCC_OscConfig+0x7a>
 800ee04:	4b86      	ldr	r3, [pc, #536]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a85      	ldr	r2, [pc, #532]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee0e:	6013      	str	r3, [r2, #0]
 800ee10:	e02e      	b.n	800ee70 <HAL_RCC_OscConfig+0xd8>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10c      	bne.n	800ee34 <HAL_RCC_OscConfig+0x9c>
 800ee1a:	4b81      	ldr	r3, [pc, #516]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a80      	ldr	r2, [pc, #512]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	4b7e      	ldr	r3, [pc, #504]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a7d      	ldr	r2, [pc, #500]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee30:	6013      	str	r3, [r2, #0]
 800ee32:	e01d      	b.n	800ee70 <HAL_RCC_OscConfig+0xd8>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee3c:	d10c      	bne.n	800ee58 <HAL_RCC_OscConfig+0xc0>
 800ee3e:	4b78      	ldr	r3, [pc, #480]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a77      	ldr	r2, [pc, #476]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ee48:	6013      	str	r3, [r2, #0]
 800ee4a:	4b75      	ldr	r3, [pc, #468]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a74      	ldr	r2, [pc, #464]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	e00b      	b.n	800ee70 <HAL_RCC_OscConfig+0xd8>
 800ee58:	4b71      	ldr	r3, [pc, #452]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a70      	ldr	r2, [pc, #448]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	4b6e      	ldr	r3, [pc, #440]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a6d      	ldr	r2, [pc, #436]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d013      	beq.n	800eea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee78:	f7fa fbca 	bl	8009610 <HAL_GetTick>
 800ee7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee7e:	e008      	b.n	800ee92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee80:	f7fa fbc6 	bl	8009610 <HAL_GetTick>
 800ee84:	4602      	mov	r2, r0
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	2b64      	cmp	r3, #100	@ 0x64
 800ee8c:	d901      	bls.n	800ee92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	e3d4      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee92:	4b63      	ldr	r3, [pc, #396]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d0f0      	beq.n	800ee80 <HAL_RCC_OscConfig+0xe8>
 800ee9e:	e014      	b.n	800eeca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eea0:	f7fa fbb6 	bl	8009610 <HAL_GetTick>
 800eea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eea6:	e008      	b.n	800eeba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eea8:	f7fa fbb2 	bl	8009610 <HAL_GetTick>
 800eeac:	4602      	mov	r2, r0
 800eeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	2b64      	cmp	r3, #100	@ 0x64
 800eeb4:	d901      	bls.n	800eeba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	e3c0      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eeba:	4b59      	ldr	r3, [pc, #356]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1f0      	bne.n	800eea8 <HAL_RCC_OscConfig+0x110>
 800eec6:	e000      	b.n	800eeca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 80ca 	beq.w	800f06c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eed8:	4b51      	ldr	r3, [pc, #324]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eee0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eee2:	4b4f      	ldr	r3, [pc, #316]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800eee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eee6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d007      	beq.n	800eefe <HAL_RCC_OscConfig+0x166>
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	2b18      	cmp	r3, #24
 800eef2:	d156      	bne.n	800efa2 <HAL_RCC_OscConfig+0x20a>
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	f003 0303 	and.w	r3, r3, #3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d151      	bne.n	800efa2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eefe:	4b48      	ldr	r3, [pc, #288]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 0304 	and.w	r3, r3, #4
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d005      	beq.n	800ef16 <HAL_RCC_OscConfig+0x17e>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ef12:	2301      	movs	r3, #1
 800ef14:	e392      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ef16:	4b42      	ldr	r3, [pc, #264]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f023 0219 	bic.w	r2, r3, #25
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	493f      	ldr	r1, [pc, #252]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef24:	4313      	orrs	r3, r2
 800ef26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef28:	f7fa fb72 	bl	8009610 <HAL_GetTick>
 800ef2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ef2e:	e008      	b.n	800ef42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef30:	f7fa fb6e 	bl	8009610 <HAL_GetTick>
 800ef34:	4602      	mov	r2, r0
 800ef36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d901      	bls.n	800ef42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ef3e:	2303      	movs	r3, #3
 800ef40:	e37c      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ef42:	4b37      	ldr	r3, [pc, #220]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f003 0304 	and.w	r3, r3, #4
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0f0      	beq.n	800ef30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef4e:	f7fa fb8f 	bl	8009670 <HAL_GetREVID>
 800ef52:	4603      	mov	r3, r0
 800ef54:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d817      	bhi.n	800ef8c <HAL_RCC_OscConfig+0x1f4>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b40      	cmp	r3, #64	@ 0x40
 800ef62:	d108      	bne.n	800ef76 <HAL_RCC_OscConfig+0x1de>
 800ef64:	4b2e      	ldr	r3, [pc, #184]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ef6c:	4a2c      	ldr	r2, [pc, #176]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ef72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ef74:	e07a      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef76:	4b2a      	ldr	r3, [pc, #168]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	031b      	lsls	r3, r3, #12
 800ef84:	4926      	ldr	r1, [pc, #152]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef86:	4313      	orrs	r3, r2
 800ef88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ef8a:	e06f      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef8c:	4b24      	ldr	r3, [pc, #144]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	061b      	lsls	r3, r3, #24
 800ef9a:	4921      	ldr	r1, [pc, #132]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800efa0:	e064      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d047      	beq.n	800f03a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800efaa:	4b1d      	ldr	r3, [pc, #116]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f023 0219 	bic.w	r2, r3, #25
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	491a      	ldr	r1, [pc, #104]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800efb8:	4313      	orrs	r3, r2
 800efba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efbc:	f7fa fb28 	bl	8009610 <HAL_GetTick>
 800efc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efc2:	e008      	b.n	800efd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800efc4:	f7fa fb24 	bl	8009610 <HAL_GetTick>
 800efc8:	4602      	mov	r2, r0
 800efca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d901      	bls.n	800efd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e332      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efd6:	4b12      	ldr	r3, [pc, #72]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 0304 	and.w	r3, r3, #4
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d0f0      	beq.n	800efc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efe2:	f7fa fb45 	bl	8009670 <HAL_GetREVID>
 800efe6:	4603      	mov	r3, r0
 800efe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800efec:	4293      	cmp	r3, r2
 800efee:	d819      	bhi.n	800f024 <HAL_RCC_OscConfig+0x28c>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	2b40      	cmp	r3, #64	@ 0x40
 800eff6:	d108      	bne.n	800f00a <HAL_RCC_OscConfig+0x272>
 800eff8:	4b09      	ldr	r3, [pc, #36]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f000:	4a07      	ldr	r2, [pc, #28]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800f002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f006:	6053      	str	r3, [r2, #4]
 800f008:	e030      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
 800f00a:	4b05      	ldr	r3, [pc, #20]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	031b      	lsls	r3, r3, #12
 800f018:	4901      	ldr	r1, [pc, #4]	@ (800f020 <HAL_RCC_OscConfig+0x288>)
 800f01a:	4313      	orrs	r3, r2
 800f01c:	604b      	str	r3, [r1, #4]
 800f01e:	e025      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
 800f020:	58024400 	.word	0x58024400
 800f024:	4b9a      	ldr	r3, [pc, #616]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	061b      	lsls	r3, r3, #24
 800f032:	4997      	ldr	r1, [pc, #604]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f034:	4313      	orrs	r3, r2
 800f036:	604b      	str	r3, [r1, #4]
 800f038:	e018      	b.n	800f06c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f03a:	4b95      	ldr	r3, [pc, #596]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a94      	ldr	r2, [pc, #592]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f040:	f023 0301 	bic.w	r3, r3, #1
 800f044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f046:	f7fa fae3 	bl	8009610 <HAL_GetTick>
 800f04a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f04c:	e008      	b.n	800f060 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f04e:	f7fa fadf 	bl	8009610 <HAL_GetTick>
 800f052:	4602      	mov	r2, r0
 800f054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d901      	bls.n	800f060 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e2ed      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f060:	4b8b      	ldr	r3, [pc, #556]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0304 	and.w	r3, r3, #4
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1f0      	bne.n	800f04e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f003 0310 	and.w	r3, r3, #16
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80a9 	beq.w	800f1cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f07a:	4b85      	ldr	r3, [pc, #532]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f082:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f084:	4b82      	ldr	r3, [pc, #520]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f088:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	2b08      	cmp	r3, #8
 800f08e:	d007      	beq.n	800f0a0 <HAL_RCC_OscConfig+0x308>
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	2b18      	cmp	r3, #24
 800f094:	d13a      	bne.n	800f10c <HAL_RCC_OscConfig+0x374>
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f003 0303 	and.w	r3, r3, #3
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d135      	bne.n	800f10c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f0a0:	4b7b      	ldr	r3, [pc, #492]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x320>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	2b80      	cmp	r3, #128	@ 0x80
 800f0b2:	d001      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e2c1      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f0b8:	f7fa fada 	bl	8009670 <HAL_GetREVID>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d817      	bhi.n	800f0f6 <HAL_RCC_OscConfig+0x35e>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	2b20      	cmp	r3, #32
 800f0cc:	d108      	bne.n	800f0e0 <HAL_RCC_OscConfig+0x348>
 800f0ce:	4b70      	ldr	r3, [pc, #448]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f0d6:	4a6e      	ldr	r2, [pc, #440]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f0de:	e075      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f0e0:	4b6b      	ldr	r3, [pc, #428]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	069b      	lsls	r3, r3, #26
 800f0ee:	4968      	ldr	r1, [pc, #416]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f0f4:	e06a      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f0f6:	4b66      	ldr	r3, [pc, #408]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	061b      	lsls	r3, r3, #24
 800f104:	4962      	ldr	r1, [pc, #392]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f106:	4313      	orrs	r3, r2
 800f108:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f10a:	e05f      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d042      	beq.n	800f19a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f114:	4b5e      	ldr	r3, [pc, #376]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a5d      	ldr	r2, [pc, #372]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f11e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f120:	f7fa fa76 	bl	8009610 <HAL_GetTick>
 800f124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f126:	e008      	b.n	800f13a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f128:	f7fa fa72 	bl	8009610 <HAL_GetTick>
 800f12c:	4602      	mov	r2, r0
 800f12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	2b02      	cmp	r3, #2
 800f134:	d901      	bls.n	800f13a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f136:	2303      	movs	r3, #3
 800f138:	e280      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f13a:	4b55      	ldr	r3, [pc, #340]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f142:	2b00      	cmp	r3, #0
 800f144:	d0f0      	beq.n	800f128 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f146:	f7fa fa93 	bl	8009670 <HAL_GetREVID>
 800f14a:	4603      	mov	r3, r0
 800f14c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f150:	4293      	cmp	r3, r2
 800f152:	d817      	bhi.n	800f184 <HAL_RCC_OscConfig+0x3ec>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a1b      	ldr	r3, [r3, #32]
 800f158:	2b20      	cmp	r3, #32
 800f15a:	d108      	bne.n	800f16e <HAL_RCC_OscConfig+0x3d6>
 800f15c:	4b4c      	ldr	r3, [pc, #304]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f164:	4a4a      	ldr	r2, [pc, #296]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f16a:	6053      	str	r3, [r2, #4]
 800f16c:	e02e      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
 800f16e:	4b48      	ldr	r3, [pc, #288]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	069b      	lsls	r3, r3, #26
 800f17c:	4944      	ldr	r1, [pc, #272]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f17e:	4313      	orrs	r3, r2
 800f180:	604b      	str	r3, [r1, #4]
 800f182:	e023      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
 800f184:	4b42      	ldr	r3, [pc, #264]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	061b      	lsls	r3, r3, #24
 800f192:	493f      	ldr	r1, [pc, #252]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f194:	4313      	orrs	r3, r2
 800f196:	60cb      	str	r3, [r1, #12]
 800f198:	e018      	b.n	800f1cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f19a:	4b3d      	ldr	r3, [pc, #244]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a3c      	ldr	r2, [pc, #240]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f1a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1a6:	f7fa fa33 	bl	8009610 <HAL_GetTick>
 800f1aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f1ac:	e008      	b.n	800f1c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f1ae:	f7fa fa2f 	bl	8009610 <HAL_GetTick>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d901      	bls.n	800f1c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e23d      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f1c0:	4b33      	ldr	r3, [pc, #204]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1f0      	bne.n	800f1ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f003 0308 	and.w	r3, r3, #8
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d036      	beq.n	800f246 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d019      	beq.n	800f214 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f1e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f1e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1e4:	4a2a      	ldr	r2, [pc, #168]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f1e6:	f043 0301 	orr.w	r3, r3, #1
 800f1ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1ec:	f7fa fa10 	bl	8009610 <HAL_GetTick>
 800f1f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f1f2:	e008      	b.n	800f206 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f1f4:	f7fa fa0c 	bl	8009610 <HAL_GetTick>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d901      	bls.n	800f206 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f202:	2303      	movs	r3, #3
 800f204:	e21a      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f206:	4b22      	ldr	r3, [pc, #136]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d0f0      	beq.n	800f1f4 <HAL_RCC_OscConfig+0x45c>
 800f212:	e018      	b.n	800f246 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f214:	4b1e      	ldr	r3, [pc, #120]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f218:	4a1d      	ldr	r2, [pc, #116]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f21a:	f023 0301 	bic.w	r3, r3, #1
 800f21e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f220:	f7fa f9f6 	bl	8009610 <HAL_GetTick>
 800f224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f226:	e008      	b.n	800f23a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f228:	f7fa f9f2 	bl	8009610 <HAL_GetTick>
 800f22c:	4602      	mov	r2, r0
 800f22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	2b02      	cmp	r3, #2
 800f234:	d901      	bls.n	800f23a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f236:	2303      	movs	r3, #3
 800f238:	e200      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f23a:	4b15      	ldr	r3, [pc, #84]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f23e:	f003 0302 	and.w	r3, r3, #2
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1f0      	bne.n	800f228 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f003 0320 	and.w	r3, r3, #32
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d039      	beq.n	800f2c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d01c      	beq.n	800f294 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f25a:	4b0d      	ldr	r3, [pc, #52]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a0c      	ldr	r2, [pc, #48]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f266:	f7fa f9d3 	bl	8009610 <HAL_GetTick>
 800f26a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f26c:	e008      	b.n	800f280 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f26e:	f7fa f9cf 	bl	8009610 <HAL_GetTick>
 800f272:	4602      	mov	r2, r0
 800f274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d901      	bls.n	800f280 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f27c:	2303      	movs	r3, #3
 800f27e:	e1dd      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f280:	4b03      	ldr	r3, [pc, #12]	@ (800f290 <HAL_RCC_OscConfig+0x4f8>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d0f0      	beq.n	800f26e <HAL_RCC_OscConfig+0x4d6>
 800f28c:	e01b      	b.n	800f2c6 <HAL_RCC_OscConfig+0x52e>
 800f28e:	bf00      	nop
 800f290:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f294:	4b9b      	ldr	r3, [pc, #620]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a9a      	ldr	r2, [pc, #616]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f29a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f29e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f2a0:	f7fa f9b6 	bl	8009610 <HAL_GetTick>
 800f2a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f2a6:	e008      	b.n	800f2ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f2a8:	f7fa f9b2 	bl	8009610 <HAL_GetTick>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d901      	bls.n	800f2ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f2b6:	2303      	movs	r3, #3
 800f2b8:	e1c0      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f2ba:	4b92      	ldr	r3, [pc, #584]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1f0      	bne.n	800f2a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f003 0304 	and.w	r3, r3, #4
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 8081 	beq.w	800f3d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f2d4:	4b8c      	ldr	r3, [pc, #560]	@ (800f508 <HAL_RCC_OscConfig+0x770>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a8b      	ldr	r2, [pc, #556]	@ (800f508 <HAL_RCC_OscConfig+0x770>)
 800f2da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f2de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f2e0:	f7fa f996 	bl	8009610 <HAL_GetTick>
 800f2e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2e6:	e008      	b.n	800f2fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f2e8:	f7fa f992 	bl	8009610 <HAL_GetTick>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	2b64      	cmp	r3, #100	@ 0x64
 800f2f4:	d901      	bls.n	800f2fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	e1a0      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2fa:	4b83      	ldr	r3, [pc, #524]	@ (800f508 <HAL_RCC_OscConfig+0x770>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0f0      	beq.n	800f2e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d106      	bne.n	800f31c <HAL_RCC_OscConfig+0x584>
 800f30e:	4b7d      	ldr	r3, [pc, #500]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f312:	4a7c      	ldr	r2, [pc, #496]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f314:	f043 0301 	orr.w	r3, r3, #1
 800f318:	6713      	str	r3, [r2, #112]	@ 0x70
 800f31a:	e02d      	b.n	800f378 <HAL_RCC_OscConfig+0x5e0>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10c      	bne.n	800f33e <HAL_RCC_OscConfig+0x5a6>
 800f324:	4b77      	ldr	r3, [pc, #476]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f328:	4a76      	ldr	r2, [pc, #472]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f32a:	f023 0301 	bic.w	r3, r3, #1
 800f32e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f330:	4b74      	ldr	r3, [pc, #464]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f334:	4a73      	ldr	r2, [pc, #460]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f336:	f023 0304 	bic.w	r3, r3, #4
 800f33a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f33c:	e01c      	b.n	800f378 <HAL_RCC_OscConfig+0x5e0>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	2b05      	cmp	r3, #5
 800f344:	d10c      	bne.n	800f360 <HAL_RCC_OscConfig+0x5c8>
 800f346:	4b6f      	ldr	r3, [pc, #444]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f34a:	4a6e      	ldr	r2, [pc, #440]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f34c:	f043 0304 	orr.w	r3, r3, #4
 800f350:	6713      	str	r3, [r2, #112]	@ 0x70
 800f352:	4b6c      	ldr	r3, [pc, #432]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f356:	4a6b      	ldr	r2, [pc, #428]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f358:	f043 0301 	orr.w	r3, r3, #1
 800f35c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f35e:	e00b      	b.n	800f378 <HAL_RCC_OscConfig+0x5e0>
 800f360:	4b68      	ldr	r3, [pc, #416]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f364:	4a67      	ldr	r2, [pc, #412]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f366:	f023 0301 	bic.w	r3, r3, #1
 800f36a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f36c:	4b65      	ldr	r3, [pc, #404]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f370:	4a64      	ldr	r2, [pc, #400]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f372:	f023 0304 	bic.w	r3, r3, #4
 800f376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d015      	beq.n	800f3ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f380:	f7fa f946 	bl	8009610 <HAL_GetTick>
 800f384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f386:	e00a      	b.n	800f39e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f388:	f7fa f942 	bl	8009610 <HAL_GetTick>
 800f38c:	4602      	mov	r2, r0
 800f38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f396:	4293      	cmp	r3, r2
 800f398:	d901      	bls.n	800f39e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f39a:	2303      	movs	r3, #3
 800f39c:	e14e      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f39e:	4b59      	ldr	r3, [pc, #356]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3a2:	f003 0302 	and.w	r3, r3, #2
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0ee      	beq.n	800f388 <HAL_RCC_OscConfig+0x5f0>
 800f3aa:	e014      	b.n	800f3d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3ac:	f7fa f930 	bl	8009610 <HAL_GetTick>
 800f3b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f3b2:	e00a      	b.n	800f3ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f3b4:	f7fa f92c 	bl	8009610 <HAL_GetTick>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d901      	bls.n	800f3ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	e138      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f3ca:	4b4e      	ldr	r3, [pc, #312]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3ce:	f003 0302 	and.w	r3, r3, #2
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1ee      	bne.n	800f3b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f000 812d 	beq.w	800f63a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f3e0:	4b48      	ldr	r3, [pc, #288]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f3e8:	2b18      	cmp	r3, #24
 800f3ea:	f000 80bd 	beq.w	800f568 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	f040 809e 	bne.w	800f534 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f3f8:	4b42      	ldr	r3, [pc, #264]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a41      	ldr	r2, [pc, #260]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f3fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f404:	f7fa f904 	bl	8009610 <HAL_GetTick>
 800f408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f40a:	e008      	b.n	800f41e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f40c:	f7fa f900 	bl	8009610 <HAL_GetTick>
 800f410:	4602      	mov	r2, r0
 800f412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	2b02      	cmp	r3, #2
 800f418:	d901      	bls.n	800f41e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f41a:	2303      	movs	r3, #3
 800f41c:	e10e      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f41e:	4b39      	ldr	r3, [pc, #228]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1f0      	bne.n	800f40c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f42a:	4b36      	ldr	r3, [pc, #216]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f42c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f42e:	4b37      	ldr	r3, [pc, #220]	@ (800f50c <HAL_RCC_OscConfig+0x774>)
 800f430:	4013      	ands	r3, r2
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f43a:	0112      	lsls	r2, r2, #4
 800f43c:	430a      	orrs	r2, r1
 800f43e:	4931      	ldr	r1, [pc, #196]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f440:	4313      	orrs	r3, r2
 800f442:	628b      	str	r3, [r1, #40]	@ 0x28
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f448:	3b01      	subs	r3, #1
 800f44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f452:	3b01      	subs	r3, #1
 800f454:	025b      	lsls	r3, r3, #9
 800f456:	b29b      	uxth	r3, r3
 800f458:	431a      	orrs	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f45e:	3b01      	subs	r3, #1
 800f460:	041b      	lsls	r3, r3, #16
 800f462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f466:	431a      	orrs	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46c:	3b01      	subs	r3, #1
 800f46e:	061b      	lsls	r3, r3, #24
 800f470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f474:	4923      	ldr	r1, [pc, #140]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f476:	4313      	orrs	r3, r2
 800f478:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f47a:	4b22      	ldr	r3, [pc, #136]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f47e:	4a21      	ldr	r2, [pc, #132]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f480:	f023 0301 	bic.w	r3, r3, #1
 800f484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f486:	4b1f      	ldr	r3, [pc, #124]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f48a:	4b21      	ldr	r3, [pc, #132]	@ (800f510 <HAL_RCC_OscConfig+0x778>)
 800f48c:	4013      	ands	r3, r2
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f492:	00d2      	lsls	r2, r2, #3
 800f494:	491b      	ldr	r1, [pc, #108]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f496:	4313      	orrs	r3, r2
 800f498:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f49a:	4b1a      	ldr	r3, [pc, #104]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f49e:	f023 020c 	bic.w	r2, r3, #12
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4a6:	4917      	ldr	r1, [pc, #92]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f4ac:	4b15      	ldr	r3, [pc, #84]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b0:	f023 0202 	bic.w	r2, r3, #2
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4b8:	4912      	ldr	r1, [pc, #72]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f4be:	4b11      	ldr	r3, [pc, #68]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c2:	4a10      	ldr	r2, [pc, #64]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ce:	4a0d      	ldr	r2, [pc, #52]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f4d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4da:	4a0a      	ldr	r2, [pc, #40]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f4e2:	4b08      	ldr	r3, [pc, #32]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e6:	4a07      	ldr	r2, [pc, #28]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4e8:	f043 0301 	orr.w	r3, r3, #1
 800f4ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f4ee:	4b05      	ldr	r3, [pc, #20]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a04      	ldr	r2, [pc, #16]	@ (800f504 <HAL_RCC_OscConfig+0x76c>)
 800f4f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f4f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4fa:	f7fa f889 	bl	8009610 <HAL_GetTick>
 800f4fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f500:	e011      	b.n	800f526 <HAL_RCC_OscConfig+0x78e>
 800f502:	bf00      	nop
 800f504:	58024400 	.word	0x58024400
 800f508:	58024800 	.word	0x58024800
 800f50c:	fffffc0c 	.word	0xfffffc0c
 800f510:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f514:	f7fa f87c 	bl	8009610 <HAL_GetTick>
 800f518:	4602      	mov	r2, r0
 800f51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	2b02      	cmp	r3, #2
 800f520:	d901      	bls.n	800f526 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f522:	2303      	movs	r3, #3
 800f524:	e08a      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f526:	4b47      	ldr	r3, [pc, #284]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0f0      	beq.n	800f514 <HAL_RCC_OscConfig+0x77c>
 800f532:	e082      	b.n	800f63a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f534:	4b43      	ldr	r3, [pc, #268]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a42      	ldr	r2, [pc, #264]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f53a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f540:	f7fa f866 	bl	8009610 <HAL_GetTick>
 800f544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f546:	e008      	b.n	800f55a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f548:	f7fa f862 	bl	8009610 <HAL_GetTick>
 800f54c:	4602      	mov	r2, r0
 800f54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	2b02      	cmp	r3, #2
 800f554:	d901      	bls.n	800f55a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f556:	2303      	movs	r3, #3
 800f558:	e070      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f55a:	4b3a      	ldr	r3, [pc, #232]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1f0      	bne.n	800f548 <HAL_RCC_OscConfig+0x7b0>
 800f566:	e068      	b.n	800f63a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f568:	4b36      	ldr	r3, [pc, #216]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f56c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f56e:	4b35      	ldr	r3, [pc, #212]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f572:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d031      	beq.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	f003 0203 	and.w	r2, r3, #3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f586:	429a      	cmp	r2, r3
 800f588:	d12a      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	091b      	lsrs	r3, r3, #4
 800f58e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f596:	429a      	cmp	r2, r3
 800f598:	d122      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d11a      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	0a5b      	lsrs	r3, r3, #9
 800f5ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d111      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	0c1b      	lsrs	r3, r3, #16
 800f5c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d108      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	0e1b      	lsrs	r3, r3, #24
 800f5d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d001      	beq.n	800f5e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e02b      	b.n	800f63c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f5e4:	4b17      	ldr	r3, [pc, #92]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5e8:	08db      	lsrs	r3, r3, #3
 800f5ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f5f4:	693a      	ldr	r2, [r7, #16]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d01f      	beq.n	800f63a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f5fa:	4b12      	ldr	r3, [pc, #72]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fe:	4a11      	ldr	r2, [pc, #68]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f600:	f023 0301 	bic.w	r3, r3, #1
 800f604:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f606:	f7fa f803 	bl	8009610 <HAL_GetTick>
 800f60a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f60c:	bf00      	nop
 800f60e:	f7f9 ffff 	bl	8009610 <HAL_GetTick>
 800f612:	4602      	mov	r2, r0
 800f614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f616:	4293      	cmp	r3, r2
 800f618:	d0f9      	beq.n	800f60e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f61a:	4b0a      	ldr	r3, [pc, #40]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f61c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f61e:	4b0a      	ldr	r3, [pc, #40]	@ (800f648 <HAL_RCC_OscConfig+0x8b0>)
 800f620:	4013      	ands	r3, r2
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f626:	00d2      	lsls	r2, r2, #3
 800f628:	4906      	ldr	r1, [pc, #24]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f62a:	4313      	orrs	r3, r2
 800f62c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f62e:	4b05      	ldr	r3, [pc, #20]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f632:	4a04      	ldr	r2, [pc, #16]	@ (800f644 <HAL_RCC_OscConfig+0x8ac>)
 800f634:	f043 0301 	orr.w	r3, r3, #1
 800f638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3730      	adds	r7, #48	@ 0x30
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	58024400 	.word	0x58024400
 800f648:	ffff0007 	.word	0xffff0007

0800f64c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b086      	sub	sp, #24
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	e19c      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f660:	4b8a      	ldr	r3, [pc, #552]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f003 030f 	and.w	r3, r3, #15
 800f668:	683a      	ldr	r2, [r7, #0]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d910      	bls.n	800f690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f66e:	4b87      	ldr	r3, [pc, #540]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f023 020f 	bic.w	r2, r3, #15
 800f676:	4985      	ldr	r1, [pc, #532]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f67e:	4b83      	ldr	r3, [pc, #524]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 030f 	and.w	r3, r3, #15
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d001      	beq.n	800f690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	e184      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 0304 	and.w	r3, r3, #4
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d010      	beq.n	800f6be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	691a      	ldr	r2, [r3, #16]
 800f6a0:	4b7b      	ldr	r3, [pc, #492]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6a2:	699b      	ldr	r3, [r3, #24]
 800f6a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d908      	bls.n	800f6be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f6ac:	4b78      	ldr	r3, [pc, #480]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4975      	ldr	r1, [pc, #468]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0308 	and.w	r3, r3, #8
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d010      	beq.n	800f6ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695a      	ldr	r2, [r3, #20]
 800f6ce:	4b70      	ldr	r3, [pc, #448]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6d0:	69db      	ldr	r3, [r3, #28]
 800f6d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d908      	bls.n	800f6ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f6da:	4b6d      	ldr	r3, [pc, #436]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6dc:	69db      	ldr	r3, [r3, #28]
 800f6de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	695b      	ldr	r3, [r3, #20]
 800f6e6:	496a      	ldr	r1, [pc, #424]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f003 0310 	and.w	r3, r3, #16
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d010      	beq.n	800f71a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	699a      	ldr	r2, [r3, #24]
 800f6fc:	4b64      	ldr	r3, [pc, #400]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f6fe:	69db      	ldr	r3, [r3, #28]
 800f700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f704:	429a      	cmp	r2, r3
 800f706:	d908      	bls.n	800f71a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f708:	4b61      	ldr	r3, [pc, #388]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	495e      	ldr	r1, [pc, #376]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f716:	4313      	orrs	r3, r2
 800f718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f003 0320 	and.w	r3, r3, #32
 800f722:	2b00      	cmp	r3, #0
 800f724:	d010      	beq.n	800f748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	69da      	ldr	r2, [r3, #28]
 800f72a:	4b59      	ldr	r3, [pc, #356]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f72c:	6a1b      	ldr	r3, [r3, #32]
 800f72e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f732:	429a      	cmp	r2, r3
 800f734:	d908      	bls.n	800f748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f736:	4b56      	ldr	r3, [pc, #344]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	69db      	ldr	r3, [r3, #28]
 800f742:	4953      	ldr	r1, [pc, #332]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f744:	4313      	orrs	r3, r2
 800f746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 0302 	and.w	r3, r3, #2
 800f750:	2b00      	cmp	r3, #0
 800f752:	d010      	beq.n	800f776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	68da      	ldr	r2, [r3, #12]
 800f758:	4b4d      	ldr	r3, [pc, #308]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	f003 030f 	and.w	r3, r3, #15
 800f760:	429a      	cmp	r2, r3
 800f762:	d908      	bls.n	800f776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f764:	4b4a      	ldr	r3, [pc, #296]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f766:	699b      	ldr	r3, [r3, #24]
 800f768:	f023 020f 	bic.w	r2, r3, #15
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	4947      	ldr	r1, [pc, #284]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f772:	4313      	orrs	r3, r2
 800f774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f003 0301 	and.w	r3, r3, #1
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d055      	beq.n	800f82e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f782:	4b43      	ldr	r3, [pc, #268]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f784:	699b      	ldr	r3, [r3, #24]
 800f786:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	4940      	ldr	r1, [pc, #256]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f790:	4313      	orrs	r3, r2
 800f792:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d107      	bne.n	800f7ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f79c:	4b3c      	ldr	r3, [pc, #240]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d121      	bne.n	800f7ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e0f6      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d107      	bne.n	800f7c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f7b4:	4b36      	ldr	r3, [pc, #216]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d115      	bne.n	800f7ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e0ea      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d107      	bne.n	800f7dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f7cc:	4b30      	ldr	r3, [pc, #192]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d109      	bne.n	800f7ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e0de      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f7dc:	4b2c      	ldr	r3, [pc, #176]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f003 0304 	and.w	r3, r3, #4
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d101      	bne.n	800f7ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e0d6      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f7ec:	4b28      	ldr	r3, [pc, #160]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f7ee:	691b      	ldr	r3, [r3, #16]
 800f7f0:	f023 0207 	bic.w	r2, r3, #7
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4925      	ldr	r1, [pc, #148]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7fe:	f7f9 ff07 	bl	8009610 <HAL_GetTick>
 800f802:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f804:	e00a      	b.n	800f81c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f806:	f7f9 ff03 	bl	8009610 <HAL_GetTick>
 800f80a:	4602      	mov	r2, r0
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f814:	4293      	cmp	r3, r2
 800f816:	d901      	bls.n	800f81c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f818:	2303      	movs	r3, #3
 800f81a:	e0be      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f81c:	4b1c      	ldr	r3, [pc, #112]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	00db      	lsls	r3, r3, #3
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d1eb      	bne.n	800f806 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	2b00      	cmp	r3, #0
 800f838:	d010      	beq.n	800f85c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	4b14      	ldr	r3, [pc, #80]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	f003 030f 	and.w	r3, r3, #15
 800f846:	429a      	cmp	r2, r3
 800f848:	d208      	bcs.n	800f85c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f84a:	4b11      	ldr	r3, [pc, #68]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	f023 020f 	bic.w	r2, r3, #15
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	490e      	ldr	r1, [pc, #56]	@ (800f890 <HAL_RCC_ClockConfig+0x244>)
 800f858:	4313      	orrs	r3, r2
 800f85a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f85c:	4b0b      	ldr	r3, [pc, #44]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f003 030f 	and.w	r3, r3, #15
 800f864:	683a      	ldr	r2, [r7, #0]
 800f866:	429a      	cmp	r2, r3
 800f868:	d214      	bcs.n	800f894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f86a:	4b08      	ldr	r3, [pc, #32]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f023 020f 	bic.w	r2, r3, #15
 800f872:	4906      	ldr	r1, [pc, #24]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	4313      	orrs	r3, r2
 800f878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f87a:	4b04      	ldr	r3, [pc, #16]	@ (800f88c <HAL_RCC_ClockConfig+0x240>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f003 030f 	and.w	r3, r3, #15
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	429a      	cmp	r2, r3
 800f886:	d005      	beq.n	800f894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f888:	2301      	movs	r3, #1
 800f88a:	e086      	b.n	800f99a <HAL_RCC_ClockConfig+0x34e>
 800f88c:	52002000 	.word	0x52002000
 800f890:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d010      	beq.n	800f8c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691a      	ldr	r2, [r3, #16]
 800f8a4:	4b3f      	ldr	r3, [pc, #252]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8a6:	699b      	ldr	r3, [r3, #24]
 800f8a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d208      	bcs.n	800f8c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f8b0:	4b3c      	ldr	r3, [pc, #240]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8b2:	699b      	ldr	r3, [r3, #24]
 800f8b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	4939      	ldr	r1, [pc, #228]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f003 0308 	and.w	r3, r3, #8
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d010      	beq.n	800f8f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	695a      	ldr	r2, [r3, #20]
 800f8d2:	4b34      	ldr	r3, [pc, #208]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8d4:	69db      	ldr	r3, [r3, #28]
 800f8d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d208      	bcs.n	800f8f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f8de:	4b31      	ldr	r3, [pc, #196]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8e0:	69db      	ldr	r3, [r3, #28]
 800f8e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	492e      	ldr	r1, [pc, #184]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f003 0310 	and.w	r3, r3, #16
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d010      	beq.n	800f91e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	699a      	ldr	r2, [r3, #24]
 800f900:	4b28      	ldr	r3, [pc, #160]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f908:	429a      	cmp	r2, r3
 800f90a:	d208      	bcs.n	800f91e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f90c:	4b25      	ldr	r3, [pc, #148]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	4922      	ldr	r1, [pc, #136]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f91a:	4313      	orrs	r3, r2
 800f91c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f003 0320 	and.w	r3, r3, #32
 800f926:	2b00      	cmp	r3, #0
 800f928:	d010      	beq.n	800f94c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	69da      	ldr	r2, [r3, #28]
 800f92e:	4b1d      	ldr	r3, [pc, #116]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f936:	429a      	cmp	r2, r3
 800f938:	d208      	bcs.n	800f94c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f93a:	4b1a      	ldr	r3, [pc, #104]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	69db      	ldr	r3, [r3, #28]
 800f946:	4917      	ldr	r1, [pc, #92]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f948:	4313      	orrs	r3, r2
 800f94a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f94c:	f000 f834 	bl	800f9b8 <HAL_RCC_GetSysClockFreq>
 800f950:	4602      	mov	r2, r0
 800f952:	4b14      	ldr	r3, [pc, #80]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f954:	699b      	ldr	r3, [r3, #24]
 800f956:	0a1b      	lsrs	r3, r3, #8
 800f958:	f003 030f 	and.w	r3, r3, #15
 800f95c:	4912      	ldr	r1, [pc, #72]	@ (800f9a8 <HAL_RCC_ClockConfig+0x35c>)
 800f95e:	5ccb      	ldrb	r3, [r1, r3]
 800f960:	f003 031f 	and.w	r3, r3, #31
 800f964:	fa22 f303 	lsr.w	r3, r2, r3
 800f968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f96a:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a4 <HAL_RCC_ClockConfig+0x358>)
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	f003 030f 	and.w	r3, r3, #15
 800f972:	4a0d      	ldr	r2, [pc, #52]	@ (800f9a8 <HAL_RCC_ClockConfig+0x35c>)
 800f974:	5cd3      	ldrb	r3, [r2, r3]
 800f976:	f003 031f 	and.w	r3, r3, #31
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	fa22 f303 	lsr.w	r3, r2, r3
 800f980:	4a0a      	ldr	r2, [pc, #40]	@ (800f9ac <HAL_RCC_ClockConfig+0x360>)
 800f982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f984:	4a0a      	ldr	r2, [pc, #40]	@ (800f9b0 <HAL_RCC_ClockConfig+0x364>)
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f98a:	4b0a      	ldr	r3, [pc, #40]	@ (800f9b4 <HAL_RCC_ClockConfig+0x368>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f9 fdf4 	bl	800957c <HAL_InitTick>
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f998:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	58024400 	.word	0x58024400
 800f9a8:	0801bba4 	.word	0x0801bba4
 800f9ac:	24000030 	.word	0x24000030
 800f9b0:	2400002c 	.word	0x2400002c
 800f9b4:	24000034 	.word	0x24000034

0800f9b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b089      	sub	sp, #36	@ 0x24
 800f9bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f9be:	4bb3      	ldr	r3, [pc, #716]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9c6:	2b18      	cmp	r3, #24
 800f9c8:	f200 8155 	bhi.w	800fc76 <HAL_RCC_GetSysClockFreq+0x2be>
 800f9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d2:	bf00      	nop
 800f9d4:	0800fa39 	.word	0x0800fa39
 800f9d8:	0800fc77 	.word	0x0800fc77
 800f9dc:	0800fc77 	.word	0x0800fc77
 800f9e0:	0800fc77 	.word	0x0800fc77
 800f9e4:	0800fc77 	.word	0x0800fc77
 800f9e8:	0800fc77 	.word	0x0800fc77
 800f9ec:	0800fc77 	.word	0x0800fc77
 800f9f0:	0800fc77 	.word	0x0800fc77
 800f9f4:	0800fa5f 	.word	0x0800fa5f
 800f9f8:	0800fc77 	.word	0x0800fc77
 800f9fc:	0800fc77 	.word	0x0800fc77
 800fa00:	0800fc77 	.word	0x0800fc77
 800fa04:	0800fc77 	.word	0x0800fc77
 800fa08:	0800fc77 	.word	0x0800fc77
 800fa0c:	0800fc77 	.word	0x0800fc77
 800fa10:	0800fc77 	.word	0x0800fc77
 800fa14:	0800fa65 	.word	0x0800fa65
 800fa18:	0800fc77 	.word	0x0800fc77
 800fa1c:	0800fc77 	.word	0x0800fc77
 800fa20:	0800fc77 	.word	0x0800fc77
 800fa24:	0800fc77 	.word	0x0800fc77
 800fa28:	0800fc77 	.word	0x0800fc77
 800fa2c:	0800fc77 	.word	0x0800fc77
 800fa30:	0800fc77 	.word	0x0800fc77
 800fa34:	0800fa6b 	.word	0x0800fa6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa38:	4b94      	ldr	r3, [pc, #592]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f003 0320 	and.w	r3, r3, #32
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d009      	beq.n	800fa58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa44:	4b91      	ldr	r3, [pc, #580]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	08db      	lsrs	r3, r3, #3
 800fa4a:	f003 0303 	and.w	r3, r3, #3
 800fa4e:	4a90      	ldr	r2, [pc, #576]	@ (800fc90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fa50:	fa22 f303 	lsr.w	r3, r2, r3
 800fa54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800fa56:	e111      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fa58:	4b8d      	ldr	r3, [pc, #564]	@ (800fc90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fa5a:	61bb      	str	r3, [r7, #24]
      break;
 800fa5c:	e10e      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800fa5e:	4b8d      	ldr	r3, [pc, #564]	@ (800fc94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fa60:	61bb      	str	r3, [r7, #24]
      break;
 800fa62:	e10b      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800fa64:	4b8c      	ldr	r3, [pc, #560]	@ (800fc98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fa66:	61bb      	str	r3, [r7, #24]
      break;
 800fa68:	e108      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa6a:	4b88      	ldr	r3, [pc, #544]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa6e:	f003 0303 	and.w	r3, r3, #3
 800fa72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fa74:	4b85      	ldr	r3, [pc, #532]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa78:	091b      	lsrs	r3, r3, #4
 800fa7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fa80:	4b82      	ldr	r3, [pc, #520]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa84:	f003 0301 	and.w	r3, r3, #1
 800fa88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fa8a:	4b80      	ldr	r3, [pc, #512]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa8e:	08db      	lsrs	r3, r3, #3
 800fa90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	fb02 f303 	mul.w	r3, r2, r3
 800fa9a:	ee07 3a90 	vmov	s15, r3
 800fa9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f000 80e1 	beq.w	800fc70 <HAL_RCC_GetSysClockFreq+0x2b8>
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	f000 8083 	beq.w	800fbbc <HAL_RCC_GetSysClockFreq+0x204>
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	2b02      	cmp	r3, #2
 800faba:	f200 80a1 	bhi.w	800fc00 <HAL_RCC_GetSysClockFreq+0x248>
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d003      	beq.n	800facc <HAL_RCC_GetSysClockFreq+0x114>
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d056      	beq.n	800fb78 <HAL_RCC_GetSysClockFreq+0x1c0>
 800faca:	e099      	b.n	800fc00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800facc:	4b6f      	ldr	r3, [pc, #444]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f003 0320 	and.w	r3, r3, #32
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d02d      	beq.n	800fb34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fad8:	4b6c      	ldr	r3, [pc, #432]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	08db      	lsrs	r3, r3, #3
 800fade:	f003 0303 	and.w	r3, r3, #3
 800fae2:	4a6b      	ldr	r2, [pc, #428]	@ (800fc90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fae4:	fa22 f303 	lsr.w	r3, r2, r3
 800fae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	ee07 3a90 	vmov	s15, r3
 800faf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	ee07 3a90 	vmov	s15, r3
 800fafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb02:	4b62      	ldr	r3, [pc, #392]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb0a:	ee07 3a90 	vmov	s15, r3
 800fb0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb12:	ed97 6a02 	vldr	s12, [r7, #8]
 800fb16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800fc9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800fb1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fb32:	e087      	b.n	800fc44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	ee07 3a90 	vmov	s15, r3
 800fb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800fca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800fb42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb46:	4b51      	ldr	r3, [pc, #324]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb4e:	ee07 3a90 	vmov	s15, r3
 800fb52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb56:	ed97 6a02 	vldr	s12, [r7, #8]
 800fb5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800fc9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800fb5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fb76:	e065      	b.n	800fc44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	ee07 3a90 	vmov	s15, r3
 800fb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800fca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb8a:	4b40      	ldr	r3, [pc, #256]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb92:	ee07 3a90 	vmov	s15, r3
 800fb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800fb9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fc9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800fba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fbba:	e043      	b.n	800fc44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	ee07 3a90 	vmov	s15, r3
 800fbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800fca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800fbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbce:	4b2f      	ldr	r3, [pc, #188]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbd6:	ee07 3a90 	vmov	s15, r3
 800fbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbde:	ed97 6a02 	vldr	s12, [r7, #8]
 800fbe2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800fc9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800fbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fbfe:	e021      	b.n	800fc44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	ee07 3a90 	vmov	s15, r3
 800fc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800fca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc12:	4b1e      	ldr	r3, [pc, #120]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1a:	ee07 3a90 	vmov	s15, r3
 800fc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc22:	ed97 6a02 	vldr	s12, [r7, #8]
 800fc26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800fc9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800fc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fc42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800fc44:	4b11      	ldr	r3, [pc, #68]	@ (800fc8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc48:	0a5b      	lsrs	r3, r3, #9
 800fc4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc4e:	3301      	adds	r3, #1
 800fc50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fc5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc68:	ee17 3a90 	vmov	r3, s15
 800fc6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800fc6e:	e005      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	61bb      	str	r3, [r7, #24]
      break;
 800fc74:	e002      	b.n	800fc7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800fc76:	4b07      	ldr	r3, [pc, #28]	@ (800fc94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fc78:	61bb      	str	r3, [r7, #24]
      break;
 800fc7a:	bf00      	nop
  }

  return sysclockfreq;
 800fc7c:	69bb      	ldr	r3, [r7, #24]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3724      	adds	r7, #36	@ 0x24
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	58024400 	.word	0x58024400
 800fc90:	03d09000 	.word	0x03d09000
 800fc94:	003d0900 	.word	0x003d0900
 800fc98:	017d7840 	.word	0x017d7840
 800fc9c:	46000000 	.word	0x46000000
 800fca0:	4c742400 	.word	0x4c742400
 800fca4:	4a742400 	.word	0x4a742400
 800fca8:	4bbebc20 	.word	0x4bbebc20

0800fcac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fcb2:	f7ff fe81 	bl	800f9b8 <HAL_RCC_GetSysClockFreq>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b10      	ldr	r3, [pc, #64]	@ (800fcfc <HAL_RCC_GetHCLKFreq+0x50>)
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	0a1b      	lsrs	r3, r3, #8
 800fcbe:	f003 030f 	and.w	r3, r3, #15
 800fcc2:	490f      	ldr	r1, [pc, #60]	@ (800fd00 <HAL_RCC_GetHCLKFreq+0x54>)
 800fcc4:	5ccb      	ldrb	r3, [r1, r3]
 800fcc6:	f003 031f 	and.w	r3, r3, #31
 800fcca:	fa22 f303 	lsr.w	r3, r2, r3
 800fcce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fcd0:	4b0a      	ldr	r3, [pc, #40]	@ (800fcfc <HAL_RCC_GetHCLKFreq+0x50>)
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	f003 030f 	and.w	r3, r3, #15
 800fcd8:	4a09      	ldr	r2, [pc, #36]	@ (800fd00 <HAL_RCC_GetHCLKFreq+0x54>)
 800fcda:	5cd3      	ldrb	r3, [r2, r3]
 800fcdc:	f003 031f 	and.w	r3, r3, #31
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	fa22 f303 	lsr.w	r3, r2, r3
 800fce6:	4a07      	ldr	r2, [pc, #28]	@ (800fd04 <HAL_RCC_GetHCLKFreq+0x58>)
 800fce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fcea:	4a07      	ldr	r2, [pc, #28]	@ (800fd08 <HAL_RCC_GetHCLKFreq+0x5c>)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800fcf0:	4b04      	ldr	r3, [pc, #16]	@ (800fd04 <HAL_RCC_GetHCLKFreq+0x58>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	58024400 	.word	0x58024400
 800fd00:	0801bba4 	.word	0x0801bba4
 800fd04:	24000030 	.word	0x24000030
 800fd08:	2400002c 	.word	0x2400002c

0800fd0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd10:	b0ca      	sub	sp, #296	@ 0x128
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800fd30:	2500      	movs	r5, #0
 800fd32:	ea54 0305 	orrs.w	r3, r4, r5
 800fd36:	d049      	beq.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800fd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fd42:	d02f      	beq.n	800fda4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800fd44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fd48:	d828      	bhi.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800fd4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fd4e:	d01a      	beq.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800fd50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fd54:	d822      	bhi.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800fd5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd5e:	d007      	beq.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fd60:	e01c      	b.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd62:	4bb8      	ldr	r3, [pc, #736]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd66:	4ab7      	ldr	r2, [pc, #732]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fd68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fd6e:	e01a      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd74:	3308      	adds	r3, #8
 800fd76:	2102      	movs	r1, #2
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f001 f9d1 	bl	8011120 <RCCEx_PLL2_Config>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fd84:	e00f      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd8a:	3328      	adds	r3, #40	@ 0x28
 800fd8c:	2102      	movs	r1, #2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 fa78 	bl	8011284 <RCCEx_PLL3_Config>
 800fd94:	4603      	mov	r3, r0
 800fd96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fd9a:	e004      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fda2:	e000      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800fda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fda6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10a      	bne.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800fdae:	4ba5      	ldr	r3, [pc, #660]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fdb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800fdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdbc:	4aa1      	ldr	r2, [pc, #644]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fdbe:	430b      	orrs	r3, r1
 800fdc0:	6513      	str	r3, [r2, #80]	@ 0x50
 800fdc2:	e003      	b.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fdc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800fdd8:	f04f 0900 	mov.w	r9, #0
 800fddc:	ea58 0309 	orrs.w	r3, r8, r9
 800fde0:	d047      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800fde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fde6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fde8:	2b04      	cmp	r3, #4
 800fdea:	d82a      	bhi.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800fdec:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe09 	.word	0x0800fe09
 800fdf8:	0800fe17 	.word	0x0800fe17
 800fdfc:	0800fe2d 	.word	0x0800fe2d
 800fe00:	0800fe4b 	.word	0x0800fe4b
 800fe04:	0800fe4b 	.word	0x0800fe4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe08:	4b8e      	ldr	r3, [pc, #568]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fe0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0c:	4a8d      	ldr	r2, [pc, #564]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fe0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fe12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fe14:	e01a      	b.n	800fe4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe1a:	3308      	adds	r3, #8
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f001 f97e 	bl	8011120 <RCCEx_PLL2_Config>
 800fe24:	4603      	mov	r3, r0
 800fe26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fe2a:	e00f      	b.n	800fe4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fe2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe30:	3328      	adds	r3, #40	@ 0x28
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f001 fa25 	bl	8011284 <RCCEx_PLL3_Config>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fe40:	e004      	b.n	800fe4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe42:	2301      	movs	r3, #1
 800fe44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fe48:	e000      	b.n	800fe4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800fe4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d10a      	bne.n	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fe54:	4b7b      	ldr	r3, [pc, #492]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fe56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe58:	f023 0107 	bic.w	r1, r3, #7
 800fe5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe62:	4a78      	ldr	r2, [pc, #480]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fe64:	430b      	orrs	r3, r1
 800fe66:	6513      	str	r3, [r2, #80]	@ 0x50
 800fe68:	e003      	b.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800fe72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800fe7e:	f04f 0b00 	mov.w	fp, #0
 800fe82:	ea5a 030b 	orrs.w	r3, sl, fp
 800fe86:	d04c      	beq.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800fe88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fe8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe92:	d030      	beq.n	800fef6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800fe94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe98:	d829      	bhi.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800fe9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe9c:	d02d      	beq.n	800fefa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800fe9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800fea0:	d825      	bhi.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800fea2:	2b80      	cmp	r3, #128	@ 0x80
 800fea4:	d018      	beq.n	800fed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800fea6:	2b80      	cmp	r3, #128	@ 0x80
 800fea8:	d821      	bhi.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d002      	beq.n	800feb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800feae:	2b40      	cmp	r3, #64	@ 0x40
 800feb0:	d007      	beq.n	800fec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800feb2:	e01c      	b.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800feb4:	4b63      	ldr	r3, [pc, #396]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800feb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb8:	4a62      	ldr	r2, [pc, #392]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800feba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800febe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800fec0:	e01c      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fec6:	3308      	adds	r3, #8
 800fec8:	2100      	movs	r1, #0
 800feca:	4618      	mov	r0, r3
 800fecc:	f001 f928 	bl	8011120 <RCCEx_PLL2_Config>
 800fed0:	4603      	mov	r3, r0
 800fed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800fed6:	e011      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fedc:	3328      	adds	r3, #40	@ 0x28
 800fede:	2100      	movs	r1, #0
 800fee0:	4618      	mov	r0, r3
 800fee2:	f001 f9cf 	bl	8011284 <RCCEx_PLL3_Config>
 800fee6:	4603      	mov	r3, r0
 800fee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800feec:	e006      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fef4:	e002      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800fef6:	bf00      	nop
 800fef8:	e000      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800fefa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fefc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ff04:	4b4f      	ldr	r3, [pc, #316]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ff0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff12:	4a4c      	ldr	r2, [pc, #304]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff14:	430b      	orrs	r3, r1
 800ff16:	6513      	str	r3, [r2, #80]	@ 0x50
 800ff18:	e003      	b.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ff22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ff2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800ff32:	2300      	movs	r3, #0
 800ff34:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800ff38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	d053      	beq.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ff42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ff4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff4e:	d035      	beq.n	800ffbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ff50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff54:	d82e      	bhi.n	800ffb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ff56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ff5a:	d031      	beq.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ff5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ff60:	d828      	bhi.n	800ffb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ff62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff66:	d01a      	beq.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ff68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff6c:	d822      	bhi.n	800ffb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d003      	beq.n	800ff7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ff72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ff76:	d007      	beq.n	800ff88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ff78:	e01c      	b.n	800ffb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ff7a:	4b32      	ldr	r3, [pc, #200]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7e:	4a31      	ldr	r2, [pc, #196]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ff84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ff86:	e01c      	b.n	800ffc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff8c:	3308      	adds	r3, #8
 800ff8e:	2100      	movs	r1, #0
 800ff90:	4618      	mov	r0, r3
 800ff92:	f001 f8c5 	bl	8011120 <RCCEx_PLL2_Config>
 800ff96:	4603      	mov	r3, r0
 800ff98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ff9c:	e011      	b.n	800ffc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ff9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffa2:	3328      	adds	r3, #40	@ 0x28
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f001 f96c 	bl	8011284 <RCCEx_PLL3_Config>
 800ffac:	4603      	mov	r3, r0
 800ffae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ffb2:	e006      	b.n	800ffc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ffba:	e002      	b.n	800ffc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ffbc:	bf00      	nop
 800ffbe:	e000      	b.n	800ffc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ffc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d10b      	bne.n	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ffca:	4b1e      	ldr	r3, [pc, #120]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ffcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ffd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ffda:	4a1a      	ldr	r2, [pc, #104]	@ (8010044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	6593      	str	r3, [r2, #88]	@ 0x58
 800ffe0:	e003      	b.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ffe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ffea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800fff6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800fffa:	2300      	movs	r3, #0
 800fffc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010000:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8010004:	460b      	mov	r3, r1
 8010006:	4313      	orrs	r3, r2
 8010008:	d056      	beq.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801000a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801000e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010016:	d038      	beq.n	801008a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801001c:	d831      	bhi.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801001e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010022:	d034      	beq.n	801008e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8010024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010028:	d82b      	bhi.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801002a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801002e:	d01d      	beq.n	801006c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010034:	d825      	bhi.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010036:	2b00      	cmp	r3, #0
 8010038:	d006      	beq.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801003a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801003e:	d00a      	beq.n	8010056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010040:	e01f      	b.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010042:	bf00      	nop
 8010044:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010048:	4ba2      	ldr	r3, [pc, #648]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801004a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004c:	4aa1      	ldr	r2, [pc, #644]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801004e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010054:	e01c      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801005a:	3308      	adds	r3, #8
 801005c:	2100      	movs	r1, #0
 801005e:	4618      	mov	r0, r3
 8010060:	f001 f85e 	bl	8011120 <RCCEx_PLL2_Config>
 8010064:	4603      	mov	r3, r0
 8010066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801006a:	e011      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801006c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010070:	3328      	adds	r3, #40	@ 0x28
 8010072:	2100      	movs	r1, #0
 8010074:	4618      	mov	r0, r3
 8010076:	f001 f905 	bl	8011284 <RCCEx_PLL3_Config>
 801007a:	4603      	mov	r3, r0
 801007c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010080:	e006      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010088:	e002      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801008a:	bf00      	nop
 801008c:	e000      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801008e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10b      	bne.n	80100b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010098:	4b8e      	ldr	r3, [pc, #568]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801009a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801009c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80100a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80100a8:	4a8a      	ldr	r2, [pc, #552]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80100aa:	430b      	orrs	r3, r1
 80100ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80100ae:	e003      	b.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80100b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80100c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80100c8:	2300      	movs	r3, #0
 80100ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80100ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80100d2:	460b      	mov	r3, r1
 80100d4:	4313      	orrs	r3, r2
 80100d6:	d03a      	beq.n	801014e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80100d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100de:	2b30      	cmp	r3, #48	@ 0x30
 80100e0:	d01f      	beq.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80100e2:	2b30      	cmp	r3, #48	@ 0x30
 80100e4:	d819      	bhi.n	801011a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80100e6:	2b20      	cmp	r3, #32
 80100e8:	d00c      	beq.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80100ea:	2b20      	cmp	r3, #32
 80100ec:	d815      	bhi.n	801011a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d019      	beq.n	8010126 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80100f2:	2b10      	cmp	r3, #16
 80100f4:	d111      	bne.n	801011a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100f6:	4b77      	ldr	r3, [pc, #476]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80100f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100fa:	4a76      	ldr	r2, [pc, #472]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80100fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010102:	e011      	b.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010108:	3308      	adds	r3, #8
 801010a:	2102      	movs	r1, #2
 801010c:	4618      	mov	r0, r3
 801010e:	f001 f807 	bl	8011120 <RCCEx_PLL2_Config>
 8010112:	4603      	mov	r3, r0
 8010114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010118:	e006      	b.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010120:	e002      	b.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010122:	bf00      	nop
 8010124:	e000      	b.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10a      	bne.n	8010146 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010130:	4b68      	ldr	r3, [pc, #416]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010134:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8010138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801013c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801013e:	4a65      	ldr	r2, [pc, #404]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010140:	430b      	orrs	r3, r1
 8010142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010144:	e003      	b.n	801014e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801014a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801014e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801015a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801015e:	2300      	movs	r3, #0
 8010160:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010164:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8010168:	460b      	mov	r3, r1
 801016a:	4313      	orrs	r3, r2
 801016c:	d051      	beq.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801016e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010178:	d035      	beq.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801017a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801017e:	d82e      	bhi.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010180:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010184:	d031      	beq.n	80101ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8010186:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801018a:	d828      	bhi.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801018c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010190:	d01a      	beq.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010196:	d822      	bhi.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010198:	2b00      	cmp	r3, #0
 801019a:	d003      	beq.n	80101a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801019c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101a0:	d007      	beq.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80101a2:	e01c      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101a4:	4b4b      	ldr	r3, [pc, #300]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a8:	4a4a      	ldr	r2, [pc, #296]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80101ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80101b0:	e01c      	b.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80101b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101b6:	3308      	adds	r3, #8
 80101b8:	2100      	movs	r1, #0
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 ffb0 	bl	8011120 <RCCEx_PLL2_Config>
 80101c0:	4603      	mov	r3, r0
 80101c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80101c6:	e011      	b.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80101c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101cc:	3328      	adds	r3, #40	@ 0x28
 80101ce:	2100      	movs	r1, #0
 80101d0:	4618      	mov	r0, r3
 80101d2:	f001 f857 	bl	8011284 <RCCEx_PLL3_Config>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80101dc:	e006      	b.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80101de:	2301      	movs	r3, #1
 80101e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80101e4:	e002      	b.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80101e6:	bf00      	nop
 80101e8:	e000      	b.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80101ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80101ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10a      	bne.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80101f4:	4b37      	ldr	r3, [pc, #220]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80101fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010202:	4a34      	ldr	r2, [pc, #208]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010204:	430b      	orrs	r3, r1
 8010206:	6513      	str	r3, [r2, #80]	@ 0x50
 8010208:	e003      	b.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801020a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801020e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801021e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010222:	2300      	movs	r3, #0
 8010224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010228:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801022c:	460b      	mov	r3, r1
 801022e:	4313      	orrs	r3, r2
 8010230:	d056      	beq.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801023c:	d033      	beq.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801023e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010242:	d82c      	bhi.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010244:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010248:	d02f      	beq.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801024a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801024e:	d826      	bhi.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010254:	d02b      	beq.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8010256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801025a:	d820      	bhi.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x592>
 801025c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010260:	d012      	beq.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010266:	d81a      	bhi.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010268:	2b00      	cmp	r3, #0
 801026a:	d022      	beq.n	80102b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801026c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010270:	d115      	bne.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010276:	3308      	adds	r3, #8
 8010278:	2101      	movs	r1, #1
 801027a:	4618      	mov	r0, r3
 801027c:	f000 ff50 	bl	8011120 <RCCEx_PLL2_Config>
 8010280:	4603      	mov	r3, r0
 8010282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010286:	e015      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801028c:	3328      	adds	r3, #40	@ 0x28
 801028e:	2101      	movs	r1, #1
 8010290:	4618      	mov	r0, r3
 8010292:	f000 fff7 	bl	8011284 <RCCEx_PLL3_Config>
 8010296:	4603      	mov	r3, r0
 8010298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801029c:	e00a      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801029e:	2301      	movs	r3, #1
 80102a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80102a4:	e006      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80102a6:	bf00      	nop
 80102a8:	e004      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80102aa:	bf00      	nop
 80102ac:	e002      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80102ae:	bf00      	nop
 80102b0:	e000      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80102b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80102b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10d      	bne.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80102bc:	4b05      	ldr	r3, [pc, #20]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80102be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80102c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102ca:	4a02      	ldr	r2, [pc, #8]	@ (80102d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80102cc:	430b      	orrs	r3, r1
 80102ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80102d0:	e006      	b.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80102d2:	bf00      	nop
 80102d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80102e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80102ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80102f0:	2300      	movs	r3, #0
 80102f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80102f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4313      	orrs	r3, r2
 80102fe:	d055      	beq.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801030c:	d033      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801030e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010312:	d82c      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010318:	d02f      	beq.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801031a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801031e:	d826      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010324:	d02b      	beq.n	801037e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8010326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801032a:	d820      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801032c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010330:	d012      	beq.n	8010358 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010336:	d81a      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010338:	2b00      	cmp	r3, #0
 801033a:	d022      	beq.n	8010382 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801033c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010340:	d115      	bne.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010346:	3308      	adds	r3, #8
 8010348:	2101      	movs	r1, #1
 801034a:	4618      	mov	r0, r3
 801034c:	f000 fee8 	bl	8011120 <RCCEx_PLL2_Config>
 8010350:	4603      	mov	r3, r0
 8010352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010356:	e015      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801035c:	3328      	adds	r3, #40	@ 0x28
 801035e:	2101      	movs	r1, #1
 8010360:	4618      	mov	r0, r3
 8010362:	f000 ff8f 	bl	8011284 <RCCEx_PLL3_Config>
 8010366:	4603      	mov	r3, r0
 8010368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801036c:	e00a      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010374:	e006      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010376:	bf00      	nop
 8010378:	e004      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801037a:	bf00      	nop
 801037c:	e002      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801037e:	bf00      	nop
 8010380:	e000      	b.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10b      	bne.n	80103a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801038c:	4ba3      	ldr	r3, [pc, #652]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801038e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010390:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801039c:	4a9f      	ldr	r2, [pc, #636]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801039e:	430b      	orrs	r3, r1
 80103a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80103a2:	e003      	b.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80103ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80103b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80103bc:	2300      	movs	r3, #0
 80103be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80103c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80103c6:	460b      	mov	r3, r1
 80103c8:	4313      	orrs	r3, r2
 80103ca:	d037      	beq.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80103cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103d6:	d00e      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80103d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103dc:	d816      	bhi.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d018      	beq.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80103e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103e6:	d111      	bne.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103e8:	4b8c      	ldr	r3, [pc, #560]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80103ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ec:	4a8b      	ldr	r2, [pc, #556]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80103ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80103f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80103f4:	e00f      	b.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80103f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103fa:	3308      	adds	r3, #8
 80103fc:	2101      	movs	r1, #1
 80103fe:	4618      	mov	r0, r3
 8010400:	f000 fe8e 	bl	8011120 <RCCEx_PLL2_Config>
 8010404:	4603      	mov	r3, r0
 8010406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801040a:	e004      	b.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801040c:	2301      	movs	r3, #1
 801040e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010412:	e000      	b.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8010414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10a      	bne.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801041e:	4b7f      	ldr	r3, [pc, #508]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010422:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801042a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801042c:	4a7b      	ldr	r2, [pc, #492]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801042e:	430b      	orrs	r3, r1
 8010430:	6513      	str	r3, [r2, #80]	@ 0x50
 8010432:	e003      	b.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801043c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8010448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801044c:	2300      	movs	r3, #0
 801044e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010452:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8010456:	460b      	mov	r3, r1
 8010458:	4313      	orrs	r3, r2
 801045a:	d039      	beq.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801045c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010462:	2b03      	cmp	r3, #3
 8010464:	d81c      	bhi.n	80104a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8010466:	a201      	add	r2, pc, #4	@ (adr r2, 801046c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8010468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046c:	080104a9 	.word	0x080104a9
 8010470:	0801047d 	.word	0x0801047d
 8010474:	0801048b 	.word	0x0801048b
 8010478:	080104a9 	.word	0x080104a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801047c:	4b67      	ldr	r3, [pc, #412]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801047e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010480:	4a66      	ldr	r2, [pc, #408]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010488:	e00f      	b.n	80104aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801048a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801048e:	3308      	adds	r3, #8
 8010490:	2102      	movs	r1, #2
 8010492:	4618      	mov	r0, r3
 8010494:	f000 fe44 	bl	8011120 <RCCEx_PLL2_Config>
 8010498:	4603      	mov	r3, r0
 801049a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801049e:	e004      	b.n	80104aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80104a0:	2301      	movs	r3, #1
 80104a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80104a6:	e000      	b.n	80104aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80104a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10a      	bne.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80104b2:	4b5a      	ldr	r3, [pc, #360]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80104b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104b6:	f023 0103 	bic.w	r1, r3, #3
 80104ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104c0:	4a56      	ldr	r2, [pc, #344]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80104c2:	430b      	orrs	r3, r1
 80104c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80104c6:	e003      	b.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80104d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80104dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80104e0:	2300      	movs	r3, #0
 80104e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80104e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80104ea:	460b      	mov	r3, r1
 80104ec:	4313      	orrs	r3, r2
 80104ee:	f000 809f 	beq.w	8010630 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80104f2:	4b4b      	ldr	r3, [pc, #300]	@ (8010620 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a4a      	ldr	r2, [pc, #296]	@ (8010620 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80104f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80104fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80104fe:	f7f9 f887 	bl	8009610 <HAL_GetTick>
 8010502:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010506:	e00b      	b.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010508:	f7f9 f882 	bl	8009610 <HAL_GetTick>
 801050c:	4602      	mov	r2, r0
 801050e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	2b64      	cmp	r3, #100	@ 0x64
 8010516:	d903      	bls.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010518:	2303      	movs	r3, #3
 801051a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801051e:	e005      	b.n	801052c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010520:	4b3f      	ldr	r3, [pc, #252]	@ (8010620 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010528:	2b00      	cmp	r3, #0
 801052a:	d0ed      	beq.n	8010508 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801052c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010530:	2b00      	cmp	r3, #0
 8010532:	d179      	bne.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010534:	4b39      	ldr	r3, [pc, #228]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801053c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010540:	4053      	eors	r3, r2
 8010542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010546:	2b00      	cmp	r3, #0
 8010548:	d015      	beq.n	8010576 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801054a:	4b34      	ldr	r3, [pc, #208]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801054c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801054e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010552:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010556:	4b31      	ldr	r3, [pc, #196]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801055a:	4a30      	ldr	r2, [pc, #192]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801055c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010560:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010562:	4b2e      	ldr	r3, [pc, #184]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010566:	4a2d      	ldr	r2, [pc, #180]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801056c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801056e:	4a2b      	ldr	r2, [pc, #172]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010574:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801057a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801057e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010582:	d118      	bne.n	80105b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010584:	f7f9 f844 	bl	8009610 <HAL_GetTick>
 8010588:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801058c:	e00d      	b.n	80105aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801058e:	f7f9 f83f 	bl	8009610 <HAL_GetTick>
 8010592:	4602      	mov	r2, r0
 8010594:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010598:	1ad2      	subs	r2, r2, r3
 801059a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801059e:	429a      	cmp	r2, r3
 80105a0:	d903      	bls.n	80105aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80105a2:	2303      	movs	r3, #3
 80105a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80105a8:	e005      	b.n	80105b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80105aa:	4b1c      	ldr	r3, [pc, #112]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105ae:	f003 0302 	and.w	r3, r3, #2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0eb      	beq.n	801058e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80105b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d129      	bne.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80105be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80105c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80105ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80105ce:	d10e      	bne.n	80105ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80105d0:	4b12      	ldr	r3, [pc, #72]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80105d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80105e0:	091a      	lsrs	r2, r3, #4
 80105e2:	4b10      	ldr	r3, [pc, #64]	@ (8010624 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80105e4:	4013      	ands	r3, r2
 80105e6:	4a0d      	ldr	r2, [pc, #52]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105e8:	430b      	orrs	r3, r1
 80105ea:	6113      	str	r3, [r2, #16]
 80105ec:	e005      	b.n	80105fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80105ee:	4b0b      	ldr	r3, [pc, #44]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	4a0a      	ldr	r2, [pc, #40]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80105f8:	6113      	str	r3, [r2, #16]
 80105fa:	4b08      	ldr	r3, [pc, #32]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80105fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80105fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801060a:	4a04      	ldr	r2, [pc, #16]	@ (801061c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801060c:	430b      	orrs	r3, r1
 801060e:	6713      	str	r3, [r2, #112]	@ 0x70
 8010610:	e00e      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801061a:	e009      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801061c:	58024400 	.word	0x58024400
 8010620:	58024800 	.word	0x58024800
 8010624:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801062c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010638:	f002 0301 	and.w	r3, r2, #1
 801063c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010640:	2300      	movs	r3, #0
 8010642:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010646:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801064a:	460b      	mov	r3, r1
 801064c:	4313      	orrs	r3, r2
 801064e:	f000 8089 	beq.w	8010764 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010658:	2b28      	cmp	r3, #40	@ 0x28
 801065a:	d86b      	bhi.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801065c:	a201      	add	r2, pc, #4	@ (adr r2, 8010664 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010662:	bf00      	nop
 8010664:	0801073d 	.word	0x0801073d
 8010668:	08010735 	.word	0x08010735
 801066c:	08010735 	.word	0x08010735
 8010670:	08010735 	.word	0x08010735
 8010674:	08010735 	.word	0x08010735
 8010678:	08010735 	.word	0x08010735
 801067c:	08010735 	.word	0x08010735
 8010680:	08010735 	.word	0x08010735
 8010684:	08010709 	.word	0x08010709
 8010688:	08010735 	.word	0x08010735
 801068c:	08010735 	.word	0x08010735
 8010690:	08010735 	.word	0x08010735
 8010694:	08010735 	.word	0x08010735
 8010698:	08010735 	.word	0x08010735
 801069c:	08010735 	.word	0x08010735
 80106a0:	08010735 	.word	0x08010735
 80106a4:	0801071f 	.word	0x0801071f
 80106a8:	08010735 	.word	0x08010735
 80106ac:	08010735 	.word	0x08010735
 80106b0:	08010735 	.word	0x08010735
 80106b4:	08010735 	.word	0x08010735
 80106b8:	08010735 	.word	0x08010735
 80106bc:	08010735 	.word	0x08010735
 80106c0:	08010735 	.word	0x08010735
 80106c4:	0801073d 	.word	0x0801073d
 80106c8:	08010735 	.word	0x08010735
 80106cc:	08010735 	.word	0x08010735
 80106d0:	08010735 	.word	0x08010735
 80106d4:	08010735 	.word	0x08010735
 80106d8:	08010735 	.word	0x08010735
 80106dc:	08010735 	.word	0x08010735
 80106e0:	08010735 	.word	0x08010735
 80106e4:	0801073d 	.word	0x0801073d
 80106e8:	08010735 	.word	0x08010735
 80106ec:	08010735 	.word	0x08010735
 80106f0:	08010735 	.word	0x08010735
 80106f4:	08010735 	.word	0x08010735
 80106f8:	08010735 	.word	0x08010735
 80106fc:	08010735 	.word	0x08010735
 8010700:	08010735 	.word	0x08010735
 8010704:	0801073d 	.word	0x0801073d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801070c:	3308      	adds	r3, #8
 801070e:	2101      	movs	r1, #1
 8010710:	4618      	mov	r0, r3
 8010712:	f000 fd05 	bl	8011120 <RCCEx_PLL2_Config>
 8010716:	4603      	mov	r3, r0
 8010718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801071c:	e00f      	b.n	801073e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801071e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010722:	3328      	adds	r3, #40	@ 0x28
 8010724:	2101      	movs	r1, #1
 8010726:	4618      	mov	r0, r3
 8010728:	f000 fdac 	bl	8011284 <RCCEx_PLL3_Config>
 801072c:	4603      	mov	r3, r0
 801072e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010732:	e004      	b.n	801073e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801073a:	e000      	b.n	801073e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801073c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801073e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10a      	bne.n	801075c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010746:	4bbf      	ldr	r3, [pc, #764]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801074a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801074e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010754:	4abb      	ldr	r2, [pc, #748]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010756:	430b      	orrs	r3, r1
 8010758:	6553      	str	r3, [r2, #84]	@ 0x54
 801075a:	e003      	b.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801075c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	f002 0302 	and.w	r3, r2, #2
 8010770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010774:	2300      	movs	r3, #0
 8010776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801077a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801077e:	460b      	mov	r3, r1
 8010780:	4313      	orrs	r3, r2
 8010782:	d041      	beq.n	8010808 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801078a:	2b05      	cmp	r3, #5
 801078c:	d824      	bhi.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801078e:	a201      	add	r2, pc, #4	@ (adr r2, 8010794 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8010790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010794:	080107e1 	.word	0x080107e1
 8010798:	080107ad 	.word	0x080107ad
 801079c:	080107c3 	.word	0x080107c3
 80107a0:	080107e1 	.word	0x080107e1
 80107a4:	080107e1 	.word	0x080107e1
 80107a8:	080107e1 	.word	0x080107e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80107ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107b0:	3308      	adds	r3, #8
 80107b2:	2101      	movs	r1, #1
 80107b4:	4618      	mov	r0, r3
 80107b6:	f000 fcb3 	bl	8011120 <RCCEx_PLL2_Config>
 80107ba:	4603      	mov	r3, r0
 80107bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80107c0:	e00f      	b.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80107c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107c6:	3328      	adds	r3, #40	@ 0x28
 80107c8:	2101      	movs	r1, #1
 80107ca:	4618      	mov	r0, r3
 80107cc:	f000 fd5a 	bl	8011284 <RCCEx_PLL3_Config>
 80107d0:	4603      	mov	r3, r0
 80107d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80107d6:	e004      	b.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80107d8:	2301      	movs	r3, #1
 80107da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80107de:	e000      	b.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80107e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d10a      	bne.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80107ea:	4b96      	ldr	r3, [pc, #600]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80107ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ee:	f023 0107 	bic.w	r1, r3, #7
 80107f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107f8:	4a92      	ldr	r2, [pc, #584]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80107fa:	430b      	orrs	r3, r1
 80107fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80107fe:	e003      	b.n	8010808 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	f002 0304 	and.w	r3, r2, #4
 8010814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010818:	2300      	movs	r3, #0
 801081a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801081e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8010822:	460b      	mov	r3, r1
 8010824:	4313      	orrs	r3, r2
 8010826:	d044      	beq.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801082c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010830:	2b05      	cmp	r3, #5
 8010832:	d825      	bhi.n	8010880 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010834:	a201      	add	r2, pc, #4	@ (adr r2, 801083c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083a:	bf00      	nop
 801083c:	08010889 	.word	0x08010889
 8010840:	08010855 	.word	0x08010855
 8010844:	0801086b 	.word	0x0801086b
 8010848:	08010889 	.word	0x08010889
 801084c:	08010889 	.word	0x08010889
 8010850:	08010889 	.word	0x08010889
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010858:	3308      	adds	r3, #8
 801085a:	2101      	movs	r1, #1
 801085c:	4618      	mov	r0, r3
 801085e:	f000 fc5f 	bl	8011120 <RCCEx_PLL2_Config>
 8010862:	4603      	mov	r3, r0
 8010864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010868:	e00f      	b.n	801088a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801086a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801086e:	3328      	adds	r3, #40	@ 0x28
 8010870:	2101      	movs	r1, #1
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fd06 	bl	8011284 <RCCEx_PLL3_Config>
 8010878:	4603      	mov	r3, r0
 801087a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801087e:	e004      	b.n	801088a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010886:	e000      	b.n	801088a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010888:	bf00      	nop
    }

    if (ret == HAL_OK)
 801088a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10b      	bne.n	80108aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010892:	4b6c      	ldr	r3, [pc, #432]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010896:	f023 0107 	bic.w	r1, r3, #7
 801089a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801089e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108a2:	4a68      	ldr	r2, [pc, #416]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80108a4:	430b      	orrs	r3, r1
 80108a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80108a8:	e003      	b.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80108b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	f002 0320 	and.w	r3, r2, #32
 80108be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80108c2:	2300      	movs	r3, #0
 80108c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80108c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80108cc:	460b      	mov	r3, r1
 80108ce:	4313      	orrs	r3, r2
 80108d0:	d055      	beq.n	801097e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80108d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80108de:	d033      	beq.n	8010948 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80108e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80108e4:	d82c      	bhi.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80108e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108ea:	d02f      	beq.n	801094c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80108ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108f0:	d826      	bhi.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80108f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80108f6:	d02b      	beq.n	8010950 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80108f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80108fc:	d820      	bhi.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80108fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010902:	d012      	beq.n	801092a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010908:	d81a      	bhi.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801090a:	2b00      	cmp	r3, #0
 801090c:	d022      	beq.n	8010954 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801090e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010912:	d115      	bne.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010918:	3308      	adds	r3, #8
 801091a:	2100      	movs	r1, #0
 801091c:	4618      	mov	r0, r3
 801091e:	f000 fbff 	bl	8011120 <RCCEx_PLL2_Config>
 8010922:	4603      	mov	r3, r0
 8010924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010928:	e015      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801092a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801092e:	3328      	adds	r3, #40	@ 0x28
 8010930:	2102      	movs	r1, #2
 8010932:	4618      	mov	r0, r3
 8010934:	f000 fca6 	bl	8011284 <RCCEx_PLL3_Config>
 8010938:	4603      	mov	r3, r0
 801093a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801093e:	e00a      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010940:	2301      	movs	r3, #1
 8010942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010946:	e006      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010948:	bf00      	nop
 801094a:	e004      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801094c:	bf00      	nop
 801094e:	e002      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010950:	bf00      	nop
 8010952:	e000      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10b      	bne.n	8010976 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801095e:	4b39      	ldr	r3, [pc, #228]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010962:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801096e:	4a35      	ldr	r2, [pc, #212]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010970:	430b      	orrs	r3, r1
 8010972:	6553      	str	r3, [r2, #84]	@ 0x54
 8010974:	e003      	b.n	801097e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801097a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801097e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801098a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801098e:	2300      	movs	r3, #0
 8010990:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010994:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010998:	460b      	mov	r3, r1
 801099a:	4313      	orrs	r3, r2
 801099c:	d058      	beq.n	8010a50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801099e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80109a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80109aa:	d033      	beq.n	8010a14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80109ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80109b0:	d82c      	bhi.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80109b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109b6:	d02f      	beq.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80109b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109bc:	d826      	bhi.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80109be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80109c2:	d02b      	beq.n	8010a1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80109c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80109c8:	d820      	bhi.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80109ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109ce:	d012      	beq.n	80109f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80109d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109d4:	d81a      	bhi.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d022      	beq.n	8010a20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80109da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80109de:	d115      	bne.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80109e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109e4:	3308      	adds	r3, #8
 80109e6:	2100      	movs	r1, #0
 80109e8:	4618      	mov	r0, r3
 80109ea:	f000 fb99 	bl	8011120 <RCCEx_PLL2_Config>
 80109ee:	4603      	mov	r3, r0
 80109f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80109f4:	e015      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80109f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109fa:	3328      	adds	r3, #40	@ 0x28
 80109fc:	2102      	movs	r1, #2
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 fc40 	bl	8011284 <RCCEx_PLL3_Config>
 8010a04:	4603      	mov	r3, r0
 8010a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010a0a:	e00a      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010a12:	e006      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010a14:	bf00      	nop
 8010a16:	e004      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010a18:	bf00      	nop
 8010a1a:	e002      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010a1c:	bf00      	nop
 8010a1e:	e000      	b.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10e      	bne.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010a2a:	4b06      	ldr	r3, [pc, #24]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8010a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010a3a:	4a02      	ldr	r2, [pc, #8]	@ (8010a44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010a3c:	430b      	orrs	r3, r1
 8010a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010a40:	e006      	b.n	8010a50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010a42:	bf00      	nop
 8010a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010a60:	2300      	movs	r3, #0
 8010a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010a66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	d055      	beq.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010a7c:	d033      	beq.n	8010ae6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8010a7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010a82:	d82c      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a88:	d02f      	beq.n	8010aea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a8e:	d826      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010a90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010a94:	d02b      	beq.n	8010aee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010a96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010a9a:	d820      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010aa0:	d012      	beq.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8010aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010aa6:	d81a      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d022      	beq.n	8010af2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010ab0:	d115      	bne.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	2100      	movs	r1, #0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f000 fb30 	bl	8011120 <RCCEx_PLL2_Config>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010ac6:	e015      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010acc:	3328      	adds	r3, #40	@ 0x28
 8010ace:	2102      	movs	r1, #2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f000 fbd7 	bl	8011284 <RCCEx_PLL3_Config>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010adc:	e00a      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010ae4:	e006      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010ae6:	bf00      	nop
 8010ae8:	e004      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010aea:	bf00      	nop
 8010aec:	e002      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010aee:	bf00      	nop
 8010af0:	e000      	b.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d10b      	bne.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010afc:	4ba1      	ldr	r3, [pc, #644]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8010b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010b0c:	4a9d      	ldr	r2, [pc, #628]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010b0e:	430b      	orrs	r3, r1
 8010b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8010b12:	e003      	b.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b24:	f002 0308 	and.w	r3, r2, #8
 8010b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010b32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010b36:	460b      	mov	r3, r1
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	d01e      	beq.n	8010b7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b48:	d10c      	bne.n	8010b64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b4e:	3328      	adds	r3, #40	@ 0x28
 8010b50:	2102      	movs	r1, #2
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 fb96 	bl	8011284 <RCCEx_PLL3_Config>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d002      	beq.n	8010b64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010b64:	4b87      	ldr	r3, [pc, #540]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b74:	4a83      	ldr	r2, [pc, #524]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010b76:	430b      	orrs	r3, r1
 8010b78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	f002 0310 	and.w	r3, r2, #16
 8010b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010b90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8010b94:	460b      	mov	r3, r1
 8010b96:	4313      	orrs	r3, r2
 8010b98:	d01e      	beq.n	8010bd8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ba6:	d10c      	bne.n	8010bc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bac:	3328      	adds	r3, #40	@ 0x28
 8010bae:	2102      	movs	r1, #2
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f000 fb67 	bl	8011284 <RCCEx_PLL3_Config>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d002      	beq.n	8010bc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010bc2:	4b70      	ldr	r3, [pc, #448]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010bd4:	430b      	orrs	r3, r1
 8010bd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8010be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010be8:	2300      	movs	r3, #0
 8010bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010bee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	d03e      	beq.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010c04:	d022      	beq.n	8010c4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8010c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010c0a:	d81b      	bhi.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d003      	beq.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8010c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c14:	d00b      	beq.n	8010c2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8010c16:	e015      	b.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c1c:	3308      	adds	r3, #8
 8010c1e:	2100      	movs	r1, #0
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 fa7d 	bl	8011120 <RCCEx_PLL2_Config>
 8010c26:	4603      	mov	r3, r0
 8010c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010c2c:	e00f      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c32:	3328      	adds	r3, #40	@ 0x28
 8010c34:	2102      	movs	r1, #2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 fb24 	bl	8011284 <RCCEx_PLL3_Config>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010c42:	e004      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c44:	2301      	movs	r3, #1
 8010c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010c4a:	e000      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d10b      	bne.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010c56:	4b4b      	ldr	r3, [pc, #300]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8010c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010c66:	4a47      	ldr	r2, [pc, #284]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010c68:	430b      	orrs	r3, r1
 8010c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8010c6c:	e003      	b.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8010c82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010c84:	2300      	movs	r3, #0
 8010c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	d03b      	beq.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8010c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010c9e:	d01f      	beq.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8010ca0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010ca4:	d818      	bhi.n	8010cd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8010ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010caa:	d003      	beq.n	8010cb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010cb0:	d007      	beq.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8010cb2:	e011      	b.n	8010cd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010cb4:	4b33      	ldr	r3, [pc, #204]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb8:	4a32      	ldr	r2, [pc, #200]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010cc0:	e00f      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cc6:	3328      	adds	r3, #40	@ 0x28
 8010cc8:	2101      	movs	r1, #1
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 fada 	bl	8011284 <RCCEx_PLL3_Config>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8010cd6:	e004      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010cde:	e000      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8010ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d10b      	bne.n	8010d02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010cea:	4b26      	ldr	r3, [pc, #152]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8010cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cfa:	4a22      	ldr	r2, [pc, #136]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010cfc:	430b      	orrs	r3, r1
 8010cfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8010d00:	e003      	b.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8010d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8010d18:	2300      	movs	r3, #0
 8010d1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8010d1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8010d20:	460b      	mov	r3, r1
 8010d22:	4313      	orrs	r3, r2
 8010d24:	d034      	beq.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d003      	beq.n	8010d38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d34:	d007      	beq.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8010d36:	e011      	b.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d38:	4b12      	ldr	r3, [pc, #72]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d3c:	4a11      	ldr	r2, [pc, #68]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010d44:	e00e      	b.n	8010d64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	2102      	movs	r1, #2
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 f9e6 	bl	8011120 <RCCEx_PLL2_Config>
 8010d54:	4603      	mov	r3, r0
 8010d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010d5a:	e003      	b.n	8010d64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10d      	bne.n	8010d88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010d6c:	4b05      	ldr	r3, [pc, #20]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d7a:	4a02      	ldr	r2, [pc, #8]	@ (8010d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010d7c:	430b      	orrs	r3, r1
 8010d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010d80:	e006      	b.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8010d82:	bf00      	nop
 8010d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010d9e:	2300      	movs	r3, #0
 8010da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010da2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8010da6:	460b      	mov	r3, r1
 8010da8:	4313      	orrs	r3, r2
 8010daa:	d00c      	beq.n	8010dc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010db0:	3328      	adds	r3, #40	@ 0x28
 8010db2:	2102      	movs	r1, #2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 fa65 	bl	8011284 <RCCEx_PLL3_Config>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8010dd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8010dd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8010ddc:	460b      	mov	r3, r1
 8010dde:	4313      	orrs	r3, r2
 8010de0:	d038      	beq.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010dee:	d018      	beq.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8010df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010df4:	d811      	bhi.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dfa:	d014      	beq.n	8010e26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e00:	d80b      	bhi.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d011      	beq.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8010e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e0a:	d106      	bne.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e0c:	4bc3      	ldr	r3, [pc, #780]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e10:	4ac2      	ldr	r2, [pc, #776]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010e18:	e008      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010e20:	e004      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010e22:	bf00      	nop
 8010e24:	e002      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010e26:	bf00      	nop
 8010e28:	e000      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10b      	bne.n	8010e4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010e34:	4bb9      	ldr	r3, [pc, #740]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e44:	4ab5      	ldr	r2, [pc, #724]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e46:	430b      	orrs	r3, r1
 8010e48:	6553      	str	r3, [r2, #84]	@ 0x54
 8010e4a:	e003      	b.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8010e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e62:	2300      	movs	r3, #0
 8010e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	d009      	beq.n	8010e84 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010e70:	4baa      	ldr	r3, [pc, #680]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e7e:	4aa7      	ldr	r2, [pc, #668]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010e80:	430b      	orrs	r3, r1
 8010e82:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8010e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e92:	2300      	movs	r3, #0
 8010e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8010e96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	d00a      	beq.n	8010eb6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010ea0:	4b9e      	ldr	r3, [pc, #632]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010ea2:	691b      	ldr	r3, [r3, #16]
 8010ea4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8010ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010eac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010eb0:	4a9a      	ldr	r2, [pc, #616]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010eb2:	430b      	orrs	r3, r1
 8010eb4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8010ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ec8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8010ecc:	460b      	mov	r3, r1
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	d009      	beq.n	8010ee6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010ed2:	4b92      	ldr	r3, [pc, #584]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ed6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8010eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee0:	4a8e      	ldr	r2, [pc, #568]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010ee2:	430b      	orrs	r3, r1
 8010ee4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8010ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ef8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8010efc:	460b      	mov	r3, r1
 8010efe:	4313      	orrs	r3, r2
 8010f00:	d00e      	beq.n	8010f20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010f02:	4b86      	ldr	r3, [pc, #536]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	4a85      	ldr	r2, [pc, #532]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010f0c:	6113      	str	r3, [r2, #16]
 8010f0e:	4b83      	ldr	r3, [pc, #524]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f10:	6919      	ldr	r1, [r3, #16]
 8010f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010f1a:	4a80      	ldr	r2, [pc, #512]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f1c:	430b      	orrs	r3, r1
 8010f1e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8010f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f2e:	2300      	movs	r3, #0
 8010f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f32:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010f36:	460b      	mov	r3, r1
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	d009      	beq.n	8010f50 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010f3c:	4b77      	ldr	r3, [pc, #476]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f40:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f4a:	4a74      	ldr	r2, [pc, #464]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f4c:	430b      	orrs	r3, r1
 8010f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8010f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f5e:	2300      	movs	r3, #0
 8010f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8010f66:	460b      	mov	r3, r1
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	d00a      	beq.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010f6c:	4b6b      	ldr	r3, [pc, #428]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f70:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8010f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f7c:	4a67      	ldr	r2, [pc, #412]	@ (801111c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010f7e:	430b      	orrs	r3, r1
 8010f80:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010f8e:	f003 0301 	and.w	r3, r3, #1
 8010f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	d011      	beq.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010fa2:	3308      	adds	r3, #8
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f000 f8ba 	bl	8011120 <RCCEx_PLL2_Config>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d003      	beq.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fca:	2100      	movs	r1, #0
 8010fcc:	6239      	str	r1, [r7, #32]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fd4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010fd8:	460b      	mov	r3, r1
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	d011      	beq.n	8011002 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010fe2:	3308      	adds	r3, #8
 8010fe4:	2101      	movs	r1, #1
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 f89a 	bl	8011120 <RCCEx_PLL2_Config>
 8010fec:	4603      	mov	r3, r0
 8010fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d003      	beq.n	8011002 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100a:	2100      	movs	r1, #0
 801100c:	61b9      	str	r1, [r7, #24]
 801100e:	f003 0304 	and.w	r3, r3, #4
 8011012:	61fb      	str	r3, [r7, #28]
 8011014:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011018:	460b      	mov	r3, r1
 801101a:	4313      	orrs	r3, r2
 801101c:	d011      	beq.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801101e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011022:	3308      	adds	r3, #8
 8011024:	2102      	movs	r1, #2
 8011026:	4618      	mov	r0, r3
 8011028:	f000 f87a 	bl	8011120 <RCCEx_PLL2_Config>
 801102c:	4603      	mov	r3, r0
 801102e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8011032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801103a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801103e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8011042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	2100      	movs	r1, #0
 801104c:	6139      	str	r1, [r7, #16]
 801104e:	f003 0308 	and.w	r3, r3, #8
 8011052:	617b      	str	r3, [r7, #20]
 8011054:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011058:	460b      	mov	r3, r1
 801105a:	4313      	orrs	r3, r2
 801105c:	d011      	beq.n	8011082 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801105e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011062:	3328      	adds	r3, #40	@ 0x28
 8011064:	2100      	movs	r1, #0
 8011066:	4618      	mov	r0, r3
 8011068:	f000 f90c 	bl	8011284 <RCCEx_PLL3_Config>
 801106c:	4603      	mov	r3, r0
 801106e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8011072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011076:	2b00      	cmp	r3, #0
 8011078:	d003      	beq.n	8011082 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801107a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801107e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	2100      	movs	r1, #0
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	f003 0310 	and.w	r3, r3, #16
 8011092:	60fb      	str	r3, [r7, #12]
 8011094:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011098:	460b      	mov	r3, r1
 801109a:	4313      	orrs	r3, r2
 801109c:	d011      	beq.n	80110c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801109e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110a2:	3328      	adds	r3, #40	@ 0x28
 80110a4:	2101      	movs	r1, #1
 80110a6:	4618      	mov	r0, r3
 80110a8:	f000 f8ec 	bl	8011284 <RCCEx_PLL3_Config>
 80110ac:	4603      	mov	r3, r0
 80110ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80110b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d003      	beq.n	80110c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80110be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80110c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ca:	2100      	movs	r1, #0
 80110cc:	6039      	str	r1, [r7, #0]
 80110ce:	f003 0320 	and.w	r3, r3, #32
 80110d2:	607b      	str	r3, [r7, #4]
 80110d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80110d8:	460b      	mov	r3, r1
 80110da:	4313      	orrs	r3, r2
 80110dc:	d011      	beq.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80110de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110e2:	3328      	adds	r3, #40	@ 0x28
 80110e4:	2102      	movs	r1, #2
 80110e6:	4618      	mov	r0, r3
 80110e8:	f000 f8cc 	bl	8011284 <RCCEx_PLL3_Config>
 80110ec:	4603      	mov	r3, r0
 80110ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80110f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d003      	beq.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80110fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8011102:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	e000      	b.n	8011110 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801110e:	2301      	movs	r3, #1
}
 8011110:	4618      	mov	r0, r3
 8011112:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8011116:	46bd      	mov	sp, r7
 8011118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801111c:	58024400 	.word	0x58024400

08011120 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801112a:	2300      	movs	r3, #0
 801112c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801112e:	4b53      	ldr	r3, [pc, #332]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011132:	f003 0303 	and.w	r3, r3, #3
 8011136:	2b03      	cmp	r3, #3
 8011138:	d101      	bne.n	801113e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801113a:	2301      	movs	r3, #1
 801113c:	e099      	b.n	8011272 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801113e:	4b4f      	ldr	r3, [pc, #316]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4a4e      	ldr	r2, [pc, #312]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011144:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801114a:	f7f8 fa61 	bl	8009610 <HAL_GetTick>
 801114e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011150:	e008      	b.n	8011164 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011152:	f7f8 fa5d 	bl	8009610 <HAL_GetTick>
 8011156:	4602      	mov	r2, r0
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	2b02      	cmp	r3, #2
 801115e:	d901      	bls.n	8011164 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011160:	2303      	movs	r3, #3
 8011162:	e086      	b.n	8011272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011164:	4b45      	ldr	r3, [pc, #276]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1f0      	bne.n	8011152 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011170:	4b42      	ldr	r3, [pc, #264]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011174:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	031b      	lsls	r3, r3, #12
 801117e:	493f      	ldr	r1, [pc, #252]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011180:	4313      	orrs	r3, r2
 8011182:	628b      	str	r3, [r1, #40]	@ 0x28
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	3b01      	subs	r3, #1
 801118a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	3b01      	subs	r3, #1
 8011194:	025b      	lsls	r3, r3, #9
 8011196:	b29b      	uxth	r3, r3
 8011198:	431a      	orrs	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	3b01      	subs	r3, #1
 80111a0:	041b      	lsls	r3, r3, #16
 80111a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80111a6:	431a      	orrs	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	3b01      	subs	r3, #1
 80111ae:	061b      	lsls	r3, r3, #24
 80111b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80111b4:	4931      	ldr	r1, [pc, #196]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111b6:	4313      	orrs	r3, r2
 80111b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80111ba:	4b30      	ldr	r3, [pc, #192]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	695b      	ldr	r3, [r3, #20]
 80111c6:	492d      	ldr	r1, [pc, #180]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111c8:	4313      	orrs	r3, r2
 80111ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80111cc:	4b2b      	ldr	r3, [pc, #172]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d0:	f023 0220 	bic.w	r2, r3, #32
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	699b      	ldr	r3, [r3, #24]
 80111d8:	4928      	ldr	r1, [pc, #160]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111da:	4313      	orrs	r3, r2
 80111dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80111de:	4b27      	ldr	r3, [pc, #156]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111e2:	4a26      	ldr	r2, [pc, #152]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111e4:	f023 0310 	bic.w	r3, r3, #16
 80111e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80111ea:	4b24      	ldr	r3, [pc, #144]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80111ee:	4b24      	ldr	r3, [pc, #144]	@ (8011280 <RCCEx_PLL2_Config+0x160>)
 80111f0:	4013      	ands	r3, r2
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	69d2      	ldr	r2, [r2, #28]
 80111f6:	00d2      	lsls	r2, r2, #3
 80111f8:	4920      	ldr	r1, [pc, #128]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 80111fa:	4313      	orrs	r3, r2
 80111fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80111fe:	4b1f      	ldr	r3, [pc, #124]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011202:	4a1e      	ldr	r2, [pc, #120]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011204:	f043 0310 	orr.w	r3, r3, #16
 8011208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d106      	bne.n	801121e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011210:	4b1a      	ldr	r3, [pc, #104]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011214:	4a19      	ldr	r2, [pc, #100]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011216:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801121a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801121c:	e00f      	b.n	801123e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d106      	bne.n	8011232 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011224:	4b15      	ldr	r3, [pc, #84]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011228:	4a14      	ldr	r2, [pc, #80]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 801122a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801122e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011230:	e005      	b.n	801123e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011232:	4b12      	ldr	r3, [pc, #72]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011236:	4a11      	ldr	r2, [pc, #68]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011238:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801123c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801123e:	4b0f      	ldr	r3, [pc, #60]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4a0e      	ldr	r2, [pc, #56]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011244:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801124a:	f7f8 f9e1 	bl	8009610 <HAL_GetTick>
 801124e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011250:	e008      	b.n	8011264 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011252:	f7f8 f9dd 	bl	8009610 <HAL_GetTick>
 8011256:	4602      	mov	r2, r0
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	2b02      	cmp	r3, #2
 801125e:	d901      	bls.n	8011264 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011260:	2303      	movs	r3, #3
 8011262:	e006      	b.n	8011272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011264:	4b05      	ldr	r3, [pc, #20]	@ (801127c <RCCEx_PLL2_Config+0x15c>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d0f0      	beq.n	8011252 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011270:	7bfb      	ldrb	r3, [r7, #15]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	58024400 	.word	0x58024400
 8011280:	ffff0007 	.word	0xffff0007

08011284 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011292:	4b53      	ldr	r3, [pc, #332]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011296:	f003 0303 	and.w	r3, r3, #3
 801129a:	2b03      	cmp	r3, #3
 801129c:	d101      	bne.n	80112a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801129e:	2301      	movs	r3, #1
 80112a0:	e099      	b.n	80113d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80112a2:	4b4f      	ldr	r3, [pc, #316]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4a4e      	ldr	r2, [pc, #312]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80112a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80112ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112ae:	f7f8 f9af 	bl	8009610 <HAL_GetTick>
 80112b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80112b4:	e008      	b.n	80112c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80112b6:	f7f8 f9ab 	bl	8009610 <HAL_GetTick>
 80112ba:	4602      	mov	r2, r0
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d901      	bls.n	80112c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e086      	b.n	80113d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80112c8:	4b45      	ldr	r3, [pc, #276]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1f0      	bne.n	80112b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80112d4:	4b42      	ldr	r3, [pc, #264]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80112d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	051b      	lsls	r3, r3, #20
 80112e2:	493f      	ldr	r1, [pc, #252]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80112e4:	4313      	orrs	r3, r2
 80112e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	025b      	lsls	r3, r3, #9
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	431a      	orrs	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	3b01      	subs	r3, #1
 8011304:	041b      	lsls	r3, r3, #16
 8011306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801130a:	431a      	orrs	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	691b      	ldr	r3, [r3, #16]
 8011310:	3b01      	subs	r3, #1
 8011312:	061b      	lsls	r3, r3, #24
 8011314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011318:	4931      	ldr	r1, [pc, #196]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801131a:	4313      	orrs	r3, r2
 801131c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801131e:	4b30      	ldr	r3, [pc, #192]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011322:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	695b      	ldr	r3, [r3, #20]
 801132a:	492d      	ldr	r1, [pc, #180]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801132c:	4313      	orrs	r3, r2
 801132e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011330:	4b2b      	ldr	r3, [pc, #172]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011334:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	699b      	ldr	r3, [r3, #24]
 801133c:	4928      	ldr	r1, [pc, #160]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801133e:	4313      	orrs	r3, r2
 8011340:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011342:	4b27      	ldr	r3, [pc, #156]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011346:	4a26      	ldr	r2, [pc, #152]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801134c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801134e:	4b24      	ldr	r3, [pc, #144]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011352:	4b24      	ldr	r3, [pc, #144]	@ (80113e4 <RCCEx_PLL3_Config+0x160>)
 8011354:	4013      	ands	r3, r2
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	69d2      	ldr	r2, [r2, #28]
 801135a:	00d2      	lsls	r2, r2, #3
 801135c:	4920      	ldr	r1, [pc, #128]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801135e:	4313      	orrs	r3, r2
 8011360:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011362:	4b1f      	ldr	r3, [pc, #124]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011366:	4a1e      	ldr	r2, [pc, #120]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801136c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d106      	bne.n	8011382 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011374:	4b1a      	ldr	r3, [pc, #104]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011378:	4a19      	ldr	r2, [pc, #100]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801137a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801137e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011380:	e00f      	b.n	80113a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d106      	bne.n	8011396 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011388:	4b15      	ldr	r3, [pc, #84]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801138c:	4a14      	ldr	r2, [pc, #80]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801138e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011394:	e005      	b.n	80113a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011396:	4b12      	ldr	r3, [pc, #72]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 8011398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801139a:	4a11      	ldr	r2, [pc, #68]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 801139c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80113a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80113a2:	4b0f      	ldr	r3, [pc, #60]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a0e      	ldr	r2, [pc, #56]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80113a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80113ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113ae:	f7f8 f92f 	bl	8009610 <HAL_GetTick>
 80113b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80113b4:	e008      	b.n	80113c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80113b6:	f7f8 f92b 	bl	8009610 <HAL_GetTick>
 80113ba:	4602      	mov	r2, r0
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d901      	bls.n	80113c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	e006      	b.n	80113d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80113c8:	4b05      	ldr	r3, [pc, #20]	@ (80113e0 <RCCEx_PLL3_Config+0x15c>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d0f0      	beq.n	80113b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80113d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	58024400 	.word	0x58024400
 80113e4:	ffff0007 	.word	0xffff0007

080113e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e10f      	b.n	801161a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4a87      	ldr	r2, [pc, #540]	@ (8011624 <HAL_SPI_Init+0x23c>)
 8011406:	4293      	cmp	r3, r2
 8011408:	d00f      	beq.n	801142a <HAL_SPI_Init+0x42>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4a86      	ldr	r2, [pc, #536]	@ (8011628 <HAL_SPI_Init+0x240>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d00a      	beq.n	801142a <HAL_SPI_Init+0x42>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4a84      	ldr	r2, [pc, #528]	@ (801162c <HAL_SPI_Init+0x244>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d005      	beq.n	801142a <HAL_SPI_Init+0x42>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	2b0f      	cmp	r3, #15
 8011424:	d901      	bls.n	801142a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011426:	2301      	movs	r3, #1
 8011428:	e0f7      	b.n	801161a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 ff8c 	bl	8012348 <SPI_GetPacketSize>
 8011430:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a7b      	ldr	r2, [pc, #492]	@ (8011624 <HAL_SPI_Init+0x23c>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d00c      	beq.n	8011456 <HAL_SPI_Init+0x6e>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4a79      	ldr	r2, [pc, #484]	@ (8011628 <HAL_SPI_Init+0x240>)
 8011442:	4293      	cmp	r3, r2
 8011444:	d007      	beq.n	8011456 <HAL_SPI_Init+0x6e>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4a78      	ldr	r2, [pc, #480]	@ (801162c <HAL_SPI_Init+0x244>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d002      	beq.n	8011456 <HAL_SPI_Init+0x6e>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b08      	cmp	r3, #8
 8011454:	d811      	bhi.n	801147a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801145a:	4a72      	ldr	r2, [pc, #456]	@ (8011624 <HAL_SPI_Init+0x23c>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d009      	beq.n	8011474 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a70      	ldr	r2, [pc, #448]	@ (8011628 <HAL_SPI_Init+0x240>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d004      	beq.n	8011474 <HAL_SPI_Init+0x8c>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a6f      	ldr	r2, [pc, #444]	@ (801162c <HAL_SPI_Init+0x244>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d104      	bne.n	801147e <HAL_SPI_Init+0x96>
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b10      	cmp	r3, #16
 8011478:	d901      	bls.n	801147e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801147a:	2301      	movs	r3, #1
 801147c:	e0cd      	b.n	801161a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d106      	bne.n	8011498 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7f7 fc2e 	bl	8008cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2202      	movs	r2, #2
 801149c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f022 0201 	bic.w	r2, r2, #1
 80114ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80114ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80114c4:	d119      	bne.n	80114fa <HAL_SPI_Init+0x112>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80114ce:	d103      	bne.n	80114d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d008      	beq.n	80114ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10c      	bne.n	80114fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80114e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114e8:	d107      	bne.n	80114fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80114f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00f      	beq.n	8011526 <HAL_SPI_Init+0x13e>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	2b06      	cmp	r3, #6
 801150c:	d90b      	bls.n	8011526 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	430a      	orrs	r2, r1
 8011522:	601a      	str	r2, [r3, #0]
 8011524:	e007      	b.n	8011536 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011534:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	69da      	ldr	r2, [r3, #28]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801153e:	431a      	orrs	r2, r3
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	431a      	orrs	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011548:	ea42 0103 	orr.w	r1, r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	68da      	ldr	r2, [r3, #12]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011560:	431a      	orrs	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011566:	431a      	orrs	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	699b      	ldr	r3, [r3, #24]
 801156c:	431a      	orrs	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	431a      	orrs	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	431a      	orrs	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a1b      	ldr	r3, [r3, #32]
 801157e:	431a      	orrs	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	431a      	orrs	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801158a:	431a      	orrs	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	431a      	orrs	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011596:	ea42 0103 	orr.w	r1, r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	430a      	orrs	r2, r1
 80115a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d113      	bne.n	80115d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80115c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	689b      	ldr	r3, [r3, #8]
 80115c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80115d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f022 0201 	bic.w	r2, r2, #1
 80115e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00a      	beq.n	8011608 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	430a      	orrs	r2, r1
 8011606:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2201      	movs	r2, #1
 8011614:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	40013000 	.word	0x40013000
 8011628:	40003800 	.word	0x40003800
 801162c:	40003c00 	.word	0x40003c00

08011630 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b08a      	sub	sp, #40	@ 0x28
 8011634:	af02      	add	r7, sp, #8
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	603b      	str	r3, [r7, #0]
 801163c:	4613      	mov	r3, r2
 801163e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	3320      	adds	r3, #32
 8011646:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011648:	2300      	movs	r3, #0
 801164a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011652:	2b01      	cmp	r3, #1
 8011654:	d101      	bne.n	801165a <HAL_SPI_Transmit+0x2a>
 8011656:	2302      	movs	r3, #2
 8011658:	e1e1      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2201      	movs	r2, #1
 801165e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011662:	f7f7 ffd5 	bl	8009610 <HAL_GetTick>
 8011666:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801166e:	b2db      	uxtb	r3, r3
 8011670:	2b01      	cmp	r3, #1
 8011672:	d007      	beq.n	8011684 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8011674:	2302      	movs	r3, #2
 8011676:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8011680:	7efb      	ldrb	r3, [r7, #27]
 8011682:	e1cc      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <HAL_SPI_Transmit+0x60>
 801168a:	88fb      	ldrh	r3, [r7, #6]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d107      	bne.n	80116a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 801169c:	7efb      	ldrb	r3, [r7, #27]
 801169e:	e1be      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2203      	movs	r2, #3
 80116a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	68ba      	ldr	r2, [r7, #8]
 80116b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	88fa      	ldrh	r2, [r7, #6]
 80116ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	88fa      	ldrh	r2, [r7, #6]
 80116c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2200      	movs	r2, #0
 80116ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2200      	movs	r2, #0
 80116d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2200      	movs	r2, #0
 80116e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80116f0:	d108      	bne.n	8011704 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011700:	601a      	str	r2, [r3, #0]
 8011702:	e009      	b.n	8011718 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011716:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	685a      	ldr	r2, [r3, #4]
 801171e:	4b96      	ldr	r3, [pc, #600]	@ (8011978 <HAL_SPI_Transmit+0x348>)
 8011720:	4013      	ands	r3, r2
 8011722:	88f9      	ldrh	r1, [r7, #6]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	6812      	ldr	r2, [r2, #0]
 8011728:	430b      	orrs	r3, r1
 801172a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f042 0201 	orr.w	r2, r2, #1
 801173a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011744:	d107      	bne.n	8011756 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	68db      	ldr	r3, [r3, #12]
 801175a:	2b0f      	cmp	r3, #15
 801175c:	d947      	bls.n	80117ee <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801175e:	e03f      	b.n	80117e0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	695b      	ldr	r3, [r3, #20]
 8011766:	f003 0302 	and.w	r3, r3, #2
 801176a:	2b02      	cmp	r3, #2
 801176c:	d114      	bne.n	8011798 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	6812      	ldr	r2, [r2, #0]
 8011778:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801177e:	1d1a      	adds	r2, r3, #4
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801178a:	b29b      	uxth	r3, r3
 801178c:	3b01      	subs	r3, #1
 801178e:	b29a      	uxth	r2, r3
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011796:	e023      	b.n	80117e0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011798:	f7f7 ff3a 	bl	8009610 <HAL_GetTick>
 801179c:	4602      	mov	r2, r0
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d803      	bhi.n	80117b0 <HAL_SPI_Transmit+0x180>
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ae:	d102      	bne.n	80117b6 <HAL_SPI_Transmit+0x186>
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d114      	bne.n	80117e0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f000 fcf8 	bl	80121ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80117ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2201      	movs	r2, #1
 80117d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 80117dc:	2303      	movs	r3, #3
 80117de:	e11e      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d1b9      	bne.n	8011760 <HAL_SPI_Transmit+0x130>
 80117ec:	e0f1      	b.n	80119d2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	2b07      	cmp	r3, #7
 80117f4:	f240 80e6 	bls.w	80119c4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80117f8:	e05d      	b.n	80118b6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	695b      	ldr	r3, [r3, #20]
 8011800:	f003 0302 	and.w	r3, r3, #2
 8011804:	2b02      	cmp	r3, #2
 8011806:	d132      	bne.n	801186e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801180e:	b29b      	uxth	r3, r3
 8011810:	2b01      	cmp	r3, #1
 8011812:	d918      	bls.n	8011846 <HAL_SPI_Transmit+0x216>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011818:	2b00      	cmp	r3, #0
 801181a:	d014      	beq.n	8011846 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	6812      	ldr	r2, [r2, #0]
 8011826:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801182c:	1d1a      	adds	r2, r3, #4
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011838:	b29b      	uxth	r3, r3
 801183a:	3b02      	subs	r3, #2
 801183c:	b29a      	uxth	r2, r3
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011844:	e037      	b.n	80118b6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801184a:	881a      	ldrh	r2, [r3, #0]
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011854:	1c9a      	adds	r2, r3, #2
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011860:	b29b      	uxth	r3, r3
 8011862:	3b01      	subs	r3, #1
 8011864:	b29a      	uxth	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801186c:	e023      	b.n	80118b6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801186e:	f7f7 fecf 	bl	8009610 <HAL_GetTick>
 8011872:	4602      	mov	r2, r0
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	1ad3      	subs	r3, r2, r3
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	429a      	cmp	r2, r3
 801187c:	d803      	bhi.n	8011886 <HAL_SPI_Transmit+0x256>
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011884:	d102      	bne.n	801188c <HAL_SPI_Transmit+0x25c>
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d114      	bne.n	80118b6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 fc8d 	bl	80121ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2200      	movs	r2, #0
 8011896:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2201      	movs	r2, #1
 80118ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 80118b2:	2303      	movs	r3, #3
 80118b4:	e0b3      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80118bc:	b29b      	uxth	r3, r3
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d19b      	bne.n	80117fa <HAL_SPI_Transmit+0x1ca>
 80118c2:	e086      	b.n	80119d2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	695b      	ldr	r3, [r3, #20]
 80118ca:	f003 0302 	and.w	r3, r3, #2
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	d154      	bne.n	801197c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80118d8:	b29b      	uxth	r3, r3
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d918      	bls.n	8011910 <HAL_SPI_Transmit+0x2e0>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118e2:	2b40      	cmp	r3, #64	@ 0x40
 80118e4:	d914      	bls.n	8011910 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6812      	ldr	r2, [r2, #0]
 80118f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118f6:	1d1a      	adds	r2, r3, #4
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011902:	b29b      	uxth	r3, r3
 8011904:	3b04      	subs	r3, #4
 8011906:	b29a      	uxth	r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801190e:	e059      	b.n	80119c4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011916:	b29b      	uxth	r3, r3
 8011918:	2b01      	cmp	r3, #1
 801191a:	d917      	bls.n	801194c <HAL_SPI_Transmit+0x31c>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011920:	2b00      	cmp	r3, #0
 8011922:	d013      	beq.n	801194c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011928:	881a      	ldrh	r2, [r3, #0]
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011932:	1c9a      	adds	r2, r3, #2
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801193e:	b29b      	uxth	r3, r3
 8011940:	3b02      	subs	r3, #2
 8011942:	b29a      	uxth	r2, r3
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801194a:	e03b      	b.n	80119c4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	3320      	adds	r3, #32
 8011956:	7812      	ldrb	r2, [r2, #0]
 8011958:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801195e:	1c5a      	adds	r2, r3, #1
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801196a:	b29b      	uxth	r3, r3
 801196c:	3b01      	subs	r3, #1
 801196e:	b29a      	uxth	r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011976:	e025      	b.n	80119c4 <HAL_SPI_Transmit+0x394>
 8011978:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801197c:	f7f7 fe48 	bl	8009610 <HAL_GetTick>
 8011980:	4602      	mov	r2, r0
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	429a      	cmp	r2, r3
 801198a:	d803      	bhi.n	8011994 <HAL_SPI_Transmit+0x364>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011992:	d102      	bne.n	801199a <HAL_SPI_Transmit+0x36a>
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d114      	bne.n	80119c4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801199a:	68f8      	ldr	r0, [r7, #12]
 801199c:	f000 fc06 	bl	80121ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2201      	movs	r2, #1
 80119bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 80119c0:	2303      	movs	r3, #3
 80119c2:	e02c      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f47f af79 	bne.w	80118c4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	2200      	movs	r2, #0
 80119da:	2108      	movs	r1, #8
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f000 fc85 	bl	80122ec <SPI_WaitOnFlagUntilTimeout>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d007      	beq.n	80119f8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119ee:	f043 0220 	orr.w	r2, r3, #32
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f000 fbd7 	bl	80121ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d001      	beq.n	8011a1c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e000      	b.n	8011a1e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8011a1c:	7efb      	ldrb	r3, [r7, #27]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3720      	adds	r7, #32
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop

08011a28 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	4613      	mov	r3, r2
 8011a34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011a36:	2300      	movs	r3, #0
 8011a38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d101      	bne.n	8011a48 <HAL_SPI_Transmit_DMA+0x20>
 8011a44:	2302      	movs	r3, #2
 8011a46:	e137      	b.n	8011cb8 <HAL_SPI_Transmit_DMA+0x290>
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d007      	beq.n	8011a6c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8011a68:	7dfb      	ldrb	r3, [r7, #23]
 8011a6a:	e125      	b.n	8011cb8 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <HAL_SPI_Transmit_DMA+0x50>
 8011a72:	88fb      	ldrh	r3, [r7, #6]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d107      	bne.n	8011a88 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8011a78:	2301      	movs	r3, #1
 8011a7a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8011a84:	7dfb      	ldrb	r3, [r7, #23]
 8011a86:	e117      	b.n	8011cb8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2203      	movs	r2, #3
 8011a8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	88fa      	ldrh	r2, [r7, #6]
 8011aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	88fa      	ldrh	r2, [r7, #6]
 8011aaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2200      	movs	r2, #0
 8011acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	689b      	ldr	r3, [r3, #8]
 8011ad4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011ad8:	d108      	bne.n	8011aec <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011ae8:	601a      	str	r2, [r3, #0]
 8011aea:	e009      	b.n	8011b00 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011afe:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	2b0f      	cmp	r3, #15
 8011b06:	d905      	bls.n	8011b14 <HAL_SPI_Transmit_DMA+0xec>
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011b12:	d10f      	bne.n	8011b34 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011b18:	2b07      	cmp	r3, #7
 8011b1a:	d913      	bls.n	8011b44 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011b26:	d00d      	beq.n	8011b44 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b2c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011b32:	d007      	beq.n	8011b44 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8011b34:	2301      	movs	r3, #1
 8011b36:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8011b40:	7dfb      	ldrb	r3, [r7, #23]
 8011b42:	e0b9      	b.n	8011cb8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	2b07      	cmp	r3, #7
 8011b4a:	d820      	bhi.n	8011b8e <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b50:	699b      	ldr	r3, [r3, #24]
 8011b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011b56:	d109      	bne.n	8011b6c <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	3301      	adds	r3, #1
 8011b62:	105b      	asrs	r3, r3, #1
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b70:	699b      	ldr	r3, [r3, #24]
 8011b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011b76:	d11e      	bne.n	8011bb6 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	3303      	adds	r3, #3
 8011b82:	109b      	asrs	r3, r3, #2
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011b8c:	e013      	b.n	8011bb6 <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	2b0f      	cmp	r3, #15
 8011b94:	d80f      	bhi.n	8011bb6 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011ba0:	d109      	bne.n	8011bb6 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	3301      	adds	r3, #1
 8011bac:	105b      	asrs	r3, r3, #1
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bba:	4a41      	ldr	r2, [pc, #260]	@ (8011cc0 <HAL_SPI_Transmit_DMA+0x298>)
 8011bbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bc2:	4a40      	ldr	r2, [pc, #256]	@ (8011cc4 <HAL_SPI_Transmit_DMA+0x29c>)
 8011bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bca:	4a3f      	ldr	r2, [pc, #252]	@ (8011cc8 <HAL_SPI_Transmit_DMA+0x2a0>)
 8011bcc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	689a      	ldr	r2, [r3, #8]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011be4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011bee:	4619      	mov	r1, r3
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3320      	adds	r3, #32
 8011bf6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011bfe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011c00:	f7f8 f9ae 	bl	8009f60 <HAL_DMA_Start_IT>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d013      	beq.n	8011c32 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c10:	f043 0210 	orr.w	r2, r3, #16
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2201      	movs	r2, #1
 8011c26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    errorcode = HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8011c2e:	7dfb      	ldrb	r3, [r7, #23]
 8011c30:	e042      	b.n	8011cb8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c36:	69db      	ldr	r3, [r3, #28]
 8011c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c3c:	d108      	bne.n	8011c50 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6859      	ldr	r1, [r3, #4]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	4b20      	ldr	r3, [pc, #128]	@ (8011ccc <HAL_SPI_Transmit_DMA+0x2a4>)
 8011c4a:	400b      	ands	r3, r1
 8011c4c:	6053      	str	r3, [r2, #4]
 8011c4e:	e009      	b.n	8011c64 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	685a      	ldr	r2, [r3, #4]
 8011c56:	4b1d      	ldr	r3, [pc, #116]	@ (8011ccc <HAL_SPI_Transmit_DMA+0x2a4>)
 8011c58:	4013      	ands	r3, r2
 8011c5a:	88f9      	ldrh	r1, [r7, #6]
 8011c5c:	68fa      	ldr	r2, [r7, #12]
 8011c5e:	6812      	ldr	r2, [r2, #0]
 8011c60:	430b      	orrs	r3, r1
 8011c62:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	689a      	ldr	r2, [r3, #8]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011c72:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	691a      	ldr	r2, [r3, #16]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8011c82:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f042 0201 	orr.w	r2, r2, #1
 8011c92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c9c:	d107      	bne.n	8011cae <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011cac:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	08012117 	.word	0x08012117
 8011cc4:	080120d1 	.word	0x080120d1
 8011cc8:	08012133 	.word	0x08012133
 8011ccc:	ffff0000 	.word	0xffff0000

08011cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08a      	sub	sp, #40	@ 0x28
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	691b      	ldr	r3, [r3, #16]
 8011cde:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	695b      	ldr	r3, [r3, #20]
 8011ce6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011ce8:	6a3a      	ldr	r2, [r7, #32]
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	4013      	ands	r3, r2
 8011cee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011d02:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	3330      	adds	r3, #48	@ 0x30
 8011d0a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d010      	beq.n	8011d38 <HAL_SPI_IRQHandler+0x68>
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	f003 0308 	and.w	r3, r3, #8
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	699a      	ldr	r2, [r3, #24]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011d2e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 f9c3 	bl	80120bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011d36:	e192      	b.n	801205e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d113      	bne.n	8011d6a <HAL_SPI_IRQHandler+0x9a>
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	f003 0320 	and.w	r3, r3, #32
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10e      	bne.n	8011d6a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d009      	beq.n	8011d6a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	4798      	blx	r3
    handled = 1UL;
 8011d66:	2301      	movs	r3, #1
 8011d68:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d10f      	bne.n	8011d94 <HAL_SPI_IRQHandler+0xc4>
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	f003 0301 	and.w	r3, r3, #1
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00a      	beq.n	8011d94 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d105      	bne.n	8011d94 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	4798      	blx	r3
    handled = 1UL;
 8011d90:	2301      	movs	r3, #1
 8011d92:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011d94:	69bb      	ldr	r3, [r7, #24]
 8011d96:	f003 0320 	and.w	r3, r3, #32
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d10f      	bne.n	8011dbe <HAL_SPI_IRQHandler+0xee>
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	f003 0302 	and.w	r3, r3, #2
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00a      	beq.n	8011dbe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d105      	bne.n	8011dbe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	4798      	blx	r3
    handled = 1UL;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f040 8147 	bne.w	8012054 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	f003 0308 	and.w	r3, r3, #8
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f000 808b 	beq.w	8011ee8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	699a      	ldr	r2, [r3, #24]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f042 0208 	orr.w	r2, r2, #8
 8011de0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	699a      	ldr	r2, [r3, #24]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f042 0210 	orr.w	r2, r2, #16
 8011df0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	699a      	ldr	r2, [r3, #24]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e00:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	691a      	ldr	r2, [r3, #16]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f022 0208 	bic.w	r2, r2, #8
 8011e10:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d13d      	bne.n	8011e9c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011e20:	e036      	b.n	8011e90 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	2b0f      	cmp	r3, #15
 8011e28:	d90b      	bls.n	8011e42 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011e34:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e3a:	1d1a      	adds	r2, r3, #4
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	665a      	str	r2, [r3, #100]	@ 0x64
 8011e40:	e01d      	b.n	8011e7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	2b07      	cmp	r3, #7
 8011e48:	d90b      	bls.n	8011e62 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	8812      	ldrh	r2, [r2, #0]
 8011e52:	b292      	uxth	r2, r2
 8011e54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e5a:	1c9a      	adds	r2, r3, #2
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	665a      	str	r2, [r3, #100]	@ 0x64
 8011e60:	e00d      	b.n	8011e7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e6e:	7812      	ldrb	r2, [r2, #0]
 8011e70:	b2d2      	uxtb	r2, r2
 8011e72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e78:	1c5a      	adds	r2, r3, #1
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	3b01      	subs	r3, #1
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1c2      	bne.n	8011e22 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 f985 	bl	80121ac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d003      	beq.n	8011ebc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f000 f8f7 	bl	80120a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011eba:	e0d0      	b.n	801205e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011ebc:	7cfb      	ldrb	r3, [r7, #19]
 8011ebe:	2b05      	cmp	r3, #5
 8011ec0:	d103      	bne.n	8011eca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f8dc 	bl	8012080 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011ec8:	e0c6      	b.n	8012058 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011eca:	7cfb      	ldrb	r3, [r7, #19]
 8011ecc:	2b04      	cmp	r3, #4
 8011ece:	d103      	bne.n	8011ed8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 f8cb 	bl	801206c <HAL_SPI_RxCpltCallback>
    return;
 8011ed6:	e0bf      	b.n	8012058 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011ed8:	7cfb      	ldrb	r3, [r7, #19]
 8011eda:	2b03      	cmp	r3, #3
 8011edc:	f040 80bc 	bne.w	8012058 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ef fbab 	bl	800163c <HAL_SPI_TxCpltCallback>
    return;
 8011ee6:	e0b7      	b.n	8012058 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 80b5 	beq.w	801205e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d00f      	beq.n	8011f1e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f04:	f043 0204 	orr.w	r2, r3, #4
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	699a      	ldr	r2, [r3, #24]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011f1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00f      	beq.n	8011f48 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f2e:	f043 0201 	orr.w	r2, r3, #1
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	699a      	ldr	r2, [r3, #24]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011f46:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00f      	beq.n	8011f72 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f58:	f043 0208 	orr.w	r2, r3, #8
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	699a      	ldr	r2, [r3, #24]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011f72:	69bb      	ldr	r3, [r7, #24]
 8011f74:	f003 0320 	and.w	r3, r3, #32
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00f      	beq.n	8011f9c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	699a      	ldr	r2, [r3, #24]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f042 0220 	orr.w	r2, r2, #32
 8011f9a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d05a      	beq.n	801205c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f022 0201 	bic.w	r2, r2, #1
 8011fb4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	6919      	ldr	r1, [r3, #16]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	4b28      	ldr	r3, [pc, #160]	@ (8012064 <HAL_SPI_IRQHandler+0x394>)
 8011fc2:	400b      	ands	r3, r1
 8011fc4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011fcc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011fd0:	d138      	bne.n	8012044 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	689a      	ldr	r2, [r3, #8]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011fe0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d013      	beq.n	8012012 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fee:	4a1e      	ldr	r2, [pc, #120]	@ (8012068 <HAL_SPI_IRQHandler+0x398>)
 8011ff0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7f8 fa1c 	bl	800a434 <HAL_DMA_Abort_IT>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d007      	beq.n	8012012 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012016:	2b00      	cmp	r3, #0
 8012018:	d020      	beq.n	801205c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801201e:	4a12      	ldr	r2, [pc, #72]	@ (8012068 <HAL_SPI_IRQHandler+0x398>)
 8012020:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012026:	4618      	mov	r0, r3
 8012028:	f7f8 fa04 	bl	800a434 <HAL_DMA_Abort_IT>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d014      	beq.n	801205c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012038:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012042:	e00b      	b.n	801205c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2201      	movs	r2, #1
 8012048:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f000 f82b 	bl	80120a8 <HAL_SPI_ErrorCallback>
    return;
 8012052:	e003      	b.n	801205c <HAL_SPI_IRQHandler+0x38c>
    return;
 8012054:	bf00      	nop
 8012056:	e002      	b.n	801205e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012058:	bf00      	nop
 801205a:	e000      	b.n	801205e <HAL_SPI_IRQHandler+0x38e>
    return;
 801205c:	bf00      	nop
  }
}
 801205e:	3728      	adds	r7, #40	@ 0x28
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	fffffc94 	.word	0xfffffc94
 8012068:	08012179 	.word	0x08012179

0801206c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012074:	bf00      	nop
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801209c:	bf00      	nop
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80120c4:	bf00      	nop
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120dc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b07      	cmp	r3, #7
 80120e8:	d011      	beq.n	801210e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120ee:	69db      	ldr	r3, [r3, #28]
 80120f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120f4:	d103      	bne.n	80120fe <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ef faa0 	bl	800163c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80120fc:	e007      	b.n	801210e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	691a      	ldr	r2, [r3, #16]
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f042 0208 	orr.w	r2, r2, #8
 801210c:	611a      	str	r2, [r3, #16]
}
 801210e:	bf00      	nop
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b084      	sub	sp, #16
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012122:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	f7ff ffb5 	bl	8012094 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801212a:	bf00      	nop
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012132:	b580      	push	{r7, lr}
 8012134:	b084      	sub	sp, #16
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801213e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7f9 fae7 	bl	800b714 <HAL_DMA_GetError>
 8012146:	4603      	mov	r3, r0
 8012148:	2b02      	cmp	r3, #2
 801214a:	d011      	beq.n	8012170 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f000 f82d 	bl	80121ac <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012158:	f043 0210 	orr.w	r2, r3, #16
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2201      	movs	r2, #1
 8012166:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f7ff ff9c 	bl	80120a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012170:	bf00      	nop
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b084      	sub	sp, #16
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012184:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2200      	movs	r2, #0
 801218a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2200      	movs	r2, #0
 8012192:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2201      	movs	r2, #1
 801219a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f7ff ff82 	bl	80120a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80121a4:	bf00      	nop
 80121a6:	3710      	adds	r7, #16
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b085      	sub	sp, #20
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	699a      	ldr	r2, [r3, #24]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f042 0208 	orr.w	r2, r2, #8
 80121ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	699a      	ldr	r2, [r3, #24]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f042 0210 	orr.w	r2, r2, #16
 80121da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f022 0201 	bic.w	r2, r2, #1
 80121ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6919      	ldr	r1, [r3, #16]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	4b3c      	ldr	r3, [pc, #240]	@ (80122e8 <SPI_CloseTransfer+0x13c>)
 80121f8:	400b      	ands	r3, r1
 80121fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	689a      	ldr	r2, [r3, #8]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801220a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b04      	cmp	r3, #4
 8012216:	d014      	beq.n	8012242 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f003 0320 	and.w	r3, r3, #32
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00f      	beq.n	8012242 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012228:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	699a      	ldr	r2, [r3, #24]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f042 0220 	orr.w	r2, r2, #32
 8012240:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012248:	b2db      	uxtb	r3, r3
 801224a:	2b03      	cmp	r3, #3
 801224c:	d014      	beq.n	8012278 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00f      	beq.n	8012278 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801225e:	f043 0204 	orr.w	r2, r3, #4
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	699a      	ldr	r2, [r3, #24]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012276:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00f      	beq.n	80122a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012288:	f043 0201 	orr.w	r2, r3, #1
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	699a      	ldr	r2, [r3, #24]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00f      	beq.n	80122cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80122b2:	f043 0208 	orr.w	r2, r3, #8
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	699a      	ldr	r2, [r3, #24]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80122ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80122dc:	bf00      	nop
 80122de:	3714      	adds	r7, #20
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr
 80122e8:	fffffc90 	.word	0xfffffc90

080122ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	603b      	str	r3, [r7, #0]
 80122f8:	4613      	mov	r3, r2
 80122fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80122fc:	e010      	b.n	8012320 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80122fe:	f7f7 f987 	bl	8009610 <HAL_GetTick>
 8012302:	4602      	mov	r2, r0
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	429a      	cmp	r2, r3
 801230c:	d803      	bhi.n	8012316 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d102      	bne.n	801231c <SPI_WaitOnFlagUntilTimeout+0x30>
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801231c:	2303      	movs	r3, #3
 801231e:	e00f      	b.n	8012340 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	695a      	ldr	r2, [r3, #20]
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	4013      	ands	r3, r2
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	429a      	cmp	r2, r3
 801232e:	bf0c      	ite	eq
 8012330:	2301      	moveq	r3, #1
 8012332:	2300      	movne	r3, #0
 8012334:	b2db      	uxtb	r3, r3
 8012336:	461a      	mov	r2, r3
 8012338:	79fb      	ldrb	r3, [r7, #7]
 801233a:	429a      	cmp	r2, r3
 801233c:	d0df      	beq.n	80122fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012354:	095b      	lsrs	r3, r3, #5
 8012356:	3301      	adds	r3, #1
 8012358:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	3301      	adds	r3, #1
 8012360:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	3307      	adds	r3, #7
 8012366:	08db      	lsrs	r3, r3, #3
 8012368:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012372:	4618      	mov	r0, r3
 8012374:	3714      	adds	r7, #20
 8012376:	46bd      	mov	sp, r7
 8012378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237c:	4770      	bx	lr

0801237e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b082      	sub	sp, #8
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d101      	bne.n	8012390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801238c:	2301      	movs	r3, #1
 801238e:	e049      	b.n	8012424 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012396:	b2db      	uxtb	r3, r3
 8012398:	2b00      	cmp	r3, #0
 801239a:	d106      	bne.n	80123aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7f7 f81d 	bl	80093e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2202      	movs	r2, #2
 80123ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	3304      	adds	r3, #4
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f000 fbb1 	bl	8012b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2201      	movs	r2, #1
 80123c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2201      	movs	r2, #1
 80123ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2201      	movs	r2, #1
 80123d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2201      	movs	r2, #1
 80123de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2201      	movs	r2, #1
 80123e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2201      	movs	r2, #1
 80123ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2201      	movs	r2, #1
 80123f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2201      	movs	r2, #1
 80123fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2201      	movs	r2, #1
 8012406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2201      	movs	r2, #1
 8012416:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012422:	2300      	movs	r3, #0
}
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d101      	bne.n	801243e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801243a:	2301      	movs	r3, #1
 801243c:	e049      	b.n	80124d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	d106      	bne.n	8012458 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f841 	bl	80124da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2202      	movs	r2, #2
 801245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	3304      	adds	r3, #4
 8012468:	4619      	mov	r1, r3
 801246a:	4610      	mov	r0, r2
 801246c:	f000 fb5a 	bl	8012b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2201      	movs	r2, #1
 8012474:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2201      	movs	r2, #1
 801247c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2201      	movs	r2, #1
 8012484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2201      	movs	r2, #1
 801248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2201      	movs	r2, #1
 8012494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2201      	movs	r2, #1
 801249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2201      	movs	r2, #1
 80124a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2201      	movs	r2, #1
 80124ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2201      	movs	r2, #1
 80124b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2201      	movs	r2, #1
 80124c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2201      	movs	r2, #1
 80124cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80124da:	b480      	push	{r7}
 80124dc:	b083      	sub	sp, #12
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80124e2:	bf00      	nop
 80124e4:	370c      	adds	r7, #12
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr
	...

080124f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d109      	bne.n	8012514 <HAL_TIM_PWM_Start+0x24>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b01      	cmp	r3, #1
 801250a:	bf14      	ite	ne
 801250c:	2301      	movne	r3, #1
 801250e:	2300      	moveq	r3, #0
 8012510:	b2db      	uxtb	r3, r3
 8012512:	e03c      	b.n	801258e <HAL_TIM_PWM_Start+0x9e>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	2b04      	cmp	r3, #4
 8012518:	d109      	bne.n	801252e <HAL_TIM_PWM_Start+0x3e>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2b01      	cmp	r3, #1
 8012524:	bf14      	ite	ne
 8012526:	2301      	movne	r3, #1
 8012528:	2300      	moveq	r3, #0
 801252a:	b2db      	uxtb	r3, r3
 801252c:	e02f      	b.n	801258e <HAL_TIM_PWM_Start+0x9e>
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	2b08      	cmp	r3, #8
 8012532:	d109      	bne.n	8012548 <HAL_TIM_PWM_Start+0x58>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801253a:	b2db      	uxtb	r3, r3
 801253c:	2b01      	cmp	r3, #1
 801253e:	bf14      	ite	ne
 8012540:	2301      	movne	r3, #1
 8012542:	2300      	moveq	r3, #0
 8012544:	b2db      	uxtb	r3, r3
 8012546:	e022      	b.n	801258e <HAL_TIM_PWM_Start+0x9e>
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	2b0c      	cmp	r3, #12
 801254c:	d109      	bne.n	8012562 <HAL_TIM_PWM_Start+0x72>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012554:	b2db      	uxtb	r3, r3
 8012556:	2b01      	cmp	r3, #1
 8012558:	bf14      	ite	ne
 801255a:	2301      	movne	r3, #1
 801255c:	2300      	moveq	r3, #0
 801255e:	b2db      	uxtb	r3, r3
 8012560:	e015      	b.n	801258e <HAL_TIM_PWM_Start+0x9e>
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	2b10      	cmp	r3, #16
 8012566:	d109      	bne.n	801257c <HAL_TIM_PWM_Start+0x8c>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b01      	cmp	r3, #1
 8012572:	bf14      	ite	ne
 8012574:	2301      	movne	r3, #1
 8012576:	2300      	moveq	r3, #0
 8012578:	b2db      	uxtb	r3, r3
 801257a:	e008      	b.n	801258e <HAL_TIM_PWM_Start+0x9e>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012582:	b2db      	uxtb	r3, r3
 8012584:	2b01      	cmp	r3, #1
 8012586:	bf14      	ite	ne
 8012588:	2301      	movne	r3, #1
 801258a:	2300      	moveq	r3, #0
 801258c:	b2db      	uxtb	r3, r3
 801258e:	2b00      	cmp	r3, #0
 8012590:	d001      	beq.n	8012596 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012592:	2301      	movs	r3, #1
 8012594:	e0a1      	b.n	80126da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d104      	bne.n	80125a6 <HAL_TIM_PWM_Start+0xb6>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2202      	movs	r2, #2
 80125a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80125a4:	e023      	b.n	80125ee <HAL_TIM_PWM_Start+0xfe>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2b04      	cmp	r3, #4
 80125aa:	d104      	bne.n	80125b6 <HAL_TIM_PWM_Start+0xc6>
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2202      	movs	r2, #2
 80125b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80125b4:	e01b      	b.n	80125ee <HAL_TIM_PWM_Start+0xfe>
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	2b08      	cmp	r3, #8
 80125ba:	d104      	bne.n	80125c6 <HAL_TIM_PWM_Start+0xd6>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2202      	movs	r2, #2
 80125c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80125c4:	e013      	b.n	80125ee <HAL_TIM_PWM_Start+0xfe>
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2b0c      	cmp	r3, #12
 80125ca:	d104      	bne.n	80125d6 <HAL_TIM_PWM_Start+0xe6>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2202      	movs	r2, #2
 80125d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80125d4:	e00b      	b.n	80125ee <HAL_TIM_PWM_Start+0xfe>
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2b10      	cmp	r3, #16
 80125da:	d104      	bne.n	80125e6 <HAL_TIM_PWM_Start+0xf6>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2202      	movs	r2, #2
 80125e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80125e4:	e003      	b.n	80125ee <HAL_TIM_PWM_Start+0xfe>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2202      	movs	r2, #2
 80125ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	2201      	movs	r2, #1
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	4618      	mov	r0, r3
 80125f8:	f000 fea2 	bl	8013340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a38      	ldr	r2, [pc, #224]	@ (80126e4 <HAL_TIM_PWM_Start+0x1f4>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d013      	beq.n	801262e <HAL_TIM_PWM_Start+0x13e>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a37      	ldr	r2, [pc, #220]	@ (80126e8 <HAL_TIM_PWM_Start+0x1f8>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d00e      	beq.n	801262e <HAL_TIM_PWM_Start+0x13e>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a35      	ldr	r2, [pc, #212]	@ (80126ec <HAL_TIM_PWM_Start+0x1fc>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d009      	beq.n	801262e <HAL_TIM_PWM_Start+0x13e>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a34      	ldr	r2, [pc, #208]	@ (80126f0 <HAL_TIM_PWM_Start+0x200>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d004      	beq.n	801262e <HAL_TIM_PWM_Start+0x13e>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4a32      	ldr	r2, [pc, #200]	@ (80126f4 <HAL_TIM_PWM_Start+0x204>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d101      	bne.n	8012632 <HAL_TIM_PWM_Start+0x142>
 801262e:	2301      	movs	r3, #1
 8012630:	e000      	b.n	8012634 <HAL_TIM_PWM_Start+0x144>
 8012632:	2300      	movs	r3, #0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d007      	beq.n	8012648 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012646:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4a25      	ldr	r2, [pc, #148]	@ (80126e4 <HAL_TIM_PWM_Start+0x1f4>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d022      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801265a:	d01d      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a25      	ldr	r2, [pc, #148]	@ (80126f8 <HAL_TIM_PWM_Start+0x208>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d018      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4a24      	ldr	r2, [pc, #144]	@ (80126fc <HAL_TIM_PWM_Start+0x20c>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d013      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a22      	ldr	r2, [pc, #136]	@ (8012700 <HAL_TIM_PWM_Start+0x210>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d00e      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a1a      	ldr	r2, [pc, #104]	@ (80126e8 <HAL_TIM_PWM_Start+0x1f8>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d009      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a1e      	ldr	r2, [pc, #120]	@ (8012704 <HAL_TIM_PWM_Start+0x214>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d004      	beq.n	8012698 <HAL_TIM_PWM_Start+0x1a8>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a16      	ldr	r2, [pc, #88]	@ (80126ec <HAL_TIM_PWM_Start+0x1fc>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d115      	bne.n	80126c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	689a      	ldr	r2, [r3, #8]
 801269e:	4b1a      	ldr	r3, [pc, #104]	@ (8012708 <HAL_TIM_PWM_Start+0x218>)
 80126a0:	4013      	ands	r3, r2
 80126a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2b06      	cmp	r3, #6
 80126a8:	d015      	beq.n	80126d6 <HAL_TIM_PWM_Start+0x1e6>
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80126b0:	d011      	beq.n	80126d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f042 0201 	orr.w	r2, r2, #1
 80126c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126c2:	e008      	b.n	80126d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f042 0201 	orr.w	r2, r2, #1
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	e000      	b.n	80126d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80126d8:	2300      	movs	r3, #0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	40010000 	.word	0x40010000
 80126e8:	40010400 	.word	0x40010400
 80126ec:	40014000 	.word	0x40014000
 80126f0:	40014400 	.word	0x40014400
 80126f4:	40014800 	.word	0x40014800
 80126f8:	40000400 	.word	0x40000400
 80126fc:	40000800 	.word	0x40000800
 8012700:	40000c00 	.word	0x40000c00
 8012704:	40001800 	.word	0x40001800
 8012708:	00010007 	.word	0x00010007

0801270c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012718:	2300      	movs	r3, #0
 801271a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012722:	2b01      	cmp	r3, #1
 8012724:	d101      	bne.n	801272a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012726:	2302      	movs	r3, #2
 8012728:	e0ff      	b.n	801292a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2201      	movs	r2, #1
 801272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b14      	cmp	r3, #20
 8012736:	f200 80f0 	bhi.w	801291a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801273a:	a201      	add	r2, pc, #4	@ (adr r2, 8012740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012740:	08012795 	.word	0x08012795
 8012744:	0801291b 	.word	0x0801291b
 8012748:	0801291b 	.word	0x0801291b
 801274c:	0801291b 	.word	0x0801291b
 8012750:	080127d5 	.word	0x080127d5
 8012754:	0801291b 	.word	0x0801291b
 8012758:	0801291b 	.word	0x0801291b
 801275c:	0801291b 	.word	0x0801291b
 8012760:	08012817 	.word	0x08012817
 8012764:	0801291b 	.word	0x0801291b
 8012768:	0801291b 	.word	0x0801291b
 801276c:	0801291b 	.word	0x0801291b
 8012770:	08012857 	.word	0x08012857
 8012774:	0801291b 	.word	0x0801291b
 8012778:	0801291b 	.word	0x0801291b
 801277c:	0801291b 	.word	0x0801291b
 8012780:	08012899 	.word	0x08012899
 8012784:	0801291b 	.word	0x0801291b
 8012788:	0801291b 	.word	0x0801291b
 801278c:	0801291b 	.word	0x0801291b
 8012790:	080128d9 	.word	0x080128d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	68b9      	ldr	r1, [r7, #8]
 801279a:	4618      	mov	r0, r3
 801279c:	f000 fa5c 	bl	8012c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	699a      	ldr	r2, [r3, #24]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f042 0208 	orr.w	r2, r2, #8
 80127ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	699a      	ldr	r2, [r3, #24]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f022 0204 	bic.w	r2, r2, #4
 80127be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	6999      	ldr	r1, [r3, #24]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	691a      	ldr	r2, [r3, #16]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	430a      	orrs	r2, r1
 80127d0:	619a      	str	r2, [r3, #24]
      break;
 80127d2:	e0a5      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	68b9      	ldr	r1, [r7, #8]
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 facc 	bl	8012d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	699a      	ldr	r2, [r3, #24]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80127ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	699a      	ldr	r2, [r3, #24]
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80127fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	6999      	ldr	r1, [r3, #24]
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	691b      	ldr	r3, [r3, #16]
 801280a:	021a      	lsls	r2, r3, #8
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	430a      	orrs	r2, r1
 8012812:	619a      	str	r2, [r3, #24]
      break;
 8012814:	e084      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	68b9      	ldr	r1, [r7, #8]
 801281c:	4618      	mov	r0, r3
 801281e:	f000 fb35 	bl	8012e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	69da      	ldr	r2, [r3, #28]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f042 0208 	orr.w	r2, r2, #8
 8012830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	69da      	ldr	r2, [r3, #28]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f022 0204 	bic.w	r2, r2, #4
 8012840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	69d9      	ldr	r1, [r3, #28]
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	691a      	ldr	r2, [r3, #16]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	430a      	orrs	r2, r1
 8012852:	61da      	str	r2, [r3, #28]
      break;
 8012854:	e064      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	68b9      	ldr	r1, [r7, #8]
 801285c:	4618      	mov	r0, r3
 801285e:	f000 fb9d 	bl	8012f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69da      	ldr	r2, [r3, #28]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	69da      	ldr	r2, [r3, #28]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	69d9      	ldr	r1, [r3, #28]
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	691b      	ldr	r3, [r3, #16]
 801288c:	021a      	lsls	r2, r3, #8
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	430a      	orrs	r2, r1
 8012894:	61da      	str	r2, [r3, #28]
      break;
 8012896:	e043      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	68b9      	ldr	r1, [r7, #8]
 801289e:	4618      	mov	r0, r3
 80128a0:	f000 fbe6 	bl	8013070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f042 0208 	orr.w	r2, r2, #8
 80128b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f022 0204 	bic.w	r2, r2, #4
 80128c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	691a      	ldr	r2, [r3, #16]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	430a      	orrs	r2, r1
 80128d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80128d6:	e023      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	68b9      	ldr	r1, [r7, #8]
 80128de:	4618      	mov	r0, r3
 80128e0:	f000 fc2a 	bl	8013138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80128f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012902:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	691b      	ldr	r3, [r3, #16]
 801290e:	021a      	lsls	r2, r3, #8
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	430a      	orrs	r2, r1
 8012916:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012918:	e002      	b.n	8012920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801291a:	2301      	movs	r3, #1
 801291c:	75fb      	strb	r3, [r7, #23]
      break;
 801291e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2200      	movs	r2, #0
 8012924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012928:	7dfb      	ldrb	r3, [r7, #23]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop

08012934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801293e:	2300      	movs	r3, #0
 8012940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012948:	2b01      	cmp	r3, #1
 801294a:	d101      	bne.n	8012950 <HAL_TIM_ConfigClockSource+0x1c>
 801294c:	2302      	movs	r3, #2
 801294e:	e0dc      	b.n	8012b0a <HAL_TIM_ConfigClockSource+0x1d6>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2202      	movs	r2, #2
 801295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	4b6a      	ldr	r3, [pc, #424]	@ (8012b14 <HAL_TIM_ConfigClockSource+0x1e0>)
 801296c:	4013      	ands	r3, r2
 801296e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68ba      	ldr	r2, [r7, #8]
 801297e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4a64      	ldr	r2, [pc, #400]	@ (8012b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012986:	4293      	cmp	r3, r2
 8012988:	f000 80a9 	beq.w	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 801298c:	4a62      	ldr	r2, [pc, #392]	@ (8012b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 801298e:	4293      	cmp	r3, r2
 8012990:	f200 80ae 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012994:	4a61      	ldr	r2, [pc, #388]	@ (8012b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8012996:	4293      	cmp	r3, r2
 8012998:	f000 80a1 	beq.w	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 801299c:	4a5f      	ldr	r2, [pc, #380]	@ (8012b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 801299e:	4293      	cmp	r3, r2
 80129a0:	f200 80a6 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129a4:	4a5e      	ldr	r2, [pc, #376]	@ (8012b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	f000 8099 	beq.w	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 80129ac:	4a5c      	ldr	r2, [pc, #368]	@ (8012b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80129ae:	4293      	cmp	r3, r2
 80129b0:	f200 809e 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80129b8:	f000 8091 	beq.w	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 80129bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80129c0:	f200 8096 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80129c8:	f000 8089 	beq.w	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 80129cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80129d0:	f200 808e 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80129d8:	d03e      	beq.n	8012a58 <HAL_TIM_ConfigClockSource+0x124>
 80129da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80129de:	f200 8087 	bhi.w	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129e6:	f000 8086 	beq.w	8012af6 <HAL_TIM_ConfigClockSource+0x1c2>
 80129ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129ee:	d87f      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129f0:	2b70      	cmp	r3, #112	@ 0x70
 80129f2:	d01a      	beq.n	8012a2a <HAL_TIM_ConfigClockSource+0xf6>
 80129f4:	2b70      	cmp	r3, #112	@ 0x70
 80129f6:	d87b      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80129f8:	2b60      	cmp	r3, #96	@ 0x60
 80129fa:	d050      	beq.n	8012a9e <HAL_TIM_ConfigClockSource+0x16a>
 80129fc:	2b60      	cmp	r3, #96	@ 0x60
 80129fe:	d877      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a00:	2b50      	cmp	r3, #80	@ 0x50
 8012a02:	d03c      	beq.n	8012a7e <HAL_TIM_ConfigClockSource+0x14a>
 8012a04:	2b50      	cmp	r3, #80	@ 0x50
 8012a06:	d873      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a08:	2b40      	cmp	r3, #64	@ 0x40
 8012a0a:	d058      	beq.n	8012abe <HAL_TIM_ConfigClockSource+0x18a>
 8012a0c:	2b40      	cmp	r3, #64	@ 0x40
 8012a0e:	d86f      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a10:	2b30      	cmp	r3, #48	@ 0x30
 8012a12:	d064      	beq.n	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 8012a14:	2b30      	cmp	r3, #48	@ 0x30
 8012a16:	d86b      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a18:	2b20      	cmp	r3, #32
 8012a1a:	d060      	beq.n	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 8012a1c:	2b20      	cmp	r3, #32
 8012a1e:	d867      	bhi.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d05c      	beq.n	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 8012a24:	2b10      	cmp	r3, #16
 8012a26:	d05a      	beq.n	8012ade <HAL_TIM_ConfigClockSource+0x1aa>
 8012a28:	e062      	b.n	8012af0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012a3a:	f000 fc61 	bl	8013300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	68ba      	ldr	r2, [r7, #8]
 8012a54:	609a      	str	r2, [r3, #8]
      break;
 8012a56:	e04f      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012a68:	f000 fc4a 	bl	8013300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	689a      	ldr	r2, [r3, #8]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012a7a:	609a      	str	r2, [r3, #8]
      break;
 8012a7c:	e03c      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	f000 fbba 	bl	8013204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2150      	movs	r1, #80	@ 0x50
 8012a96:	4618      	mov	r0, r3
 8012a98:	f000 fc14 	bl	80132c4 <TIM_ITRx_SetConfig>
      break;
 8012a9c:	e02c      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012aaa:	461a      	mov	r2, r3
 8012aac:	f000 fbd9 	bl	8013262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2160      	movs	r1, #96	@ 0x60
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f000 fc04 	bl	80132c4 <TIM_ITRx_SetConfig>
      break;
 8012abc:	e01c      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012aca:	461a      	mov	r2, r3
 8012acc:	f000 fb9a 	bl	8013204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2140      	movs	r1, #64	@ 0x40
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f000 fbf4 	bl	80132c4 <TIM_ITRx_SetConfig>
      break;
 8012adc:	e00c      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	4610      	mov	r0, r2
 8012aea:	f000 fbeb 	bl	80132c4 <TIM_ITRx_SetConfig>
      break;
 8012aee:	e003      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012af0:	2301      	movs	r3, #1
 8012af2:	73fb      	strb	r3, [r7, #15]
      break;
 8012af4:	e000      	b.n	8012af8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2201      	movs	r2, #1
 8012afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	ffceff88 	.word	0xffceff88
 8012b18:	00100040 	.word	0x00100040
 8012b1c:	00100030 	.word	0x00100030
 8012b20:	00100020 	.word	0x00100020

08012b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4a40      	ldr	r2, [pc, #256]	@ (8012c38 <TIM_Base_SetConfig+0x114>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d013      	beq.n	8012b64 <TIM_Base_SetConfig+0x40>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b42:	d00f      	beq.n	8012b64 <TIM_Base_SetConfig+0x40>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4a3d      	ldr	r2, [pc, #244]	@ (8012c3c <TIM_Base_SetConfig+0x118>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d00b      	beq.n	8012b64 <TIM_Base_SetConfig+0x40>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8012c40 <TIM_Base_SetConfig+0x11c>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d007      	beq.n	8012b64 <TIM_Base_SetConfig+0x40>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	4a3b      	ldr	r2, [pc, #236]	@ (8012c44 <TIM_Base_SetConfig+0x120>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d003      	beq.n	8012b64 <TIM_Base_SetConfig+0x40>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8012c48 <TIM_Base_SetConfig+0x124>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d108      	bne.n	8012b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	68fa      	ldr	r2, [r7, #12]
 8012b72:	4313      	orrs	r3, r2
 8012b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4a2f      	ldr	r2, [pc, #188]	@ (8012c38 <TIM_Base_SetConfig+0x114>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d01f      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b84:	d01b      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4a2c      	ldr	r2, [pc, #176]	@ (8012c3c <TIM_Base_SetConfig+0x118>)
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	d017      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4a2b      	ldr	r2, [pc, #172]	@ (8012c40 <TIM_Base_SetConfig+0x11c>)
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d013      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	4a2a      	ldr	r2, [pc, #168]	@ (8012c44 <TIM_Base_SetConfig+0x120>)
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d00f      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4a29      	ldr	r2, [pc, #164]	@ (8012c48 <TIM_Base_SetConfig+0x124>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d00b      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4a28      	ldr	r2, [pc, #160]	@ (8012c4c <TIM_Base_SetConfig+0x128>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d007      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4a27      	ldr	r2, [pc, #156]	@ (8012c50 <TIM_Base_SetConfig+0x12c>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d003      	beq.n	8012bbe <TIM_Base_SetConfig+0x9a>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4a26      	ldr	r2, [pc, #152]	@ (8012c54 <TIM_Base_SetConfig+0x130>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d108      	bne.n	8012bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	695b      	ldr	r3, [r3, #20]
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	689a      	ldr	r2, [r3, #8]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	4a10      	ldr	r2, [pc, #64]	@ (8012c38 <TIM_Base_SetConfig+0x114>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d00f      	beq.n	8012c1c <TIM_Base_SetConfig+0xf8>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4a12      	ldr	r2, [pc, #72]	@ (8012c48 <TIM_Base_SetConfig+0x124>)
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d00b      	beq.n	8012c1c <TIM_Base_SetConfig+0xf8>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	4a11      	ldr	r2, [pc, #68]	@ (8012c4c <TIM_Base_SetConfig+0x128>)
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d007      	beq.n	8012c1c <TIM_Base_SetConfig+0xf8>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	4a10      	ldr	r2, [pc, #64]	@ (8012c50 <TIM_Base_SetConfig+0x12c>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d003      	beq.n	8012c1c <TIM_Base_SetConfig+0xf8>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4a0f      	ldr	r2, [pc, #60]	@ (8012c54 <TIM_Base_SetConfig+0x130>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d103      	bne.n	8012c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	691a      	ldr	r2, [r3, #16]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2201      	movs	r2, #1
 8012c28:	615a      	str	r2, [r3, #20]
}
 8012c2a:	bf00      	nop
 8012c2c:	3714      	adds	r7, #20
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	40010000 	.word	0x40010000
 8012c3c:	40000400 	.word	0x40000400
 8012c40:	40000800 	.word	0x40000800
 8012c44:	40000c00 	.word	0x40000c00
 8012c48:	40010400 	.word	0x40010400
 8012c4c:	40014000 	.word	0x40014000
 8012c50:	40014400 	.word	0x40014400
 8012c54:	40014800 	.word	0x40014800

08012c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b087      	sub	sp, #28
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a1b      	ldr	r3, [r3, #32]
 8012c66:	f023 0201 	bic.w	r2, r3, #1
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	699b      	ldr	r3, [r3, #24]
 8012c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	4b37      	ldr	r3, [pc, #220]	@ (8012d60 <TIM_OC1_SetConfig+0x108>)
 8012c84:	4013      	ands	r3, r2
 8012c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f023 0303 	bic.w	r3, r3, #3
 8012c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	4313      	orrs	r3, r2
 8012c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	f023 0302 	bic.w	r3, r3, #2
 8012ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	697a      	ldr	r2, [r7, #20]
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4a2d      	ldr	r2, [pc, #180]	@ (8012d64 <TIM_OC1_SetConfig+0x10c>)
 8012cb0:	4293      	cmp	r3, r2
 8012cb2:	d00f      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x7c>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8012d68 <TIM_OC1_SetConfig+0x110>)
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d00b      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x7c>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8012d6c <TIM_OC1_SetConfig+0x114>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d007      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x7c>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8012d70 <TIM_OC1_SetConfig+0x118>)
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d003      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x7c>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	4a29      	ldr	r2, [pc, #164]	@ (8012d74 <TIM_OC1_SetConfig+0x11c>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d10c      	bne.n	8012cee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	f023 0308 	bic.w	r3, r3, #8
 8012cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	697a      	ldr	r2, [r7, #20]
 8012ce2:	4313      	orrs	r3, r2
 8012ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	f023 0304 	bic.w	r3, r3, #4
 8012cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8012d64 <TIM_OC1_SetConfig+0x10c>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d00f      	beq.n	8012d16 <TIM_OC1_SetConfig+0xbe>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8012d68 <TIM_OC1_SetConfig+0x110>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d00b      	beq.n	8012d16 <TIM_OC1_SetConfig+0xbe>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	4a1a      	ldr	r2, [pc, #104]	@ (8012d6c <TIM_OC1_SetConfig+0x114>)
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d007      	beq.n	8012d16 <TIM_OC1_SetConfig+0xbe>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4a19      	ldr	r2, [pc, #100]	@ (8012d70 <TIM_OC1_SetConfig+0x118>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d003      	beq.n	8012d16 <TIM_OC1_SetConfig+0xbe>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4a18      	ldr	r2, [pc, #96]	@ (8012d74 <TIM_OC1_SetConfig+0x11c>)
 8012d12:	4293      	cmp	r3, r2
 8012d14:	d111      	bne.n	8012d3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	695b      	ldr	r3, [r3, #20]
 8012d2a:	693a      	ldr	r2, [r7, #16]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	699b      	ldr	r3, [r3, #24]
 8012d34:	693a      	ldr	r2, [r7, #16]
 8012d36:	4313      	orrs	r3, r2
 8012d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	693a      	ldr	r2, [r7, #16]
 8012d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	685a      	ldr	r2, [r3, #4]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	697a      	ldr	r2, [r7, #20]
 8012d52:	621a      	str	r2, [r3, #32]
}
 8012d54:	bf00      	nop
 8012d56:	371c      	adds	r7, #28
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr
 8012d60:	fffeff8f 	.word	0xfffeff8f
 8012d64:	40010000 	.word	0x40010000
 8012d68:	40010400 	.word	0x40010400
 8012d6c:	40014000 	.word	0x40014000
 8012d70:	40014400 	.word	0x40014400
 8012d74:	40014800 	.word	0x40014800

08012d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b087      	sub	sp, #28
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6a1b      	ldr	r3, [r3, #32]
 8012d86:	f023 0210 	bic.w	r2, r3, #16
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6a1b      	ldr	r3, [r3, #32]
 8012d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	699b      	ldr	r3, [r3, #24]
 8012d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	4b34      	ldr	r3, [pc, #208]	@ (8012e74 <TIM_OC2_SetConfig+0xfc>)
 8012da4:	4013      	ands	r3, r2
 8012da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	021b      	lsls	r3, r3, #8
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	4313      	orrs	r3, r2
 8012dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	f023 0320 	bic.w	r3, r3, #32
 8012dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	011b      	lsls	r3, r3, #4
 8012dca:	697a      	ldr	r2, [r7, #20]
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	4a29      	ldr	r2, [pc, #164]	@ (8012e78 <TIM_OC2_SetConfig+0x100>)
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d003      	beq.n	8012de0 <TIM_OC2_SetConfig+0x68>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	4a28      	ldr	r2, [pc, #160]	@ (8012e7c <TIM_OC2_SetConfig+0x104>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d10d      	bne.n	8012dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	011b      	lsls	r3, r3, #4
 8012dee:	697a      	ldr	r2, [r7, #20]
 8012df0:	4313      	orrs	r3, r2
 8012df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8012e78 <TIM_OC2_SetConfig+0x100>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d00f      	beq.n	8012e24 <TIM_OC2_SetConfig+0xac>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4a1d      	ldr	r2, [pc, #116]	@ (8012e7c <TIM_OC2_SetConfig+0x104>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d00b      	beq.n	8012e24 <TIM_OC2_SetConfig+0xac>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8012e80 <TIM_OC2_SetConfig+0x108>)
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d007      	beq.n	8012e24 <TIM_OC2_SetConfig+0xac>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	4a1b      	ldr	r2, [pc, #108]	@ (8012e84 <TIM_OC2_SetConfig+0x10c>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d003      	beq.n	8012e24 <TIM_OC2_SetConfig+0xac>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8012e88 <TIM_OC2_SetConfig+0x110>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d113      	bne.n	8012e4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	695b      	ldr	r3, [r3, #20]
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	693a      	ldr	r2, [r7, #16]
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	699b      	ldr	r3, [r3, #24]
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	693a      	ldr	r2, [r7, #16]
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	693a      	ldr	r2, [r7, #16]
 8012e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	685a      	ldr	r2, [r3, #4]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	697a      	ldr	r2, [r7, #20]
 8012e64:	621a      	str	r2, [r3, #32]
}
 8012e66:	bf00      	nop
 8012e68:	371c      	adds	r7, #28
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	feff8fff 	.word	0xfeff8fff
 8012e78:	40010000 	.word	0x40010000
 8012e7c:	40010400 	.word	0x40010400
 8012e80:	40014000 	.word	0x40014000
 8012e84:	40014400 	.word	0x40014400
 8012e88:	40014800 	.word	0x40014800

08012e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b087      	sub	sp, #28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6a1b      	ldr	r3, [r3, #32]
 8012e9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	6a1b      	ldr	r3, [r3, #32]
 8012ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	69db      	ldr	r3, [r3, #28]
 8012eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	4b33      	ldr	r3, [pc, #204]	@ (8012f84 <TIM_OC3_SetConfig+0xf8>)
 8012eb8:	4013      	ands	r3, r2
 8012eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f023 0303 	bic.w	r3, r3, #3
 8012ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	021b      	lsls	r3, r3, #8
 8012edc:	697a      	ldr	r2, [r7, #20]
 8012ede:	4313      	orrs	r3, r2
 8012ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4a28      	ldr	r2, [pc, #160]	@ (8012f88 <TIM_OC3_SetConfig+0xfc>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d003      	beq.n	8012ef2 <TIM_OC3_SetConfig+0x66>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4a27      	ldr	r2, [pc, #156]	@ (8012f8c <TIM_OC3_SetConfig+0x100>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d10d      	bne.n	8012f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	68db      	ldr	r3, [r3, #12]
 8012efe:	021b      	lsls	r3, r3, #8
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	4313      	orrs	r3, r2
 8012f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4a1d      	ldr	r2, [pc, #116]	@ (8012f88 <TIM_OC3_SetConfig+0xfc>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d00f      	beq.n	8012f36 <TIM_OC3_SetConfig+0xaa>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4a1c      	ldr	r2, [pc, #112]	@ (8012f8c <TIM_OC3_SetConfig+0x100>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d00b      	beq.n	8012f36 <TIM_OC3_SetConfig+0xaa>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4a1b      	ldr	r2, [pc, #108]	@ (8012f90 <TIM_OC3_SetConfig+0x104>)
 8012f22:	4293      	cmp	r3, r2
 8012f24:	d007      	beq.n	8012f36 <TIM_OC3_SetConfig+0xaa>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4a1a      	ldr	r2, [pc, #104]	@ (8012f94 <TIM_OC3_SetConfig+0x108>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d003      	beq.n	8012f36 <TIM_OC3_SetConfig+0xaa>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4a19      	ldr	r2, [pc, #100]	@ (8012f98 <TIM_OC3_SetConfig+0x10c>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d113      	bne.n	8012f5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	695b      	ldr	r3, [r3, #20]
 8012f4a:	011b      	lsls	r3, r3, #4
 8012f4c:	693a      	ldr	r2, [r7, #16]
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	699b      	ldr	r3, [r3, #24]
 8012f56:	011b      	lsls	r3, r3, #4
 8012f58:	693a      	ldr	r2, [r7, #16]
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	693a      	ldr	r2, [r7, #16]
 8012f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	68fa      	ldr	r2, [r7, #12]
 8012f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	685a      	ldr	r2, [r3, #4]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	621a      	str	r2, [r3, #32]
}
 8012f78:	bf00      	nop
 8012f7a:	371c      	adds	r7, #28
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f82:	4770      	bx	lr
 8012f84:	fffeff8f 	.word	0xfffeff8f
 8012f88:	40010000 	.word	0x40010000
 8012f8c:	40010400 	.word	0x40010400
 8012f90:	40014000 	.word	0x40014000
 8012f94:	40014400 	.word	0x40014400
 8012f98:	40014800 	.word	0x40014800

08012f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b087      	sub	sp, #28
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6a1b      	ldr	r3, [r3, #32]
 8012faa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	69db      	ldr	r3, [r3, #28]
 8012fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	4b24      	ldr	r3, [pc, #144]	@ (8013058 <TIM_OC4_SetConfig+0xbc>)
 8012fc8:	4013      	ands	r3, r2
 8012fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	021b      	lsls	r3, r3, #8
 8012fda:	68fa      	ldr	r2, [r7, #12]
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	031b      	lsls	r3, r3, #12
 8012fee:	693a      	ldr	r2, [r7, #16]
 8012ff0:	4313      	orrs	r3, r2
 8012ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4a19      	ldr	r2, [pc, #100]	@ (801305c <TIM_OC4_SetConfig+0xc0>)
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d00f      	beq.n	801301c <TIM_OC4_SetConfig+0x80>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4a18      	ldr	r2, [pc, #96]	@ (8013060 <TIM_OC4_SetConfig+0xc4>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d00b      	beq.n	801301c <TIM_OC4_SetConfig+0x80>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	4a17      	ldr	r2, [pc, #92]	@ (8013064 <TIM_OC4_SetConfig+0xc8>)
 8013008:	4293      	cmp	r3, r2
 801300a:	d007      	beq.n	801301c <TIM_OC4_SetConfig+0x80>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	4a16      	ldr	r2, [pc, #88]	@ (8013068 <TIM_OC4_SetConfig+0xcc>)
 8013010:	4293      	cmp	r3, r2
 8013012:	d003      	beq.n	801301c <TIM_OC4_SetConfig+0x80>
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	4a15      	ldr	r2, [pc, #84]	@ (801306c <TIM_OC4_SetConfig+0xd0>)
 8013018:	4293      	cmp	r3, r2
 801301a:	d109      	bne.n	8013030 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	695b      	ldr	r3, [r3, #20]
 8013028:	019b      	lsls	r3, r3, #6
 801302a:	697a      	ldr	r2, [r7, #20]
 801302c:	4313      	orrs	r3, r2
 801302e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	697a      	ldr	r2, [r7, #20]
 8013034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	685a      	ldr	r2, [r3, #4]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	693a      	ldr	r2, [r7, #16]
 8013048:	621a      	str	r2, [r3, #32]
}
 801304a:	bf00      	nop
 801304c:	371c      	adds	r7, #28
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	feff8fff 	.word	0xfeff8fff
 801305c:	40010000 	.word	0x40010000
 8013060:	40010400 	.word	0x40010400
 8013064:	40014000 	.word	0x40014000
 8013068:	40014400 	.word	0x40014400
 801306c:	40014800 	.word	0x40014800

08013070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013070:	b480      	push	{r7}
 8013072:	b087      	sub	sp, #28
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a1b      	ldr	r3, [r3, #32]
 801307e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a1b      	ldr	r3, [r3, #32]
 801308a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013098:	68fa      	ldr	r2, [r7, #12]
 801309a:	4b21      	ldr	r3, [pc, #132]	@ (8013120 <TIM_OC5_SetConfig+0xb0>)
 801309c:	4013      	ands	r3, r2
 801309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	68fa      	ldr	r2, [r7, #12]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80130b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	041b      	lsls	r3, r3, #16
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	4313      	orrs	r3, r2
 80130bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4a18      	ldr	r2, [pc, #96]	@ (8013124 <TIM_OC5_SetConfig+0xb4>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d00f      	beq.n	80130e6 <TIM_OC5_SetConfig+0x76>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4a17      	ldr	r2, [pc, #92]	@ (8013128 <TIM_OC5_SetConfig+0xb8>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d00b      	beq.n	80130e6 <TIM_OC5_SetConfig+0x76>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4a16      	ldr	r2, [pc, #88]	@ (801312c <TIM_OC5_SetConfig+0xbc>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d007      	beq.n	80130e6 <TIM_OC5_SetConfig+0x76>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4a15      	ldr	r2, [pc, #84]	@ (8013130 <TIM_OC5_SetConfig+0xc0>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d003      	beq.n	80130e6 <TIM_OC5_SetConfig+0x76>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	4a14      	ldr	r2, [pc, #80]	@ (8013134 <TIM_OC5_SetConfig+0xc4>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d109      	bne.n	80130fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80130ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	695b      	ldr	r3, [r3, #20]
 80130f2:	021b      	lsls	r3, r3, #8
 80130f4:	697a      	ldr	r2, [r7, #20]
 80130f6:	4313      	orrs	r3, r2
 80130f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	697a      	ldr	r2, [r7, #20]
 80130fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	685a      	ldr	r2, [r3, #4]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	693a      	ldr	r2, [r7, #16]
 8013112:	621a      	str	r2, [r3, #32]
}
 8013114:	bf00      	nop
 8013116:	371c      	adds	r7, #28
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr
 8013120:	fffeff8f 	.word	0xfffeff8f
 8013124:	40010000 	.word	0x40010000
 8013128:	40010400 	.word	0x40010400
 801312c:	40014000 	.word	0x40014000
 8013130:	40014400 	.word	0x40014400
 8013134:	40014800 	.word	0x40014800

08013138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013138:	b480      	push	{r7}
 801313a:	b087      	sub	sp, #28
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6a1b      	ldr	r3, [r3, #32]
 8013146:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6a1b      	ldr	r3, [r3, #32]
 8013152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	4b22      	ldr	r3, [pc, #136]	@ (80131ec <TIM_OC6_SetConfig+0xb4>)
 8013164:	4013      	ands	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	021b      	lsls	r3, r3, #8
 801316e:	68fa      	ldr	r2, [r7, #12]
 8013170:	4313      	orrs	r3, r2
 8013172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801317a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	689b      	ldr	r3, [r3, #8]
 8013180:	051b      	lsls	r3, r3, #20
 8013182:	693a      	ldr	r2, [r7, #16]
 8013184:	4313      	orrs	r3, r2
 8013186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	4a19      	ldr	r2, [pc, #100]	@ (80131f0 <TIM_OC6_SetConfig+0xb8>)
 801318c:	4293      	cmp	r3, r2
 801318e:	d00f      	beq.n	80131b0 <TIM_OC6_SetConfig+0x78>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a18      	ldr	r2, [pc, #96]	@ (80131f4 <TIM_OC6_SetConfig+0xbc>)
 8013194:	4293      	cmp	r3, r2
 8013196:	d00b      	beq.n	80131b0 <TIM_OC6_SetConfig+0x78>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	4a17      	ldr	r2, [pc, #92]	@ (80131f8 <TIM_OC6_SetConfig+0xc0>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d007      	beq.n	80131b0 <TIM_OC6_SetConfig+0x78>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	4a16      	ldr	r2, [pc, #88]	@ (80131fc <TIM_OC6_SetConfig+0xc4>)
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d003      	beq.n	80131b0 <TIM_OC6_SetConfig+0x78>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	4a15      	ldr	r2, [pc, #84]	@ (8013200 <TIM_OC6_SetConfig+0xc8>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d109      	bne.n	80131c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80131b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	695b      	ldr	r3, [r3, #20]
 80131bc:	029b      	lsls	r3, r3, #10
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	4313      	orrs	r3, r2
 80131c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	697a      	ldr	r2, [r7, #20]
 80131c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	68fa      	ldr	r2, [r7, #12]
 80131ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	685a      	ldr	r2, [r3, #4]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	621a      	str	r2, [r3, #32]
}
 80131de:	bf00      	nop
 80131e0:	371c      	adds	r7, #28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	feff8fff 	.word	0xfeff8fff
 80131f0:	40010000 	.word	0x40010000
 80131f4:	40010400 	.word	0x40010400
 80131f8:	40014000 	.word	0x40014000
 80131fc:	40014400 	.word	0x40014400
 8013200:	40014800 	.word	0x40014800

08013204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013204:	b480      	push	{r7}
 8013206:	b087      	sub	sp, #28
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	60b9      	str	r1, [r7, #8]
 801320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6a1b      	ldr	r3, [r3, #32]
 8013214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6a1b      	ldr	r3, [r3, #32]
 801321a:	f023 0201 	bic.w	r2, r3, #1
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	699b      	ldr	r3, [r3, #24]
 8013226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	011b      	lsls	r3, r3, #4
 8013234:	693a      	ldr	r2, [r7, #16]
 8013236:	4313      	orrs	r3, r2
 8013238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	f023 030a 	bic.w	r3, r3, #10
 8013240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013242:	697a      	ldr	r2, [r7, #20]
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	4313      	orrs	r3, r2
 8013248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	693a      	ldr	r2, [r7, #16]
 801324e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	697a      	ldr	r2, [r7, #20]
 8013254:	621a      	str	r2, [r3, #32]
}
 8013256:	bf00      	nop
 8013258:	371c      	adds	r7, #28
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr

08013262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013262:	b480      	push	{r7}
 8013264:	b087      	sub	sp, #28
 8013266:	af00      	add	r7, sp, #0
 8013268:	60f8      	str	r0, [r7, #12]
 801326a:	60b9      	str	r1, [r7, #8]
 801326c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6a1b      	ldr	r3, [r3, #32]
 8013272:	f023 0210 	bic.w	r2, r3, #16
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	699b      	ldr	r3, [r3, #24]
 801327e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6a1b      	ldr	r3, [r3, #32]
 8013284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801328c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	031b      	lsls	r3, r3, #12
 8013292:	697a      	ldr	r2, [r7, #20]
 8013294:	4313      	orrs	r3, r2
 8013296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801329e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	011b      	lsls	r3, r3, #4
 80132a4:	693a      	ldr	r2, [r7, #16]
 80132a6:	4313      	orrs	r3, r2
 80132a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	697a      	ldr	r2, [r7, #20]
 80132ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	693a      	ldr	r2, [r7, #16]
 80132b4:	621a      	str	r2, [r3, #32]
}
 80132b6:	bf00      	nop
 80132b8:	371c      	adds	r7, #28
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
	...

080132c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80132d4:	68fa      	ldr	r2, [r7, #12]
 80132d6:	4b09      	ldr	r3, [pc, #36]	@ (80132fc <TIM_ITRx_SetConfig+0x38>)
 80132d8:	4013      	ands	r3, r2
 80132da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80132dc:	683a      	ldr	r2, [r7, #0]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	4313      	orrs	r3, r2
 80132e2:	f043 0307 	orr.w	r3, r3, #7
 80132e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	68fa      	ldr	r2, [r7, #12]
 80132ec:	609a      	str	r2, [r3, #8]
}
 80132ee:	bf00      	nop
 80132f0:	3714      	adds	r7, #20
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop
 80132fc:	ffcfff8f 	.word	0xffcfff8f

08013300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013300:	b480      	push	{r7}
 8013302:	b087      	sub	sp, #28
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801331a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	021a      	lsls	r2, r3, #8
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	431a      	orrs	r2, r3
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	4313      	orrs	r3, r2
 8013328:	697a      	ldr	r2, [r7, #20]
 801332a:	4313      	orrs	r3, r2
 801332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	697a      	ldr	r2, [r7, #20]
 8013332:	609a      	str	r2, [r3, #8]
}
 8013334:	bf00      	nop
 8013336:	371c      	adds	r7, #28
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013340:	b480      	push	{r7}
 8013342:	b087      	sub	sp, #28
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	f003 031f 	and.w	r3, r3, #31
 8013352:	2201      	movs	r2, #1
 8013354:	fa02 f303 	lsl.w	r3, r2, r3
 8013358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	6a1a      	ldr	r2, [r3, #32]
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	43db      	mvns	r3, r3
 8013362:	401a      	ands	r2, r3
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6a1a      	ldr	r2, [r3, #32]
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	f003 031f 	and.w	r3, r3, #31
 8013372:	6879      	ldr	r1, [r7, #4]
 8013374:	fa01 f303 	lsl.w	r3, r1, r3
 8013378:	431a      	orrs	r2, r3
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	621a      	str	r2, [r3, #32]
}
 801337e:	bf00      	nop
 8013380:	371c      	adds	r7, #28
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr
	...

0801338c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801338c:	b480      	push	{r7}
 801338e:	b085      	sub	sp, #20
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801339c:	2b01      	cmp	r3, #1
 801339e:	d101      	bne.n	80133a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80133a0:	2302      	movs	r3, #2
 80133a2:	e06d      	b.n	8013480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2201      	movs	r2, #1
 80133a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2202      	movs	r2, #2
 80133b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	689b      	ldr	r3, [r3, #8]
 80133c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a30      	ldr	r2, [pc, #192]	@ (801348c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80133ca:	4293      	cmp	r3, r2
 80133cc:	d004      	beq.n	80133d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	4a2f      	ldr	r2, [pc, #188]	@ (8013490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d108      	bne.n	80133ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80133de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	4313      	orrs	r3, r2
 80133e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	4313      	orrs	r3, r2
 80133fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4a20      	ldr	r2, [pc, #128]	@ (801348c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d022      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013416:	d01d      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a1d      	ldr	r2, [pc, #116]	@ (8013494 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d018      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4a1c      	ldr	r2, [pc, #112]	@ (8013498 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d013      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a1a      	ldr	r2, [pc, #104]	@ (801349c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d00e      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a15      	ldr	r2, [pc, #84]	@ (8013490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d009      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a16      	ldr	r2, [pc, #88]	@ (80134a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d004      	beq.n	8013454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	4a15      	ldr	r2, [pc, #84]	@ (80134a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013450:	4293      	cmp	r3, r2
 8013452:	d10c      	bne.n	801346e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801345a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	689b      	ldr	r3, [r3, #8]
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	4313      	orrs	r3, r2
 8013464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	68ba      	ldr	r2, [r7, #8]
 801346c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2201      	movs	r2, #1
 8013472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2200      	movs	r2, #0
 801347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	3714      	adds	r7, #20
 8013484:	46bd      	mov	sp, r7
 8013486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348a:	4770      	bx	lr
 801348c:	40010000 	.word	0x40010000
 8013490:	40010400 	.word	0x40010400
 8013494:	40000400 	.word	0x40000400
 8013498:	40000800 	.word	0x40000800
 801349c:	40000c00 	.word	0x40000c00
 80134a0:	40001800 	.word	0x40001800
 80134a4:	40014000 	.word	0x40014000

080134a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80134b2:	2300      	movs	r3, #0
 80134b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d101      	bne.n	80134c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80134c0:	2302      	movs	r3, #2
 80134c2:	e065      	b.n	8013590 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2201      	movs	r2, #1
 80134c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	68db      	ldr	r3, [r3, #12]
 80134d6:	4313      	orrs	r3, r2
 80134d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	689b      	ldr	r3, [r3, #8]
 80134e4:	4313      	orrs	r3, r2
 80134e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	4313      	orrs	r3, r2
 80134f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4313      	orrs	r3, r2
 8013502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	4313      	orrs	r3, r2
 8013510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	695b      	ldr	r3, [r3, #20]
 801351c:	4313      	orrs	r3, r2
 801351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801352a:	4313      	orrs	r3, r2
 801352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	041b      	lsls	r3, r3, #16
 801353a:	4313      	orrs	r3, r2
 801353c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	4a16      	ldr	r2, [pc, #88]	@ (801359c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d004      	beq.n	8013552 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a14      	ldr	r2, [pc, #80]	@ (80135a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d115      	bne.n	801357e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801355c:	051b      	lsls	r3, r3, #20
 801355e:	4313      	orrs	r3, r2
 8013560:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	69db      	ldr	r3, [r3, #28]
 801356c:	4313      	orrs	r3, r2
 801356e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	6a1b      	ldr	r3, [r3, #32]
 801357a:	4313      	orrs	r3, r2
 801357c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2200      	movs	r2, #0
 801358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801358e:	2300      	movs	r3, #0
}
 8013590:	4618      	mov	r0, r3
 8013592:	3714      	adds	r7, #20
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr
 801359c:	40010000 	.word	0x40010000
 80135a0:	40010400 	.word	0x40010400

080135a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80135a4:	b084      	sub	sp, #16
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b084      	sub	sp, #16
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	f107 001c 	add.w	r0, r7, #28
 80135b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80135b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d120      	bne.n	80135fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	68da      	ldr	r2, [r3, #12]
 80135cc:	4b2a      	ldr	r3, [pc, #168]	@ (8013678 <USB_CoreInit+0xd4>)
 80135ce:	4013      	ands	r3, r2
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80135e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d105      	bne.n	80135f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f001 faf8 	bl	8014be8 <USB_CoreReset>
 80135f8:	4603      	mov	r3, r0
 80135fa:	73fb      	strb	r3, [r7, #15]
 80135fc:	e01a      	b.n	8013634 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f001 faec 	bl	8014be8 <USB_CoreReset>
 8013610:	4603      	mov	r3, r0
 8013612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013616:	2b00      	cmp	r3, #0
 8013618:	d106      	bne.n	8013628 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801361e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	639a      	str	r2, [r3, #56]	@ 0x38
 8013626:	e005      	b.n	8013634 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801362c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013636:	2b01      	cmp	r3, #1
 8013638:	d116      	bne.n	8013668 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801363e:	b29a      	uxth	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013648:	4b0c      	ldr	r3, [pc, #48]	@ (801367c <USB_CoreInit+0xd8>)
 801364a:	4313      	orrs	r3, r2
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	f043 0206 	orr.w	r2, r3, #6
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	f043 0220 	orr.w	r2, r3, #32
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013668:	7bfb      	ldrb	r3, [r7, #15]
}
 801366a:	4618      	mov	r0, r3
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013674:	b004      	add	sp, #16
 8013676:	4770      	bx	lr
 8013678:	ffbdffbf 	.word	0xffbdffbf
 801367c:	03ee0000 	.word	0x03ee0000

08013680 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013680:	b480      	push	{r7}
 8013682:	b087      	sub	sp, #28
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	4613      	mov	r3, r2
 801368c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801368e:	79fb      	ldrb	r3, [r7, #7]
 8013690:	2b02      	cmp	r3, #2
 8013692:	d165      	bne.n	8013760 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	4a41      	ldr	r2, [pc, #260]	@ (801379c <USB_SetTurnaroundTime+0x11c>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d906      	bls.n	80136aa <USB_SetTurnaroundTime+0x2a>
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	4a40      	ldr	r2, [pc, #256]	@ (80137a0 <USB_SetTurnaroundTime+0x120>)
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d202      	bcs.n	80136aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80136a4:	230f      	movs	r3, #15
 80136a6:	617b      	str	r3, [r7, #20]
 80136a8:	e062      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	4a3c      	ldr	r2, [pc, #240]	@ (80137a0 <USB_SetTurnaroundTime+0x120>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d306      	bcc.n	80136c0 <USB_SetTurnaroundTime+0x40>
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	4a3b      	ldr	r2, [pc, #236]	@ (80137a4 <USB_SetTurnaroundTime+0x124>)
 80136b6:	4293      	cmp	r3, r2
 80136b8:	d202      	bcs.n	80136c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80136ba:	230e      	movs	r3, #14
 80136bc:	617b      	str	r3, [r7, #20]
 80136be:	e057      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	4a38      	ldr	r2, [pc, #224]	@ (80137a4 <USB_SetTurnaroundTime+0x124>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d306      	bcc.n	80136d6 <USB_SetTurnaroundTime+0x56>
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	4a37      	ldr	r2, [pc, #220]	@ (80137a8 <USB_SetTurnaroundTime+0x128>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d202      	bcs.n	80136d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80136d0:	230d      	movs	r3, #13
 80136d2:	617b      	str	r3, [r7, #20]
 80136d4:	e04c      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	4a33      	ldr	r2, [pc, #204]	@ (80137a8 <USB_SetTurnaroundTime+0x128>)
 80136da:	4293      	cmp	r3, r2
 80136dc:	d306      	bcc.n	80136ec <USB_SetTurnaroundTime+0x6c>
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	4a32      	ldr	r2, [pc, #200]	@ (80137ac <USB_SetTurnaroundTime+0x12c>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d802      	bhi.n	80136ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80136e6:	230c      	movs	r3, #12
 80136e8:	617b      	str	r3, [r7, #20]
 80136ea:	e041      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	4a2f      	ldr	r2, [pc, #188]	@ (80137ac <USB_SetTurnaroundTime+0x12c>)
 80136f0:	4293      	cmp	r3, r2
 80136f2:	d906      	bls.n	8013702 <USB_SetTurnaroundTime+0x82>
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	4a2e      	ldr	r2, [pc, #184]	@ (80137b0 <USB_SetTurnaroundTime+0x130>)
 80136f8:	4293      	cmp	r3, r2
 80136fa:	d802      	bhi.n	8013702 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80136fc:	230b      	movs	r3, #11
 80136fe:	617b      	str	r3, [r7, #20]
 8013700:	e036      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	4a2a      	ldr	r2, [pc, #168]	@ (80137b0 <USB_SetTurnaroundTime+0x130>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d906      	bls.n	8013718 <USB_SetTurnaroundTime+0x98>
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	4a29      	ldr	r2, [pc, #164]	@ (80137b4 <USB_SetTurnaroundTime+0x134>)
 801370e:	4293      	cmp	r3, r2
 8013710:	d802      	bhi.n	8013718 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013712:	230a      	movs	r3, #10
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	e02b      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	4a26      	ldr	r2, [pc, #152]	@ (80137b4 <USB_SetTurnaroundTime+0x134>)
 801371c:	4293      	cmp	r3, r2
 801371e:	d906      	bls.n	801372e <USB_SetTurnaroundTime+0xae>
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	4a25      	ldr	r2, [pc, #148]	@ (80137b8 <USB_SetTurnaroundTime+0x138>)
 8013724:	4293      	cmp	r3, r2
 8013726:	d202      	bcs.n	801372e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013728:	2309      	movs	r3, #9
 801372a:	617b      	str	r3, [r7, #20]
 801372c:	e020      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	4a21      	ldr	r2, [pc, #132]	@ (80137b8 <USB_SetTurnaroundTime+0x138>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d306      	bcc.n	8013744 <USB_SetTurnaroundTime+0xc4>
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	4a20      	ldr	r2, [pc, #128]	@ (80137bc <USB_SetTurnaroundTime+0x13c>)
 801373a:	4293      	cmp	r3, r2
 801373c:	d802      	bhi.n	8013744 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801373e:	2308      	movs	r3, #8
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	e015      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	4a1d      	ldr	r2, [pc, #116]	@ (80137bc <USB_SetTurnaroundTime+0x13c>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d906      	bls.n	801375a <USB_SetTurnaroundTime+0xda>
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	4a1c      	ldr	r2, [pc, #112]	@ (80137c0 <USB_SetTurnaroundTime+0x140>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d202      	bcs.n	801375a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013754:	2307      	movs	r3, #7
 8013756:	617b      	str	r3, [r7, #20]
 8013758:	e00a      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801375a:	2306      	movs	r3, #6
 801375c:	617b      	str	r3, [r7, #20]
 801375e:	e007      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013760:	79fb      	ldrb	r3, [r7, #7]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d102      	bne.n	801376c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013766:	2309      	movs	r3, #9
 8013768:	617b      	str	r3, [r7, #20]
 801376a:	e001      	b.n	8013770 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801376c:	2309      	movs	r3, #9
 801376e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	68da      	ldr	r2, [r3, #12]
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	029b      	lsls	r3, r3, #10
 8013784:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8013788:	431a      	orrs	r2, r3
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801378e:	2300      	movs	r3, #0
}
 8013790:	4618      	mov	r0, r3
 8013792:	371c      	adds	r7, #28
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr
 801379c:	00d8acbf 	.word	0x00d8acbf
 80137a0:	00e4e1c0 	.word	0x00e4e1c0
 80137a4:	00f42400 	.word	0x00f42400
 80137a8:	01067380 	.word	0x01067380
 80137ac:	011a499f 	.word	0x011a499f
 80137b0:	01312cff 	.word	0x01312cff
 80137b4:	014ca43f 	.word	0x014ca43f
 80137b8:	016e3600 	.word	0x016e3600
 80137bc:	01a6ab1f 	.word	0x01a6ab1f
 80137c0:	01e84800 	.word	0x01e84800

080137c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	f043 0201 	orr.w	r2, r3, #1
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80137e6:	b480      	push	{r7}
 80137e8:	b083      	sub	sp, #12
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	689b      	ldr	r3, [r3, #8]
 80137f2:	f023 0201 	bic.w	r2, r3, #1
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80137fa:	2300      	movs	r3, #0
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013814:	2300      	movs	r3, #0
 8013816:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013824:	78fb      	ldrb	r3, [r7, #3]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d115      	bne.n	8013856 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013836:	2001      	movs	r0, #1
 8013838:	f7f5 fef6 	bl	8009628 <HAL_Delay>
      ms++;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	3301      	adds	r3, #1
 8013840:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f001 f93f 	bl	8014ac6 <USB_GetMode>
 8013848:	4603      	mov	r3, r0
 801384a:	2b01      	cmp	r3, #1
 801384c:	d01e      	beq.n	801388c <USB_SetCurrentMode+0x84>
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b31      	cmp	r3, #49	@ 0x31
 8013852:	d9f0      	bls.n	8013836 <USB_SetCurrentMode+0x2e>
 8013854:	e01a      	b.n	801388c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013856:	78fb      	ldrb	r3, [r7, #3]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d115      	bne.n	8013888 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013868:	2001      	movs	r0, #1
 801386a:	f7f5 fedd 	bl	8009628 <HAL_Delay>
      ms++;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	3301      	adds	r3, #1
 8013872:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f001 f926 	bl	8014ac6 <USB_GetMode>
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d005      	beq.n	801388c <USB_SetCurrentMode+0x84>
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b31      	cmp	r3, #49	@ 0x31
 8013884:	d9f0      	bls.n	8013868 <USB_SetCurrentMode+0x60>
 8013886:	e001      	b.n	801388c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013888:	2301      	movs	r3, #1
 801388a:	e005      	b.n	8013898 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	2b32      	cmp	r3, #50	@ 0x32
 8013890:	d101      	bne.n	8013896 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013892:	2301      	movs	r3, #1
 8013894:	e000      	b.n	8013898 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013896:	2300      	movs	r3, #0
}
 8013898:	4618      	mov	r0, r3
 801389a:	3710      	adds	r7, #16
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80138a0:	b084      	sub	sp, #16
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b086      	sub	sp, #24
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	6078      	str	r0, [r7, #4]
 80138aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80138ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80138b2:	2300      	movs	r3, #0
 80138b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80138ba:	2300      	movs	r3, #0
 80138bc:	613b      	str	r3, [r7, #16]
 80138be:	e009      	b.n	80138d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	3340      	adds	r3, #64	@ 0x40
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4413      	add	r3, r2
 80138ca:	2200      	movs	r2, #0
 80138cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	3301      	adds	r3, #1
 80138d2:	613b      	str	r3, [r7, #16]
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b0e      	cmp	r3, #14
 80138d8:	d9f2      	bls.n	80138c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80138da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d11c      	bne.n	801391a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80138ee:	f043 0302 	orr.w	r3, r3, #2
 80138f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	601a      	str	r2, [r3, #0]
 8013918:	e005      	b.n	8013926 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801391e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801392c:	461a      	mov	r2, r3
 801392e:	2300      	movs	r3, #0
 8013930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013938:	4619      	mov	r1, r3
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013940:	461a      	mov	r2, r3
 8013942:	680b      	ldr	r3, [r1, #0]
 8013944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	2b01      	cmp	r3, #1
 801394a:	d10c      	bne.n	8013966 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394e:	2b00      	cmp	r3, #0
 8013950:	d104      	bne.n	801395c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013952:	2100      	movs	r1, #0
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 f965 	bl	8013c24 <USB_SetDevSpeed>
 801395a:	e008      	b.n	801396e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801395c:	2101      	movs	r1, #1
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 f960 	bl	8013c24 <USB_SetDevSpeed>
 8013964:	e003      	b.n	801396e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013966:	2103      	movs	r1, #3
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f000 f95b 	bl	8013c24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801396e:	2110      	movs	r1, #16
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 f8f3 	bl	8013b5c <USB_FlushTxFifo>
 8013976:	4603      	mov	r3, r0
 8013978:	2b00      	cmp	r3, #0
 801397a:	d001      	beq.n	8013980 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801397c:	2301      	movs	r3, #1
 801397e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 f91f 	bl	8013bc4 <USB_FlushRxFifo>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801398c:	2301      	movs	r3, #1
 801398e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013996:	461a      	mov	r2, r3
 8013998:	2300      	movs	r3, #0
 801399a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139a2:	461a      	mov	r2, r3
 80139a4:	2300      	movs	r3, #0
 80139a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139ae:	461a      	mov	r2, r3
 80139b0:	2300      	movs	r3, #0
 80139b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80139b4:	2300      	movs	r3, #0
 80139b6:	613b      	str	r3, [r7, #16]
 80139b8:	e043      	b.n	8013a42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	015a      	lsls	r2, r3, #5
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	4413      	add	r3, r2
 80139c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80139cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80139d0:	d118      	bne.n	8013a04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10a      	bne.n	80139ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	015a      	lsls	r2, r3, #5
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	4413      	add	r3, r2
 80139e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139e4:	461a      	mov	r2, r3
 80139e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80139ea:	6013      	str	r3, [r2, #0]
 80139ec:	e013      	b.n	8013a16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	015a      	lsls	r2, r3, #5
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	4413      	add	r3, r2
 80139f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139fa:	461a      	mov	r2, r3
 80139fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013a00:	6013      	str	r3, [r2, #0]
 8013a02:	e008      	b.n	8013a16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	015a      	lsls	r2, r3, #5
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a10:	461a      	mov	r2, r3
 8013a12:	2300      	movs	r3, #0
 8013a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	015a      	lsls	r2, r3, #5
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a22:	461a      	mov	r2, r3
 8013a24:	2300      	movs	r3, #0
 8013a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	015a      	lsls	r2, r3, #5
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	4413      	add	r3, r2
 8013a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a34:	461a      	mov	r2, r3
 8013a36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	613b      	str	r3, [r7, #16]
 8013a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a44:	693a      	ldr	r2, [r7, #16]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d3b7      	bcc.n	80139ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	613b      	str	r3, [r7, #16]
 8013a4e:	e043      	b.n	8013ad8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	015a      	lsls	r2, r3, #5
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	4413      	add	r3, r2
 8013a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013a66:	d118      	bne.n	8013a9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d10a      	bne.n	8013a84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	015a      	lsls	r2, r3, #5
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	4413      	add	r3, r2
 8013a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8013a80:	6013      	str	r3, [r2, #0]
 8013a82:	e013      	b.n	8013aac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a90:	461a      	mov	r2, r3
 8013a92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013a96:	6013      	str	r3, [r2, #0]
 8013a98:	e008      	b.n	8013aac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	015a      	lsls	r2, r3, #5
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	4413      	add	r3, r2
 8013aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	015a      	lsls	r2, r3, #5
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ab8:	461a      	mov	r2, r3
 8013aba:	2300      	movs	r3, #0
 8013abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	015a      	lsls	r2, r3, #5
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aca:	461a      	mov	r2, r3
 8013acc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	613b      	str	r3, [r7, #16]
 8013ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ada:	693a      	ldr	r2, [r7, #16]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d3b7      	bcc.n	8013a50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013ae6:	691b      	ldr	r3, [r3, #16]
 8013ae8:	68fa      	ldr	r2, [r7, #12]
 8013aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8013b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d105      	bne.n	8013b14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	699b      	ldr	r3, [r3, #24]
 8013b0c:	f043 0210 	orr.w	r2, r3, #16
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	699a      	ldr	r2, [r3, #24]
 8013b18:	4b0e      	ldr	r3, [pc, #56]	@ (8013b54 <USB_DevInit+0x2b4>)
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d005      	beq.n	8013b32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	699b      	ldr	r3, [r3, #24]
 8013b2a:	f043 0208 	orr.w	r2, r3, #8
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d105      	bne.n	8013b44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	699a      	ldr	r2, [r3, #24]
 8013b3c:	4b06      	ldr	r3, [pc, #24]	@ (8013b58 <USB_DevInit+0x2b8>)
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	687a      	ldr	r2, [r7, #4]
 8013b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3718      	adds	r7, #24
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b50:	b004      	add	sp, #16
 8013b52:	4770      	bx	lr
 8013b54:	803c3800 	.word	0x803c3800
 8013b58:	40000004 	.word	0x40000004

08013b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b085      	sub	sp, #20
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013b66:	2300      	movs	r3, #0
 8013b68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4a13      	ldr	r2, [pc, #76]	@ (8013bc0 <USB_FlushTxFifo+0x64>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d901      	bls.n	8013b7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	e01b      	b.n	8013bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	691b      	ldr	r3, [r3, #16]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	daf2      	bge.n	8013b6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013b84:	2300      	movs	r3, #0
 8013b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	019b      	lsls	r3, r3, #6
 8013b8c:	f043 0220 	orr.w	r2, r3, #32
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	3301      	adds	r3, #1
 8013b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	4a08      	ldr	r2, [pc, #32]	@ (8013bc0 <USB_FlushTxFifo+0x64>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d901      	bls.n	8013ba6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	e006      	b.n	8013bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	691b      	ldr	r3, [r3, #16]
 8013baa:	f003 0320 	and.w	r3, r3, #32
 8013bae:	2b20      	cmp	r3, #32
 8013bb0:	d0f0      	beq.n	8013b94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3714      	adds	r7, #20
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr
 8013bc0:	00030d40 	.word	0x00030d40

08013bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b085      	sub	sp, #20
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	4a11      	ldr	r2, [pc, #68]	@ (8013c20 <USB_FlushRxFifo+0x5c>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d901      	bls.n	8013be2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013bde:	2303      	movs	r3, #3
 8013be0:	e018      	b.n	8013c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	691b      	ldr	r3, [r3, #16]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	daf2      	bge.n	8013bd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013bea:	2300      	movs	r3, #0
 8013bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2210      	movs	r2, #16
 8013bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	4a08      	ldr	r2, [pc, #32]	@ (8013c20 <USB_FlushRxFifo+0x5c>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d901      	bls.n	8013c06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013c02:	2303      	movs	r3, #3
 8013c04:	e006      	b.n	8013c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	f003 0310 	and.w	r3, r3, #16
 8013c0e:	2b10      	cmp	r3, #16
 8013c10:	d0f0      	beq.n	8013bf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3714      	adds	r7, #20
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr
 8013c20:	00030d40 	.word	0x00030d40

08013c24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b085      	sub	sp, #20
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	78fb      	ldrb	r3, [r7, #3]
 8013c3e:	68f9      	ldr	r1, [r7, #12]
 8013c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013c44:	4313      	orrs	r3, r2
 8013c46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013c48:	2300      	movs	r3, #0
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3714      	adds	r7, #20
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c54:	4770      	bx	lr

08013c56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013c56:	b480      	push	{r7}
 8013c58:	b087      	sub	sp, #28
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	f003 0306 	and.w	r3, r3, #6
 8013c6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d102      	bne.n	8013c7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013c76:	2300      	movs	r3, #0
 8013c78:	75fb      	strb	r3, [r7, #23]
 8013c7a:	e00a      	b.n	8013c92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d002      	beq.n	8013c88 <USB_GetDevSpeed+0x32>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2b06      	cmp	r3, #6
 8013c86:	d102      	bne.n	8013c8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013c88:	2302      	movs	r3, #2
 8013c8a:	75fb      	strb	r3, [r7, #23]
 8013c8c:	e001      	b.n	8013c92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013c8e:	230f      	movs	r3, #15
 8013c90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	371c      	adds	r7, #28
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	785b      	ldrb	r3, [r3, #1]
 8013cb8:	2b01      	cmp	r3, #1
 8013cba:	d139      	bne.n	8013d30 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013cc2:	69da      	ldr	r2, [r3, #28]
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	f003 030f 	and.w	r3, r3, #15
 8013ccc:	2101      	movs	r1, #1
 8013cce:	fa01 f303 	lsl.w	r3, r1, r3
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	68f9      	ldr	r1, [r7, #12]
 8013cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d153      	bne.n	8013d9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	015a      	lsls	r2, r3, #5
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	689b      	ldr	r3, [r3, #8]
 8013d06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	791b      	ldrb	r3, [r3, #4]
 8013d0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	059b      	lsls	r3, r3, #22
 8013d16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d18:	431a      	orrs	r2, r3
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	0159      	lsls	r1, r3, #5
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	440b      	add	r3, r1
 8013d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d26:	4619      	mov	r1, r3
 8013d28:	4b20      	ldr	r3, [pc, #128]	@ (8013dac <USB_ActivateEndpoint+0x10c>)
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	600b      	str	r3, [r1, #0]
 8013d2e:	e035      	b.n	8013d9c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013d36:	69da      	ldr	r2, [r3, #28]
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	f003 030f 	and.w	r3, r3, #15
 8013d40:	2101      	movs	r1, #1
 8013d42:	fa01 f303 	lsl.w	r3, r1, r3
 8013d46:	041b      	lsls	r3, r3, #16
 8013d48:	68f9      	ldr	r1, [r7, #12]
 8013d4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013d4e:	4313      	orrs	r3, r2
 8013d50:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	015a      	lsls	r2, r3, #5
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d119      	bne.n	8013d9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	689b      	ldr	r3, [r3, #8]
 8013d7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	791b      	ldrb	r3, [r3, #4]
 8013d82:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013d84:	430b      	orrs	r3, r1
 8013d86:	431a      	orrs	r2, r3
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	0159      	lsls	r1, r3, #5
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	440b      	add	r3, r1
 8013d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d94:	4619      	mov	r1, r3
 8013d96:	4b05      	ldr	r3, [pc, #20]	@ (8013dac <USB_ActivateEndpoint+0x10c>)
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013d9c:	2300      	movs	r3, #0
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3714      	adds	r7, #20
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr
 8013daa:	bf00      	nop
 8013dac:	10008000 	.word	0x10008000

08013db0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	785b      	ldrb	r3, [r3, #1]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d161      	bne.n	8013e90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	015a      	lsls	r2, r3, #5
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013de2:	d11f      	bne.n	8013e24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	015a      	lsls	r2, r3, #5
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	4413      	add	r3, r2
 8013dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68ba      	ldr	r2, [r7, #8]
 8013df4:	0151      	lsls	r1, r2, #5
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	440a      	add	r2, r1
 8013dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013dfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013e02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	015a      	lsls	r2, r3, #5
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	0151      	lsls	r1, r2, #5
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	440a      	add	r2, r1
 8013e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013e22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	f003 030f 	and.w	r3, r3, #15
 8013e34:	2101      	movs	r1, #1
 8013e36:	fa01 f303 	lsl.w	r3, r1, r3
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	43db      	mvns	r3, r3
 8013e3e:	68f9      	ldr	r1, [r7, #12]
 8013e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013e44:	4013      	ands	r3, r2
 8013e46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013e4e:	69da      	ldr	r2, [r3, #28]
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	f003 030f 	and.w	r3, r3, #15
 8013e58:	2101      	movs	r1, #1
 8013e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	43db      	mvns	r3, r3
 8013e62:	68f9      	ldr	r1, [r7, #12]
 8013e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013e68:	4013      	ands	r3, r2
 8013e6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	015a      	lsls	r2, r3, #5
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	4413      	add	r3, r2
 8013e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e78:	681a      	ldr	r2, [r3, #0]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	0159      	lsls	r1, r3, #5
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	440b      	add	r3, r1
 8013e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e86:	4619      	mov	r1, r3
 8013e88:	4b35      	ldr	r3, [pc, #212]	@ (8013f60 <USB_DeactivateEndpoint+0x1b0>)
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	600b      	str	r3, [r1, #0]
 8013e8e:	e060      	b.n	8013f52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	015a      	lsls	r2, r3, #5
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	4413      	add	r3, r2
 8013e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013ea6:	d11f      	bne.n	8013ee8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	015a      	lsls	r2, r3, #5
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4413      	add	r3, r2
 8013eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	68ba      	ldr	r2, [r7, #8]
 8013eb8:	0151      	lsls	r1, r2, #5
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	440a      	add	r2, r1
 8013ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013ec6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	015a      	lsls	r2, r3, #5
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4413      	add	r3, r2
 8013ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	0151      	lsls	r1, r2, #5
 8013eda:	68fa      	ldr	r2, [r7, #12]
 8013edc:	440a      	add	r2, r1
 8013ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f003 030f 	and.w	r3, r3, #15
 8013ef8:	2101      	movs	r1, #1
 8013efa:	fa01 f303 	lsl.w	r3, r1, r3
 8013efe:	041b      	lsls	r3, r3, #16
 8013f00:	43db      	mvns	r3, r3
 8013f02:	68f9      	ldr	r1, [r7, #12]
 8013f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013f08:	4013      	ands	r3, r2
 8013f0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013f12:	69da      	ldr	r2, [r3, #28]
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	f003 030f 	and.w	r3, r3, #15
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8013f22:	041b      	lsls	r3, r3, #16
 8013f24:	43db      	mvns	r3, r3
 8013f26:	68f9      	ldr	r1, [r7, #12]
 8013f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013f2c:	4013      	ands	r3, r2
 8013f2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	015a      	lsls	r2, r3, #5
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	4413      	add	r3, r2
 8013f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	0159      	lsls	r1, r3, #5
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	440b      	add	r3, r1
 8013f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	4b05      	ldr	r3, [pc, #20]	@ (8013f64 <USB_DeactivateEndpoint+0x1b4>)
 8013f4e:	4013      	ands	r3, r2
 8013f50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	ec337800 	.word	0xec337800
 8013f64:	eff37800 	.word	0xeff37800

08013f68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08a      	sub	sp, #40	@ 0x28
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	4613      	mov	r3, r2
 8013f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	785b      	ldrb	r3, [r3, #1]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	f040 8181 	bne.w	801428c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d132      	bne.n	8013ff8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	015a      	lsls	r2, r3, #5
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	4413      	add	r3, r2
 8013f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f9e:	691a      	ldr	r2, [r3, #16]
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	0159      	lsls	r1, r3, #5
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	440b      	add	r3, r1
 8013fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fac:	4619      	mov	r1, r3
 8013fae:	4ba5      	ldr	r3, [pc, #660]	@ (8014244 <USB_EPStartXfer+0x2dc>)
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	015a      	lsls	r2, r3, #5
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	4413      	add	r3, r2
 8013fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	69ba      	ldr	r2, [r7, #24]
 8013fc4:	0151      	lsls	r1, r2, #5
 8013fc6:	69fa      	ldr	r2, [r7, #28]
 8013fc8:	440a      	add	r2, r1
 8013fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013fd4:	69bb      	ldr	r3, [r7, #24]
 8013fd6:	015a      	lsls	r2, r3, #5
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	4413      	add	r3, r2
 8013fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fe0:	691a      	ldr	r2, [r3, #16]
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	0159      	lsls	r1, r3, #5
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	440b      	add	r3, r1
 8013fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4b95      	ldr	r3, [pc, #596]	@ (8014248 <USB_EPStartXfer+0x2e0>)
 8013ff2:	4013      	ands	r3, r2
 8013ff4:	610b      	str	r3, [r1, #16]
 8013ff6:	e092      	b.n	801411e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	015a      	lsls	r2, r3, #5
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	4413      	add	r3, r2
 8014000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014004:	691a      	ldr	r2, [r3, #16]
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	0159      	lsls	r1, r3, #5
 801400a:	69fb      	ldr	r3, [r7, #28]
 801400c:	440b      	add	r3, r1
 801400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014012:	4619      	mov	r1, r3
 8014014:	4b8c      	ldr	r3, [pc, #560]	@ (8014248 <USB_EPStartXfer+0x2e0>)
 8014016:	4013      	ands	r3, r2
 8014018:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	015a      	lsls	r2, r3, #5
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	4413      	add	r3, r2
 8014022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014026:	691a      	ldr	r2, [r3, #16]
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	0159      	lsls	r1, r3, #5
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	440b      	add	r3, r1
 8014030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014034:	4619      	mov	r1, r3
 8014036:	4b83      	ldr	r3, [pc, #524]	@ (8014244 <USB_EPStartXfer+0x2dc>)
 8014038:	4013      	ands	r3, r2
 801403a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d11a      	bne.n	8014078 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	691a      	ldr	r2, [r3, #16]
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	689b      	ldr	r3, [r3, #8]
 801404a:	429a      	cmp	r2, r3
 801404c:	d903      	bls.n	8014056 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	689a      	ldr	r2, [r3, #8]
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	015a      	lsls	r2, r3, #5
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	4413      	add	r3, r2
 801405e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	69ba      	ldr	r2, [r7, #24]
 8014066:	0151      	lsls	r1, r2, #5
 8014068:	69fa      	ldr	r2, [r7, #28]
 801406a:	440a      	add	r2, r1
 801406c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014074:	6113      	str	r3, [r2, #16]
 8014076:	e01b      	b.n	80140b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	015a      	lsls	r2, r3, #5
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	4413      	add	r3, r2
 8014080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014084:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	6919      	ldr	r1, [r3, #16]
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	440b      	add	r3, r1
 8014090:	1e59      	subs	r1, r3, #1
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	689b      	ldr	r3, [r3, #8]
 8014096:	fbb1 f3f3 	udiv	r3, r1, r3
 801409a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801409c:	4b6b      	ldr	r3, [pc, #428]	@ (801424c <USB_EPStartXfer+0x2e4>)
 801409e:	400b      	ands	r3, r1
 80140a0:	69b9      	ldr	r1, [r7, #24]
 80140a2:	0148      	lsls	r0, r1, #5
 80140a4:	69f9      	ldr	r1, [r7, #28]
 80140a6:	4401      	add	r1, r0
 80140a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80140ac:	4313      	orrs	r3, r2
 80140ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80140b0:	69bb      	ldr	r3, [r7, #24]
 80140b2:	015a      	lsls	r2, r3, #5
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	4413      	add	r3, r2
 80140b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80140bc:	691a      	ldr	r2, [r3, #16]
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	691b      	ldr	r3, [r3, #16]
 80140c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80140c6:	69b9      	ldr	r1, [r7, #24]
 80140c8:	0148      	lsls	r0, r1, #5
 80140ca:	69f9      	ldr	r1, [r7, #28]
 80140cc:	4401      	add	r1, r0
 80140ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80140d2:	4313      	orrs	r3, r2
 80140d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	791b      	ldrb	r3, [r3, #4]
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d11f      	bne.n	801411e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	015a      	lsls	r2, r3, #5
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	4413      	add	r3, r2
 80140e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80140ea:	691b      	ldr	r3, [r3, #16]
 80140ec:	69ba      	ldr	r2, [r7, #24]
 80140ee:	0151      	lsls	r1, r2, #5
 80140f0:	69fa      	ldr	r2, [r7, #28]
 80140f2:	440a      	add	r2, r1
 80140f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80140f8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80140fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	015a      	lsls	r2, r3, #5
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	4413      	add	r3, r2
 8014106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801410a:	691b      	ldr	r3, [r3, #16]
 801410c:	69ba      	ldr	r2, [r7, #24]
 801410e:	0151      	lsls	r1, r2, #5
 8014110:	69fa      	ldr	r2, [r7, #28]
 8014112:	440a      	add	r2, r1
 8014114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801411c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801411e:	79fb      	ldrb	r3, [r7, #7]
 8014120:	2b01      	cmp	r3, #1
 8014122:	d14b      	bne.n	80141bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	69db      	ldr	r3, [r3, #28]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d009      	beq.n	8014140 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	015a      	lsls	r2, r3, #5
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	4413      	add	r3, r2
 8014134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014138:	461a      	mov	r2, r3
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	69db      	ldr	r3, [r3, #28]
 801413e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	791b      	ldrb	r3, [r3, #4]
 8014144:	2b01      	cmp	r3, #1
 8014146:	d128      	bne.n	801419a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014154:	2b00      	cmp	r3, #0
 8014156:	d110      	bne.n	801417a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	015a      	lsls	r2, r3, #5
 801415c:	69fb      	ldr	r3, [r7, #28]
 801415e:	4413      	add	r3, r2
 8014160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	69ba      	ldr	r2, [r7, #24]
 8014168:	0151      	lsls	r1, r2, #5
 801416a:	69fa      	ldr	r2, [r7, #28]
 801416c:	440a      	add	r2, r1
 801416e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014172:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014176:	6013      	str	r3, [r2, #0]
 8014178:	e00f      	b.n	801419a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	015a      	lsls	r2, r3, #5
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	4413      	add	r3, r2
 8014182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	69ba      	ldr	r2, [r7, #24]
 801418a:	0151      	lsls	r1, r2, #5
 801418c:	69fa      	ldr	r2, [r7, #28]
 801418e:	440a      	add	r2, r1
 8014190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014198:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	015a      	lsls	r2, r3, #5
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	4413      	add	r3, r2
 80141a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	69ba      	ldr	r2, [r7, #24]
 80141aa:	0151      	lsls	r1, r2, #5
 80141ac:	69fa      	ldr	r2, [r7, #28]
 80141ae:	440a      	add	r2, r1
 80141b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80141b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80141b8:	6013      	str	r3, [r2, #0]
 80141ba:	e16a      	b.n	8014492 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	015a      	lsls	r2, r3, #5
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	4413      	add	r3, r2
 80141c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	69ba      	ldr	r2, [r7, #24]
 80141cc:	0151      	lsls	r1, r2, #5
 80141ce:	69fa      	ldr	r2, [r7, #28]
 80141d0:	440a      	add	r2, r1
 80141d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80141d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80141da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	791b      	ldrb	r3, [r3, #4]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d015      	beq.n	8014210 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	691b      	ldr	r3, [r3, #16]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	f000 8152 	beq.w	8014492 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	f003 030f 	and.w	r3, r3, #15
 80141fe:	2101      	movs	r1, #1
 8014200:	fa01 f303 	lsl.w	r3, r1, r3
 8014204:	69f9      	ldr	r1, [r7, #28]
 8014206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801420a:	4313      	orrs	r3, r2
 801420c:	634b      	str	r3, [r1, #52]	@ 0x34
 801420e:	e140      	b.n	8014492 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014216:	689b      	ldr	r3, [r3, #8]
 8014218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801421c:	2b00      	cmp	r3, #0
 801421e:	d117      	bne.n	8014250 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	015a      	lsls	r2, r3, #5
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	4413      	add	r3, r2
 8014228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	69ba      	ldr	r2, [r7, #24]
 8014230:	0151      	lsls	r1, r2, #5
 8014232:	69fa      	ldr	r2, [r7, #28]
 8014234:	440a      	add	r2, r1
 8014236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801423a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801423e:	6013      	str	r3, [r2, #0]
 8014240:	e016      	b.n	8014270 <USB_EPStartXfer+0x308>
 8014242:	bf00      	nop
 8014244:	e007ffff 	.word	0xe007ffff
 8014248:	fff80000 	.word	0xfff80000
 801424c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	015a      	lsls	r2, r3, #5
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	4413      	add	r3, r2
 8014258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	69ba      	ldr	r2, [r7, #24]
 8014260:	0151      	lsls	r1, r2, #5
 8014262:	69fa      	ldr	r2, [r7, #28]
 8014264:	440a      	add	r2, r1
 8014266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801426a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801426e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	68d9      	ldr	r1, [r3, #12]
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	781a      	ldrb	r2, [r3, #0]
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	691b      	ldr	r3, [r3, #16]
 801427c:	b298      	uxth	r0, r3
 801427e:	79fb      	ldrb	r3, [r7, #7]
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	4603      	mov	r3, r0
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f000 f9b9 	bl	80145fc <USB_WritePacket>
 801428a:	e102      	b.n	8014492 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801428c:	69bb      	ldr	r3, [r7, #24]
 801428e:	015a      	lsls	r2, r3, #5
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	4413      	add	r3, r2
 8014294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014298:	691a      	ldr	r2, [r3, #16]
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	0159      	lsls	r1, r3, #5
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	440b      	add	r3, r1
 80142a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142a6:	4619      	mov	r1, r3
 80142a8:	4b7c      	ldr	r3, [pc, #496]	@ (801449c <USB_EPStartXfer+0x534>)
 80142aa:	4013      	ands	r3, r2
 80142ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80142ae:	69bb      	ldr	r3, [r7, #24]
 80142b0:	015a      	lsls	r2, r3, #5
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	4413      	add	r3, r2
 80142b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142ba:	691a      	ldr	r2, [r3, #16]
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	0159      	lsls	r1, r3, #5
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	440b      	add	r3, r1
 80142c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142c8:	4619      	mov	r1, r3
 80142ca:	4b75      	ldr	r3, [pc, #468]	@ (80144a0 <USB_EPStartXfer+0x538>)
 80142cc:	4013      	ands	r3, r2
 80142ce:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d12f      	bne.n	8014336 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d003      	beq.n	80142e6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	689a      	ldr	r2, [r3, #8]
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	689a      	ldr	r2, [r3, #8]
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	015a      	lsls	r2, r3, #5
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	4413      	add	r3, r2
 80142f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142fa:	691a      	ldr	r2, [r3, #16]
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	6a1b      	ldr	r3, [r3, #32]
 8014300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014304:	69b9      	ldr	r1, [r7, #24]
 8014306:	0148      	lsls	r0, r1, #5
 8014308:	69f9      	ldr	r1, [r7, #28]
 801430a:	4401      	add	r1, r0
 801430c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014310:	4313      	orrs	r3, r2
 8014312:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	015a      	lsls	r2, r3, #5
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	4413      	add	r3, r2
 801431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	69ba      	ldr	r2, [r7, #24]
 8014324:	0151      	lsls	r1, r2, #5
 8014326:	69fa      	ldr	r2, [r7, #28]
 8014328:	440a      	add	r2, r1
 801432a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801432e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014332:	6113      	str	r3, [r2, #16]
 8014334:	e05f      	b.n	80143f6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	691b      	ldr	r3, [r3, #16]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d123      	bne.n	8014386 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	015a      	lsls	r2, r3, #5
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	4413      	add	r3, r2
 8014346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801434a:	691a      	ldr	r2, [r3, #16]
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	689b      	ldr	r3, [r3, #8]
 8014350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014354:	69b9      	ldr	r1, [r7, #24]
 8014356:	0148      	lsls	r0, r1, #5
 8014358:	69f9      	ldr	r1, [r7, #28]
 801435a:	4401      	add	r1, r0
 801435c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014360:	4313      	orrs	r3, r2
 8014362:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	015a      	lsls	r2, r3, #5
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	4413      	add	r3, r2
 801436c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014370:	691b      	ldr	r3, [r3, #16]
 8014372:	69ba      	ldr	r2, [r7, #24]
 8014374:	0151      	lsls	r1, r2, #5
 8014376:	69fa      	ldr	r2, [r7, #28]
 8014378:	440a      	add	r2, r1
 801437a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801437e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014382:	6113      	str	r3, [r2, #16]
 8014384:	e037      	b.n	80143f6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	691a      	ldr	r2, [r3, #16]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	689b      	ldr	r3, [r3, #8]
 801438e:	4413      	add	r3, r2
 8014390:	1e5a      	subs	r2, r3, #1
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	689b      	ldr	r3, [r3, #8]
 8014396:	fbb2 f3f3 	udiv	r3, r2, r3
 801439a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	8afa      	ldrh	r2, [r7, #22]
 80143a2:	fb03 f202 	mul.w	r2, r3, r2
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	015a      	lsls	r2, r3, #5
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	4413      	add	r3, r2
 80143b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143b6:	691a      	ldr	r2, [r3, #16]
 80143b8:	8afb      	ldrh	r3, [r7, #22]
 80143ba:	04d9      	lsls	r1, r3, #19
 80143bc:	4b39      	ldr	r3, [pc, #228]	@ (80144a4 <USB_EPStartXfer+0x53c>)
 80143be:	400b      	ands	r3, r1
 80143c0:	69b9      	ldr	r1, [r7, #24]
 80143c2:	0148      	lsls	r0, r1, #5
 80143c4:	69f9      	ldr	r1, [r7, #28]
 80143c6:	4401      	add	r1, r0
 80143c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80143cc:	4313      	orrs	r3, r2
 80143ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80143d0:	69bb      	ldr	r3, [r7, #24]
 80143d2:	015a      	lsls	r2, r3, #5
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	4413      	add	r3, r2
 80143d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143dc:	691a      	ldr	r2, [r3, #16]
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	6a1b      	ldr	r3, [r3, #32]
 80143e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143e6:	69b9      	ldr	r1, [r7, #24]
 80143e8:	0148      	lsls	r0, r1, #5
 80143ea:	69f9      	ldr	r1, [r7, #28]
 80143ec:	4401      	add	r1, r0
 80143ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80143f2:	4313      	orrs	r3, r2
 80143f4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d10d      	bne.n	8014418 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	68db      	ldr	r3, [r3, #12]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d009      	beq.n	8014418 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	68d9      	ldr	r1, [r3, #12]
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	015a      	lsls	r2, r3, #5
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	4413      	add	r3, r2
 8014410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014414:	460a      	mov	r2, r1
 8014416:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	791b      	ldrb	r3, [r3, #4]
 801441c:	2b01      	cmp	r3, #1
 801441e:	d128      	bne.n	8014472 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014426:	689b      	ldr	r3, [r3, #8]
 8014428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801442c:	2b00      	cmp	r3, #0
 801442e:	d110      	bne.n	8014452 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	015a      	lsls	r2, r3, #5
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	4413      	add	r3, r2
 8014438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	69ba      	ldr	r2, [r7, #24]
 8014440:	0151      	lsls	r1, r2, #5
 8014442:	69fa      	ldr	r2, [r7, #28]
 8014444:	440a      	add	r2, r1
 8014446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801444a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801444e:	6013      	str	r3, [r2, #0]
 8014450:	e00f      	b.n	8014472 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	015a      	lsls	r2, r3, #5
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	4413      	add	r3, r2
 801445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	69ba      	ldr	r2, [r7, #24]
 8014462:	0151      	lsls	r1, r2, #5
 8014464:	69fa      	ldr	r2, [r7, #28]
 8014466:	440a      	add	r2, r1
 8014468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801446c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014470:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	015a      	lsls	r2, r3, #5
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	4413      	add	r3, r2
 801447a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	69ba      	ldr	r2, [r7, #24]
 8014482:	0151      	lsls	r1, r2, #5
 8014484:	69fa      	ldr	r2, [r7, #28]
 8014486:	440a      	add	r2, r1
 8014488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801448c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3720      	adds	r7, #32
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	fff80000 	.word	0xfff80000
 80144a0:	e007ffff 	.word	0xe007ffff
 80144a4:	1ff80000 	.word	0x1ff80000

080144a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b087      	sub	sp, #28
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80144b2:	2300      	movs	r3, #0
 80144b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	785b      	ldrb	r3, [r3, #1]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d14a      	bne.n	801455c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	015a      	lsls	r2, r3, #5
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	4413      	add	r3, r2
 80144d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144de:	f040 8086 	bne.w	80145ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	015a      	lsls	r2, r3, #5
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	4413      	add	r3, r2
 80144ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	7812      	ldrb	r2, [r2, #0]
 80144f6:	0151      	lsls	r1, r2, #5
 80144f8:	693a      	ldr	r2, [r7, #16]
 80144fa:	440a      	add	r2, r1
 80144fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014500:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014504:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	015a      	lsls	r2, r3, #5
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	4413      	add	r3, r2
 8014510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	7812      	ldrb	r2, [r2, #0]
 801451a:	0151      	lsls	r1, r2, #5
 801451c:	693a      	ldr	r2, [r7, #16]
 801451e:	440a      	add	r2, r1
 8014520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	3301      	adds	r3, #1
 801452e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014536:	4293      	cmp	r3, r2
 8014538:	d902      	bls.n	8014540 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	75fb      	strb	r3, [r7, #23]
          break;
 801453e:	e056      	b.n	80145ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	015a      	lsls	r2, r3, #5
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	4413      	add	r3, r2
 801454a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014558:	d0e7      	beq.n	801452a <USB_EPStopXfer+0x82>
 801455a:	e048      	b.n	80145ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	015a      	lsls	r2, r3, #5
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	4413      	add	r3, r2
 8014566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014574:	d13b      	bne.n	80145ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	015a      	lsls	r2, r3, #5
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	4413      	add	r3, r2
 8014580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	683a      	ldr	r2, [r7, #0]
 8014588:	7812      	ldrb	r2, [r2, #0]
 801458a:	0151      	lsls	r1, r2, #5
 801458c:	693a      	ldr	r2, [r7, #16]
 801458e:	440a      	add	r2, r1
 8014590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014594:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014598:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	015a      	lsls	r2, r3, #5
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	4413      	add	r3, r2
 80145a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	683a      	ldr	r2, [r7, #0]
 80145ac:	7812      	ldrb	r2, [r2, #0]
 80145ae:	0151      	lsls	r1, r2, #5
 80145b0:	693a      	ldr	r2, [r7, #16]
 80145b2:	440a      	add	r2, r1
 80145b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80145b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80145bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	3301      	adds	r3, #1
 80145c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d902      	bls.n	80145d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80145ce:	2301      	movs	r3, #1
 80145d0:	75fb      	strb	r3, [r7, #23]
          break;
 80145d2:	e00c      	b.n	80145ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	015a      	lsls	r2, r3, #5
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	4413      	add	r3, r2
 80145de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145ec:	d0e7      	beq.n	80145be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	371c      	adds	r7, #28
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b089      	sub	sp, #36	@ 0x24
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	60b9      	str	r1, [r7, #8]
 8014606:	4611      	mov	r1, r2
 8014608:	461a      	mov	r2, r3
 801460a:	460b      	mov	r3, r1
 801460c:	71fb      	strb	r3, [r7, #7]
 801460e:	4613      	mov	r3, r2
 8014610:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801461a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801461e:	2b00      	cmp	r3, #0
 8014620:	d123      	bne.n	801466a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014622:	88bb      	ldrh	r3, [r7, #4]
 8014624:	3303      	adds	r3, #3
 8014626:	089b      	lsrs	r3, r3, #2
 8014628:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801462a:	2300      	movs	r3, #0
 801462c:	61bb      	str	r3, [r7, #24]
 801462e:	e018      	b.n	8014662 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014630:	79fb      	ldrb	r3, [r7, #7]
 8014632:	031a      	lsls	r2, r3, #12
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	4413      	add	r3, r2
 8014638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801463c:	461a      	mov	r2, r3
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	3301      	adds	r3, #1
 8014648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	3301      	adds	r3, #1
 801464e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	3301      	adds	r3, #1
 8014654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	3301      	adds	r3, #1
 801465a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	3301      	adds	r3, #1
 8014660:	61bb      	str	r3, [r7, #24]
 8014662:	69ba      	ldr	r2, [r7, #24]
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	429a      	cmp	r2, r3
 8014668:	d3e2      	bcc.n	8014630 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801466a:	2300      	movs	r3, #0
}
 801466c:	4618      	mov	r0, r3
 801466e:	3724      	adds	r7, #36	@ 0x24
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014678:	b480      	push	{r7}
 801467a:	b08b      	sub	sp, #44	@ 0x2c
 801467c:	af00      	add	r7, sp, #0
 801467e:	60f8      	str	r0, [r7, #12]
 8014680:	60b9      	str	r1, [r7, #8]
 8014682:	4613      	mov	r3, r2
 8014684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801468e:	88fb      	ldrh	r3, [r7, #6]
 8014690:	089b      	lsrs	r3, r3, #2
 8014692:	b29b      	uxth	r3, r3
 8014694:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014696:	88fb      	ldrh	r3, [r7, #6]
 8014698:	f003 0303 	and.w	r3, r3, #3
 801469c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801469e:	2300      	movs	r3, #0
 80146a0:	623b      	str	r3, [r7, #32]
 80146a2:	e014      	b.n	80146ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80146b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b2:	3301      	adds	r3, #1
 80146b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b8:	3301      	adds	r3, #1
 80146ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146be:	3301      	adds	r3, #1
 80146c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c4:	3301      	adds	r3, #1
 80146c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80146c8:	6a3b      	ldr	r3, [r7, #32]
 80146ca:	3301      	adds	r3, #1
 80146cc:	623b      	str	r3, [r7, #32]
 80146ce:	6a3a      	ldr	r2, [r7, #32]
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d3e6      	bcc.n	80146a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80146d6:	8bfb      	ldrh	r3, [r7, #30]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d01e      	beq.n	801471a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80146dc:	2300      	movs	r3, #0
 80146de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80146e6:	461a      	mov	r2, r3
 80146e8:	f107 0310 	add.w	r3, r7, #16
 80146ec:	6812      	ldr	r2, [r2, #0]
 80146ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80146f0:	693a      	ldr	r2, [r7, #16]
 80146f2:	6a3b      	ldr	r3, [r7, #32]
 80146f4:	b2db      	uxtb	r3, r3
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	fa22 f303 	lsr.w	r3, r2, r3
 80146fc:	b2da      	uxtb	r2, r3
 80146fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014700:	701a      	strb	r2, [r3, #0]
      i++;
 8014702:	6a3b      	ldr	r3, [r7, #32]
 8014704:	3301      	adds	r3, #1
 8014706:	623b      	str	r3, [r7, #32]
      pDest++;
 8014708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801470a:	3301      	adds	r3, #1
 801470c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801470e:	8bfb      	ldrh	r3, [r7, #30]
 8014710:	3b01      	subs	r3, #1
 8014712:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014714:	8bfb      	ldrh	r3, [r7, #30]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d1ea      	bne.n	80146f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801471c:	4618      	mov	r0, r3
 801471e:	372c      	adds	r7, #44	@ 0x2c
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	785b      	ldrb	r3, [r3, #1]
 8014740:	2b01      	cmp	r3, #1
 8014742:	d12c      	bne.n	801479e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	015a      	lsls	r2, r3, #5
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	4413      	add	r3, r2
 801474c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	db12      	blt.n	801477c <USB_EPSetStall+0x54>
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d00f      	beq.n	801477c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	015a      	lsls	r2, r3, #5
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	4413      	add	r3, r2
 8014764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	0151      	lsls	r1, r2, #5
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	440a      	add	r2, r1
 8014772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014776:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801477a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	015a      	lsls	r2, r3, #5
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	4413      	add	r3, r2
 8014784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	68ba      	ldr	r2, [r7, #8]
 801478c:	0151      	lsls	r1, r2, #5
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	440a      	add	r2, r1
 8014792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801479a:	6013      	str	r3, [r2, #0]
 801479c:	e02b      	b.n	80147f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	015a      	lsls	r2, r3, #5
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	4413      	add	r3, r2
 80147a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	db12      	blt.n	80147d6 <USB_EPSetStall+0xae>
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00f      	beq.n	80147d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	015a      	lsls	r2, r3, #5
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	4413      	add	r3, r2
 80147be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68ba      	ldr	r2, [r7, #8]
 80147c6:	0151      	lsls	r1, r2, #5
 80147c8:	68fa      	ldr	r2, [r7, #12]
 80147ca:	440a      	add	r2, r1
 80147cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80147d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80147d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	015a      	lsls	r2, r3, #5
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	4413      	add	r3, r2
 80147de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	68ba      	ldr	r2, [r7, #8]
 80147e6:	0151      	lsls	r1, r2, #5
 80147e8:	68fa      	ldr	r2, [r7, #12]
 80147ea:	440a      	add	r2, r1
 80147ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80147f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80147f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147f6:	2300      	movs	r3, #0
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	3714      	adds	r7, #20
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014804:	b480      	push	{r7}
 8014806:	b085      	sub	sp, #20
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	785b      	ldrb	r3, [r3, #1]
 801481c:	2b01      	cmp	r3, #1
 801481e:	d128      	bne.n	8014872 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	015a      	lsls	r2, r3, #5
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	4413      	add	r3, r2
 8014828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	0151      	lsls	r1, r2, #5
 8014832:	68fa      	ldr	r2, [r7, #12]
 8014834:	440a      	add	r2, r1
 8014836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801483a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801483e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	791b      	ldrb	r3, [r3, #4]
 8014844:	2b03      	cmp	r3, #3
 8014846:	d003      	beq.n	8014850 <USB_EPClearStall+0x4c>
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	791b      	ldrb	r3, [r3, #4]
 801484c:	2b02      	cmp	r3, #2
 801484e:	d138      	bne.n	80148c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	015a      	lsls	r2, r3, #5
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	4413      	add	r3, r2
 8014858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	0151      	lsls	r1, r2, #5
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	440a      	add	r2, r1
 8014866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801486a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	e027      	b.n	80148c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	015a      	lsls	r2, r3, #5
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	4413      	add	r3, r2
 801487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	0151      	lsls	r1, r2, #5
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	440a      	add	r2, r1
 8014888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801488c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014890:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	791b      	ldrb	r3, [r3, #4]
 8014896:	2b03      	cmp	r3, #3
 8014898:	d003      	beq.n	80148a2 <USB_EPClearStall+0x9e>
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	791b      	ldrb	r3, [r3, #4]
 801489e:	2b02      	cmp	r3, #2
 80148a0:	d10f      	bne.n	80148c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	015a      	lsls	r2, r3, #5
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4413      	add	r3, r2
 80148aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	68ba      	ldr	r2, [r7, #8]
 80148b2:	0151      	lsls	r1, r2, #5
 80148b4:	68fa      	ldr	r2, [r7, #12]
 80148b6:	440a      	add	r2, r1
 80148b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80148c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80148c2:	2300      	movs	r3, #0
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3714      	adds	r7, #20
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b085      	sub	sp, #20
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	460b      	mov	r3, r1
 80148da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80148ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80148f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	78fb      	ldrb	r3, [r7, #3]
 80148fe:	011b      	lsls	r3, r3, #4
 8014900:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8014904:	68f9      	ldr	r1, [r7, #12]
 8014906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801490a:	4313      	orrs	r3, r2
 801490c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3714      	adds	r7, #20
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801491c:	b480      	push	{r7}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014936:	f023 0303 	bic.w	r3, r3, #3
 801493a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	68fa      	ldr	r2, [r7, #12]
 8014946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801494a:	f023 0302 	bic.w	r3, r3, #2
 801494e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014950:	2300      	movs	r3, #0
}
 8014952:	4618      	mov	r0, r3
 8014954:	3714      	adds	r7, #20
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr

0801495e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801495e:	b480      	push	{r7}
 8014960:	b085      	sub	sp, #20
 8014962:	af00      	add	r7, sp, #0
 8014964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014978:	f023 0303 	bic.w	r3, r3, #3
 801497c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801498c:	f043 0302 	orr.w	r3, r3, #2
 8014990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014992:	2300      	movs	r3, #0
}
 8014994:	4618      	mov	r0, r3
 8014996:	3714      	adds	r7, #20
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr

080149a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80149a0:	b480      	push	{r7}
 80149a2:	b085      	sub	sp, #20
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	695b      	ldr	r3, [r3, #20]
 80149ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	699b      	ldr	r3, [r3, #24]
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	4013      	ands	r3, r2
 80149b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80149b8:	68fb      	ldr	r3, [r7, #12]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3714      	adds	r7, #20
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr

080149c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80149c6:	b480      	push	{r7}
 80149c8:	b085      	sub	sp, #20
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149d8:	699b      	ldr	r3, [r3, #24]
 80149da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149e2:	69db      	ldr	r3, [r3, #28]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	4013      	ands	r3, r2
 80149e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	0c1b      	lsrs	r3, r3, #16
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3714      	adds	r7, #20
 80149f2:	46bd      	mov	sp, r7
 80149f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f8:	4770      	bx	lr

080149fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80149fa:	b480      	push	{r7}
 80149fc:	b085      	sub	sp, #20
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a0c:	699b      	ldr	r3, [r3, #24]
 8014a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a16:	69db      	ldr	r3, [r3, #28]
 8014a18:	68ba      	ldr	r2, [r7, #8]
 8014a1a:	4013      	ands	r3, r2
 8014a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	b29b      	uxth	r3, r3
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3714      	adds	r7, #20
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr

08014a2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a2e:	b480      	push	{r7}
 8014a30:	b085      	sub	sp, #20
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	6078      	str	r0, [r7, #4]
 8014a36:	460b      	mov	r3, r1
 8014a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014a3e:	78fb      	ldrb	r3, [r7, #3]
 8014a40:	015a      	lsls	r2, r3, #5
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	4413      	add	r3, r2
 8014a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a4a:	689b      	ldr	r3, [r3, #8]
 8014a4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a54:	695b      	ldr	r3, [r3, #20]
 8014a56:	68ba      	ldr	r2, [r7, #8]
 8014a58:	4013      	ands	r3, r2
 8014a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014a5c:	68bb      	ldr	r3, [r7, #8]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3714      	adds	r7, #20
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a6a:	b480      	push	{r7}
 8014a6c:	b087      	sub	sp, #28
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	460b      	mov	r3, r1
 8014a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a80:	691b      	ldr	r3, [r3, #16]
 8014a82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014a8e:	78fb      	ldrb	r3, [r7, #3]
 8014a90:	f003 030f 	and.w	r3, r3, #15
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	fa22 f303 	lsr.w	r3, r2, r3
 8014a9a:	01db      	lsls	r3, r3, #7
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	693a      	ldr	r2, [r7, #16]
 8014aa0:	4313      	orrs	r3, r2
 8014aa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014aa4:	78fb      	ldrb	r3, [r7, #3]
 8014aa6:	015a      	lsls	r2, r3, #5
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	4413      	add	r3, r2
 8014aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ab0:	689b      	ldr	r3, [r3, #8]
 8014ab2:	693a      	ldr	r2, [r7, #16]
 8014ab4:	4013      	ands	r3, r2
 8014ab6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014ab8:	68bb      	ldr	r3, [r7, #8]
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	371c      	adds	r7, #28
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr

08014ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014ac6:	b480      	push	{r7}
 8014ac8:	b083      	sub	sp, #12
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	695b      	ldr	r3, [r3, #20]
 8014ad2:	f003 0301 	and.w	r3, r3, #1
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	370c      	adds	r7, #12
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr
	...

08014ae4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b085      	sub	sp, #20
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014afe:	4619      	mov	r1, r3
 8014b00:	4b09      	ldr	r3, [pc, #36]	@ (8014b28 <USB_ActivateSetup+0x44>)
 8014b02:	4013      	ands	r3, r2
 8014b04:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014b1a:	2300      	movs	r3, #0
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3714      	adds	r7, #20
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	fffff800 	.word	0xfffff800

08014b2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b087      	sub	sp, #28
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	460b      	mov	r3, r1
 8014b36:	607a      	str	r2, [r7, #4]
 8014b38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	333c      	adds	r3, #60	@ 0x3c
 8014b42:	3304      	adds	r3, #4
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	4a26      	ldr	r2, [pc, #152]	@ (8014be4 <USB_EP0_OutStart+0xb8>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d90a      	bls.n	8014b66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014b60:	d101      	bne.n	8014b66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014b62:	2300      	movs	r3, #0
 8014b64:	e037      	b.n	8014bd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	2300      	movs	r3, #0
 8014b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b78:	691b      	ldr	r3, [r3, #16]
 8014b7a:	697a      	ldr	r2, [r7, #20]
 8014b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b8c:	691b      	ldr	r3, [r3, #16]
 8014b8e:	697a      	ldr	r2, [r7, #20]
 8014b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b94:	f043 0318 	orr.w	r3, r3, #24
 8014b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	697a      	ldr	r2, [r7, #20]
 8014ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ba8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014bac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014bae:	7afb      	ldrb	r3, [r7, #11]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d10f      	bne.n	8014bd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bba:	461a      	mov	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	697a      	ldr	r2, [r7, #20]
 8014bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8014bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	371c      	adds	r7, #28
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	4f54300a 	.word	0x4f54300a

08014be8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	4a13      	ldr	r2, [pc, #76]	@ (8014c4c <USB_CoreReset+0x64>)
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	d901      	bls.n	8014c06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014c02:	2303      	movs	r3, #3
 8014c04:	e01b      	b.n	8014c3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	daf2      	bge.n	8014bf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	691b      	ldr	r3, [r3, #16]
 8014c16:	f043 0201 	orr.w	r2, r3, #1
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	3301      	adds	r3, #1
 8014c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	4a09      	ldr	r2, [pc, #36]	@ (8014c4c <USB_CoreReset+0x64>)
 8014c28:	4293      	cmp	r3, r2
 8014c2a:	d901      	bls.n	8014c30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014c2c:	2303      	movs	r3, #3
 8014c2e:	e006      	b.n	8014c3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	691b      	ldr	r3, [r3, #16]
 8014c34:	f003 0301 	and.w	r3, r3, #1
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d0f0      	beq.n	8014c1e <USB_CoreReset+0x36>

  return HAL_OK;
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3714      	adds	r7, #20
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop
 8014c4c:	00030d40 	.word	0x00030d40

08014c50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b084      	sub	sp, #16
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	460b      	mov	r3, r1
 8014c5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014c5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014c60:	f002 fcd2 	bl	8017608 <USBD_static_malloc>
 8014c64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d109      	bne.n	8014c80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	32b0      	adds	r2, #176	@ 0xb0
 8014c76:	2100      	movs	r1, #0
 8014c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014c7c:	2302      	movs	r3, #2
 8014c7e:	e0d4      	b.n	8014e2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014c80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014c84:	2100      	movs	r1, #0
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f002 fe99 	bl	80179be <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	32b0      	adds	r2, #176	@ 0xb0
 8014c96:	68f9      	ldr	r1, [r7, #12]
 8014c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	32b0      	adds	r2, #176	@ 0xb0
 8014ca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	7c1b      	ldrb	r3, [r3, #16]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d138      	bne.n	8014d2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8014e34 <USBD_CDC_Init+0x1e4>)
 8014cba:	7819      	ldrb	r1, [r3, #0]
 8014cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014cc0:	2202      	movs	r2, #2
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f002 fb7d 	bl	80173c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8014e34 <USBD_CDC_Init+0x1e4>)
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	f003 020f 	and.w	r2, r3, #15
 8014cd0:	6879      	ldr	r1, [r7, #4]
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	4413      	add	r3, r2
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	440b      	add	r3, r1
 8014cdc:	3324      	adds	r3, #36	@ 0x24
 8014cde:	2201      	movs	r2, #1
 8014ce0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014ce2:	4b55      	ldr	r3, [pc, #340]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014ce4:	7819      	ldrb	r1, [r3, #0]
 8014ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014cea:	2202      	movs	r2, #2
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f002 fb68 	bl	80173c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014cf2:	4b51      	ldr	r3, [pc, #324]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	f003 020f 	and.w	r2, r3, #15
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	4413      	add	r3, r2
 8014d02:	009b      	lsls	r3, r3, #2
 8014d04:	440b      	add	r3, r1
 8014d06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8014e3c <USBD_CDC_Init+0x1ec>)
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	f003 020f 	and.w	r2, r3, #15
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	4613      	mov	r3, r2
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4413      	add	r3, r2
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	440b      	add	r3, r1
 8014d22:	3326      	adds	r3, #38	@ 0x26
 8014d24:	2210      	movs	r2, #16
 8014d26:	801a      	strh	r2, [r3, #0]
 8014d28:	e035      	b.n	8014d96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d2a:	4b42      	ldr	r3, [pc, #264]	@ (8014e34 <USBD_CDC_Init+0x1e4>)
 8014d2c:	7819      	ldrb	r1, [r3, #0]
 8014d2e:	2340      	movs	r3, #64	@ 0x40
 8014d30:	2202      	movs	r2, #2
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f002 fb45 	bl	80173c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d38:	4b3e      	ldr	r3, [pc, #248]	@ (8014e34 <USBD_CDC_Init+0x1e4>)
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	f003 020f 	and.w	r2, r3, #15
 8014d40:	6879      	ldr	r1, [r7, #4]
 8014d42:	4613      	mov	r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	440b      	add	r3, r1
 8014d4c:	3324      	adds	r3, #36	@ 0x24
 8014d4e:	2201      	movs	r2, #1
 8014d50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d52:	4b39      	ldr	r3, [pc, #228]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014d54:	7819      	ldrb	r1, [r3, #0]
 8014d56:	2340      	movs	r3, #64	@ 0x40
 8014d58:	2202      	movs	r2, #2
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f002 fb31 	bl	80173c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d60:	4b35      	ldr	r3, [pc, #212]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	f003 020f 	and.w	r2, r3, #15
 8014d68:	6879      	ldr	r1, [r7, #4]
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	4413      	add	r3, r2
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	440b      	add	r3, r1
 8014d74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014d78:	2201      	movs	r2, #1
 8014d7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8014e3c <USBD_CDC_Init+0x1ec>)
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	f003 020f 	and.w	r2, r3, #15
 8014d84:	6879      	ldr	r1, [r7, #4]
 8014d86:	4613      	mov	r3, r2
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	4413      	add	r3, r2
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	440b      	add	r3, r1
 8014d90:	3326      	adds	r3, #38	@ 0x26
 8014d92:	2210      	movs	r2, #16
 8014d94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d96:	4b29      	ldr	r3, [pc, #164]	@ (8014e3c <USBD_CDC_Init+0x1ec>)
 8014d98:	7819      	ldrb	r1, [r3, #0]
 8014d9a:	2308      	movs	r3, #8
 8014d9c:	2203      	movs	r2, #3
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f002 fb0f 	bl	80173c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014da4:	4b25      	ldr	r3, [pc, #148]	@ (8014e3c <USBD_CDC_Init+0x1ec>)
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	f003 020f 	and.w	r2, r3, #15
 8014dac:	6879      	ldr	r1, [r7, #4]
 8014dae:	4613      	mov	r3, r2
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	4413      	add	r3, r2
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	440b      	add	r3, r1
 8014db8:	3324      	adds	r3, #36	@ 0x24
 8014dba:	2201      	movs	r2, #1
 8014dbc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	33b0      	adds	r3, #176	@ 0xb0
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	4413      	add	r3, r2
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d101      	bne.n	8014df8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014df4:	2302      	movs	r3, #2
 8014df6:	e018      	b.n	8014e2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	7c1b      	ldrb	r3, [r3, #16]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d10a      	bne.n	8014e16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e00:	4b0d      	ldr	r3, [pc, #52]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014e02:	7819      	ldrb	r1, [r3, #0]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014e0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f002 fbc6 	bl	80175a0 <USBD_LL_PrepareReceive>
 8014e14:	e008      	b.n	8014e28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e16:	4b08      	ldr	r3, [pc, #32]	@ (8014e38 <USBD_CDC_Init+0x1e8>)
 8014e18:	7819      	ldrb	r1, [r3, #0]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014e20:	2340      	movs	r3, #64	@ 0x40
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f002 fbbc 	bl	80175a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e28:	2300      	movs	r3, #0
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	240000c3 	.word	0x240000c3
 8014e38:	240000c4 	.word	0x240000c4
 8014e3c:	240000c5 	.word	0x240000c5

08014e40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	460b      	mov	r3, r1
 8014e4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8014f38 <USBD_CDC_DeInit+0xf8>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f002 fadb 	bl	801740e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014e58:	4b37      	ldr	r3, [pc, #220]	@ (8014f38 <USBD_CDC_DeInit+0xf8>)
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	f003 020f 	and.w	r2, r3, #15
 8014e60:	6879      	ldr	r1, [r7, #4]
 8014e62:	4613      	mov	r3, r2
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	4413      	add	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	440b      	add	r3, r1
 8014e6c:	3324      	adds	r3, #36	@ 0x24
 8014e6e:	2200      	movs	r2, #0
 8014e70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014e72:	4b32      	ldr	r3, [pc, #200]	@ (8014f3c <USBD_CDC_DeInit+0xfc>)
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	4619      	mov	r1, r3
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f002 fac8 	bl	801740e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8014f3c <USBD_CDC_DeInit+0xfc>)
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	f003 020f 	and.w	r2, r3, #15
 8014e86:	6879      	ldr	r1, [r7, #4]
 8014e88:	4613      	mov	r3, r2
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	4413      	add	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	440b      	add	r3, r1
 8014e92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014e96:	2200      	movs	r2, #0
 8014e98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014e9a:	4b29      	ldr	r3, [pc, #164]	@ (8014f40 <USBD_CDC_DeInit+0x100>)
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f002 fab4 	bl	801740e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014ea6:	4b26      	ldr	r3, [pc, #152]	@ (8014f40 <USBD_CDC_DeInit+0x100>)
 8014ea8:	781b      	ldrb	r3, [r3, #0]
 8014eaa:	f003 020f 	and.w	r2, r3, #15
 8014eae:	6879      	ldr	r1, [r7, #4]
 8014eb0:	4613      	mov	r3, r2
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	4413      	add	r3, r2
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	440b      	add	r3, r1
 8014eba:	3324      	adds	r3, #36	@ 0x24
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8014f40 <USBD_CDC_DeInit+0x100>)
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	f003 020f 	and.w	r2, r3, #15
 8014ec8:	6879      	ldr	r1, [r7, #4]
 8014eca:	4613      	mov	r3, r2
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	4413      	add	r3, r2
 8014ed0:	009b      	lsls	r3, r3, #2
 8014ed2:	440b      	add	r3, r1
 8014ed4:	3326      	adds	r3, #38	@ 0x26
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	32b0      	adds	r2, #176	@ 0xb0
 8014ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d01f      	beq.n	8014f2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	33b0      	adds	r3, #176	@ 0xb0
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	4413      	add	r3, r2
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	32b0      	adds	r2, #176	@ 0xb0
 8014f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f002 fb88 	bl	8017624 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	32b0      	adds	r2, #176	@ 0xb0
 8014f1e:	2100      	movs	r1, #0
 8014f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2200      	movs	r2, #0
 8014f28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	240000c3 	.word	0x240000c3
 8014f3c:	240000c4 	.word	0x240000c4
 8014f40:	240000c5 	.word	0x240000c5

08014f44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	32b0      	adds	r2, #176	@ 0xb0
 8014f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014f62:	2300      	movs	r3, #0
 8014f64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f66:	2300      	movs	r3, #0
 8014f68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014f70:	2303      	movs	r3, #3
 8014f72:	e0bf      	b.n	80150f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d050      	beq.n	8015022 <USBD_CDC_Setup+0xde>
 8014f80:	2b20      	cmp	r3, #32
 8014f82:	f040 80af 	bne.w	80150e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	88db      	ldrh	r3, [r3, #6]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d03a      	beq.n	8015004 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	b25b      	sxtb	r3, r3
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	da1b      	bge.n	8014fd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	33b0      	adds	r3, #176	@ 0xb0
 8014fa2:	009b      	lsls	r3, r3, #2
 8014fa4:	4413      	add	r3, r2
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	683a      	ldr	r2, [r7, #0]
 8014fac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014fae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fb0:	683a      	ldr	r2, [r7, #0]
 8014fb2:	88d2      	ldrh	r2, [r2, #6]
 8014fb4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	88db      	ldrh	r3, [r3, #6]
 8014fba:	2b07      	cmp	r3, #7
 8014fbc:	bf28      	it	cs
 8014fbe:	2307      	movcs	r3, #7
 8014fc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	89fa      	ldrh	r2, [r7, #14]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f001 fd87 	bl	8016adc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014fce:	e090      	b.n	80150f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	785a      	ldrb	r2, [r3, #1]
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	88db      	ldrh	r3, [r3, #6]
 8014fde:	2b3f      	cmp	r3, #63	@ 0x3f
 8014fe0:	d803      	bhi.n	8014fea <USBD_CDC_Setup+0xa6>
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	88db      	ldrh	r3, [r3, #6]
 8014fe6:	b2da      	uxtb	r2, r3
 8014fe8:	e000      	b.n	8014fec <USBD_CDC_Setup+0xa8>
 8014fea:	2240      	movs	r2, #64	@ 0x40
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014ff2:	6939      	ldr	r1, [r7, #16]
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f001 fd99 	bl	8016b34 <USBD_CtlPrepareRx>
      break;
 8015002:	e076      	b.n	80150f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801500a:	687a      	ldr	r2, [r7, #4]
 801500c:	33b0      	adds	r3, #176	@ 0xb0
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	4413      	add	r3, r2
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	7850      	ldrb	r0, [r2, #1]
 801501a:	2200      	movs	r2, #0
 801501c:	6839      	ldr	r1, [r7, #0]
 801501e:	4798      	blx	r3
      break;
 8015020:	e067      	b.n	80150f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	785b      	ldrb	r3, [r3, #1]
 8015026:	2b0b      	cmp	r3, #11
 8015028:	d851      	bhi.n	80150ce <USBD_CDC_Setup+0x18a>
 801502a:	a201      	add	r2, pc, #4	@ (adr r2, 8015030 <USBD_CDC_Setup+0xec>)
 801502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015030:	08015061 	.word	0x08015061
 8015034:	080150dd 	.word	0x080150dd
 8015038:	080150cf 	.word	0x080150cf
 801503c:	080150cf 	.word	0x080150cf
 8015040:	080150cf 	.word	0x080150cf
 8015044:	080150cf 	.word	0x080150cf
 8015048:	080150cf 	.word	0x080150cf
 801504c:	080150cf 	.word	0x080150cf
 8015050:	080150cf 	.word	0x080150cf
 8015054:	080150cf 	.word	0x080150cf
 8015058:	0801508b 	.word	0x0801508b
 801505c:	080150b5 	.word	0x080150b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015066:	b2db      	uxtb	r3, r3
 8015068:	2b03      	cmp	r3, #3
 801506a:	d107      	bne.n	801507c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801506c:	f107 030a 	add.w	r3, r7, #10
 8015070:	2202      	movs	r2, #2
 8015072:	4619      	mov	r1, r3
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f001 fd31 	bl	8016adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801507a:	e032      	b.n	80150e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801507c:	6839      	ldr	r1, [r7, #0]
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f001 fcbb 	bl	80169fa <USBD_CtlError>
            ret = USBD_FAIL;
 8015084:	2303      	movs	r3, #3
 8015086:	75fb      	strb	r3, [r7, #23]
          break;
 8015088:	e02b      	b.n	80150e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b03      	cmp	r3, #3
 8015094:	d107      	bne.n	80150a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015096:	f107 030d 	add.w	r3, r7, #13
 801509a:	2201      	movs	r2, #1
 801509c:	4619      	mov	r1, r3
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f001 fd1c 	bl	8016adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80150a4:	e01d      	b.n	80150e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80150a6:	6839      	ldr	r1, [r7, #0]
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f001 fca6 	bl	80169fa <USBD_CtlError>
            ret = USBD_FAIL;
 80150ae:	2303      	movs	r3, #3
 80150b0:	75fb      	strb	r3, [r7, #23]
          break;
 80150b2:	e016      	b.n	80150e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b03      	cmp	r3, #3
 80150be:	d00f      	beq.n	80150e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80150c0:	6839      	ldr	r1, [r7, #0]
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f001 fc99 	bl	80169fa <USBD_CtlError>
            ret = USBD_FAIL;
 80150c8:	2303      	movs	r3, #3
 80150ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80150cc:	e008      	b.n	80150e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80150ce:	6839      	ldr	r1, [r7, #0]
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f001 fc92 	bl	80169fa <USBD_CtlError>
          ret = USBD_FAIL;
 80150d6:	2303      	movs	r3, #3
 80150d8:	75fb      	strb	r3, [r7, #23]
          break;
 80150da:	e002      	b.n	80150e2 <USBD_CDC_Setup+0x19e>
          break;
 80150dc:	bf00      	nop
 80150de:	e008      	b.n	80150f2 <USBD_CDC_Setup+0x1ae>
          break;
 80150e0:	bf00      	nop
      }
      break;
 80150e2:	e006      	b.n	80150f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80150e4:	6839      	ldr	r1, [r7, #0]
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f001 fc87 	bl	80169fa <USBD_CtlError>
      ret = USBD_FAIL;
 80150ec:	2303      	movs	r3, #3
 80150ee:	75fb      	strb	r3, [r7, #23]
      break;
 80150f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80150f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3718      	adds	r7, #24
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801510e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	32b0      	adds	r2, #176	@ 0xb0
 801511a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d101      	bne.n	8015126 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015122:	2303      	movs	r3, #3
 8015124:	e065      	b.n	80151f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	32b0      	adds	r2, #176	@ 0xb0
 8015130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015134:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015136:	78fb      	ldrb	r3, [r7, #3]
 8015138:	f003 020f 	and.w	r2, r3, #15
 801513c:	6879      	ldr	r1, [r7, #4]
 801513e:	4613      	mov	r3, r2
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	4413      	add	r3, r2
 8015144:	009b      	lsls	r3, r3, #2
 8015146:	440b      	add	r3, r1
 8015148:	3318      	adds	r3, #24
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d02f      	beq.n	80151b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015150:	78fb      	ldrb	r3, [r7, #3]
 8015152:	f003 020f 	and.w	r2, r3, #15
 8015156:	6879      	ldr	r1, [r7, #4]
 8015158:	4613      	mov	r3, r2
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	4413      	add	r3, r2
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	440b      	add	r3, r1
 8015162:	3318      	adds	r3, #24
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	78fb      	ldrb	r3, [r7, #3]
 8015168:	f003 010f 	and.w	r1, r3, #15
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	460b      	mov	r3, r1
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	440b      	add	r3, r1
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	4403      	add	r3, r0
 8015178:	3344      	adds	r3, #68	@ 0x44
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015180:	fb01 f303 	mul.w	r3, r1, r3
 8015184:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015186:	2b00      	cmp	r3, #0
 8015188:	d112      	bne.n	80151b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801518a:	78fb      	ldrb	r3, [r7, #3]
 801518c:	f003 020f 	and.w	r2, r3, #15
 8015190:	6879      	ldr	r1, [r7, #4]
 8015192:	4613      	mov	r3, r2
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	4413      	add	r3, r2
 8015198:	009b      	lsls	r3, r3, #2
 801519a:	440b      	add	r3, r1
 801519c:	3318      	adds	r3, #24
 801519e:	2200      	movs	r2, #0
 80151a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80151a2:	78f9      	ldrb	r1, [r7, #3]
 80151a4:	2300      	movs	r3, #0
 80151a6:	2200      	movs	r2, #0
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f002 f9d8 	bl	801755e <USBD_LL_Transmit>
 80151ae:	e01f      	b.n	80151f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	33b0      	adds	r3, #176	@ 0xb0
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4413      	add	r3, r2
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	691b      	ldr	r3, [r3, #16]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d010      	beq.n	80151f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	33b0      	adds	r3, #176	@ 0xb0
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	4413      	add	r3, r2
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	691b      	ldr	r3, [r3, #16]
 80151e0:	68ba      	ldr	r2, [r7, #8]
 80151e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80151ec:	78fa      	ldrb	r2, [r7, #3]
 80151ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80151f0:	2300      	movs	r3, #0
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3710      	adds	r7, #16
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}

080151fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151fa:	b580      	push	{r7, lr}
 80151fc:	b084      	sub	sp, #16
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
 8015202:	460b      	mov	r3, r1
 8015204:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	32b0      	adds	r2, #176	@ 0xb0
 8015210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015214:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	32b0      	adds	r2, #176	@ 0xb0
 8015220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d101      	bne.n	801522c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015228:	2303      	movs	r3, #3
 801522a:	e01a      	b.n	8015262 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801522c:	78fb      	ldrb	r3, [r7, #3]
 801522e:	4619      	mov	r1, r3
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f002 f9d6 	bl	80175e2 <USBD_LL_GetRxDataSize>
 8015236:	4602      	mov	r2, r0
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	33b0      	adds	r3, #176	@ 0xb0
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	4413      	add	r3, r2
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	68db      	ldr	r3, [r3, #12]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015256:	68fa      	ldr	r2, [r7, #12]
 8015258:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801525c:	4611      	mov	r1, r2
 801525e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3710      	adds	r7, #16
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801526a:	b580      	push	{r7, lr}
 801526c:	b084      	sub	sp, #16
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	32b0      	adds	r2, #176	@ 0xb0
 801527c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015280:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d101      	bne.n	801528c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015288:	2303      	movs	r3, #3
 801528a:	e024      	b.n	80152d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	33b0      	adds	r3, #176	@ 0xb0
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	4413      	add	r3, r2
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d019      	beq.n	80152d4 <USBD_CDC_EP0_RxReady+0x6a>
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80152a6:	2bff      	cmp	r3, #255	@ 0xff
 80152a8:	d014      	beq.n	80152d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	33b0      	adds	r3, #176	@ 0xb0
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	4413      	add	r3, r2
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	689b      	ldr	r3, [r3, #8]
 80152bc:	68fa      	ldr	r2, [r7, #12]
 80152be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80152c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80152ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	22ff      	movs	r2, #255	@ 0xff
 80152d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
	...

080152e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b086      	sub	sp, #24
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152e8:	2182      	movs	r1, #130	@ 0x82
 80152ea:	4818      	ldr	r0, [pc, #96]	@ (801534c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152ec:	f000 fd4f 	bl	8015d8e <USBD_GetEpDesc>
 80152f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152f2:	2101      	movs	r1, #1
 80152f4:	4815      	ldr	r0, [pc, #84]	@ (801534c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152f6:	f000 fd4a 	bl	8015d8e <USBD_GetEpDesc>
 80152fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80152fc:	2181      	movs	r1, #129	@ 0x81
 80152fe:	4813      	ldr	r0, [pc, #76]	@ (801534c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015300:	f000 fd45 	bl	8015d8e <USBD_GetEpDesc>
 8015304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d002      	beq.n	8015312 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	2210      	movs	r2, #16
 8015310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d006      	beq.n	8015326 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	2200      	movs	r2, #0
 801531c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015320:	711a      	strb	r2, [r3, #4]
 8015322:	2200      	movs	r2, #0
 8015324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d006      	beq.n	801533a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2200      	movs	r2, #0
 8015330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015334:	711a      	strb	r2, [r3, #4]
 8015336:	2200      	movs	r2, #0
 8015338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2243      	movs	r2, #67	@ 0x43
 801533e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015340:	4b02      	ldr	r3, [pc, #8]	@ (801534c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015342:	4618      	mov	r0, r3
 8015344:	3718      	adds	r7, #24
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	24000080 	.word	0x24000080

08015350 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b086      	sub	sp, #24
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015358:	2182      	movs	r1, #130	@ 0x82
 801535a:	4818      	ldr	r0, [pc, #96]	@ (80153bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801535c:	f000 fd17 	bl	8015d8e <USBD_GetEpDesc>
 8015360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015362:	2101      	movs	r1, #1
 8015364:	4815      	ldr	r0, [pc, #84]	@ (80153bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015366:	f000 fd12 	bl	8015d8e <USBD_GetEpDesc>
 801536a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801536c:	2181      	movs	r1, #129	@ 0x81
 801536e:	4813      	ldr	r0, [pc, #76]	@ (80153bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015370:	f000 fd0d 	bl	8015d8e <USBD_GetEpDesc>
 8015374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d002      	beq.n	8015382 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	2210      	movs	r2, #16
 8015380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d006      	beq.n	8015396 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	2200      	movs	r2, #0
 801538c:	711a      	strb	r2, [r3, #4]
 801538e:	2200      	movs	r2, #0
 8015390:	f042 0202 	orr.w	r2, r2, #2
 8015394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d006      	beq.n	80153aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	711a      	strb	r2, [r3, #4]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f042 0202 	orr.w	r2, r2, #2
 80153a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2243      	movs	r2, #67	@ 0x43
 80153ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153b0:	4b02      	ldr	r3, [pc, #8]	@ (80153bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3718      	adds	r7, #24
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	24000080 	.word	0x24000080

080153c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b086      	sub	sp, #24
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80153c8:	2182      	movs	r1, #130	@ 0x82
 80153ca:	4818      	ldr	r0, [pc, #96]	@ (801542c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153cc:	f000 fcdf 	bl	8015d8e <USBD_GetEpDesc>
 80153d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153d2:	2101      	movs	r1, #1
 80153d4:	4815      	ldr	r0, [pc, #84]	@ (801542c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153d6:	f000 fcda 	bl	8015d8e <USBD_GetEpDesc>
 80153da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153dc:	2181      	movs	r1, #129	@ 0x81
 80153de:	4813      	ldr	r0, [pc, #76]	@ (801542c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153e0:	f000 fcd5 	bl	8015d8e <USBD_GetEpDesc>
 80153e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d002      	beq.n	80153f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	2210      	movs	r2, #16
 80153f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d006      	beq.n	8015406 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015400:	711a      	strb	r2, [r3, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d006      	beq.n	801541a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2200      	movs	r2, #0
 8015410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015414:	711a      	strb	r2, [r3, #4]
 8015416:	2200      	movs	r2, #0
 8015418:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2243      	movs	r2, #67	@ 0x43
 801541e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015420:	4b02      	ldr	r3, [pc, #8]	@ (801542c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015422:	4618      	mov	r0, r3
 8015424:	3718      	adds	r7, #24
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	24000080 	.word	0x24000080

08015430 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	220a      	movs	r2, #10
 801543c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801543e:	4b03      	ldr	r3, [pc, #12]	@ (801544c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015440:	4618      	mov	r0, r3
 8015442:	370c      	adds	r7, #12
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr
 801544c:	2400003c 	.word	0x2400003c

08015450 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015450:	b480      	push	{r7}
 8015452:	b083      	sub	sp, #12
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d101      	bne.n	8015464 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015460:	2303      	movs	r3, #3
 8015462:	e009      	b.n	8015478 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	33b0      	adds	r3, #176	@ 0xb0
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	4413      	add	r3, r2
 8015472:	683a      	ldr	r2, [r7, #0]
 8015474:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015476:	2300      	movs	r3, #0
}
 8015478:	4618      	mov	r0, r3
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015484:	b480      	push	{r7}
 8015486:	b087      	sub	sp, #28
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	32b0      	adds	r2, #176	@ 0xb0
 801549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801549e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d101      	bne.n	80154aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80154a6:	2303      	movs	r3, #3
 80154a8:	e008      	b.n	80154bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80154ba:	2300      	movs	r3, #0
}
 80154bc:	4618      	mov	r0, r3
 80154be:	371c      	adds	r7, #28
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr

080154c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	32b0      	adds	r2, #176	@ 0xb0
 80154dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d101      	bne.n	80154ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80154e8:	2303      	movs	r3, #3
 80154ea:	e004      	b.n	80154f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80154f4:	2300      	movs	r3, #0
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3714      	adds	r7, #20
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr
	...

08015504 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b084      	sub	sp, #16
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	32b0      	adds	r2, #176	@ 0xb0
 8015516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801551a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801551c:	2301      	movs	r3, #1
 801551e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d101      	bne.n	801552a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015526:	2303      	movs	r3, #3
 8015528:	e025      	b.n	8015576 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015530:	2b00      	cmp	r3, #0
 8015532:	d11f      	bne.n	8015574 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	2201      	movs	r2, #1
 8015538:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801553c:	4b10      	ldr	r3, [pc, #64]	@ (8015580 <USBD_CDC_TransmitPacket+0x7c>)
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	f003 020f 	and.w	r2, r3, #15
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801554a:	6878      	ldr	r0, [r7, #4]
 801554c:	4613      	mov	r3, r2
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	4413      	add	r3, r2
 8015552:	009b      	lsls	r3, r3, #2
 8015554:	4403      	add	r3, r0
 8015556:	3318      	adds	r3, #24
 8015558:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801555a:	4b09      	ldr	r3, [pc, #36]	@ (8015580 <USBD_CDC_TransmitPacket+0x7c>)
 801555c:	7819      	ldrb	r1, [r3, #0]
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f001 fff7 	bl	801755e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015570:	2300      	movs	r3, #0
 8015572:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015574:	7bfb      	ldrb	r3, [r7, #15]
}
 8015576:	4618      	mov	r0, r3
 8015578:	3710      	adds	r7, #16
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
 801557e:	bf00      	nop
 8015580:	240000c3 	.word	0x240000c3

08015584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	32b0      	adds	r2, #176	@ 0xb0
 8015596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801559a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	32b0      	adds	r2, #176	@ 0xb0
 80155a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d101      	bne.n	80155b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80155ae:	2303      	movs	r3, #3
 80155b0:	e018      	b.n	80155e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	7c1b      	ldrb	r3, [r3, #16]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d10a      	bne.n	80155d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155ba:	4b0c      	ldr	r3, [pc, #48]	@ (80155ec <USBD_CDC_ReceivePacket+0x68>)
 80155bc:	7819      	ldrb	r1, [r3, #0]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80155c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f001 ffe9 	bl	80175a0 <USBD_LL_PrepareReceive>
 80155ce:	e008      	b.n	80155e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155d0:	4b06      	ldr	r3, [pc, #24]	@ (80155ec <USBD_CDC_ReceivePacket+0x68>)
 80155d2:	7819      	ldrb	r1, [r3, #0]
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80155da:	2340      	movs	r3, #64	@ 0x40
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f001 ffdf 	bl	80175a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155e2:	2300      	movs	r3, #0
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3710      	adds	r7, #16
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	240000c4 	.word	0x240000c4

080155f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b086      	sub	sp, #24
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	4613      	mov	r3, r2
 80155fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d101      	bne.n	8015608 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015604:	2303      	movs	r3, #3
 8015606:	e01f      	b.n	8015648 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2200      	movs	r2, #0
 801560c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2200      	movs	r2, #0
 801561c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d003      	beq.n	801562e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	68ba      	ldr	r2, [r7, #8]
 801562a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2201      	movs	r2, #1
 8015632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	79fa      	ldrb	r2, [r7, #7]
 801563a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f001 fe55 	bl	80172ec <USBD_LL_Init>
 8015642:	4603      	mov	r3, r0
 8015644:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015646:	7dfb      	ldrb	r3, [r7, #23]
}
 8015648:	4618      	mov	r0, r3
 801564a:	3718      	adds	r7, #24
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801565a:	2300      	movs	r3, #0
 801565c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d101      	bne.n	8015668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015664:	2303      	movs	r3, #3
 8015666:	e025      	b.n	80156b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	32ae      	adds	r2, #174	@ 0xae
 801567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015680:	2b00      	cmp	r3, #0
 8015682:	d00f      	beq.n	80156a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	32ae      	adds	r2, #174	@ 0xae
 801568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015694:	f107 020e 	add.w	r2, r7, #14
 8015698:	4610      	mov	r0, r2
 801569a:	4798      	blx	r3
 801569c:	4602      	mov	r2, r0
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80156aa:	1c5a      	adds	r2, r3, #1
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3710      	adds	r7, #16
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f001 fe61 	bl	801738c <USBD_LL_Start>
 80156ca:	4603      	mov	r3, r0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80156de:	4618      	mov	r0, r3
 80156e0:	370c      	adds	r7, #12
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156ea:	b580      	push	{r7, lr}
 80156ec:	b084      	sub	sp, #16
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
 80156f2:	460b      	mov	r3, r1
 80156f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80156f6:	2300      	movs	r3, #0
 80156f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015700:	2b00      	cmp	r3, #0
 8015702:	d009      	beq.n	8015718 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	78fa      	ldrb	r2, [r7, #3]
 801570e:	4611      	mov	r1, r2
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	4798      	blx	r3
 8015714:	4603      	mov	r3, r0
 8015716:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015718:	7bfb      	ldrb	r3, [r7, #15]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
 801572a:	460b      	mov	r3, r1
 801572c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	78fa      	ldrb	r2, [r7, #3]
 801573c:	4611      	mov	r1, r2
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	4798      	blx	r3
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d001      	beq.n	801574c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015748:	2303      	movs	r3, #3
 801574a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801574c:	7bfb      	ldrb	r3, [r7, #15]
}
 801574e:	4618      	mov	r0, r3
 8015750:	3710      	adds	r7, #16
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}

08015756 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015756:	b580      	push	{r7, lr}
 8015758:	b084      	sub	sp, #16
 801575a:	af00      	add	r7, sp, #0
 801575c:	6078      	str	r0, [r7, #4]
 801575e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015766:	6839      	ldr	r1, [r7, #0]
 8015768:	4618      	mov	r0, r3
 801576a:	f001 f90c 	bl	8016986 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2201      	movs	r2, #1
 8015772:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801577c:	461a      	mov	r2, r3
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801578a:	f003 031f 	and.w	r3, r3, #31
 801578e:	2b02      	cmp	r3, #2
 8015790:	d01a      	beq.n	80157c8 <USBD_LL_SetupStage+0x72>
 8015792:	2b02      	cmp	r3, #2
 8015794:	d822      	bhi.n	80157dc <USBD_LL_SetupStage+0x86>
 8015796:	2b00      	cmp	r3, #0
 8015798:	d002      	beq.n	80157a0 <USBD_LL_SetupStage+0x4a>
 801579a:	2b01      	cmp	r3, #1
 801579c:	d00a      	beq.n	80157b4 <USBD_LL_SetupStage+0x5e>
 801579e:	e01d      	b.n	80157dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80157a6:	4619      	mov	r1, r3
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f000 fb63 	bl	8015e74 <USBD_StdDevReq>
 80157ae:	4603      	mov	r3, r0
 80157b0:	73fb      	strb	r3, [r7, #15]
      break;
 80157b2:	e020      	b.n	80157f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80157ba:	4619      	mov	r1, r3
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f000 fbcb 	bl	8015f58 <USBD_StdItfReq>
 80157c2:	4603      	mov	r3, r0
 80157c4:	73fb      	strb	r3, [r7, #15]
      break;
 80157c6:	e016      	b.n	80157f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80157ce:	4619      	mov	r1, r3
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 fc2d 	bl	8016030 <USBD_StdEPReq>
 80157d6:	4603      	mov	r3, r0
 80157d8:	73fb      	strb	r3, [r7, #15]
      break;
 80157da:	e00c      	b.n	80157f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80157e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	4619      	mov	r1, r3
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f001 fe2e 	bl	801744c <USBD_LL_StallEP>
 80157f0:	4603      	mov	r3, r0
 80157f2:	73fb      	strb	r3, [r7, #15]
      break;
 80157f4:	bf00      	nop
  }

  return ret;
 80157f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3710      	adds	r7, #16
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b086      	sub	sp, #24
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	460b      	mov	r3, r1
 801580a:	607a      	str	r2, [r7, #4]
 801580c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801580e:	2300      	movs	r3, #0
 8015810:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015812:	7afb      	ldrb	r3, [r7, #11]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d16e      	bne.n	80158f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801581e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015826:	2b03      	cmp	r3, #3
 8015828:	f040 8098 	bne.w	801595c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	689a      	ldr	r2, [r3, #8]
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	429a      	cmp	r2, r3
 8015836:	d913      	bls.n	8015860 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	689a      	ldr	r2, [r3, #8]
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	1ad2      	subs	r2, r2, r3
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	68da      	ldr	r2, [r3, #12]
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	689b      	ldr	r3, [r3, #8]
 801584e:	4293      	cmp	r3, r2
 8015850:	bf28      	it	cs
 8015852:	4613      	movcs	r3, r2
 8015854:	461a      	mov	r2, r3
 8015856:	6879      	ldr	r1, [r7, #4]
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	f001 f988 	bl	8016b6e <USBD_CtlContinueRx>
 801585e:	e07d      	b.n	801595c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015866:	f003 031f 	and.w	r3, r3, #31
 801586a:	2b02      	cmp	r3, #2
 801586c:	d014      	beq.n	8015898 <USBD_LL_DataOutStage+0x98>
 801586e:	2b02      	cmp	r3, #2
 8015870:	d81d      	bhi.n	80158ae <USBD_LL_DataOutStage+0xae>
 8015872:	2b00      	cmp	r3, #0
 8015874:	d002      	beq.n	801587c <USBD_LL_DataOutStage+0x7c>
 8015876:	2b01      	cmp	r3, #1
 8015878:	d003      	beq.n	8015882 <USBD_LL_DataOutStage+0x82>
 801587a:	e018      	b.n	80158ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801587c:	2300      	movs	r3, #0
 801587e:	75bb      	strb	r3, [r7, #22]
            break;
 8015880:	e018      	b.n	80158b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015888:	b2db      	uxtb	r3, r3
 801588a:	4619      	mov	r1, r3
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f000 fa64 	bl	8015d5a <USBD_CoreFindIF>
 8015892:	4603      	mov	r3, r0
 8015894:	75bb      	strb	r3, [r7, #22]
            break;
 8015896:	e00d      	b.n	80158b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	4619      	mov	r1, r3
 80158a2:	68f8      	ldr	r0, [r7, #12]
 80158a4:	f000 fa66 	bl	8015d74 <USBD_CoreFindEP>
 80158a8:	4603      	mov	r3, r0
 80158aa:	75bb      	strb	r3, [r7, #22]
            break;
 80158ac:	e002      	b.n	80158b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80158ae:	2300      	movs	r3, #0
 80158b0:	75bb      	strb	r3, [r7, #22]
            break;
 80158b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80158b4:	7dbb      	ldrb	r3, [r7, #22]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d119      	bne.n	80158ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	2b03      	cmp	r3, #3
 80158c4:	d113      	bne.n	80158ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80158c6:	7dba      	ldrb	r2, [r7, #22]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	32ae      	adds	r2, #174	@ 0xae
 80158cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00b      	beq.n	80158ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80158d6:	7dba      	ldrb	r2, [r7, #22]
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80158de:	7dba      	ldrb	r2, [r7, #22]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	32ae      	adds	r2, #174	@ 0xae
 80158e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158e8:	691b      	ldr	r3, [r3, #16]
 80158ea:	68f8      	ldr	r0, [r7, #12]
 80158ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f001 f94e 	bl	8016b90 <USBD_CtlSendStatus>
 80158f4:	e032      	b.n	801595c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80158f6:	7afb      	ldrb	r3, [r7, #11]
 80158f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	4619      	mov	r1, r3
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 fa37 	bl	8015d74 <USBD_CoreFindEP>
 8015906:	4603      	mov	r3, r0
 8015908:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801590a:	7dbb      	ldrb	r3, [r7, #22]
 801590c:	2bff      	cmp	r3, #255	@ 0xff
 801590e:	d025      	beq.n	801595c <USBD_LL_DataOutStage+0x15c>
 8015910:	7dbb      	ldrb	r3, [r7, #22]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d122      	bne.n	801595c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801591c:	b2db      	uxtb	r3, r3
 801591e:	2b03      	cmp	r3, #3
 8015920:	d117      	bne.n	8015952 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015922:	7dba      	ldrb	r2, [r7, #22]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	32ae      	adds	r2, #174	@ 0xae
 8015928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801592c:	699b      	ldr	r3, [r3, #24]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d00f      	beq.n	8015952 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015932:	7dba      	ldrb	r2, [r7, #22]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801593a:	7dba      	ldrb	r2, [r7, #22]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	32ae      	adds	r2, #174	@ 0xae
 8015940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015944:	699b      	ldr	r3, [r3, #24]
 8015946:	7afa      	ldrb	r2, [r7, #11]
 8015948:	4611      	mov	r1, r2
 801594a:	68f8      	ldr	r0, [r7, #12]
 801594c:	4798      	blx	r3
 801594e:	4603      	mov	r3, r0
 8015950:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015952:	7dfb      	ldrb	r3, [r7, #23]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d001      	beq.n	801595c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015958:	7dfb      	ldrb	r3, [r7, #23]
 801595a:	e000      	b.n	801595e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801595c:	2300      	movs	r3, #0
}
 801595e:	4618      	mov	r0, r3
 8015960:	3718      	adds	r7, #24
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015966:	b580      	push	{r7, lr}
 8015968:	b086      	sub	sp, #24
 801596a:	af00      	add	r7, sp, #0
 801596c:	60f8      	str	r0, [r7, #12]
 801596e:	460b      	mov	r3, r1
 8015970:	607a      	str	r2, [r7, #4]
 8015972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015974:	7afb      	ldrb	r3, [r7, #11]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d16f      	bne.n	8015a5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	3314      	adds	r3, #20
 801597e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015986:	2b02      	cmp	r3, #2
 8015988:	d15a      	bne.n	8015a40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	689a      	ldr	r2, [r3, #8]
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	429a      	cmp	r2, r3
 8015994:	d914      	bls.n	80159c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	689a      	ldr	r2, [r3, #8]
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	68db      	ldr	r3, [r3, #12]
 801599e:	1ad2      	subs	r2, r2, r3
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	689b      	ldr	r3, [r3, #8]
 80159a8:	461a      	mov	r2, r3
 80159aa:	6879      	ldr	r1, [r7, #4]
 80159ac:	68f8      	ldr	r0, [r7, #12]
 80159ae:	f001 f8b0 	bl	8016b12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159b2:	2300      	movs	r3, #0
 80159b4:	2200      	movs	r2, #0
 80159b6:	2100      	movs	r1, #0
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f001 fdf1 	bl	80175a0 <USBD_LL_PrepareReceive>
 80159be:	e03f      	b.n	8015a40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	68da      	ldr	r2, [r3, #12]
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	689b      	ldr	r3, [r3, #8]
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d11c      	bne.n	8015a06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	685a      	ldr	r2, [r3, #4]
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d316      	bcc.n	8015a06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	685a      	ldr	r2, [r3, #4]
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d20f      	bcs.n	8015a06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80159e6:	2200      	movs	r2, #0
 80159e8:	2100      	movs	r1, #0
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f001 f891 	bl	8016b12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2200      	movs	r2, #0
 80159f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159f8:	2300      	movs	r3, #0
 80159fa:	2200      	movs	r2, #0
 80159fc:	2100      	movs	r1, #0
 80159fe:	68f8      	ldr	r0, [r7, #12]
 8015a00:	f001 fdce 	bl	80175a0 <USBD_LL_PrepareReceive>
 8015a04:	e01c      	b.n	8015a40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	d10f      	bne.n	8015a32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a18:	68db      	ldr	r3, [r3, #12]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d009      	beq.n	8015a32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2200      	movs	r2, #0
 8015a22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a2c:	68db      	ldr	r3, [r3, #12]
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a32:	2180      	movs	r1, #128	@ 0x80
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	f001 fd09 	bl	801744c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015a3a:	68f8      	ldr	r0, [r7, #12]
 8015a3c:	f001 f8bb 	bl	8016bb6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d03a      	beq.n	8015ac0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	f7ff fe42 	bl	80156d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2200      	movs	r2, #0
 8015a54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8015a58:	e032      	b.n	8015ac0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015a5a:	7afb      	ldrb	r3, [r7, #11]
 8015a5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	4619      	mov	r1, r3
 8015a64:	68f8      	ldr	r0, [r7, #12]
 8015a66:	f000 f985 	bl	8015d74 <USBD_CoreFindEP>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	2bff      	cmp	r3, #255	@ 0xff
 8015a72:	d025      	beq.n	8015ac0 <USBD_LL_DataInStage+0x15a>
 8015a74:	7dfb      	ldrb	r3, [r7, #23]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d122      	bne.n	8015ac0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b03      	cmp	r3, #3
 8015a84:	d11c      	bne.n	8015ac0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015a86:	7dfa      	ldrb	r2, [r7, #23]
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	32ae      	adds	r2, #174	@ 0xae
 8015a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a90:	695b      	ldr	r3, [r3, #20]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d014      	beq.n	8015ac0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015a96:	7dfa      	ldrb	r2, [r7, #23]
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a9e:	7dfa      	ldrb	r2, [r7, #23]
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	32ae      	adds	r2, #174	@ 0xae
 8015aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aa8:	695b      	ldr	r3, [r3, #20]
 8015aaa:	7afa      	ldrb	r2, [r7, #11]
 8015aac:	4611      	mov	r1, r2
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	4798      	blx	r3
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015ab6:	7dbb      	ldrb	r3, [r7, #22]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d001      	beq.n	8015ac0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015abc:	7dbb      	ldrb	r3, [r7, #22]
 8015abe:	e000      	b.n	8015ac2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015ac0:	2300      	movs	r3, #0
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3718      	adds	r7, #24
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}

08015aca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b084      	sub	sp, #16
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2201      	movs	r2, #1
 8015ada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2200      	movs	r2, #0
 8015af0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2200      	movs	r2, #0
 8015af8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d014      	beq.n	8015b30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00e      	beq.n	8015b30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	6852      	ldr	r2, [r2, #4]
 8015b1e:	b2d2      	uxtb	r2, r2
 8015b20:	4611      	mov	r1, r2
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	4798      	blx	r3
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d001      	beq.n	8015b30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015b2c:	2303      	movs	r3, #3
 8015b2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b30:	2340      	movs	r3, #64	@ 0x40
 8015b32:	2200      	movs	r2, #0
 8015b34:	2100      	movs	r1, #0
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f001 fc43 	bl	80173c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2240      	movs	r2, #64	@ 0x40
 8015b48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b4c:	2340      	movs	r3, #64	@ 0x40
 8015b4e:	2200      	movs	r2, #0
 8015b50:	2180      	movs	r1, #128	@ 0x80
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f001 fc35 	bl	80173c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2240      	movs	r2, #64	@ 0x40
 8015b62:	621a      	str	r2, [r3, #32]

  return ret;
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b6e:	b480      	push	{r7}
 8015b70:	b083      	sub	sp, #12
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	460b      	mov	r3, r1
 8015b78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	78fa      	ldrb	r2, [r7, #3]
 8015b7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	370c      	adds	r7, #12
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr

08015b8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b8e:	b480      	push	{r7}
 8015b90:	b083      	sub	sp, #12
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	2b04      	cmp	r3, #4
 8015ba0:	d006      	beq.n	8015bb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2204      	movs	r2, #4
 8015bb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015bb8:	2300      	movs	r3, #0
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	370c      	adds	r7, #12
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr

08015bc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bc6:	b480      	push	{r7}
 8015bc8:	b083      	sub	sp, #12
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	2b04      	cmp	r3, #4
 8015bd8:	d106      	bne.n	8015be8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015be8:	2300      	movs	r3, #0
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b082      	sub	sp, #8
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	2b03      	cmp	r3, #3
 8015c08:	d110      	bne.n	8015c2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00b      	beq.n	8015c2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c1a:	69db      	ldr	r3, [r3, #28]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d005      	beq.n	8015c2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c26:	69db      	ldr	r3, [r3, #28]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3708      	adds	r7, #8
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
 8015c3e:	460b      	mov	r3, r1
 8015c40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	32ae      	adds	r2, #174	@ 0xae
 8015c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c54:	2303      	movs	r3, #3
 8015c56:	e01c      	b.n	8015c92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	d115      	bne.n	8015c90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	32ae      	adds	r2, #174	@ 0xae
 8015c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c72:	6a1b      	ldr	r3, [r3, #32]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00b      	beq.n	8015c90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	32ae      	adds	r2, #174	@ 0xae
 8015c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c86:	6a1b      	ldr	r3, [r3, #32]
 8015c88:	78fa      	ldrb	r2, [r7, #3]
 8015c8a:	4611      	mov	r1, r2
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c90:	2300      	movs	r3, #0
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3708      	adds	r7, #8
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}

08015c9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c9a:	b580      	push	{r7, lr}
 8015c9c:	b082      	sub	sp, #8
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	32ae      	adds	r2, #174	@ 0xae
 8015cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d101      	bne.n	8015cbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015cb8:	2303      	movs	r3, #3
 8015cba:	e01c      	b.n	8015cf6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	2b03      	cmp	r3, #3
 8015cc6:	d115      	bne.n	8015cf4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	32ae      	adds	r2, #174	@ 0xae
 8015cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d00b      	beq.n	8015cf4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	32ae      	adds	r2, #174	@ 0xae
 8015ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cec:	78fa      	ldrb	r2, [r7, #3]
 8015cee:	4611      	mov	r1, r2
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015cf4:	2300      	movs	r3, #0
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015cfe:	b480      	push	{r7}
 8015d00:	b083      	sub	sp, #12
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015d06:	2300      	movs	r3, #0
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	370c      	adds	r7, #12
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d12:	4770      	bx	lr

08015d14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b084      	sub	sp, #16
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d00e      	beq.n	8015d50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	687a      	ldr	r2, [r7, #4]
 8015d3c:	6852      	ldr	r2, [r2, #4]
 8015d3e:	b2d2      	uxtb	r2, r2
 8015d40:	4611      	mov	r1, r2
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	4798      	blx	r3
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d001      	beq.n	8015d50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015d4c:	2303      	movs	r3, #3
 8015d4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3710      	adds	r7, #16
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}

08015d5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d5a:	b480      	push	{r7}
 8015d5c:	b083      	sub	sp, #12
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	6078      	str	r0, [r7, #4]
 8015d62:	460b      	mov	r3, r1
 8015d64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	370c      	adds	r7, #12
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d72:	4770      	bx	lr

08015d74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	460b      	mov	r3, r1
 8015d7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	370c      	adds	r7, #12
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr

08015d8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b086      	sub	sp, #24
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
 8015d96:	460b      	mov	r3, r1
 8015d98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015da2:	2300      	movs	r3, #0
 8015da4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	885b      	ldrh	r3, [r3, #2]
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	68fa      	ldr	r2, [r7, #12]
 8015dae:	7812      	ldrb	r2, [r2, #0]
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d91f      	bls.n	8015df4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015dba:	e013      	b.n	8015de4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015dbc:	f107 030a 	add.w	r3, r7, #10
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	6978      	ldr	r0, [r7, #20]
 8015dc4:	f000 f81b 	bl	8015dfe <USBD_GetNextDesc>
 8015dc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	785b      	ldrb	r3, [r3, #1]
 8015dce:	2b05      	cmp	r3, #5
 8015dd0:	d108      	bne.n	8015de4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	789b      	ldrb	r3, [r3, #2]
 8015dda:	78fa      	ldrb	r2, [r7, #3]
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d008      	beq.n	8015df2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015de0:	2300      	movs	r3, #0
 8015de2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	885b      	ldrh	r3, [r3, #2]
 8015de8:	b29a      	uxth	r2, r3
 8015dea:	897b      	ldrh	r3, [r7, #10]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d8e5      	bhi.n	8015dbc <USBD_GetEpDesc+0x2e>
 8015df0:	e000      	b.n	8015df4 <USBD_GetEpDesc+0x66>
          break;
 8015df2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015df4:	693b      	ldr	r3, [r7, #16]
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3718      	adds	r7, #24
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015dfe:	b480      	push	{r7}
 8015e00:	b085      	sub	sp, #20
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	6078      	str	r0, [r7, #4]
 8015e06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	881b      	ldrh	r3, [r3, #0]
 8015e10:	68fa      	ldr	r2, [r7, #12]
 8015e12:	7812      	ldrb	r2, [r2, #0]
 8015e14:	4413      	add	r3, r2
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	781b      	ldrb	r3, [r3, #0]
 8015e20:	461a      	mov	r2, r3
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4413      	add	r3, r2
 8015e26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015e28:	68fb      	ldr	r3, [r7, #12]
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	3714      	adds	r7, #20
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e34:	4770      	bx	lr

08015e36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015e36:	b480      	push	{r7}
 8015e38:	b087      	sub	sp, #28
 8015e3a:	af00      	add	r7, sp, #0
 8015e3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015e54:	8a3b      	ldrh	r3, [r7, #16]
 8015e56:	021b      	lsls	r3, r3, #8
 8015e58:	b21a      	sxth	r2, r3
 8015e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	b21b      	sxth	r3, r3
 8015e62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015e64:	89fb      	ldrh	r3, [r7, #14]
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	371c      	adds	r7, #28
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr
	...

08015e74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015e8a:	2b40      	cmp	r3, #64	@ 0x40
 8015e8c:	d005      	beq.n	8015e9a <USBD_StdDevReq+0x26>
 8015e8e:	2b40      	cmp	r3, #64	@ 0x40
 8015e90:	d857      	bhi.n	8015f42 <USBD_StdDevReq+0xce>
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d00f      	beq.n	8015eb6 <USBD_StdDevReq+0x42>
 8015e96:	2b20      	cmp	r3, #32
 8015e98:	d153      	bne.n	8015f42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	32ae      	adds	r2, #174	@ 0xae
 8015ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ea8:	689b      	ldr	r3, [r3, #8]
 8015eaa:	6839      	ldr	r1, [r7, #0]
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	4798      	blx	r3
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8015eb4:	e04a      	b.n	8015f4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	785b      	ldrb	r3, [r3, #1]
 8015eba:	2b09      	cmp	r3, #9
 8015ebc:	d83b      	bhi.n	8015f36 <USBD_StdDevReq+0xc2>
 8015ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8015ec4 <USBD_StdDevReq+0x50>)
 8015ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ec4:	08015f19 	.word	0x08015f19
 8015ec8:	08015f2d 	.word	0x08015f2d
 8015ecc:	08015f37 	.word	0x08015f37
 8015ed0:	08015f23 	.word	0x08015f23
 8015ed4:	08015f37 	.word	0x08015f37
 8015ed8:	08015ef7 	.word	0x08015ef7
 8015edc:	08015eed 	.word	0x08015eed
 8015ee0:	08015f37 	.word	0x08015f37
 8015ee4:	08015f0f 	.word	0x08015f0f
 8015ee8:	08015f01 	.word	0x08015f01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015eec:	6839      	ldr	r1, [r7, #0]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f000 fa3c 	bl	801636c <USBD_GetDescriptor>
          break;
 8015ef4:	e024      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015ef6:	6839      	ldr	r1, [r7, #0]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fba1 	bl	8016640 <USBD_SetAddress>
          break;
 8015efe:	e01f      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fbe0 	bl	80166c8 <USBD_SetConfig>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	73fb      	strb	r3, [r7, #15]
          break;
 8015f0c:	e018      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fc83 	bl	801681c <USBD_GetConfig>
          break;
 8015f16:	e013      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 fcb4 	bl	8016888 <USBD_GetStatus>
          break;
 8015f20:	e00e      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f22:	6839      	ldr	r1, [r7, #0]
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f000 fce3 	bl	80168f0 <USBD_SetFeature>
          break;
 8015f2a:	e009      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015f2c:	6839      	ldr	r1, [r7, #0]
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f000 fd07 	bl	8016942 <USBD_ClrFeature>
          break;
 8015f34:	e004      	b.n	8015f40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015f36:	6839      	ldr	r1, [r7, #0]
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 fd5e 	bl	80169fa <USBD_CtlError>
          break;
 8015f3e:	bf00      	nop
      }
      break;
 8015f40:	e004      	b.n	8015f4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 fd58 	bl	80169fa <USBD_CtlError>
      break;
 8015f4a:	bf00      	nop
  }

  return ret;
 8015f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop

08015f58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b084      	sub	sp, #16
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f62:	2300      	movs	r3, #0
 8015f64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015f6e:	2b40      	cmp	r3, #64	@ 0x40
 8015f70:	d005      	beq.n	8015f7e <USBD_StdItfReq+0x26>
 8015f72:	2b40      	cmp	r3, #64	@ 0x40
 8015f74:	d852      	bhi.n	801601c <USBD_StdItfReq+0xc4>
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d001      	beq.n	8015f7e <USBD_StdItfReq+0x26>
 8015f7a:	2b20      	cmp	r3, #32
 8015f7c:	d14e      	bne.n	801601c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	3b01      	subs	r3, #1
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d840      	bhi.n	801600e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	889b      	ldrh	r3, [r3, #4]
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d836      	bhi.n	8016004 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	889b      	ldrh	r3, [r3, #4]
 8015f9a:	b2db      	uxtb	r3, r3
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7ff fedb 	bl	8015d5a <USBD_CoreFindIF>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015fa8:	7bbb      	ldrb	r3, [r7, #14]
 8015faa:	2bff      	cmp	r3, #255	@ 0xff
 8015fac:	d01d      	beq.n	8015fea <USBD_StdItfReq+0x92>
 8015fae:	7bbb      	ldrb	r3, [r7, #14]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d11a      	bne.n	8015fea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015fb4:	7bba      	ldrb	r2, [r7, #14]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	32ae      	adds	r2, #174	@ 0xae
 8015fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d00f      	beq.n	8015fe4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015fc4:	7bba      	ldrb	r2, [r7, #14]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015fcc:	7bba      	ldrb	r2, [r7, #14]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	32ae      	adds	r2, #174	@ 0xae
 8015fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd6:	689b      	ldr	r3, [r3, #8]
 8015fd8:	6839      	ldr	r1, [r7, #0]
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	4798      	blx	r3
 8015fde:	4603      	mov	r3, r0
 8015fe0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fe2:	e004      	b.n	8015fee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015fe4:	2303      	movs	r3, #3
 8015fe6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fe8:	e001      	b.n	8015fee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015fea:	2303      	movs	r3, #3
 8015fec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	88db      	ldrh	r3, [r3, #6]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d110      	bne.n	8016018 <USBD_StdItfReq+0xc0>
 8015ff6:	7bfb      	ldrb	r3, [r7, #15]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10d      	bne.n	8016018 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f000 fdc7 	bl	8016b90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016002:	e009      	b.n	8016018 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016004:	6839      	ldr	r1, [r7, #0]
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 fcf7 	bl	80169fa <USBD_CtlError>
          break;
 801600c:	e004      	b.n	8016018 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 fcf2 	bl	80169fa <USBD_CtlError>
          break;
 8016016:	e000      	b.n	801601a <USBD_StdItfReq+0xc2>
          break;
 8016018:	bf00      	nop
      }
      break;
 801601a:	e004      	b.n	8016026 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801601c:	6839      	ldr	r1, [r7, #0]
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 fceb 	bl	80169fa <USBD_CtlError>
      break;
 8016024:	bf00      	nop
  }

  return ret;
 8016026:	7bfb      	ldrb	r3, [r7, #15]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3710      	adds	r7, #16
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}

08016030 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801603a:	2300      	movs	r3, #0
 801603c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	889b      	ldrh	r3, [r3, #4]
 8016042:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801604c:	2b40      	cmp	r3, #64	@ 0x40
 801604e:	d007      	beq.n	8016060 <USBD_StdEPReq+0x30>
 8016050:	2b40      	cmp	r3, #64	@ 0x40
 8016052:	f200 817f 	bhi.w	8016354 <USBD_StdEPReq+0x324>
 8016056:	2b00      	cmp	r3, #0
 8016058:	d02a      	beq.n	80160b0 <USBD_StdEPReq+0x80>
 801605a:	2b20      	cmp	r3, #32
 801605c:	f040 817a 	bne.w	8016354 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016060:	7bbb      	ldrb	r3, [r7, #14]
 8016062:	4619      	mov	r1, r3
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f7ff fe85 	bl	8015d74 <USBD_CoreFindEP>
 801606a:	4603      	mov	r3, r0
 801606c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801606e:	7b7b      	ldrb	r3, [r7, #13]
 8016070:	2bff      	cmp	r3, #255	@ 0xff
 8016072:	f000 8174 	beq.w	801635e <USBD_StdEPReq+0x32e>
 8016076:	7b7b      	ldrb	r3, [r7, #13]
 8016078:	2b00      	cmp	r3, #0
 801607a:	f040 8170 	bne.w	801635e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801607e:	7b7a      	ldrb	r2, [r7, #13]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016086:	7b7a      	ldrb	r2, [r7, #13]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	32ae      	adds	r2, #174	@ 0xae
 801608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016090:	689b      	ldr	r3, [r3, #8]
 8016092:	2b00      	cmp	r3, #0
 8016094:	f000 8163 	beq.w	801635e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016098:	7b7a      	ldrb	r2, [r7, #13]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	32ae      	adds	r2, #174	@ 0xae
 801609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	6839      	ldr	r1, [r7, #0]
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	4798      	blx	r3
 80160aa:	4603      	mov	r3, r0
 80160ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80160ae:	e156      	b.n	801635e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	785b      	ldrb	r3, [r3, #1]
 80160b4:	2b03      	cmp	r3, #3
 80160b6:	d008      	beq.n	80160ca <USBD_StdEPReq+0x9a>
 80160b8:	2b03      	cmp	r3, #3
 80160ba:	f300 8145 	bgt.w	8016348 <USBD_StdEPReq+0x318>
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f000 809b 	beq.w	80161fa <USBD_StdEPReq+0x1ca>
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	d03c      	beq.n	8016142 <USBD_StdEPReq+0x112>
 80160c8:	e13e      	b.n	8016348 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	2b02      	cmp	r3, #2
 80160d4:	d002      	beq.n	80160dc <USBD_StdEPReq+0xac>
 80160d6:	2b03      	cmp	r3, #3
 80160d8:	d016      	beq.n	8016108 <USBD_StdEPReq+0xd8>
 80160da:	e02c      	b.n	8016136 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80160dc:	7bbb      	ldrb	r3, [r7, #14]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00d      	beq.n	80160fe <USBD_StdEPReq+0xce>
 80160e2:	7bbb      	ldrb	r3, [r7, #14]
 80160e4:	2b80      	cmp	r3, #128	@ 0x80
 80160e6:	d00a      	beq.n	80160fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80160e8:	7bbb      	ldrb	r3, [r7, #14]
 80160ea:	4619      	mov	r1, r3
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f001 f9ad 	bl	801744c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80160f2:	2180      	movs	r1, #128	@ 0x80
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f001 f9a9 	bl	801744c <USBD_LL_StallEP>
 80160fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80160fc:	e020      	b.n	8016140 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 fc7a 	bl	80169fa <USBD_CtlError>
              break;
 8016106:	e01b      	b.n	8016140 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	885b      	ldrh	r3, [r3, #2]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d10e      	bne.n	801612e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016110:	7bbb      	ldrb	r3, [r7, #14]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d00b      	beq.n	801612e <USBD_StdEPReq+0xfe>
 8016116:	7bbb      	ldrb	r3, [r7, #14]
 8016118:	2b80      	cmp	r3, #128	@ 0x80
 801611a:	d008      	beq.n	801612e <USBD_StdEPReq+0xfe>
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	88db      	ldrh	r3, [r3, #6]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d104      	bne.n	801612e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016124:	7bbb      	ldrb	r3, [r7, #14]
 8016126:	4619      	mov	r1, r3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f001 f98f 	bl	801744c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fd2e 	bl	8016b90 <USBD_CtlSendStatus>

              break;
 8016134:	e004      	b.n	8016140 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 fc5e 	bl	80169fa <USBD_CtlError>
              break;
 801613e:	bf00      	nop
          }
          break;
 8016140:	e107      	b.n	8016352 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016148:	b2db      	uxtb	r3, r3
 801614a:	2b02      	cmp	r3, #2
 801614c:	d002      	beq.n	8016154 <USBD_StdEPReq+0x124>
 801614e:	2b03      	cmp	r3, #3
 8016150:	d016      	beq.n	8016180 <USBD_StdEPReq+0x150>
 8016152:	e04b      	b.n	80161ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016154:	7bbb      	ldrb	r3, [r7, #14]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00d      	beq.n	8016176 <USBD_StdEPReq+0x146>
 801615a:	7bbb      	ldrb	r3, [r7, #14]
 801615c:	2b80      	cmp	r3, #128	@ 0x80
 801615e:	d00a      	beq.n	8016176 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016160:	7bbb      	ldrb	r3, [r7, #14]
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f001 f971 	bl	801744c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801616a:	2180      	movs	r1, #128	@ 0x80
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f001 f96d 	bl	801744c <USBD_LL_StallEP>
 8016172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016174:	e040      	b.n	80161f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f000 fc3e 	bl	80169fa <USBD_CtlError>
              break;
 801617e:	e03b      	b.n	80161f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	885b      	ldrh	r3, [r3, #2]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d136      	bne.n	80161f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016188:	7bbb      	ldrb	r3, [r7, #14]
 801618a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801618e:	2b00      	cmp	r3, #0
 8016190:	d004      	beq.n	801619c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016192:	7bbb      	ldrb	r3, [r7, #14]
 8016194:	4619      	mov	r1, r3
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f001 f977 	bl	801748a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 fcf7 	bl	8016b90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80161a2:	7bbb      	ldrb	r3, [r7, #14]
 80161a4:	4619      	mov	r1, r3
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7ff fde4 	bl	8015d74 <USBD_CoreFindEP>
 80161ac:	4603      	mov	r3, r0
 80161ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161b0:	7b7b      	ldrb	r3, [r7, #13]
 80161b2:	2bff      	cmp	r3, #255	@ 0xff
 80161b4:	d01f      	beq.n	80161f6 <USBD_StdEPReq+0x1c6>
 80161b6:	7b7b      	ldrb	r3, [r7, #13]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d11c      	bne.n	80161f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80161bc:	7b7a      	ldrb	r2, [r7, #13]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80161c4:	7b7a      	ldrb	r2, [r7, #13]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	32ae      	adds	r2, #174	@ 0xae
 80161ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161ce:	689b      	ldr	r3, [r3, #8]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d010      	beq.n	80161f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80161d4:	7b7a      	ldrb	r2, [r7, #13]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	32ae      	adds	r2, #174	@ 0xae
 80161da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161de:	689b      	ldr	r3, [r3, #8]
 80161e0:	6839      	ldr	r1, [r7, #0]
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	4798      	blx	r3
 80161e6:	4603      	mov	r3, r0
 80161e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80161ea:	e004      	b.n	80161f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80161ec:	6839      	ldr	r1, [r7, #0]
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f000 fc03 	bl	80169fa <USBD_CtlError>
              break;
 80161f4:	e000      	b.n	80161f8 <USBD_StdEPReq+0x1c8>
              break;
 80161f6:	bf00      	nop
          }
          break;
 80161f8:	e0ab      	b.n	8016352 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016200:	b2db      	uxtb	r3, r3
 8016202:	2b02      	cmp	r3, #2
 8016204:	d002      	beq.n	801620c <USBD_StdEPReq+0x1dc>
 8016206:	2b03      	cmp	r3, #3
 8016208:	d032      	beq.n	8016270 <USBD_StdEPReq+0x240>
 801620a:	e097      	b.n	801633c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801620c:	7bbb      	ldrb	r3, [r7, #14]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d007      	beq.n	8016222 <USBD_StdEPReq+0x1f2>
 8016212:	7bbb      	ldrb	r3, [r7, #14]
 8016214:	2b80      	cmp	r3, #128	@ 0x80
 8016216:	d004      	beq.n	8016222 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016218:	6839      	ldr	r1, [r7, #0]
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f000 fbed 	bl	80169fa <USBD_CtlError>
                break;
 8016220:	e091      	b.n	8016346 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016226:	2b00      	cmp	r3, #0
 8016228:	da0b      	bge.n	8016242 <USBD_StdEPReq+0x212>
 801622a:	7bbb      	ldrb	r3, [r7, #14]
 801622c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016230:	4613      	mov	r3, r2
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	4413      	add	r3, r2
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	3310      	adds	r3, #16
 801623a:	687a      	ldr	r2, [r7, #4]
 801623c:	4413      	add	r3, r2
 801623e:	3304      	adds	r3, #4
 8016240:	e00b      	b.n	801625a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016242:	7bbb      	ldrb	r3, [r7, #14]
 8016244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016248:	4613      	mov	r3, r2
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4413      	add	r3, r2
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	4413      	add	r3, r2
 8016258:	3304      	adds	r3, #4
 801625a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	2200      	movs	r2, #0
 8016260:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	2202      	movs	r2, #2
 8016266:	4619      	mov	r1, r3
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f000 fc37 	bl	8016adc <USBD_CtlSendData>
              break;
 801626e:	e06a      	b.n	8016346 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016274:	2b00      	cmp	r3, #0
 8016276:	da11      	bge.n	801629c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016278:	7bbb      	ldrb	r3, [r7, #14]
 801627a:	f003 020f 	and.w	r2, r3, #15
 801627e:	6879      	ldr	r1, [r7, #4]
 8016280:	4613      	mov	r3, r2
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	4413      	add	r3, r2
 8016286:	009b      	lsls	r3, r3, #2
 8016288:	440b      	add	r3, r1
 801628a:	3324      	adds	r3, #36	@ 0x24
 801628c:	881b      	ldrh	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d117      	bne.n	80162c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016292:	6839      	ldr	r1, [r7, #0]
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f000 fbb0 	bl	80169fa <USBD_CtlError>
                  break;
 801629a:	e054      	b.n	8016346 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801629c:	7bbb      	ldrb	r3, [r7, #14]
 801629e:	f003 020f 	and.w	r2, r3, #15
 80162a2:	6879      	ldr	r1, [r7, #4]
 80162a4:	4613      	mov	r3, r2
 80162a6:	009b      	lsls	r3, r3, #2
 80162a8:	4413      	add	r3, r2
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	440b      	add	r3, r1
 80162ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80162b2:	881b      	ldrh	r3, [r3, #0]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d104      	bne.n	80162c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f000 fb9d 	bl	80169fa <USBD_CtlError>
                  break;
 80162c0:	e041      	b.n	8016346 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	da0b      	bge.n	80162e2 <USBD_StdEPReq+0x2b2>
 80162ca:	7bbb      	ldrb	r3, [r7, #14]
 80162cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80162d0:	4613      	mov	r3, r2
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	3310      	adds	r3, #16
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	4413      	add	r3, r2
 80162de:	3304      	adds	r3, #4
 80162e0:	e00b      	b.n	80162fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80162e2:	7bbb      	ldrb	r3, [r7, #14]
 80162e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162e8:	4613      	mov	r3, r2
 80162ea:	009b      	lsls	r3, r3, #2
 80162ec:	4413      	add	r3, r2
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	4413      	add	r3, r2
 80162f8:	3304      	adds	r3, #4
 80162fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80162fc:	7bbb      	ldrb	r3, [r7, #14]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d002      	beq.n	8016308 <USBD_StdEPReq+0x2d8>
 8016302:	7bbb      	ldrb	r3, [r7, #14]
 8016304:	2b80      	cmp	r3, #128	@ 0x80
 8016306:	d103      	bne.n	8016310 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2200      	movs	r2, #0
 801630c:	601a      	str	r2, [r3, #0]
 801630e:	e00e      	b.n	801632e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016310:	7bbb      	ldrb	r3, [r7, #14]
 8016312:	4619      	mov	r1, r3
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f001 f8d7 	bl	80174c8 <USBD_LL_IsStallEP>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d003      	beq.n	8016328 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	2201      	movs	r2, #1
 8016324:	601a      	str	r2, [r3, #0]
 8016326:	e002      	b.n	801632e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	2200      	movs	r2, #0
 801632c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	2202      	movs	r2, #2
 8016332:	4619      	mov	r1, r3
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 fbd1 	bl	8016adc <USBD_CtlSendData>
              break;
 801633a:	e004      	b.n	8016346 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801633c:	6839      	ldr	r1, [r7, #0]
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f000 fb5b 	bl	80169fa <USBD_CtlError>
              break;
 8016344:	bf00      	nop
          }
          break;
 8016346:	e004      	b.n	8016352 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 fb55 	bl	80169fa <USBD_CtlError>
          break;
 8016350:	bf00      	nop
      }
      break;
 8016352:	e005      	b.n	8016360 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016354:	6839      	ldr	r1, [r7, #0]
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f000 fb4f 	bl	80169fa <USBD_CtlError>
      break;
 801635c:	e000      	b.n	8016360 <USBD_StdEPReq+0x330>
      break;
 801635e:	bf00      	nop
  }

  return ret;
 8016360:	7bfb      	ldrb	r3, [r7, #15]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
	...

0801636c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016376:	2300      	movs	r3, #0
 8016378:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801637a:	2300      	movs	r3, #0
 801637c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801637e:	2300      	movs	r3, #0
 8016380:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	885b      	ldrh	r3, [r3, #2]
 8016386:	0a1b      	lsrs	r3, r3, #8
 8016388:	b29b      	uxth	r3, r3
 801638a:	3b01      	subs	r3, #1
 801638c:	2b06      	cmp	r3, #6
 801638e:	f200 8128 	bhi.w	80165e2 <USBD_GetDescriptor+0x276>
 8016392:	a201      	add	r2, pc, #4	@ (adr r2, 8016398 <USBD_GetDescriptor+0x2c>)
 8016394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016398:	080163b5 	.word	0x080163b5
 801639c:	080163cd 	.word	0x080163cd
 80163a0:	0801640d 	.word	0x0801640d
 80163a4:	080165e3 	.word	0x080165e3
 80163a8:	080165e3 	.word	0x080165e3
 80163ac:	08016583 	.word	0x08016583
 80163b0:	080165af 	.word	0x080165af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	687a      	ldr	r2, [r7, #4]
 80163be:	7c12      	ldrb	r2, [r2, #16]
 80163c0:	f107 0108 	add.w	r1, r7, #8
 80163c4:	4610      	mov	r0, r2
 80163c6:	4798      	blx	r3
 80163c8:	60f8      	str	r0, [r7, #12]
      break;
 80163ca:	e112      	b.n	80165f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	7c1b      	ldrb	r3, [r3, #16]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d10d      	bne.n	80163f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163dc:	f107 0208 	add.w	r2, r7, #8
 80163e0:	4610      	mov	r0, r2
 80163e2:	4798      	blx	r3
 80163e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	3301      	adds	r3, #1
 80163ea:	2202      	movs	r2, #2
 80163ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80163ee:	e100      	b.n	80165f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f8:	f107 0208 	add.w	r2, r7, #8
 80163fc:	4610      	mov	r0, r2
 80163fe:	4798      	blx	r3
 8016400:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	3301      	adds	r3, #1
 8016406:	2202      	movs	r2, #2
 8016408:	701a      	strb	r2, [r3, #0]
      break;
 801640a:	e0f2      	b.n	80165f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	885b      	ldrh	r3, [r3, #2]
 8016410:	b2db      	uxtb	r3, r3
 8016412:	2b05      	cmp	r3, #5
 8016414:	f200 80ac 	bhi.w	8016570 <USBD_GetDescriptor+0x204>
 8016418:	a201      	add	r2, pc, #4	@ (adr r2, 8016420 <USBD_GetDescriptor+0xb4>)
 801641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801641e:	bf00      	nop
 8016420:	08016439 	.word	0x08016439
 8016424:	0801646d 	.word	0x0801646d
 8016428:	080164a1 	.word	0x080164a1
 801642c:	080164d5 	.word	0x080164d5
 8016430:	08016509 	.word	0x08016509
 8016434:	0801653d 	.word	0x0801653d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d00b      	beq.n	801645c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	7c12      	ldrb	r2, [r2, #16]
 8016450:	f107 0108 	add.w	r1, r7, #8
 8016454:	4610      	mov	r0, r2
 8016456:	4798      	blx	r3
 8016458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801645a:	e091      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801645c:	6839      	ldr	r1, [r7, #0]
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 facb 	bl	80169fa <USBD_CtlError>
            err++;
 8016464:	7afb      	ldrb	r3, [r7, #11]
 8016466:	3301      	adds	r3, #1
 8016468:	72fb      	strb	r3, [r7, #11]
          break;
 801646a:	e089      	b.n	8016580 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d00b      	beq.n	8016490 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801647e:	689b      	ldr	r3, [r3, #8]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	7c12      	ldrb	r2, [r2, #16]
 8016484:	f107 0108 	add.w	r1, r7, #8
 8016488:	4610      	mov	r0, r2
 801648a:	4798      	blx	r3
 801648c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801648e:	e077      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016490:	6839      	ldr	r1, [r7, #0]
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 fab1 	bl	80169fa <USBD_CtlError>
            err++;
 8016498:	7afb      	ldrb	r3, [r7, #11]
 801649a:	3301      	adds	r3, #1
 801649c:	72fb      	strb	r3, [r7, #11]
          break;
 801649e:	e06f      	b.n	8016580 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d00b      	beq.n	80164c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	7c12      	ldrb	r2, [r2, #16]
 80164b8:	f107 0108 	add.w	r1, r7, #8
 80164bc:	4610      	mov	r0, r2
 80164be:	4798      	blx	r3
 80164c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164c2:	e05d      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80164c4:	6839      	ldr	r1, [r7, #0]
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 fa97 	bl	80169fa <USBD_CtlError>
            err++;
 80164cc:	7afb      	ldrb	r3, [r7, #11]
 80164ce:	3301      	adds	r3, #1
 80164d0:	72fb      	strb	r3, [r7, #11]
          break;
 80164d2:	e055      	b.n	8016580 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164da:	691b      	ldr	r3, [r3, #16]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d00b      	beq.n	80164f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164e6:	691b      	ldr	r3, [r3, #16]
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	7c12      	ldrb	r2, [r2, #16]
 80164ec:	f107 0108 	add.w	r1, r7, #8
 80164f0:	4610      	mov	r0, r2
 80164f2:	4798      	blx	r3
 80164f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164f6:	e043      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80164f8:	6839      	ldr	r1, [r7, #0]
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f000 fa7d 	bl	80169fa <USBD_CtlError>
            err++;
 8016500:	7afb      	ldrb	r3, [r7, #11]
 8016502:	3301      	adds	r3, #1
 8016504:	72fb      	strb	r3, [r7, #11]
          break;
 8016506:	e03b      	b.n	8016580 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801650e:	695b      	ldr	r3, [r3, #20]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d00b      	beq.n	801652c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801651a:	695b      	ldr	r3, [r3, #20]
 801651c:	687a      	ldr	r2, [r7, #4]
 801651e:	7c12      	ldrb	r2, [r2, #16]
 8016520:	f107 0108 	add.w	r1, r7, #8
 8016524:	4610      	mov	r0, r2
 8016526:	4798      	blx	r3
 8016528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801652a:	e029      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801652c:	6839      	ldr	r1, [r7, #0]
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 fa63 	bl	80169fa <USBD_CtlError>
            err++;
 8016534:	7afb      	ldrb	r3, [r7, #11]
 8016536:	3301      	adds	r3, #1
 8016538:	72fb      	strb	r3, [r7, #11]
          break;
 801653a:	e021      	b.n	8016580 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016542:	699b      	ldr	r3, [r3, #24]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d00b      	beq.n	8016560 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801654e:	699b      	ldr	r3, [r3, #24]
 8016550:	687a      	ldr	r2, [r7, #4]
 8016552:	7c12      	ldrb	r2, [r2, #16]
 8016554:	f107 0108 	add.w	r1, r7, #8
 8016558:	4610      	mov	r0, r2
 801655a:	4798      	blx	r3
 801655c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801655e:	e00f      	b.n	8016580 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016560:	6839      	ldr	r1, [r7, #0]
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f000 fa49 	bl	80169fa <USBD_CtlError>
            err++;
 8016568:	7afb      	ldrb	r3, [r7, #11]
 801656a:	3301      	adds	r3, #1
 801656c:	72fb      	strb	r3, [r7, #11]
          break;
 801656e:	e007      	b.n	8016580 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016570:	6839      	ldr	r1, [r7, #0]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 fa41 	bl	80169fa <USBD_CtlError>
          err++;
 8016578:	7afb      	ldrb	r3, [r7, #11]
 801657a:	3301      	adds	r3, #1
 801657c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801657e:	bf00      	nop
      }
      break;
 8016580:	e037      	b.n	80165f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	7c1b      	ldrb	r3, [r3, #16]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d109      	bne.n	801659e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016592:	f107 0208 	add.w	r2, r7, #8
 8016596:	4610      	mov	r0, r2
 8016598:	4798      	blx	r3
 801659a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801659c:	e029      	b.n	80165f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801659e:	6839      	ldr	r1, [r7, #0]
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 fa2a 	bl	80169fa <USBD_CtlError>
        err++;
 80165a6:	7afb      	ldrb	r3, [r7, #11]
 80165a8:	3301      	adds	r3, #1
 80165aa:	72fb      	strb	r3, [r7, #11]
      break;
 80165ac:	e021      	b.n	80165f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	7c1b      	ldrb	r3, [r3, #16]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d10d      	bne.n	80165d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165be:	f107 0208 	add.w	r2, r7, #8
 80165c2:	4610      	mov	r0, r2
 80165c4:	4798      	blx	r3
 80165c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	3301      	adds	r3, #1
 80165cc:	2207      	movs	r2, #7
 80165ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165d0:	e00f      	b.n	80165f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80165d2:	6839      	ldr	r1, [r7, #0]
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f000 fa10 	bl	80169fa <USBD_CtlError>
        err++;
 80165da:	7afb      	ldrb	r3, [r7, #11]
 80165dc:	3301      	adds	r3, #1
 80165de:	72fb      	strb	r3, [r7, #11]
      break;
 80165e0:	e007      	b.n	80165f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80165e2:	6839      	ldr	r1, [r7, #0]
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f000 fa08 	bl	80169fa <USBD_CtlError>
      err++;
 80165ea:	7afb      	ldrb	r3, [r7, #11]
 80165ec:	3301      	adds	r3, #1
 80165ee:	72fb      	strb	r3, [r7, #11]
      break;
 80165f0:	bf00      	nop
  }

  if (err != 0U)
 80165f2:	7afb      	ldrb	r3, [r7, #11]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d11e      	bne.n	8016636 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	88db      	ldrh	r3, [r3, #6]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d016      	beq.n	801662e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016600:	893b      	ldrh	r3, [r7, #8]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00e      	beq.n	8016624 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	88da      	ldrh	r2, [r3, #6]
 801660a:	893b      	ldrh	r3, [r7, #8]
 801660c:	4293      	cmp	r3, r2
 801660e:	bf28      	it	cs
 8016610:	4613      	movcs	r3, r2
 8016612:	b29b      	uxth	r3, r3
 8016614:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016616:	893b      	ldrh	r3, [r7, #8]
 8016618:	461a      	mov	r2, r3
 801661a:	68f9      	ldr	r1, [r7, #12]
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f000 fa5d 	bl	8016adc <USBD_CtlSendData>
 8016622:	e009      	b.n	8016638 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016624:	6839      	ldr	r1, [r7, #0]
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 f9e7 	bl	80169fa <USBD_CtlError>
 801662c:	e004      	b.n	8016638 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f000 faae 	bl	8016b90 <USBD_CtlSendStatus>
 8016634:	e000      	b.n	8016638 <USBD_GetDescriptor+0x2cc>
    return;
 8016636:	bf00      	nop
  }
}
 8016638:	3710      	adds	r7, #16
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop

08016640 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	889b      	ldrh	r3, [r3, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d131      	bne.n	80166b6 <USBD_SetAddress+0x76>
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	88db      	ldrh	r3, [r3, #6]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d12d      	bne.n	80166b6 <USBD_SetAddress+0x76>
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	885b      	ldrh	r3, [r3, #2]
 801665e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016660:	d829      	bhi.n	80166b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	885b      	ldrh	r3, [r3, #2]
 8016666:	b2db      	uxtb	r3, r3
 8016668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801666c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016674:	b2db      	uxtb	r3, r3
 8016676:	2b03      	cmp	r3, #3
 8016678:	d104      	bne.n	8016684 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801667a:	6839      	ldr	r1, [r7, #0]
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 f9bc 	bl	80169fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016682:	e01d      	b.n	80166c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	7bfa      	ldrb	r2, [r7, #15]
 8016688:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801668c:	7bfb      	ldrb	r3, [r7, #15]
 801668e:	4619      	mov	r1, r3
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f000 ff45 	bl	8017520 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f000 fa7a 	bl	8016b90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801669c:	7bfb      	ldrb	r3, [r7, #15]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d004      	beq.n	80166ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2202      	movs	r2, #2
 80166a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166aa:	e009      	b.n	80166c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2201      	movs	r2, #1
 80166b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166b4:	e004      	b.n	80166c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80166b6:	6839      	ldr	r1, [r7, #0]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 f99e 	bl	80169fa <USBD_CtlError>
  }
}
 80166be:	bf00      	nop
 80166c0:	bf00      	nop
 80166c2:	3710      	adds	r7, #16
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b084      	sub	sp, #16
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166d2:	2300      	movs	r3, #0
 80166d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	885b      	ldrh	r3, [r3, #2]
 80166da:	b2da      	uxtb	r2, r3
 80166dc:	4b4e      	ldr	r3, [pc, #312]	@ (8016818 <USBD_SetConfig+0x150>)
 80166de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80166e0:	4b4d      	ldr	r3, [pc, #308]	@ (8016818 <USBD_SetConfig+0x150>)
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	2b01      	cmp	r3, #1
 80166e6:	d905      	bls.n	80166f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80166e8:	6839      	ldr	r1, [r7, #0]
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f000 f985 	bl	80169fa <USBD_CtlError>
    return USBD_FAIL;
 80166f0:	2303      	movs	r3, #3
 80166f2:	e08c      	b.n	801680e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166fa:	b2db      	uxtb	r3, r3
 80166fc:	2b02      	cmp	r3, #2
 80166fe:	d002      	beq.n	8016706 <USBD_SetConfig+0x3e>
 8016700:	2b03      	cmp	r3, #3
 8016702:	d029      	beq.n	8016758 <USBD_SetConfig+0x90>
 8016704:	e075      	b.n	80167f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016706:	4b44      	ldr	r3, [pc, #272]	@ (8016818 <USBD_SetConfig+0x150>)
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d020      	beq.n	8016750 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801670e:	4b42      	ldr	r3, [pc, #264]	@ (8016818 <USBD_SetConfig+0x150>)
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016718:	4b3f      	ldr	r3, [pc, #252]	@ (8016818 <USBD_SetConfig+0x150>)
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	4619      	mov	r1, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7fe ffe3 	bl	80156ea <USBD_SetClassConfig>
 8016724:	4603      	mov	r3, r0
 8016726:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016728:	7bfb      	ldrb	r3, [r7, #15]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d008      	beq.n	8016740 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801672e:	6839      	ldr	r1, [r7, #0]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f000 f962 	bl	80169fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2202      	movs	r2, #2
 801673a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801673e:	e065      	b.n	801680c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f000 fa25 	bl	8016b90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2203      	movs	r2, #3
 801674a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801674e:	e05d      	b.n	801680c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f000 fa1d 	bl	8016b90 <USBD_CtlSendStatus>
      break;
 8016756:	e059      	b.n	801680c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016758:	4b2f      	ldr	r3, [pc, #188]	@ (8016818 <USBD_SetConfig+0x150>)
 801675a:	781b      	ldrb	r3, [r3, #0]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d112      	bne.n	8016786 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2202      	movs	r2, #2
 8016764:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8016768:	4b2b      	ldr	r3, [pc, #172]	@ (8016818 <USBD_SetConfig+0x150>)
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	461a      	mov	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016772:	4b29      	ldr	r3, [pc, #164]	@ (8016818 <USBD_SetConfig+0x150>)
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	4619      	mov	r1, r3
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f7fe ffd2 	bl	8015722 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f000 fa06 	bl	8016b90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016784:	e042      	b.n	801680c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016786:	4b24      	ldr	r3, [pc, #144]	@ (8016818 <USBD_SetConfig+0x150>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	461a      	mov	r2, r3
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	429a      	cmp	r2, r3
 8016792:	d02a      	beq.n	80167ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	b2db      	uxtb	r3, r3
 801679a:	4619      	mov	r1, r3
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f7fe ffc0 	bl	8015722 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80167a2:	4b1d      	ldr	r3, [pc, #116]	@ (8016818 <USBD_SetConfig+0x150>)
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	461a      	mov	r2, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167ac:	4b1a      	ldr	r3, [pc, #104]	@ (8016818 <USBD_SetConfig+0x150>)
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	4619      	mov	r1, r3
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f7fe ff99 	bl	80156ea <USBD_SetClassConfig>
 80167b8:	4603      	mov	r3, r0
 80167ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d00f      	beq.n	80167e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80167c2:	6839      	ldr	r1, [r7, #0]
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 f918 	bl	80169fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	4619      	mov	r1, r3
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f7fe ffa5 	bl	8015722 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2202      	movs	r2, #2
 80167dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80167e0:	e014      	b.n	801680c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80167e2:	6878      	ldr	r0, [r7, #4]
 80167e4:	f000 f9d4 	bl	8016b90 <USBD_CtlSendStatus>
      break;
 80167e8:	e010      	b.n	801680c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f000 f9d0 	bl	8016b90 <USBD_CtlSendStatus>
      break;
 80167f0:	e00c      	b.n	801680c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80167f2:	6839      	ldr	r1, [r7, #0]
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f000 f900 	bl	80169fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167fa:	4b07      	ldr	r3, [pc, #28]	@ (8016818 <USBD_SetConfig+0x150>)
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	4619      	mov	r1, r3
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f7fe ff8e 	bl	8015722 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016806:	2303      	movs	r3, #3
 8016808:	73fb      	strb	r3, [r7, #15]
      break;
 801680a:	bf00      	nop
  }

  return ret;
 801680c:	7bfb      	ldrb	r3, [r7, #15]
}
 801680e:	4618      	mov	r0, r3
 8016810:	3710      	adds	r7, #16
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	240025b4 	.word	0x240025b4

0801681c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	88db      	ldrh	r3, [r3, #6]
 801682a:	2b01      	cmp	r3, #1
 801682c:	d004      	beq.n	8016838 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801682e:	6839      	ldr	r1, [r7, #0]
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f000 f8e2 	bl	80169fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016836:	e023      	b.n	8016880 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801683e:	b2db      	uxtb	r3, r3
 8016840:	2b02      	cmp	r3, #2
 8016842:	dc02      	bgt.n	801684a <USBD_GetConfig+0x2e>
 8016844:	2b00      	cmp	r3, #0
 8016846:	dc03      	bgt.n	8016850 <USBD_GetConfig+0x34>
 8016848:	e015      	b.n	8016876 <USBD_GetConfig+0x5a>
 801684a:	2b03      	cmp	r3, #3
 801684c:	d00b      	beq.n	8016866 <USBD_GetConfig+0x4a>
 801684e:	e012      	b.n	8016876 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2200      	movs	r2, #0
 8016854:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	3308      	adds	r3, #8
 801685a:	2201      	movs	r2, #1
 801685c:	4619      	mov	r1, r3
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f000 f93c 	bl	8016adc <USBD_CtlSendData>
        break;
 8016864:	e00c      	b.n	8016880 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	3304      	adds	r3, #4
 801686a:	2201      	movs	r2, #1
 801686c:	4619      	mov	r1, r3
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 f934 	bl	8016adc <USBD_CtlSendData>
        break;
 8016874:	e004      	b.n	8016880 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016876:	6839      	ldr	r1, [r7, #0]
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f000 f8be 	bl	80169fa <USBD_CtlError>
        break;
 801687e:	bf00      	nop
}
 8016880:	bf00      	nop
 8016882:	3708      	adds	r7, #8
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016898:	b2db      	uxtb	r3, r3
 801689a:	3b01      	subs	r3, #1
 801689c:	2b02      	cmp	r3, #2
 801689e:	d81e      	bhi.n	80168de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	88db      	ldrh	r3, [r3, #6]
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d004      	beq.n	80168b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80168a8:	6839      	ldr	r1, [r7, #0]
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 f8a5 	bl	80169fa <USBD_CtlError>
        break;
 80168b0:	e01a      	b.n	80168e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2201      	movs	r2, #1
 80168b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d005      	beq.n	80168ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	68db      	ldr	r3, [r3, #12]
 80168c6:	f043 0202 	orr.w	r2, r3, #2
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	330c      	adds	r3, #12
 80168d2:	2202      	movs	r2, #2
 80168d4:	4619      	mov	r1, r3
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 f900 	bl	8016adc <USBD_CtlSendData>
      break;
 80168dc:	e004      	b.n	80168e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80168de:	6839      	ldr	r1, [r7, #0]
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f000 f88a 	bl	80169fa <USBD_CtlError>
      break;
 80168e6:	bf00      	nop
  }
}
 80168e8:	bf00      	nop
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	885b      	ldrh	r3, [r3, #2]
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d107      	bne.n	8016912 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2201      	movs	r2, #1
 8016906:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f000 f940 	bl	8016b90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016910:	e013      	b.n	801693a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	885b      	ldrh	r3, [r3, #2]
 8016916:	2b02      	cmp	r3, #2
 8016918:	d10b      	bne.n	8016932 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	889b      	ldrh	r3, [r3, #4]
 801691e:	0a1b      	lsrs	r3, r3, #8
 8016920:	b29b      	uxth	r3, r3
 8016922:	b2da      	uxtb	r2, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f000 f930 	bl	8016b90 <USBD_CtlSendStatus>
}
 8016930:	e003      	b.n	801693a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016932:	6839      	ldr	r1, [r7, #0]
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	f000 f860 	bl	80169fa <USBD_CtlError>
}
 801693a:	bf00      	nop
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}

08016942 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016942:	b580      	push	{r7, lr}
 8016944:	b082      	sub	sp, #8
 8016946:	af00      	add	r7, sp, #0
 8016948:	6078      	str	r0, [r7, #4]
 801694a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016952:	b2db      	uxtb	r3, r3
 8016954:	3b01      	subs	r3, #1
 8016956:	2b02      	cmp	r3, #2
 8016958:	d80b      	bhi.n	8016972 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	885b      	ldrh	r3, [r3, #2]
 801695e:	2b01      	cmp	r3, #1
 8016960:	d10c      	bne.n	801697c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2200      	movs	r2, #0
 8016966:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f000 f910 	bl	8016b90 <USBD_CtlSendStatus>
      }
      break;
 8016970:	e004      	b.n	801697c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016972:	6839      	ldr	r1, [r7, #0]
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f000 f840 	bl	80169fa <USBD_CtlError>
      break;
 801697a:	e000      	b.n	801697e <USBD_ClrFeature+0x3c>
      break;
 801697c:	bf00      	nop
  }
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b084      	sub	sp, #16
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
 801698e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	781a      	ldrb	r2, [r3, #0]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	3301      	adds	r3, #1
 80169a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	781a      	ldrb	r2, [r3, #0]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	3301      	adds	r3, #1
 80169ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80169b0:	68f8      	ldr	r0, [r7, #12]
 80169b2:	f7ff fa40 	bl	8015e36 <SWAPBYTE>
 80169b6:	4603      	mov	r3, r0
 80169b8:	461a      	mov	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	3301      	adds	r3, #1
 80169c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	3301      	adds	r3, #1
 80169c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	f7ff fa33 	bl	8015e36 <SWAPBYTE>
 80169d0:	4603      	mov	r3, r0
 80169d2:	461a      	mov	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	3301      	adds	r3, #1
 80169dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	3301      	adds	r3, #1
 80169e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80169e4:	68f8      	ldr	r0, [r7, #12]
 80169e6:	f7ff fa26 	bl	8015e36 <SWAPBYTE>
 80169ea:	4603      	mov	r3, r0
 80169ec:	461a      	mov	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	80da      	strh	r2, [r3, #6]
}
 80169f2:	bf00      	nop
 80169f4:	3710      	adds	r7, #16
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}

080169fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169fa:	b580      	push	{r7, lr}
 80169fc:	b082      	sub	sp, #8
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	6078      	str	r0, [r7, #4]
 8016a02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a04:	2180      	movs	r1, #128	@ 0x80
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f000 fd20 	bl	801744c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 fd1c 	bl	801744c <USBD_LL_StallEP>
}
 8016a14:	bf00      	nop
 8016a16:	3708      	adds	r7, #8
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b086      	sub	sp, #24
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	60f8      	str	r0, [r7, #12]
 8016a24:	60b9      	str	r1, [r7, #8]
 8016a26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d036      	beq.n	8016aa0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a36:	6938      	ldr	r0, [r7, #16]
 8016a38:	f000 f836 	bl	8016aa8 <USBD_GetLen>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	3301      	adds	r3, #1
 8016a40:	b29b      	uxth	r3, r3
 8016a42:	005b      	lsls	r3, r3, #1
 8016a44:	b29a      	uxth	r2, r3
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a4a:	7dfb      	ldrb	r3, [r7, #23]
 8016a4c:	68ba      	ldr	r2, [r7, #8]
 8016a4e:	4413      	add	r3, r2
 8016a50:	687a      	ldr	r2, [r7, #4]
 8016a52:	7812      	ldrb	r2, [r2, #0]
 8016a54:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a56:	7dfb      	ldrb	r3, [r7, #23]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016a5c:	7dfb      	ldrb	r3, [r7, #23]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	4413      	add	r3, r2
 8016a62:	2203      	movs	r2, #3
 8016a64:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a66:	7dfb      	ldrb	r3, [r7, #23]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016a6c:	e013      	b.n	8016a96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016a6e:	7dfb      	ldrb	r3, [r7, #23]
 8016a70:	68ba      	ldr	r2, [r7, #8]
 8016a72:	4413      	add	r3, r2
 8016a74:	693a      	ldr	r2, [r7, #16]
 8016a76:	7812      	ldrb	r2, [r2, #0]
 8016a78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	613b      	str	r3, [r7, #16]
    idx++;
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	3301      	adds	r3, #1
 8016a84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016a86:	7dfb      	ldrb	r3, [r7, #23]
 8016a88:	68ba      	ldr	r2, [r7, #8]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016a90:	7dfb      	ldrb	r3, [r7, #23]
 8016a92:	3301      	adds	r3, #1
 8016a94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d1e7      	bne.n	8016a6e <USBD_GetString+0x52>
 8016a9e:	e000      	b.n	8016aa2 <USBD_GetString+0x86>
    return;
 8016aa0:	bf00      	nop
  }
}
 8016aa2:	3718      	adds	r7, #24
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016ab8:	e005      	b.n	8016ac6 <USBD_GetLen+0x1e>
  {
    len++;
 8016aba:	7bfb      	ldrb	r3, [r7, #15]
 8016abc:	3301      	adds	r3, #1
 8016abe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d1f5      	bne.n	8016aba <USBD_GetLen+0x12>
  }

  return len;
 8016ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3714      	adds	r7, #20
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr

08016adc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b084      	sub	sp, #16
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2202      	movs	r2, #2
 8016aec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	68ba      	ldr	r2, [r7, #8]
 8016b00:	2100      	movs	r1, #0
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f000 fd2b 	bl	801755e <USBD_LL_Transmit>

  return USBD_OK;
 8016b08:	2300      	movs	r3, #0
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3710      	adds	r7, #16
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b084      	sub	sp, #16
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	60f8      	str	r0, [r7, #12]
 8016b1a:	60b9      	str	r1, [r7, #8]
 8016b1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	68ba      	ldr	r2, [r7, #8]
 8016b22:	2100      	movs	r1, #0
 8016b24:	68f8      	ldr	r0, [r7, #12]
 8016b26:	f000 fd1a 	bl	801755e <USBD_LL_Transmit>

  return USBD_OK;
 8016b2a:	2300      	movs	r3, #0
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3710      	adds	r7, #16
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}

08016b34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b084      	sub	sp, #16
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	2203      	movs	r2, #3
 8016b44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	687a      	ldr	r2, [r7, #4]
 8016b4c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	68ba      	ldr	r2, [r7, #8]
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	68f8      	ldr	r0, [r7, #12]
 8016b60:	f000 fd1e 	bl	80175a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b64:	2300      	movs	r3, #0
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	3710      	adds	r7, #16
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}

08016b6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016b6e:	b580      	push	{r7, lr}
 8016b70:	b084      	sub	sp, #16
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	60f8      	str	r0, [r7, #12]
 8016b76:	60b9      	str	r1, [r7, #8]
 8016b78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	68ba      	ldr	r2, [r7, #8]
 8016b7e:	2100      	movs	r1, #0
 8016b80:	68f8      	ldr	r0, [r7, #12]
 8016b82:	f000 fd0d 	bl	80175a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b86:	2300      	movs	r3, #0
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2204      	movs	r2, #4
 8016b9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	2100      	movs	r1, #0
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f000 fcd9 	bl	801755e <USBD_LL_Transmit>

  return USBD_OK;
 8016bac:	2300      	movs	r3, #0
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3708      	adds	r7, #8
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}

08016bb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016bb6:	b580      	push	{r7, lr}
 8016bb8:	b082      	sub	sp, #8
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2205      	movs	r2, #5
 8016bc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	2200      	movs	r2, #0
 8016bca:	2100      	movs	r1, #0
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f000 fce7 	bl	80175a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3708      	adds	r7, #8
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016be0:	2200      	movs	r2, #0
 8016be2:	4913      	ldr	r1, [pc, #76]	@ (8016c30 <MX_USB_DEVICE_Init+0x54>)
 8016be4:	4813      	ldr	r0, [pc, #76]	@ (8016c34 <MX_USB_DEVICE_Init+0x58>)
 8016be6:	f7fe fd03 	bl	80155f0 <USBD_Init>
 8016bea:	4603      	mov	r3, r0
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d001      	beq.n	8016bf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016bf0:	f7ef fc9a 	bl	8006528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016bf4:	4910      	ldr	r1, [pc, #64]	@ (8016c38 <MX_USB_DEVICE_Init+0x5c>)
 8016bf6:	480f      	ldr	r0, [pc, #60]	@ (8016c34 <MX_USB_DEVICE_Init+0x58>)
 8016bf8:	f7fe fd2a 	bl	8015650 <USBD_RegisterClass>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d001      	beq.n	8016c06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c02:	f7ef fc91 	bl	8006528 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016c06:	490d      	ldr	r1, [pc, #52]	@ (8016c3c <MX_USB_DEVICE_Init+0x60>)
 8016c08:	480a      	ldr	r0, [pc, #40]	@ (8016c34 <MX_USB_DEVICE_Init+0x58>)
 8016c0a:	f7fe fc21 	bl	8015450 <USBD_CDC_RegisterInterface>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d001      	beq.n	8016c18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c14:	f7ef fc88 	bl	8006528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016c18:	4806      	ldr	r0, [pc, #24]	@ (8016c34 <MX_USB_DEVICE_Init+0x58>)
 8016c1a:	f7fe fd4f 	bl	80156bc <USBD_Start>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d001      	beq.n	8016c28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016c24:	f7ef fc80 	bl	8006528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016c28:	f7f8 f8a6 	bl	800ed78 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016c2c:	bf00      	nop
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	240000dc 	.word	0x240000dc
 8016c34:	240025b8 	.word	0x240025b8
 8016c38:	24000048 	.word	0x24000048
 8016c3c:	240000c8 	.word	0x240000c8

08016c40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016c44:	2200      	movs	r2, #0
 8016c46:	4905      	ldr	r1, [pc, #20]	@ (8016c5c <CDC_Init_FS+0x1c>)
 8016c48:	4805      	ldr	r0, [pc, #20]	@ (8016c60 <CDC_Init_FS+0x20>)
 8016c4a:	f7fe fc1b 	bl	8015484 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016c4e:	4905      	ldr	r1, [pc, #20]	@ (8016c64 <CDC_Init_FS+0x24>)
 8016c50:	4803      	ldr	r0, [pc, #12]	@ (8016c60 <CDC_Init_FS+0x20>)
 8016c52:	f7fe fc39 	bl	80154c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016c56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	24003094 	.word	0x24003094
 8016c60:	240025b8 	.word	0x240025b8
 8016c64:	24002894 	.word	0x24002894

08016c68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016c6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr

08016c78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016c78:	b480      	push	{r7}
 8016c7a:	b083      	sub	sp, #12
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	4603      	mov	r3, r0
 8016c80:	6039      	str	r1, [r7, #0]
 8016c82:	71fb      	strb	r3, [r7, #7]
 8016c84:	4613      	mov	r3, r2
 8016c86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016c88:	79fb      	ldrb	r3, [r7, #7]
 8016c8a:	2b23      	cmp	r3, #35	@ 0x23
 8016c8c:	d84a      	bhi.n	8016d24 <CDC_Control_FS+0xac>
 8016c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8016c94 <CDC_Control_FS+0x1c>)
 8016c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c94:	08016d25 	.word	0x08016d25
 8016c98:	08016d25 	.word	0x08016d25
 8016c9c:	08016d25 	.word	0x08016d25
 8016ca0:	08016d25 	.word	0x08016d25
 8016ca4:	08016d25 	.word	0x08016d25
 8016ca8:	08016d25 	.word	0x08016d25
 8016cac:	08016d25 	.word	0x08016d25
 8016cb0:	08016d25 	.word	0x08016d25
 8016cb4:	08016d25 	.word	0x08016d25
 8016cb8:	08016d25 	.word	0x08016d25
 8016cbc:	08016d25 	.word	0x08016d25
 8016cc0:	08016d25 	.word	0x08016d25
 8016cc4:	08016d25 	.word	0x08016d25
 8016cc8:	08016d25 	.word	0x08016d25
 8016ccc:	08016d25 	.word	0x08016d25
 8016cd0:	08016d25 	.word	0x08016d25
 8016cd4:	08016d25 	.word	0x08016d25
 8016cd8:	08016d25 	.word	0x08016d25
 8016cdc:	08016d25 	.word	0x08016d25
 8016ce0:	08016d25 	.word	0x08016d25
 8016ce4:	08016d25 	.word	0x08016d25
 8016ce8:	08016d25 	.word	0x08016d25
 8016cec:	08016d25 	.word	0x08016d25
 8016cf0:	08016d25 	.word	0x08016d25
 8016cf4:	08016d25 	.word	0x08016d25
 8016cf8:	08016d25 	.word	0x08016d25
 8016cfc:	08016d25 	.word	0x08016d25
 8016d00:	08016d25 	.word	0x08016d25
 8016d04:	08016d25 	.word	0x08016d25
 8016d08:	08016d25 	.word	0x08016d25
 8016d0c:	08016d25 	.word	0x08016d25
 8016d10:	08016d25 	.word	0x08016d25
 8016d14:	08016d25 	.word	0x08016d25
 8016d18:	08016d25 	.word	0x08016d25
 8016d1c:	08016d25 	.word	0x08016d25
 8016d20:	08016d25 	.word	0x08016d25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016d24:	bf00      	nop
  }

  return (USBD_OK);
 8016d26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	370c      	adds	r7, #12
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d32:	4770      	bx	lr

08016d34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016d3e:	6879      	ldr	r1, [r7, #4]
 8016d40:	4810      	ldr	r0, [pc, #64]	@ (8016d84 <CDC_Receive_FS+0x50>)
 8016d42:	f7fe fbc1 	bl	80154c8 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016d46:	480f      	ldr	r0, [pc, #60]	@ (8016d84 <CDC_Receive_FS+0x50>)
 8016d48:	f7fe fc1c 	bl	8015584 <USBD_CDC_ReceivePacket>
	  memset (bufferr_receive, '\0', 8);  // clear the buffer
 8016d4c:	2208      	movs	r2, #8
 8016d4e:	2100      	movs	r1, #0
 8016d50:	480d      	ldr	r0, [pc, #52]	@ (8016d88 <CDC_Receive_FS+0x54>)
 8016d52:	f000 fe34 	bl	80179be <memset>
	  uint8_t len = (uint8_t)*Len;
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	73fb      	strb	r3, [r7, #15]
	  memcpy(bufferr_receive, Buf, len);  // copy the data to the buffer
 8016d5c:	7bfb      	ldrb	r3, [r7, #15]
 8016d5e:	461a      	mov	r2, r3
 8016d60:	6879      	ldr	r1, [r7, #4]
 8016d62:	4809      	ldr	r0, [pc, #36]	@ (8016d88 <CDC_Receive_FS+0x54>)
 8016d64:	f000 fea7 	bl	8017ab6 <memcpy>
	  memset(Buf, '\0', len);   // clear the Buf also
 8016d68:	7bfb      	ldrb	r3, [r7, #15]
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	2100      	movs	r1, #0
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 fe25 	bl	80179be <memset>
	  bol=1;
 8016d74:	4b05      	ldr	r3, [pc, #20]	@ (8016d8c <CDC_Receive_FS+0x58>)
 8016d76:	2201      	movs	r2, #1
 8016d78:	601a      	str	r2, [r3, #0]
	  return (USBD_OK);
 8016d7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	240025b8 	.word	0x240025b8
 8016d88:	240023a4 	.word	0x240023a4
 8016d8c:	24000028 	.word	0x24000028

08016d90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b084      	sub	sp, #16
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	460b      	mov	r3, r1
 8016d9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016da0:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd8 <CDC_Transmit_FS+0x48>)
 8016da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016da6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d001      	beq.n	8016db6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016db2:	2301      	movs	r3, #1
 8016db4:	e00b      	b.n	8016dce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016db6:	887b      	ldrh	r3, [r7, #2]
 8016db8:	461a      	mov	r2, r3
 8016dba:	6879      	ldr	r1, [r7, #4]
 8016dbc:	4806      	ldr	r0, [pc, #24]	@ (8016dd8 <CDC_Transmit_FS+0x48>)
 8016dbe:	f7fe fb61 	bl	8015484 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016dc2:	4805      	ldr	r0, [pc, #20]	@ (8016dd8 <CDC_Transmit_FS+0x48>)
 8016dc4:	f7fe fb9e 	bl	8015504 <USBD_CDC_TransmitPacket>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3710      	adds	r7, #16
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	240025b8 	.word	0x240025b8

08016ddc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b087      	sub	sp, #28
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	4613      	mov	r3, r2
 8016de8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016dea:	2300      	movs	r3, #0
 8016dec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	371c      	adds	r7, #28
 8016df6:	46bd      	mov	sp, r7
 8016df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfc:	4770      	bx	lr
	...

08016e00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e00:	b480      	push	{r7}
 8016e02:	b083      	sub	sp, #12
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	4603      	mov	r3, r0
 8016e08:	6039      	str	r1, [r7, #0]
 8016e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	2212      	movs	r2, #18
 8016e10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016e12:	4b03      	ldr	r3, [pc, #12]	@ (8016e20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	370c      	adds	r7, #12
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr
 8016e20:	240000f8 	.word	0x240000f8

08016e24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	6039      	str	r1, [r7, #0]
 8016e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	2204      	movs	r2, #4
 8016e34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e36:	4b03      	ldr	r3, [pc, #12]	@ (8016e44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	370c      	adds	r7, #12
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr
 8016e44:	2400010c 	.word	0x2400010c

08016e48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	4603      	mov	r3, r0
 8016e50:	6039      	str	r1, [r7, #0]
 8016e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016e54:	79fb      	ldrb	r3, [r7, #7]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d105      	bne.n	8016e66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016e5a:	683a      	ldr	r2, [r7, #0]
 8016e5c:	4907      	ldr	r1, [pc, #28]	@ (8016e7c <USBD_FS_ProductStrDescriptor+0x34>)
 8016e5e:	4808      	ldr	r0, [pc, #32]	@ (8016e80 <USBD_FS_ProductStrDescriptor+0x38>)
 8016e60:	f7ff fddc 	bl	8016a1c <USBD_GetString>
 8016e64:	e004      	b.n	8016e70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016e66:	683a      	ldr	r2, [r7, #0]
 8016e68:	4904      	ldr	r1, [pc, #16]	@ (8016e7c <USBD_FS_ProductStrDescriptor+0x34>)
 8016e6a:	4805      	ldr	r0, [pc, #20]	@ (8016e80 <USBD_FS_ProductStrDescriptor+0x38>)
 8016e6c:	f7ff fdd6 	bl	8016a1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e70:	4b02      	ldr	r3, [pc, #8]	@ (8016e7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3708      	adds	r7, #8
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	24003894 	.word	0x24003894
 8016e80:	080194c4 	.word	0x080194c4

08016e84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b082      	sub	sp, #8
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	6039      	str	r1, [r7, #0]
 8016e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016e90:	683a      	ldr	r2, [r7, #0]
 8016e92:	4904      	ldr	r1, [pc, #16]	@ (8016ea4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016e94:	4804      	ldr	r0, [pc, #16]	@ (8016ea8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016e96:	f7ff fdc1 	bl	8016a1c <USBD_GetString>
  return USBD_StrDesc;
 8016e9a:	4b02      	ldr	r3, [pc, #8]	@ (8016ea4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3708      	adds	r7, #8
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	24003894 	.word	0x24003894
 8016ea8:	080194dc 	.word	0x080194dc

08016eac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	6039      	str	r1, [r7, #0]
 8016eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	221a      	movs	r2, #26
 8016ebc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016ebe:	f000 f843 	bl	8016f48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016ec2:	4b02      	ldr	r3, [pc, #8]	@ (8016ecc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	3708      	adds	r7, #8
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	24000110 	.word	0x24000110

08016ed0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	6039      	str	r1, [r7, #0]
 8016eda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016edc:	79fb      	ldrb	r3, [r7, #7]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d105      	bne.n	8016eee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	4907      	ldr	r1, [pc, #28]	@ (8016f04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016ee6:	4808      	ldr	r0, [pc, #32]	@ (8016f08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ee8:	f7ff fd98 	bl	8016a1c <USBD_GetString>
 8016eec:	e004      	b.n	8016ef8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016eee:	683a      	ldr	r2, [r7, #0]
 8016ef0:	4904      	ldr	r1, [pc, #16]	@ (8016f04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016ef2:	4805      	ldr	r0, [pc, #20]	@ (8016f08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ef4:	f7ff fd92 	bl	8016a1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ef8:	4b02      	ldr	r3, [pc, #8]	@ (8016f04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3708      	adds	r7, #8
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}
 8016f02:	bf00      	nop
 8016f04:	24003894 	.word	0x24003894
 8016f08:	080194f0 	.word	0x080194f0

08016f0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	4603      	mov	r3, r0
 8016f14:	6039      	str	r1, [r7, #0]
 8016f16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f18:	79fb      	ldrb	r3, [r7, #7]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d105      	bne.n	8016f2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	4907      	ldr	r1, [pc, #28]	@ (8016f40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f22:	4808      	ldr	r0, [pc, #32]	@ (8016f44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f24:	f7ff fd7a 	bl	8016a1c <USBD_GetString>
 8016f28:	e004      	b.n	8016f34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f2a:	683a      	ldr	r2, [r7, #0]
 8016f2c:	4904      	ldr	r1, [pc, #16]	@ (8016f40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f2e:	4805      	ldr	r0, [pc, #20]	@ (8016f44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f30:	f7ff fd74 	bl	8016a1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f34:	4b02      	ldr	r3, [pc, #8]	@ (8016f40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3708      	adds	r7, #8
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	24003894 	.word	0x24003894
 8016f44:	080194fc 	.word	0x080194fc

08016f48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b084      	sub	sp, #16
 8016f4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8016f8c <Get_SerialNum+0x44>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016f54:	4b0e      	ldr	r3, [pc, #56]	@ (8016f90 <Get_SerialNum+0x48>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8016f94 <Get_SerialNum+0x4c>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016f60:	68fa      	ldr	r2, [r7, #12]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	4413      	add	r3, r2
 8016f66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d009      	beq.n	8016f82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016f6e:	2208      	movs	r2, #8
 8016f70:	4909      	ldr	r1, [pc, #36]	@ (8016f98 <Get_SerialNum+0x50>)
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f000 f814 	bl	8016fa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016f78:	2204      	movs	r2, #4
 8016f7a:	4908      	ldr	r1, [pc, #32]	@ (8016f9c <Get_SerialNum+0x54>)
 8016f7c:	68b8      	ldr	r0, [r7, #8]
 8016f7e:	f000 f80f 	bl	8016fa0 <IntToUnicode>
  }
}
 8016f82:	bf00      	nop
 8016f84:	3710      	adds	r7, #16
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	1ff1e800 	.word	0x1ff1e800
 8016f90:	1ff1e804 	.word	0x1ff1e804
 8016f94:	1ff1e808 	.word	0x1ff1e808
 8016f98:	24000112 	.word	0x24000112
 8016f9c:	24000122 	.word	0x24000122

08016fa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b087      	sub	sp, #28
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	4613      	mov	r3, r2
 8016fac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	75fb      	strb	r3, [r7, #23]
 8016fb6:	e027      	b.n	8017008 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	0f1b      	lsrs	r3, r3, #28
 8016fbc:	2b09      	cmp	r3, #9
 8016fbe:	d80b      	bhi.n	8016fd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	0f1b      	lsrs	r3, r3, #28
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	7dfb      	ldrb	r3, [r7, #23]
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	4619      	mov	r1, r3
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	440b      	add	r3, r1
 8016fd0:	3230      	adds	r2, #48	@ 0x30
 8016fd2:	b2d2      	uxtb	r2, r2
 8016fd4:	701a      	strb	r2, [r3, #0]
 8016fd6:	e00a      	b.n	8016fee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	0f1b      	lsrs	r3, r3, #28
 8016fdc:	b2da      	uxtb	r2, r3
 8016fde:	7dfb      	ldrb	r3, [r7, #23]
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4619      	mov	r1, r3
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	440b      	add	r3, r1
 8016fe8:	3237      	adds	r2, #55	@ 0x37
 8016fea:	b2d2      	uxtb	r2, r2
 8016fec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	011b      	lsls	r3, r3, #4
 8016ff2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ff4:	7dfb      	ldrb	r3, [r7, #23]
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	68ba      	ldr	r2, [r7, #8]
 8016ffc:	4413      	add	r3, r2
 8016ffe:	2200      	movs	r2, #0
 8017000:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017002:	7dfb      	ldrb	r3, [r7, #23]
 8017004:	3301      	adds	r3, #1
 8017006:	75fb      	strb	r3, [r7, #23]
 8017008:	7dfa      	ldrb	r2, [r7, #23]
 801700a:	79fb      	ldrb	r3, [r7, #7]
 801700c:	429a      	cmp	r2, r3
 801700e:	d3d3      	bcc.n	8016fb8 <IntToUnicode+0x18>
  }
}
 8017010:	bf00      	nop
 8017012:	bf00      	nop
 8017014:	371c      	adds	r7, #28
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr
	...

08017020 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b0ba      	sub	sp, #232	@ 0xe8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801702c:	2200      	movs	r2, #0
 801702e:	601a      	str	r2, [r3, #0]
 8017030:	605a      	str	r2, [r3, #4]
 8017032:	609a      	str	r2, [r3, #8]
 8017034:	60da      	str	r2, [r3, #12]
 8017036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017038:	f107 0310 	add.w	r3, r7, #16
 801703c:	22c0      	movs	r2, #192	@ 0xc0
 801703e:	2100      	movs	r1, #0
 8017040:	4618      	mov	r0, r3
 8017042:	f000 fcbc 	bl	80179be <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	4a2c      	ldr	r2, [pc, #176]	@ (80170fc <HAL_PCD_MspInit+0xdc>)
 801704c:	4293      	cmp	r3, r2
 801704e:	d151      	bne.n	80170f4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017050:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017054:	f04f 0300 	mov.w	r3, #0
 8017058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801705c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017064:	f107 0310 	add.w	r3, r7, #16
 8017068:	4618      	mov	r0, r3
 801706a:	f7f8 fe4f 	bl	800fd0c <HAL_RCCEx_PeriphCLKConfig>
 801706e:	4603      	mov	r3, r0
 8017070:	2b00      	cmp	r3, #0
 8017072:	d001      	beq.n	8017078 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017074:	f7ef fa58 	bl	8006528 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017078:	f7f7 fe7e 	bl	800ed78 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801707c:	4b20      	ldr	r3, [pc, #128]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 801707e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017082:	4a1f      	ldr	r2, [pc, #124]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 8017084:	f043 0301 	orr.w	r3, r3, #1
 8017088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801708c:	4b1c      	ldr	r3, [pc, #112]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 801708e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017092:	f003 0301 	and.w	r3, r3, #1
 8017096:	60fb      	str	r3, [r7, #12]
 8017098:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801709a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801709e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170a2:	2302      	movs	r3, #2
 80170a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170a8:	2300      	movs	r3, #0
 80170aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80170ae:	2300      	movs	r3, #0
 80170b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80170b4:	230a      	movs	r3, #10
 80170b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80170be:	4619      	mov	r1, r3
 80170c0:	4810      	ldr	r0, [pc, #64]	@ (8017104 <HAL_PCD_MspInit+0xe4>)
 80170c2:	f7f6 f99d 	bl	800d400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80170c6:	4b0e      	ldr	r3, [pc, #56]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 80170c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80170cc:	4a0c      	ldr	r2, [pc, #48]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 80170ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80170d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80170d6:	4b0a      	ldr	r3, [pc, #40]	@ (8017100 <HAL_PCD_MspInit+0xe0>)
 80170d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80170dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80170e0:	60bb      	str	r3, [r7, #8]
 80170e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80170e4:	2200      	movs	r2, #0
 80170e6:	2100      	movs	r1, #0
 80170e8:	2065      	movs	r0, #101	@ 0x65
 80170ea:	f7f2 fba8 	bl	800983e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80170ee:	2065      	movs	r0, #101	@ 0x65
 80170f0:	f7f2 fbbf 	bl	8009872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80170f4:	bf00      	nop
 80170f6:	37e8      	adds	r7, #232	@ 0xe8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	40080000 	.word	0x40080000
 8017100:	58024400 	.word	0x58024400
 8017104:	58020000 	.word	0x58020000

08017108 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b082      	sub	sp, #8
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801711c:	4619      	mov	r1, r3
 801711e:	4610      	mov	r0, r2
 8017120:	f7fe fb19 	bl	8015756 <USBD_LL_SetupStage>
}
 8017124:	bf00      	nop
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b082      	sub	sp, #8
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	460b      	mov	r3, r1
 8017136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801713e:	78fa      	ldrb	r2, [r7, #3]
 8017140:	6879      	ldr	r1, [r7, #4]
 8017142:	4613      	mov	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	4413      	add	r3, r2
 8017148:	009b      	lsls	r3, r3, #2
 801714a:	440b      	add	r3, r1
 801714c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	78fb      	ldrb	r3, [r7, #3]
 8017154:	4619      	mov	r1, r3
 8017156:	f7fe fb53 	bl	8015800 <USBD_LL_DataOutStage>
}
 801715a:	bf00      	nop
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}

08017162 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017162:	b580      	push	{r7, lr}
 8017164:	b082      	sub	sp, #8
 8017166:	af00      	add	r7, sp, #0
 8017168:	6078      	str	r0, [r7, #4]
 801716a:	460b      	mov	r3, r1
 801716c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8017174:	78fa      	ldrb	r2, [r7, #3]
 8017176:	6879      	ldr	r1, [r7, #4]
 8017178:	4613      	mov	r3, r2
 801717a:	00db      	lsls	r3, r3, #3
 801717c:	4413      	add	r3, r2
 801717e:	009b      	lsls	r3, r3, #2
 8017180:	440b      	add	r3, r1
 8017182:	3348      	adds	r3, #72	@ 0x48
 8017184:	681a      	ldr	r2, [r3, #0]
 8017186:	78fb      	ldrb	r3, [r7, #3]
 8017188:	4619      	mov	r1, r3
 801718a:	f7fe fbec 	bl	8015966 <USBD_LL_DataInStage>
}
 801718e:	bf00      	nop
 8017190:	3708      	adds	r7, #8
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}

08017196 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017196:	b580      	push	{r7, lr}
 8017198:	b082      	sub	sp, #8
 801719a:	af00      	add	r7, sp, #0
 801719c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7fe fd26 	bl	8015bf6 <USBD_LL_SOF>
}
 80171aa:	bf00      	nop
 80171ac:	3708      	adds	r7, #8
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}

080171b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171b2:	b580      	push	{r7, lr}
 80171b4:	b084      	sub	sp, #16
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171ba:	2301      	movs	r3, #1
 80171bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	691b      	ldr	r3, [r3, #16]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d102      	bne.n	80171cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80171c6:	2300      	movs	r3, #0
 80171c8:	73fb      	strb	r3, [r7, #15]
 80171ca:	e008      	b.n	80171de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	691b      	ldr	r3, [r3, #16]
 80171d0:	2b02      	cmp	r3, #2
 80171d2:	d102      	bne.n	80171da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80171d4:	2301      	movs	r3, #1
 80171d6:	73fb      	strb	r3, [r7, #15]
 80171d8:	e001      	b.n	80171de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80171da:	f7ef f9a5 	bl	8006528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80171e4:	7bfa      	ldrb	r2, [r7, #15]
 80171e6:	4611      	mov	r1, r2
 80171e8:	4618      	mov	r0, r3
 80171ea:	f7fe fcc0 	bl	8015b6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7fe fc68 	bl	8015aca <USBD_LL_Reset>
}
 80171fa:	bf00      	nop
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
	...

08017204 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017212:	4618      	mov	r0, r3
 8017214:	f7fe fcbb 	bl	8015b8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	6812      	ldr	r2, [r2, #0]
 8017226:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801722a:	f043 0301 	orr.w	r3, r3, #1
 801722e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6a1b      	ldr	r3, [r3, #32]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d005      	beq.n	8017244 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017238:	4b04      	ldr	r3, [pc, #16]	@ (801724c <HAL_PCD_SuspendCallback+0x48>)
 801723a:	691b      	ldr	r3, [r3, #16]
 801723c:	4a03      	ldr	r2, [pc, #12]	@ (801724c <HAL_PCD_SuspendCallback+0x48>)
 801723e:	f043 0306 	orr.w	r3, r3, #6
 8017242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017244:	bf00      	nop
 8017246:	3708      	adds	r7, #8
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	e000ed00 	.word	0xe000ed00

08017250 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b082      	sub	sp, #8
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801725e:	4618      	mov	r0, r3
 8017260:	f7fe fcb1 	bl	8015bc6 <USBD_LL_Resume>
}
 8017264:	bf00      	nop
 8017266:	3708      	adds	r7, #8
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}

0801726c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	460b      	mov	r3, r1
 8017276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801727e:	78fa      	ldrb	r2, [r7, #3]
 8017280:	4611      	mov	r1, r2
 8017282:	4618      	mov	r0, r3
 8017284:	f7fe fd09 	bl	8015c9a <USBD_LL_IsoOUTIncomplete>
}
 8017288:	bf00      	nop
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	460b      	mov	r3, r1
 801729a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80172a2:	78fa      	ldrb	r2, [r7, #3]
 80172a4:	4611      	mov	r1, r2
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7fe fcc5 	bl	8015c36 <USBD_LL_IsoINIncomplete>
}
 80172ac:	bf00      	nop
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fe fd1b 	bl	8015cfe <USBD_LL_DevConnected>
}
 80172c8:	bf00      	nop
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80172de:	4618      	mov	r0, r3
 80172e0:	f7fe fd18 	bl	8015d14 <USBD_LL_DevDisconnected>
}
 80172e4:	bf00      	nop
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d13e      	bne.n	801737a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80172fc:	4a21      	ldr	r2, [pc, #132]	@ (8017384 <USBD_LL_Init+0x98>)
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4a1f      	ldr	r2, [pc, #124]	@ (8017384 <USBD_LL_Init+0x98>)
 8017308:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801730c:	4b1d      	ldr	r3, [pc, #116]	@ (8017384 <USBD_LL_Init+0x98>)
 801730e:	4a1e      	ldr	r2, [pc, #120]	@ (8017388 <USBD_LL_Init+0x9c>)
 8017310:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017312:	4b1c      	ldr	r3, [pc, #112]	@ (8017384 <USBD_LL_Init+0x98>)
 8017314:	2209      	movs	r2, #9
 8017316:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017318:	4b1a      	ldr	r3, [pc, #104]	@ (8017384 <USBD_LL_Init+0x98>)
 801731a:	2202      	movs	r2, #2
 801731c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801731e:	4b19      	ldr	r3, [pc, #100]	@ (8017384 <USBD_LL_Init+0x98>)
 8017320:	2200      	movs	r2, #0
 8017322:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017324:	4b17      	ldr	r3, [pc, #92]	@ (8017384 <USBD_LL_Init+0x98>)
 8017326:	2202      	movs	r2, #2
 8017328:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801732a:	4b16      	ldr	r3, [pc, #88]	@ (8017384 <USBD_LL_Init+0x98>)
 801732c:	2200      	movs	r2, #0
 801732e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017330:	4b14      	ldr	r3, [pc, #80]	@ (8017384 <USBD_LL_Init+0x98>)
 8017332:	2200      	movs	r2, #0
 8017334:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017336:	4b13      	ldr	r3, [pc, #76]	@ (8017384 <USBD_LL_Init+0x98>)
 8017338:	2200      	movs	r2, #0
 801733a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801733c:	4b11      	ldr	r3, [pc, #68]	@ (8017384 <USBD_LL_Init+0x98>)
 801733e:	2200      	movs	r2, #0
 8017340:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017342:	4b10      	ldr	r3, [pc, #64]	@ (8017384 <USBD_LL_Init+0x98>)
 8017344:	2200      	movs	r2, #0
 8017346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017348:	4b0e      	ldr	r3, [pc, #56]	@ (8017384 <USBD_LL_Init+0x98>)
 801734a:	2200      	movs	r2, #0
 801734c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801734e:	480d      	ldr	r0, [pc, #52]	@ (8017384 <USBD_LL_Init+0x98>)
 8017350:	f7f6 fa1f 	bl	800d792 <HAL_PCD_Init>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	d001      	beq.n	801735e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801735a:	f7ef f8e5 	bl	8006528 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801735e:	2180      	movs	r1, #128	@ 0x80
 8017360:	4808      	ldr	r0, [pc, #32]	@ (8017384 <USBD_LL_Init+0x98>)
 8017362:	f7f7 fc8e 	bl	800ec82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017366:	2240      	movs	r2, #64	@ 0x40
 8017368:	2100      	movs	r1, #0
 801736a:	4806      	ldr	r0, [pc, #24]	@ (8017384 <USBD_LL_Init+0x98>)
 801736c:	f7f7 fc42 	bl	800ebf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017370:	2280      	movs	r2, #128	@ 0x80
 8017372:	2101      	movs	r1, #1
 8017374:	4803      	ldr	r0, [pc, #12]	@ (8017384 <USBD_LL_Init+0x98>)
 8017376:	f7f7 fc3d 	bl	800ebf4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801737a:	2300      	movs	r3, #0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}
 8017384:	24003a94 	.word	0x24003a94
 8017388:	40080000 	.word	0x40080000

0801738c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b084      	sub	sp, #16
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017394:	2300      	movs	r3, #0
 8017396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017398:	2300      	movs	r3, #0
 801739a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7f6 fb19 	bl	800d9da <HAL_PCD_Start>
 80173a8:	4603      	mov	r3, r0
 80173aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173ac:	7bfb      	ldrb	r3, [r7, #15]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 f942 	bl	8017638 <USBD_Get_USB_Status>
 80173b4:	4603      	mov	r3, r0
 80173b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3710      	adds	r7, #16
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b084      	sub	sp, #16
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	6078      	str	r0, [r7, #4]
 80173ca:	4608      	mov	r0, r1
 80173cc:	4611      	mov	r1, r2
 80173ce:	461a      	mov	r2, r3
 80173d0:	4603      	mov	r3, r0
 80173d2:	70fb      	strb	r3, [r7, #3]
 80173d4:	460b      	mov	r3, r1
 80173d6:	70bb      	strb	r3, [r7, #2]
 80173d8:	4613      	mov	r3, r2
 80173da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173dc:	2300      	movs	r3, #0
 80173de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173e0:	2300      	movs	r3, #0
 80173e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80173ea:	78bb      	ldrb	r3, [r7, #2]
 80173ec:	883a      	ldrh	r2, [r7, #0]
 80173ee:	78f9      	ldrb	r1, [r7, #3]
 80173f0:	f7f7 f819 	bl	800e426 <HAL_PCD_EP_Open>
 80173f4:	4603      	mov	r3, r0
 80173f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173f8:	7bfb      	ldrb	r3, [r7, #15]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f000 f91c 	bl	8017638 <USBD_Get_USB_Status>
 8017400:	4603      	mov	r3, r0
 8017402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017404:	7bbb      	ldrb	r3, [r7, #14]
}
 8017406:	4618      	mov	r0, r3
 8017408:	3710      	adds	r7, #16
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b084      	sub	sp, #16
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	460b      	mov	r3, r1
 8017418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801741a:	2300      	movs	r3, #0
 801741c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801741e:	2300      	movs	r3, #0
 8017420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017428:	78fa      	ldrb	r2, [r7, #3]
 801742a:	4611      	mov	r1, r2
 801742c:	4618      	mov	r0, r3
 801742e:	f7f7 f862 	bl	800e4f6 <HAL_PCD_EP_Close>
 8017432:	4603      	mov	r3, r0
 8017434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017436:	7bfb      	ldrb	r3, [r7, #15]
 8017438:	4618      	mov	r0, r3
 801743a:	f000 f8fd 	bl	8017638 <USBD_Get_USB_Status>
 801743e:	4603      	mov	r3, r0
 8017440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017442:	7bbb      	ldrb	r3, [r7, #14]
}
 8017444:	4618      	mov	r0, r3
 8017446:	3710      	adds	r7, #16
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b084      	sub	sp, #16
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
 8017454:	460b      	mov	r3, r1
 8017456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017458:	2300      	movs	r3, #0
 801745a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801745c:	2300      	movs	r3, #0
 801745e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017466:	78fa      	ldrb	r2, [r7, #3]
 8017468:	4611      	mov	r1, r2
 801746a:	4618      	mov	r0, r3
 801746c:	f7f7 f91c 	bl	800e6a8 <HAL_PCD_EP_SetStall>
 8017470:	4603      	mov	r3, r0
 8017472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017474:	7bfb      	ldrb	r3, [r7, #15]
 8017476:	4618      	mov	r0, r3
 8017478:	f000 f8de 	bl	8017638 <USBD_Get_USB_Status>
 801747c:	4603      	mov	r3, r0
 801747e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017480:	7bbb      	ldrb	r3, [r7, #14]
}
 8017482:	4618      	mov	r0, r3
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}

0801748a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801748a:	b580      	push	{r7, lr}
 801748c:	b084      	sub	sp, #16
 801748e:	af00      	add	r7, sp, #0
 8017490:	6078      	str	r0, [r7, #4]
 8017492:	460b      	mov	r3, r1
 8017494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017496:	2300      	movs	r3, #0
 8017498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801749a:	2300      	movs	r3, #0
 801749c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80174a4:	78fa      	ldrb	r2, [r7, #3]
 80174a6:	4611      	mov	r1, r2
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f7 f961 	bl	800e770 <HAL_PCD_EP_ClrStall>
 80174ae:	4603      	mov	r3, r0
 80174b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174b2:	7bfb      	ldrb	r3, [r7, #15]
 80174b4:	4618      	mov	r0, r3
 80174b6:	f000 f8bf 	bl	8017638 <USBD_Get_USB_Status>
 80174ba:	4603      	mov	r3, r0
 80174bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174be:	7bbb      	ldrb	r3, [r7, #14]
}
 80174c0:	4618      	mov	r0, r3
 80174c2:	3710      	adds	r7, #16
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}

080174c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174c8:	b480      	push	{r7}
 80174ca:	b085      	sub	sp, #20
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
 80174d0:	460b      	mov	r3, r1
 80174d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80174da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80174dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	da0b      	bge.n	80174fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80174e4:	78fb      	ldrb	r3, [r7, #3]
 80174e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80174ea:	68f9      	ldr	r1, [r7, #12]
 80174ec:	4613      	mov	r3, r2
 80174ee:	00db      	lsls	r3, r3, #3
 80174f0:	4413      	add	r3, r2
 80174f2:	009b      	lsls	r3, r3, #2
 80174f4:	440b      	add	r3, r1
 80174f6:	333e      	adds	r3, #62	@ 0x3e
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	e00b      	b.n	8017514 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80174fc:	78fb      	ldrb	r3, [r7, #3]
 80174fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017502:	68f9      	ldr	r1, [r7, #12]
 8017504:	4613      	mov	r3, r2
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	4413      	add	r3, r2
 801750a:	009b      	lsls	r3, r3, #2
 801750c:	440b      	add	r3, r1
 801750e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8017512:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017514:	4618      	mov	r0, r3
 8017516:	3714      	adds	r7, #20
 8017518:	46bd      	mov	sp, r7
 801751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751e:	4770      	bx	lr

08017520 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	460b      	mov	r3, r1
 801752a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801752c:	2300      	movs	r3, #0
 801752e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017530:	2300      	movs	r3, #0
 8017532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801753a:	78fa      	ldrb	r2, [r7, #3]
 801753c:	4611      	mov	r1, r2
 801753e:	4618      	mov	r0, r3
 8017540:	f7f6 ff4c 	bl	800e3dc <HAL_PCD_SetAddress>
 8017544:	4603      	mov	r3, r0
 8017546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017548:	7bfb      	ldrb	r3, [r7, #15]
 801754a:	4618      	mov	r0, r3
 801754c:	f000 f874 	bl	8017638 <USBD_Get_USB_Status>
 8017550:	4603      	mov	r3, r0
 8017552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017554:	7bbb      	ldrb	r3, [r7, #14]
}
 8017556:	4618      	mov	r0, r3
 8017558:	3710      	adds	r7, #16
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}

0801755e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801755e:	b580      	push	{r7, lr}
 8017560:	b086      	sub	sp, #24
 8017562:	af00      	add	r7, sp, #0
 8017564:	60f8      	str	r0, [r7, #12]
 8017566:	607a      	str	r2, [r7, #4]
 8017568:	603b      	str	r3, [r7, #0]
 801756a:	460b      	mov	r3, r1
 801756c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801756e:	2300      	movs	r3, #0
 8017570:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017572:	2300      	movs	r3, #0
 8017574:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801757c:	7af9      	ldrb	r1, [r7, #11]
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	f7f7 f856 	bl	800e632 <HAL_PCD_EP_Transmit>
 8017586:	4603      	mov	r3, r0
 8017588:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	4618      	mov	r0, r3
 801758e:	f000 f853 	bl	8017638 <USBD_Get_USB_Status>
 8017592:	4603      	mov	r3, r0
 8017594:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017596:	7dbb      	ldrb	r3, [r7, #22]
}
 8017598:	4618      	mov	r0, r3
 801759a:	3718      	adds	r7, #24
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b086      	sub	sp, #24
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	607a      	str	r2, [r7, #4]
 80175aa:	603b      	str	r3, [r7, #0]
 80175ac:	460b      	mov	r3, r1
 80175ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175b0:	2300      	movs	r3, #0
 80175b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175b4:	2300      	movs	r3, #0
 80175b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80175be:	7af9      	ldrb	r1, [r7, #11]
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	f7f6 ffe1 	bl	800e58a <HAL_PCD_EP_Receive>
 80175c8:	4603      	mov	r3, r0
 80175ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175cc:	7dfb      	ldrb	r3, [r7, #23]
 80175ce:	4618      	mov	r0, r3
 80175d0:	f000 f832 	bl	8017638 <USBD_Get_USB_Status>
 80175d4:	4603      	mov	r3, r0
 80175d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3718      	adds	r7, #24
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	460b      	mov	r3, r1
 80175ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80175f4:	78fa      	ldrb	r2, [r7, #3]
 80175f6:	4611      	mov	r1, r2
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7f7 f802 	bl	800e602 <HAL_PCD_EP_GetRxCount>
 80175fe:	4603      	mov	r3, r0
}
 8017600:	4618      	mov	r0, r3
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017610:	4b03      	ldr	r3, [pc, #12]	@ (8017620 <USBD_static_malloc+0x18>)
}
 8017612:	4618      	mov	r0, r3
 8017614:	370c      	adds	r7, #12
 8017616:	46bd      	mov	sp, r7
 8017618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761c:	4770      	bx	lr
 801761e:	bf00      	nop
 8017620:	24003fa0 	.word	0x24003fa0

08017624 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017624:	b480      	push	{r7}
 8017626:	b083      	sub	sp, #12
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801762c:	bf00      	nop
 801762e:	370c      	adds	r7, #12
 8017630:	46bd      	mov	sp, r7
 8017632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017636:	4770      	bx	lr

08017638 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017638:	b480      	push	{r7}
 801763a:	b085      	sub	sp, #20
 801763c:	af00      	add	r7, sp, #0
 801763e:	4603      	mov	r3, r0
 8017640:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017642:	2300      	movs	r3, #0
 8017644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017646:	79fb      	ldrb	r3, [r7, #7]
 8017648:	2b03      	cmp	r3, #3
 801764a:	d817      	bhi.n	801767c <USBD_Get_USB_Status+0x44>
 801764c:	a201      	add	r2, pc, #4	@ (adr r2, 8017654 <USBD_Get_USB_Status+0x1c>)
 801764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017652:	bf00      	nop
 8017654:	08017665 	.word	0x08017665
 8017658:	0801766b 	.word	0x0801766b
 801765c:	08017671 	.word	0x08017671
 8017660:	08017677 	.word	0x08017677
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017664:	2300      	movs	r3, #0
 8017666:	73fb      	strb	r3, [r7, #15]
    break;
 8017668:	e00b      	b.n	8017682 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801766a:	2303      	movs	r3, #3
 801766c:	73fb      	strb	r3, [r7, #15]
    break;
 801766e:	e008      	b.n	8017682 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017670:	2301      	movs	r3, #1
 8017672:	73fb      	strb	r3, [r7, #15]
    break;
 8017674:	e005      	b.n	8017682 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017676:	2303      	movs	r3, #3
 8017678:	73fb      	strb	r3, [r7, #15]
    break;
 801767a:	e002      	b.n	8017682 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801767c:	2303      	movs	r3, #3
 801767e:	73fb      	strb	r3, [r7, #15]
    break;
 8017680:	bf00      	nop
  }
  return usb_status;
 8017682:	7bfb      	ldrb	r3, [r7, #15]
}
 8017684:	4618      	mov	r0, r3
 8017686:	3714      	adds	r7, #20
 8017688:	46bd      	mov	sp, r7
 801768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768e:	4770      	bx	lr

08017690 <rand>:
 8017690:	4b16      	ldr	r3, [pc, #88]	@ (80176ec <rand+0x5c>)
 8017692:	b510      	push	{r4, lr}
 8017694:	681c      	ldr	r4, [r3, #0]
 8017696:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017698:	b9b3      	cbnz	r3, 80176c8 <rand+0x38>
 801769a:	2018      	movs	r0, #24
 801769c:	f000 fa82 	bl	8017ba4 <malloc>
 80176a0:	4602      	mov	r2, r0
 80176a2:	6320      	str	r0, [r4, #48]	@ 0x30
 80176a4:	b920      	cbnz	r0, 80176b0 <rand+0x20>
 80176a6:	4b12      	ldr	r3, [pc, #72]	@ (80176f0 <rand+0x60>)
 80176a8:	4812      	ldr	r0, [pc, #72]	@ (80176f4 <rand+0x64>)
 80176aa:	2152      	movs	r1, #82	@ 0x52
 80176ac:	f000 fa12 	bl	8017ad4 <__assert_func>
 80176b0:	4911      	ldr	r1, [pc, #68]	@ (80176f8 <rand+0x68>)
 80176b2:	4b12      	ldr	r3, [pc, #72]	@ (80176fc <rand+0x6c>)
 80176b4:	e9c0 1300 	strd	r1, r3, [r0]
 80176b8:	4b11      	ldr	r3, [pc, #68]	@ (8017700 <rand+0x70>)
 80176ba:	6083      	str	r3, [r0, #8]
 80176bc:	230b      	movs	r3, #11
 80176be:	8183      	strh	r3, [r0, #12]
 80176c0:	2100      	movs	r1, #0
 80176c2:	2001      	movs	r0, #1
 80176c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80176c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176ca:	480e      	ldr	r0, [pc, #56]	@ (8017704 <rand+0x74>)
 80176cc:	690b      	ldr	r3, [r1, #16]
 80176ce:	694c      	ldr	r4, [r1, #20]
 80176d0:	4a0d      	ldr	r2, [pc, #52]	@ (8017708 <rand+0x78>)
 80176d2:	4358      	muls	r0, r3
 80176d4:	fb02 0004 	mla	r0, r2, r4, r0
 80176d8:	fba3 3202 	umull	r3, r2, r3, r2
 80176dc:	3301      	adds	r3, #1
 80176de:	eb40 0002 	adc.w	r0, r0, r2
 80176e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80176ea:	bd10      	pop	{r4, pc}
 80176ec:	24000138 	.word	0x24000138
 80176f0:	0801bbcc 	.word	0x0801bbcc
 80176f4:	0801bbe3 	.word	0x0801bbe3
 80176f8:	abcd330e 	.word	0xabcd330e
 80176fc:	e66d1234 	.word	0xe66d1234
 8017700:	0005deec 	.word	0x0005deec
 8017704:	5851f42d 	.word	0x5851f42d
 8017708:	4c957f2d 	.word	0x4c957f2d

0801770c <std>:
 801770c:	2300      	movs	r3, #0
 801770e:	b510      	push	{r4, lr}
 8017710:	4604      	mov	r4, r0
 8017712:	e9c0 3300 	strd	r3, r3, [r0]
 8017716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801771a:	6083      	str	r3, [r0, #8]
 801771c:	8181      	strh	r1, [r0, #12]
 801771e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017720:	81c2      	strh	r2, [r0, #14]
 8017722:	6183      	str	r3, [r0, #24]
 8017724:	4619      	mov	r1, r3
 8017726:	2208      	movs	r2, #8
 8017728:	305c      	adds	r0, #92	@ 0x5c
 801772a:	f000 f948 	bl	80179be <memset>
 801772e:	4b0d      	ldr	r3, [pc, #52]	@ (8017764 <std+0x58>)
 8017730:	6263      	str	r3, [r4, #36]	@ 0x24
 8017732:	4b0d      	ldr	r3, [pc, #52]	@ (8017768 <std+0x5c>)
 8017734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017736:	4b0d      	ldr	r3, [pc, #52]	@ (801776c <std+0x60>)
 8017738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801773a:	4b0d      	ldr	r3, [pc, #52]	@ (8017770 <std+0x64>)
 801773c:	6323      	str	r3, [r4, #48]	@ 0x30
 801773e:	4b0d      	ldr	r3, [pc, #52]	@ (8017774 <std+0x68>)
 8017740:	6224      	str	r4, [r4, #32]
 8017742:	429c      	cmp	r4, r3
 8017744:	d006      	beq.n	8017754 <std+0x48>
 8017746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801774a:	4294      	cmp	r4, r2
 801774c:	d002      	beq.n	8017754 <std+0x48>
 801774e:	33d0      	adds	r3, #208	@ 0xd0
 8017750:	429c      	cmp	r4, r3
 8017752:	d105      	bne.n	8017760 <std+0x54>
 8017754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801775c:	f000 b9a8 	b.w	8017ab0 <__retarget_lock_init_recursive>
 8017760:	bd10      	pop	{r4, pc}
 8017762:	bf00      	nop
 8017764:	08017939 	.word	0x08017939
 8017768:	0801795b 	.word	0x0801795b
 801776c:	08017993 	.word	0x08017993
 8017770:	080179b7 	.word	0x080179b7
 8017774:	240041c0 	.word	0x240041c0

08017778 <stdio_exit_handler>:
 8017778:	4a02      	ldr	r2, [pc, #8]	@ (8017784 <stdio_exit_handler+0xc>)
 801777a:	4903      	ldr	r1, [pc, #12]	@ (8017788 <stdio_exit_handler+0x10>)
 801777c:	4803      	ldr	r0, [pc, #12]	@ (801778c <stdio_exit_handler+0x14>)
 801777e:	f000 b869 	b.w	8017854 <_fwalk_sglue>
 8017782:	bf00      	nop
 8017784:	2400012c 	.word	0x2400012c
 8017788:	08018669 	.word	0x08018669
 801778c:	2400013c 	.word	0x2400013c

08017790 <cleanup_stdio>:
 8017790:	6841      	ldr	r1, [r0, #4]
 8017792:	4b0c      	ldr	r3, [pc, #48]	@ (80177c4 <cleanup_stdio+0x34>)
 8017794:	4299      	cmp	r1, r3
 8017796:	b510      	push	{r4, lr}
 8017798:	4604      	mov	r4, r0
 801779a:	d001      	beq.n	80177a0 <cleanup_stdio+0x10>
 801779c:	f000 ff64 	bl	8018668 <_fflush_r>
 80177a0:	68a1      	ldr	r1, [r4, #8]
 80177a2:	4b09      	ldr	r3, [pc, #36]	@ (80177c8 <cleanup_stdio+0x38>)
 80177a4:	4299      	cmp	r1, r3
 80177a6:	d002      	beq.n	80177ae <cleanup_stdio+0x1e>
 80177a8:	4620      	mov	r0, r4
 80177aa:	f000 ff5d 	bl	8018668 <_fflush_r>
 80177ae:	68e1      	ldr	r1, [r4, #12]
 80177b0:	4b06      	ldr	r3, [pc, #24]	@ (80177cc <cleanup_stdio+0x3c>)
 80177b2:	4299      	cmp	r1, r3
 80177b4:	d004      	beq.n	80177c0 <cleanup_stdio+0x30>
 80177b6:	4620      	mov	r0, r4
 80177b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177bc:	f000 bf54 	b.w	8018668 <_fflush_r>
 80177c0:	bd10      	pop	{r4, pc}
 80177c2:	bf00      	nop
 80177c4:	240041c0 	.word	0x240041c0
 80177c8:	24004228 	.word	0x24004228
 80177cc:	24004290 	.word	0x24004290

080177d0 <global_stdio_init.part.0>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	4b0b      	ldr	r3, [pc, #44]	@ (8017800 <global_stdio_init.part.0+0x30>)
 80177d4:	4c0b      	ldr	r4, [pc, #44]	@ (8017804 <global_stdio_init.part.0+0x34>)
 80177d6:	4a0c      	ldr	r2, [pc, #48]	@ (8017808 <global_stdio_init.part.0+0x38>)
 80177d8:	601a      	str	r2, [r3, #0]
 80177da:	4620      	mov	r0, r4
 80177dc:	2200      	movs	r2, #0
 80177de:	2104      	movs	r1, #4
 80177e0:	f7ff ff94 	bl	801770c <std>
 80177e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80177e8:	2201      	movs	r2, #1
 80177ea:	2109      	movs	r1, #9
 80177ec:	f7ff ff8e 	bl	801770c <std>
 80177f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80177f4:	2202      	movs	r2, #2
 80177f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177fa:	2112      	movs	r1, #18
 80177fc:	f7ff bf86 	b.w	801770c <std>
 8017800:	240042f8 	.word	0x240042f8
 8017804:	240041c0 	.word	0x240041c0
 8017808:	08017779 	.word	0x08017779

0801780c <__sfp_lock_acquire>:
 801780c:	4801      	ldr	r0, [pc, #4]	@ (8017814 <__sfp_lock_acquire+0x8>)
 801780e:	f000 b950 	b.w	8017ab2 <__retarget_lock_acquire_recursive>
 8017812:	bf00      	nop
 8017814:	24004301 	.word	0x24004301

08017818 <__sfp_lock_release>:
 8017818:	4801      	ldr	r0, [pc, #4]	@ (8017820 <__sfp_lock_release+0x8>)
 801781a:	f000 b94b 	b.w	8017ab4 <__retarget_lock_release_recursive>
 801781e:	bf00      	nop
 8017820:	24004301 	.word	0x24004301

08017824 <__sinit>:
 8017824:	b510      	push	{r4, lr}
 8017826:	4604      	mov	r4, r0
 8017828:	f7ff fff0 	bl	801780c <__sfp_lock_acquire>
 801782c:	6a23      	ldr	r3, [r4, #32]
 801782e:	b11b      	cbz	r3, 8017838 <__sinit+0x14>
 8017830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017834:	f7ff bff0 	b.w	8017818 <__sfp_lock_release>
 8017838:	4b04      	ldr	r3, [pc, #16]	@ (801784c <__sinit+0x28>)
 801783a:	6223      	str	r3, [r4, #32]
 801783c:	4b04      	ldr	r3, [pc, #16]	@ (8017850 <__sinit+0x2c>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d1f5      	bne.n	8017830 <__sinit+0xc>
 8017844:	f7ff ffc4 	bl	80177d0 <global_stdio_init.part.0>
 8017848:	e7f2      	b.n	8017830 <__sinit+0xc>
 801784a:	bf00      	nop
 801784c:	08017791 	.word	0x08017791
 8017850:	240042f8 	.word	0x240042f8

08017854 <_fwalk_sglue>:
 8017854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017858:	4607      	mov	r7, r0
 801785a:	4688      	mov	r8, r1
 801785c:	4614      	mov	r4, r2
 801785e:	2600      	movs	r6, #0
 8017860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017864:	f1b9 0901 	subs.w	r9, r9, #1
 8017868:	d505      	bpl.n	8017876 <_fwalk_sglue+0x22>
 801786a:	6824      	ldr	r4, [r4, #0]
 801786c:	2c00      	cmp	r4, #0
 801786e:	d1f7      	bne.n	8017860 <_fwalk_sglue+0xc>
 8017870:	4630      	mov	r0, r6
 8017872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017876:	89ab      	ldrh	r3, [r5, #12]
 8017878:	2b01      	cmp	r3, #1
 801787a:	d907      	bls.n	801788c <_fwalk_sglue+0x38>
 801787c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017880:	3301      	adds	r3, #1
 8017882:	d003      	beq.n	801788c <_fwalk_sglue+0x38>
 8017884:	4629      	mov	r1, r5
 8017886:	4638      	mov	r0, r7
 8017888:	47c0      	blx	r8
 801788a:	4306      	orrs	r6, r0
 801788c:	3568      	adds	r5, #104	@ 0x68
 801788e:	e7e9      	b.n	8017864 <_fwalk_sglue+0x10>

08017890 <sniprintf>:
 8017890:	b40c      	push	{r2, r3}
 8017892:	b530      	push	{r4, r5, lr}
 8017894:	4b17      	ldr	r3, [pc, #92]	@ (80178f4 <sniprintf+0x64>)
 8017896:	1e0c      	subs	r4, r1, #0
 8017898:	681d      	ldr	r5, [r3, #0]
 801789a:	b09d      	sub	sp, #116	@ 0x74
 801789c:	da08      	bge.n	80178b0 <sniprintf+0x20>
 801789e:	238b      	movs	r3, #139	@ 0x8b
 80178a0:	602b      	str	r3, [r5, #0]
 80178a2:	f04f 30ff 	mov.w	r0, #4294967295
 80178a6:	b01d      	add	sp, #116	@ 0x74
 80178a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178ac:	b002      	add	sp, #8
 80178ae:	4770      	bx	lr
 80178b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80178b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178b8:	bf14      	ite	ne
 80178ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80178be:	4623      	moveq	r3, r4
 80178c0:	9304      	str	r3, [sp, #16]
 80178c2:	9307      	str	r3, [sp, #28]
 80178c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80178c8:	9002      	str	r0, [sp, #8]
 80178ca:	9006      	str	r0, [sp, #24]
 80178cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80178d2:	ab21      	add	r3, sp, #132	@ 0x84
 80178d4:	a902      	add	r1, sp, #8
 80178d6:	4628      	mov	r0, r5
 80178d8:	9301      	str	r3, [sp, #4]
 80178da:	f000 fa75 	bl	8017dc8 <_svfiprintf_r>
 80178de:	1c43      	adds	r3, r0, #1
 80178e0:	bfbc      	itt	lt
 80178e2:	238b      	movlt	r3, #139	@ 0x8b
 80178e4:	602b      	strlt	r3, [r5, #0]
 80178e6:	2c00      	cmp	r4, #0
 80178e8:	d0dd      	beq.n	80178a6 <sniprintf+0x16>
 80178ea:	9b02      	ldr	r3, [sp, #8]
 80178ec:	2200      	movs	r2, #0
 80178ee:	701a      	strb	r2, [r3, #0]
 80178f0:	e7d9      	b.n	80178a6 <sniprintf+0x16>
 80178f2:	bf00      	nop
 80178f4:	24000138 	.word	0x24000138

080178f8 <siprintf>:
 80178f8:	b40e      	push	{r1, r2, r3}
 80178fa:	b500      	push	{lr}
 80178fc:	b09c      	sub	sp, #112	@ 0x70
 80178fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8017900:	9002      	str	r0, [sp, #8]
 8017902:	9006      	str	r0, [sp, #24]
 8017904:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017908:	4809      	ldr	r0, [pc, #36]	@ (8017930 <siprintf+0x38>)
 801790a:	9107      	str	r1, [sp, #28]
 801790c:	9104      	str	r1, [sp, #16]
 801790e:	4909      	ldr	r1, [pc, #36]	@ (8017934 <siprintf+0x3c>)
 8017910:	f853 2b04 	ldr.w	r2, [r3], #4
 8017914:	9105      	str	r1, [sp, #20]
 8017916:	6800      	ldr	r0, [r0, #0]
 8017918:	9301      	str	r3, [sp, #4]
 801791a:	a902      	add	r1, sp, #8
 801791c:	f000 fa54 	bl	8017dc8 <_svfiprintf_r>
 8017920:	9b02      	ldr	r3, [sp, #8]
 8017922:	2200      	movs	r2, #0
 8017924:	701a      	strb	r2, [r3, #0]
 8017926:	b01c      	add	sp, #112	@ 0x70
 8017928:	f85d eb04 	ldr.w	lr, [sp], #4
 801792c:	b003      	add	sp, #12
 801792e:	4770      	bx	lr
 8017930:	24000138 	.word	0x24000138
 8017934:	ffff0208 	.word	0xffff0208

08017938 <__sread>:
 8017938:	b510      	push	{r4, lr}
 801793a:	460c      	mov	r4, r1
 801793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017940:	f000 f868 	bl	8017a14 <_read_r>
 8017944:	2800      	cmp	r0, #0
 8017946:	bfab      	itete	ge
 8017948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801794a:	89a3      	ldrhlt	r3, [r4, #12]
 801794c:	181b      	addge	r3, r3, r0
 801794e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017952:	bfac      	ite	ge
 8017954:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017956:	81a3      	strhlt	r3, [r4, #12]
 8017958:	bd10      	pop	{r4, pc}

0801795a <__swrite>:
 801795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801795e:	461f      	mov	r7, r3
 8017960:	898b      	ldrh	r3, [r1, #12]
 8017962:	05db      	lsls	r3, r3, #23
 8017964:	4605      	mov	r5, r0
 8017966:	460c      	mov	r4, r1
 8017968:	4616      	mov	r6, r2
 801796a:	d505      	bpl.n	8017978 <__swrite+0x1e>
 801796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017970:	2302      	movs	r3, #2
 8017972:	2200      	movs	r2, #0
 8017974:	f000 f83c 	bl	80179f0 <_lseek_r>
 8017978:	89a3      	ldrh	r3, [r4, #12]
 801797a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801797e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017982:	81a3      	strh	r3, [r4, #12]
 8017984:	4632      	mov	r2, r6
 8017986:	463b      	mov	r3, r7
 8017988:	4628      	mov	r0, r5
 801798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801798e:	f000 b853 	b.w	8017a38 <_write_r>

08017992 <__sseek>:
 8017992:	b510      	push	{r4, lr}
 8017994:	460c      	mov	r4, r1
 8017996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801799a:	f000 f829 	bl	80179f0 <_lseek_r>
 801799e:	1c43      	adds	r3, r0, #1
 80179a0:	89a3      	ldrh	r3, [r4, #12]
 80179a2:	bf15      	itete	ne
 80179a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80179a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80179aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80179ae:	81a3      	strheq	r3, [r4, #12]
 80179b0:	bf18      	it	ne
 80179b2:	81a3      	strhne	r3, [r4, #12]
 80179b4:	bd10      	pop	{r4, pc}

080179b6 <__sclose>:
 80179b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ba:	f000 b809 	b.w	80179d0 <_close_r>

080179be <memset>:
 80179be:	4402      	add	r2, r0
 80179c0:	4603      	mov	r3, r0
 80179c2:	4293      	cmp	r3, r2
 80179c4:	d100      	bne.n	80179c8 <memset+0xa>
 80179c6:	4770      	bx	lr
 80179c8:	f803 1b01 	strb.w	r1, [r3], #1
 80179cc:	e7f9      	b.n	80179c2 <memset+0x4>
	...

080179d0 <_close_r>:
 80179d0:	b538      	push	{r3, r4, r5, lr}
 80179d2:	4d06      	ldr	r5, [pc, #24]	@ (80179ec <_close_r+0x1c>)
 80179d4:	2300      	movs	r3, #0
 80179d6:	4604      	mov	r4, r0
 80179d8:	4608      	mov	r0, r1
 80179da:	602b      	str	r3, [r5, #0]
 80179dc:	f7f1 fb64 	bl	80090a8 <_close>
 80179e0:	1c43      	adds	r3, r0, #1
 80179e2:	d102      	bne.n	80179ea <_close_r+0x1a>
 80179e4:	682b      	ldr	r3, [r5, #0]
 80179e6:	b103      	cbz	r3, 80179ea <_close_r+0x1a>
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	bd38      	pop	{r3, r4, r5, pc}
 80179ec:	240042fc 	.word	0x240042fc

080179f0 <_lseek_r>:
 80179f0:	b538      	push	{r3, r4, r5, lr}
 80179f2:	4d07      	ldr	r5, [pc, #28]	@ (8017a10 <_lseek_r+0x20>)
 80179f4:	4604      	mov	r4, r0
 80179f6:	4608      	mov	r0, r1
 80179f8:	4611      	mov	r1, r2
 80179fa:	2200      	movs	r2, #0
 80179fc:	602a      	str	r2, [r5, #0]
 80179fe:	461a      	mov	r2, r3
 8017a00:	f7f1 fb79 	bl	80090f6 <_lseek>
 8017a04:	1c43      	adds	r3, r0, #1
 8017a06:	d102      	bne.n	8017a0e <_lseek_r+0x1e>
 8017a08:	682b      	ldr	r3, [r5, #0]
 8017a0a:	b103      	cbz	r3, 8017a0e <_lseek_r+0x1e>
 8017a0c:	6023      	str	r3, [r4, #0]
 8017a0e:	bd38      	pop	{r3, r4, r5, pc}
 8017a10:	240042fc 	.word	0x240042fc

08017a14 <_read_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d07      	ldr	r5, [pc, #28]	@ (8017a34 <_read_r+0x20>)
 8017a18:	4604      	mov	r4, r0
 8017a1a:	4608      	mov	r0, r1
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	2200      	movs	r2, #0
 8017a20:	602a      	str	r2, [r5, #0]
 8017a22:	461a      	mov	r2, r3
 8017a24:	f7f1 fb07 	bl	8009036 <_read>
 8017a28:	1c43      	adds	r3, r0, #1
 8017a2a:	d102      	bne.n	8017a32 <_read_r+0x1e>
 8017a2c:	682b      	ldr	r3, [r5, #0]
 8017a2e:	b103      	cbz	r3, 8017a32 <_read_r+0x1e>
 8017a30:	6023      	str	r3, [r4, #0]
 8017a32:	bd38      	pop	{r3, r4, r5, pc}
 8017a34:	240042fc 	.word	0x240042fc

08017a38 <_write_r>:
 8017a38:	b538      	push	{r3, r4, r5, lr}
 8017a3a:	4d07      	ldr	r5, [pc, #28]	@ (8017a58 <_write_r+0x20>)
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	4608      	mov	r0, r1
 8017a40:	4611      	mov	r1, r2
 8017a42:	2200      	movs	r2, #0
 8017a44:	602a      	str	r2, [r5, #0]
 8017a46:	461a      	mov	r2, r3
 8017a48:	f7f1 fb12 	bl	8009070 <_write>
 8017a4c:	1c43      	adds	r3, r0, #1
 8017a4e:	d102      	bne.n	8017a56 <_write_r+0x1e>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	b103      	cbz	r3, 8017a56 <_write_r+0x1e>
 8017a54:	6023      	str	r3, [r4, #0]
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	240042fc 	.word	0x240042fc

08017a5c <__errno>:
 8017a5c:	4b01      	ldr	r3, [pc, #4]	@ (8017a64 <__errno+0x8>)
 8017a5e:	6818      	ldr	r0, [r3, #0]
 8017a60:	4770      	bx	lr
 8017a62:	bf00      	nop
 8017a64:	24000138 	.word	0x24000138

08017a68 <__libc_init_array>:
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8017aa0 <__libc_init_array+0x38>)
 8017a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8017aa4 <__libc_init_array+0x3c>)
 8017a6e:	1b64      	subs	r4, r4, r5
 8017a70:	10a4      	asrs	r4, r4, #2
 8017a72:	2600      	movs	r6, #0
 8017a74:	42a6      	cmp	r6, r4
 8017a76:	d109      	bne.n	8017a8c <__libc_init_array+0x24>
 8017a78:	4d0b      	ldr	r5, [pc, #44]	@ (8017aa8 <__libc_init_array+0x40>)
 8017a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8017aac <__libc_init_array+0x44>)
 8017a7c:	f000 fff2 	bl	8018a64 <_init>
 8017a80:	1b64      	subs	r4, r4, r5
 8017a82:	10a4      	asrs	r4, r4, #2
 8017a84:	2600      	movs	r6, #0
 8017a86:	42a6      	cmp	r6, r4
 8017a88:	d105      	bne.n	8017a96 <__libc_init_array+0x2e>
 8017a8a:	bd70      	pop	{r4, r5, r6, pc}
 8017a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a90:	4798      	blx	r3
 8017a92:	3601      	adds	r6, #1
 8017a94:	e7ee      	b.n	8017a74 <__libc_init_array+0xc>
 8017a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a9a:	4798      	blx	r3
 8017a9c:	3601      	adds	r6, #1
 8017a9e:	e7f2      	b.n	8017a86 <__libc_init_array+0x1e>
 8017aa0:	0801bcb4 	.word	0x0801bcb4
 8017aa4:	0801bcb4 	.word	0x0801bcb4
 8017aa8:	0801bcb4 	.word	0x0801bcb4
 8017aac:	0801bcb8 	.word	0x0801bcb8

08017ab0 <__retarget_lock_init_recursive>:
 8017ab0:	4770      	bx	lr

08017ab2 <__retarget_lock_acquire_recursive>:
 8017ab2:	4770      	bx	lr

08017ab4 <__retarget_lock_release_recursive>:
 8017ab4:	4770      	bx	lr

08017ab6 <memcpy>:
 8017ab6:	440a      	add	r2, r1
 8017ab8:	4291      	cmp	r1, r2
 8017aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8017abe:	d100      	bne.n	8017ac2 <memcpy+0xc>
 8017ac0:	4770      	bx	lr
 8017ac2:	b510      	push	{r4, lr}
 8017ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017acc:	4291      	cmp	r1, r2
 8017ace:	d1f9      	bne.n	8017ac4 <memcpy+0xe>
 8017ad0:	bd10      	pop	{r4, pc}
	...

08017ad4 <__assert_func>:
 8017ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ad6:	4614      	mov	r4, r2
 8017ad8:	461a      	mov	r2, r3
 8017ada:	4b09      	ldr	r3, [pc, #36]	@ (8017b00 <__assert_func+0x2c>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	4605      	mov	r5, r0
 8017ae0:	68d8      	ldr	r0, [r3, #12]
 8017ae2:	b954      	cbnz	r4, 8017afa <__assert_func+0x26>
 8017ae4:	4b07      	ldr	r3, [pc, #28]	@ (8017b04 <__assert_func+0x30>)
 8017ae6:	461c      	mov	r4, r3
 8017ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017aec:	9100      	str	r1, [sp, #0]
 8017aee:	462b      	mov	r3, r5
 8017af0:	4905      	ldr	r1, [pc, #20]	@ (8017b08 <__assert_func+0x34>)
 8017af2:	f000 fde1 	bl	80186b8 <fiprintf>
 8017af6:	f000 feaf 	bl	8018858 <abort>
 8017afa:	4b04      	ldr	r3, [pc, #16]	@ (8017b0c <__assert_func+0x38>)
 8017afc:	e7f4      	b.n	8017ae8 <__assert_func+0x14>
 8017afe:	bf00      	nop
 8017b00:	24000138 	.word	0x24000138
 8017b04:	0801bc76 	.word	0x0801bc76
 8017b08:	0801bc48 	.word	0x0801bc48
 8017b0c:	0801bc3b 	.word	0x0801bc3b

08017b10 <_free_r>:
 8017b10:	b538      	push	{r3, r4, r5, lr}
 8017b12:	4605      	mov	r5, r0
 8017b14:	2900      	cmp	r1, #0
 8017b16:	d041      	beq.n	8017b9c <_free_r+0x8c>
 8017b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b1c:	1f0c      	subs	r4, r1, #4
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	bfb8      	it	lt
 8017b22:	18e4      	addlt	r4, r4, r3
 8017b24:	f000 f8e8 	bl	8017cf8 <__malloc_lock>
 8017b28:	4a1d      	ldr	r2, [pc, #116]	@ (8017ba0 <_free_r+0x90>)
 8017b2a:	6813      	ldr	r3, [r2, #0]
 8017b2c:	b933      	cbnz	r3, 8017b3c <_free_r+0x2c>
 8017b2e:	6063      	str	r3, [r4, #4]
 8017b30:	6014      	str	r4, [r2, #0]
 8017b32:	4628      	mov	r0, r5
 8017b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b38:	f000 b8e4 	b.w	8017d04 <__malloc_unlock>
 8017b3c:	42a3      	cmp	r3, r4
 8017b3e:	d908      	bls.n	8017b52 <_free_r+0x42>
 8017b40:	6820      	ldr	r0, [r4, #0]
 8017b42:	1821      	adds	r1, r4, r0
 8017b44:	428b      	cmp	r3, r1
 8017b46:	bf01      	itttt	eq
 8017b48:	6819      	ldreq	r1, [r3, #0]
 8017b4a:	685b      	ldreq	r3, [r3, #4]
 8017b4c:	1809      	addeq	r1, r1, r0
 8017b4e:	6021      	streq	r1, [r4, #0]
 8017b50:	e7ed      	b.n	8017b2e <_free_r+0x1e>
 8017b52:	461a      	mov	r2, r3
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	b10b      	cbz	r3, 8017b5c <_free_r+0x4c>
 8017b58:	42a3      	cmp	r3, r4
 8017b5a:	d9fa      	bls.n	8017b52 <_free_r+0x42>
 8017b5c:	6811      	ldr	r1, [r2, #0]
 8017b5e:	1850      	adds	r0, r2, r1
 8017b60:	42a0      	cmp	r0, r4
 8017b62:	d10b      	bne.n	8017b7c <_free_r+0x6c>
 8017b64:	6820      	ldr	r0, [r4, #0]
 8017b66:	4401      	add	r1, r0
 8017b68:	1850      	adds	r0, r2, r1
 8017b6a:	4283      	cmp	r3, r0
 8017b6c:	6011      	str	r1, [r2, #0]
 8017b6e:	d1e0      	bne.n	8017b32 <_free_r+0x22>
 8017b70:	6818      	ldr	r0, [r3, #0]
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	6053      	str	r3, [r2, #4]
 8017b76:	4408      	add	r0, r1
 8017b78:	6010      	str	r0, [r2, #0]
 8017b7a:	e7da      	b.n	8017b32 <_free_r+0x22>
 8017b7c:	d902      	bls.n	8017b84 <_free_r+0x74>
 8017b7e:	230c      	movs	r3, #12
 8017b80:	602b      	str	r3, [r5, #0]
 8017b82:	e7d6      	b.n	8017b32 <_free_r+0x22>
 8017b84:	6820      	ldr	r0, [r4, #0]
 8017b86:	1821      	adds	r1, r4, r0
 8017b88:	428b      	cmp	r3, r1
 8017b8a:	bf04      	itt	eq
 8017b8c:	6819      	ldreq	r1, [r3, #0]
 8017b8e:	685b      	ldreq	r3, [r3, #4]
 8017b90:	6063      	str	r3, [r4, #4]
 8017b92:	bf04      	itt	eq
 8017b94:	1809      	addeq	r1, r1, r0
 8017b96:	6021      	streq	r1, [r4, #0]
 8017b98:	6054      	str	r4, [r2, #4]
 8017b9a:	e7ca      	b.n	8017b32 <_free_r+0x22>
 8017b9c:	bd38      	pop	{r3, r4, r5, pc}
 8017b9e:	bf00      	nop
 8017ba0:	24004308 	.word	0x24004308

08017ba4 <malloc>:
 8017ba4:	4b02      	ldr	r3, [pc, #8]	@ (8017bb0 <malloc+0xc>)
 8017ba6:	4601      	mov	r1, r0
 8017ba8:	6818      	ldr	r0, [r3, #0]
 8017baa:	f000 b825 	b.w	8017bf8 <_malloc_r>
 8017bae:	bf00      	nop
 8017bb0:	24000138 	.word	0x24000138

08017bb4 <sbrk_aligned>:
 8017bb4:	b570      	push	{r4, r5, r6, lr}
 8017bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8017bf4 <sbrk_aligned+0x40>)
 8017bb8:	460c      	mov	r4, r1
 8017bba:	6831      	ldr	r1, [r6, #0]
 8017bbc:	4605      	mov	r5, r0
 8017bbe:	b911      	cbnz	r1, 8017bc6 <sbrk_aligned+0x12>
 8017bc0:	f000 fe3a 	bl	8018838 <_sbrk_r>
 8017bc4:	6030      	str	r0, [r6, #0]
 8017bc6:	4621      	mov	r1, r4
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f000 fe35 	bl	8018838 <_sbrk_r>
 8017bce:	1c43      	adds	r3, r0, #1
 8017bd0:	d103      	bne.n	8017bda <sbrk_aligned+0x26>
 8017bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	bd70      	pop	{r4, r5, r6, pc}
 8017bda:	1cc4      	adds	r4, r0, #3
 8017bdc:	f024 0403 	bic.w	r4, r4, #3
 8017be0:	42a0      	cmp	r0, r4
 8017be2:	d0f8      	beq.n	8017bd6 <sbrk_aligned+0x22>
 8017be4:	1a21      	subs	r1, r4, r0
 8017be6:	4628      	mov	r0, r5
 8017be8:	f000 fe26 	bl	8018838 <_sbrk_r>
 8017bec:	3001      	adds	r0, #1
 8017bee:	d1f2      	bne.n	8017bd6 <sbrk_aligned+0x22>
 8017bf0:	e7ef      	b.n	8017bd2 <sbrk_aligned+0x1e>
 8017bf2:	bf00      	nop
 8017bf4:	24004304 	.word	0x24004304

08017bf8 <_malloc_r>:
 8017bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bfc:	1ccd      	adds	r5, r1, #3
 8017bfe:	f025 0503 	bic.w	r5, r5, #3
 8017c02:	3508      	adds	r5, #8
 8017c04:	2d0c      	cmp	r5, #12
 8017c06:	bf38      	it	cc
 8017c08:	250c      	movcc	r5, #12
 8017c0a:	2d00      	cmp	r5, #0
 8017c0c:	4606      	mov	r6, r0
 8017c0e:	db01      	blt.n	8017c14 <_malloc_r+0x1c>
 8017c10:	42a9      	cmp	r1, r5
 8017c12:	d904      	bls.n	8017c1e <_malloc_r+0x26>
 8017c14:	230c      	movs	r3, #12
 8017c16:	6033      	str	r3, [r6, #0]
 8017c18:	2000      	movs	r0, #0
 8017c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017cf4 <_malloc_r+0xfc>
 8017c22:	f000 f869 	bl	8017cf8 <__malloc_lock>
 8017c26:	f8d8 3000 	ldr.w	r3, [r8]
 8017c2a:	461c      	mov	r4, r3
 8017c2c:	bb44      	cbnz	r4, 8017c80 <_malloc_r+0x88>
 8017c2e:	4629      	mov	r1, r5
 8017c30:	4630      	mov	r0, r6
 8017c32:	f7ff ffbf 	bl	8017bb4 <sbrk_aligned>
 8017c36:	1c43      	adds	r3, r0, #1
 8017c38:	4604      	mov	r4, r0
 8017c3a:	d158      	bne.n	8017cee <_malloc_r+0xf6>
 8017c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8017c40:	4627      	mov	r7, r4
 8017c42:	2f00      	cmp	r7, #0
 8017c44:	d143      	bne.n	8017cce <_malloc_r+0xd6>
 8017c46:	2c00      	cmp	r4, #0
 8017c48:	d04b      	beq.n	8017ce2 <_malloc_r+0xea>
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	4639      	mov	r1, r7
 8017c4e:	4630      	mov	r0, r6
 8017c50:	eb04 0903 	add.w	r9, r4, r3
 8017c54:	f000 fdf0 	bl	8018838 <_sbrk_r>
 8017c58:	4581      	cmp	r9, r0
 8017c5a:	d142      	bne.n	8017ce2 <_malloc_r+0xea>
 8017c5c:	6821      	ldr	r1, [r4, #0]
 8017c5e:	1a6d      	subs	r5, r5, r1
 8017c60:	4629      	mov	r1, r5
 8017c62:	4630      	mov	r0, r6
 8017c64:	f7ff ffa6 	bl	8017bb4 <sbrk_aligned>
 8017c68:	3001      	adds	r0, #1
 8017c6a:	d03a      	beq.n	8017ce2 <_malloc_r+0xea>
 8017c6c:	6823      	ldr	r3, [r4, #0]
 8017c6e:	442b      	add	r3, r5
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	f8d8 3000 	ldr.w	r3, [r8]
 8017c76:	685a      	ldr	r2, [r3, #4]
 8017c78:	bb62      	cbnz	r2, 8017cd4 <_malloc_r+0xdc>
 8017c7a:	f8c8 7000 	str.w	r7, [r8]
 8017c7e:	e00f      	b.n	8017ca0 <_malloc_r+0xa8>
 8017c80:	6822      	ldr	r2, [r4, #0]
 8017c82:	1b52      	subs	r2, r2, r5
 8017c84:	d420      	bmi.n	8017cc8 <_malloc_r+0xd0>
 8017c86:	2a0b      	cmp	r2, #11
 8017c88:	d917      	bls.n	8017cba <_malloc_r+0xc2>
 8017c8a:	1961      	adds	r1, r4, r5
 8017c8c:	42a3      	cmp	r3, r4
 8017c8e:	6025      	str	r5, [r4, #0]
 8017c90:	bf18      	it	ne
 8017c92:	6059      	strne	r1, [r3, #4]
 8017c94:	6863      	ldr	r3, [r4, #4]
 8017c96:	bf08      	it	eq
 8017c98:	f8c8 1000 	streq.w	r1, [r8]
 8017c9c:	5162      	str	r2, [r4, r5]
 8017c9e:	604b      	str	r3, [r1, #4]
 8017ca0:	4630      	mov	r0, r6
 8017ca2:	f000 f82f 	bl	8017d04 <__malloc_unlock>
 8017ca6:	f104 000b 	add.w	r0, r4, #11
 8017caa:	1d23      	adds	r3, r4, #4
 8017cac:	f020 0007 	bic.w	r0, r0, #7
 8017cb0:	1ac2      	subs	r2, r0, r3
 8017cb2:	bf1c      	itt	ne
 8017cb4:	1a1b      	subne	r3, r3, r0
 8017cb6:	50a3      	strne	r3, [r4, r2]
 8017cb8:	e7af      	b.n	8017c1a <_malloc_r+0x22>
 8017cba:	6862      	ldr	r2, [r4, #4]
 8017cbc:	42a3      	cmp	r3, r4
 8017cbe:	bf0c      	ite	eq
 8017cc0:	f8c8 2000 	streq.w	r2, [r8]
 8017cc4:	605a      	strne	r2, [r3, #4]
 8017cc6:	e7eb      	b.n	8017ca0 <_malloc_r+0xa8>
 8017cc8:	4623      	mov	r3, r4
 8017cca:	6864      	ldr	r4, [r4, #4]
 8017ccc:	e7ae      	b.n	8017c2c <_malloc_r+0x34>
 8017cce:	463c      	mov	r4, r7
 8017cd0:	687f      	ldr	r7, [r7, #4]
 8017cd2:	e7b6      	b.n	8017c42 <_malloc_r+0x4a>
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	42a3      	cmp	r3, r4
 8017cda:	d1fb      	bne.n	8017cd4 <_malloc_r+0xdc>
 8017cdc:	2300      	movs	r3, #0
 8017cde:	6053      	str	r3, [r2, #4]
 8017ce0:	e7de      	b.n	8017ca0 <_malloc_r+0xa8>
 8017ce2:	230c      	movs	r3, #12
 8017ce4:	6033      	str	r3, [r6, #0]
 8017ce6:	4630      	mov	r0, r6
 8017ce8:	f000 f80c 	bl	8017d04 <__malloc_unlock>
 8017cec:	e794      	b.n	8017c18 <_malloc_r+0x20>
 8017cee:	6005      	str	r5, [r0, #0]
 8017cf0:	e7d6      	b.n	8017ca0 <_malloc_r+0xa8>
 8017cf2:	bf00      	nop
 8017cf4:	24004308 	.word	0x24004308

08017cf8 <__malloc_lock>:
 8017cf8:	4801      	ldr	r0, [pc, #4]	@ (8017d00 <__malloc_lock+0x8>)
 8017cfa:	f7ff beda 	b.w	8017ab2 <__retarget_lock_acquire_recursive>
 8017cfe:	bf00      	nop
 8017d00:	24004300 	.word	0x24004300

08017d04 <__malloc_unlock>:
 8017d04:	4801      	ldr	r0, [pc, #4]	@ (8017d0c <__malloc_unlock+0x8>)
 8017d06:	f7ff bed5 	b.w	8017ab4 <__retarget_lock_release_recursive>
 8017d0a:	bf00      	nop
 8017d0c:	24004300 	.word	0x24004300

08017d10 <__ssputs_r>:
 8017d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d14:	688e      	ldr	r6, [r1, #8]
 8017d16:	461f      	mov	r7, r3
 8017d18:	42be      	cmp	r6, r7
 8017d1a:	680b      	ldr	r3, [r1, #0]
 8017d1c:	4682      	mov	sl, r0
 8017d1e:	460c      	mov	r4, r1
 8017d20:	4690      	mov	r8, r2
 8017d22:	d82d      	bhi.n	8017d80 <__ssputs_r+0x70>
 8017d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d2c:	d026      	beq.n	8017d7c <__ssputs_r+0x6c>
 8017d2e:	6965      	ldr	r5, [r4, #20]
 8017d30:	6909      	ldr	r1, [r1, #16]
 8017d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d36:	eba3 0901 	sub.w	r9, r3, r1
 8017d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d3e:	1c7b      	adds	r3, r7, #1
 8017d40:	444b      	add	r3, r9
 8017d42:	106d      	asrs	r5, r5, #1
 8017d44:	429d      	cmp	r5, r3
 8017d46:	bf38      	it	cc
 8017d48:	461d      	movcc	r5, r3
 8017d4a:	0553      	lsls	r3, r2, #21
 8017d4c:	d527      	bpl.n	8017d9e <__ssputs_r+0x8e>
 8017d4e:	4629      	mov	r1, r5
 8017d50:	f7ff ff52 	bl	8017bf8 <_malloc_r>
 8017d54:	4606      	mov	r6, r0
 8017d56:	b360      	cbz	r0, 8017db2 <__ssputs_r+0xa2>
 8017d58:	6921      	ldr	r1, [r4, #16]
 8017d5a:	464a      	mov	r2, r9
 8017d5c:	f7ff feab 	bl	8017ab6 <memcpy>
 8017d60:	89a3      	ldrh	r3, [r4, #12]
 8017d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d6a:	81a3      	strh	r3, [r4, #12]
 8017d6c:	6126      	str	r6, [r4, #16]
 8017d6e:	6165      	str	r5, [r4, #20]
 8017d70:	444e      	add	r6, r9
 8017d72:	eba5 0509 	sub.w	r5, r5, r9
 8017d76:	6026      	str	r6, [r4, #0]
 8017d78:	60a5      	str	r5, [r4, #8]
 8017d7a:	463e      	mov	r6, r7
 8017d7c:	42be      	cmp	r6, r7
 8017d7e:	d900      	bls.n	8017d82 <__ssputs_r+0x72>
 8017d80:	463e      	mov	r6, r7
 8017d82:	6820      	ldr	r0, [r4, #0]
 8017d84:	4632      	mov	r2, r6
 8017d86:	4641      	mov	r1, r8
 8017d88:	f000 fd3c 	bl	8018804 <memmove>
 8017d8c:	68a3      	ldr	r3, [r4, #8]
 8017d8e:	1b9b      	subs	r3, r3, r6
 8017d90:	60a3      	str	r3, [r4, #8]
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	4433      	add	r3, r6
 8017d96:	6023      	str	r3, [r4, #0]
 8017d98:	2000      	movs	r0, #0
 8017d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d9e:	462a      	mov	r2, r5
 8017da0:	f000 fd61 	bl	8018866 <_realloc_r>
 8017da4:	4606      	mov	r6, r0
 8017da6:	2800      	cmp	r0, #0
 8017da8:	d1e0      	bne.n	8017d6c <__ssputs_r+0x5c>
 8017daa:	6921      	ldr	r1, [r4, #16]
 8017dac:	4650      	mov	r0, sl
 8017dae:	f7ff feaf 	bl	8017b10 <_free_r>
 8017db2:	230c      	movs	r3, #12
 8017db4:	f8ca 3000 	str.w	r3, [sl]
 8017db8:	89a3      	ldrh	r3, [r4, #12]
 8017dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dbe:	81a3      	strh	r3, [r4, #12]
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc4:	e7e9      	b.n	8017d9a <__ssputs_r+0x8a>
	...

08017dc8 <_svfiprintf_r>:
 8017dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dcc:	4698      	mov	r8, r3
 8017dce:	898b      	ldrh	r3, [r1, #12]
 8017dd0:	061b      	lsls	r3, r3, #24
 8017dd2:	b09d      	sub	sp, #116	@ 0x74
 8017dd4:	4607      	mov	r7, r0
 8017dd6:	460d      	mov	r5, r1
 8017dd8:	4614      	mov	r4, r2
 8017dda:	d510      	bpl.n	8017dfe <_svfiprintf_r+0x36>
 8017ddc:	690b      	ldr	r3, [r1, #16]
 8017dde:	b973      	cbnz	r3, 8017dfe <_svfiprintf_r+0x36>
 8017de0:	2140      	movs	r1, #64	@ 0x40
 8017de2:	f7ff ff09 	bl	8017bf8 <_malloc_r>
 8017de6:	6028      	str	r0, [r5, #0]
 8017de8:	6128      	str	r0, [r5, #16]
 8017dea:	b930      	cbnz	r0, 8017dfa <_svfiprintf_r+0x32>
 8017dec:	230c      	movs	r3, #12
 8017dee:	603b      	str	r3, [r7, #0]
 8017df0:	f04f 30ff 	mov.w	r0, #4294967295
 8017df4:	b01d      	add	sp, #116	@ 0x74
 8017df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dfa:	2340      	movs	r3, #64	@ 0x40
 8017dfc:	616b      	str	r3, [r5, #20]
 8017dfe:	2300      	movs	r3, #0
 8017e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e02:	2320      	movs	r3, #32
 8017e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e0c:	2330      	movs	r3, #48	@ 0x30
 8017e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017fac <_svfiprintf_r+0x1e4>
 8017e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e16:	f04f 0901 	mov.w	r9, #1
 8017e1a:	4623      	mov	r3, r4
 8017e1c:	469a      	mov	sl, r3
 8017e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e22:	b10a      	cbz	r2, 8017e28 <_svfiprintf_r+0x60>
 8017e24:	2a25      	cmp	r2, #37	@ 0x25
 8017e26:	d1f9      	bne.n	8017e1c <_svfiprintf_r+0x54>
 8017e28:	ebba 0b04 	subs.w	fp, sl, r4
 8017e2c:	d00b      	beq.n	8017e46 <_svfiprintf_r+0x7e>
 8017e2e:	465b      	mov	r3, fp
 8017e30:	4622      	mov	r2, r4
 8017e32:	4629      	mov	r1, r5
 8017e34:	4638      	mov	r0, r7
 8017e36:	f7ff ff6b 	bl	8017d10 <__ssputs_r>
 8017e3a:	3001      	adds	r0, #1
 8017e3c:	f000 80a7 	beq.w	8017f8e <_svfiprintf_r+0x1c6>
 8017e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e42:	445a      	add	r2, fp
 8017e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e46:	f89a 3000 	ldrb.w	r3, [sl]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f000 809f 	beq.w	8017f8e <_svfiprintf_r+0x1c6>
 8017e50:	2300      	movs	r3, #0
 8017e52:	f04f 32ff 	mov.w	r2, #4294967295
 8017e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e5a:	f10a 0a01 	add.w	sl, sl, #1
 8017e5e:	9304      	str	r3, [sp, #16]
 8017e60:	9307      	str	r3, [sp, #28]
 8017e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e68:	4654      	mov	r4, sl
 8017e6a:	2205      	movs	r2, #5
 8017e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e70:	484e      	ldr	r0, [pc, #312]	@ (8017fac <_svfiprintf_r+0x1e4>)
 8017e72:	f7e8 fa3d 	bl	80002f0 <memchr>
 8017e76:	9a04      	ldr	r2, [sp, #16]
 8017e78:	b9d8      	cbnz	r0, 8017eb2 <_svfiprintf_r+0xea>
 8017e7a:	06d0      	lsls	r0, r2, #27
 8017e7c:	bf44      	itt	mi
 8017e7e:	2320      	movmi	r3, #32
 8017e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e84:	0711      	lsls	r1, r2, #28
 8017e86:	bf44      	itt	mi
 8017e88:	232b      	movmi	r3, #43	@ 0x2b
 8017e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8017e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e94:	d015      	beq.n	8017ec2 <_svfiprintf_r+0xfa>
 8017e96:	9a07      	ldr	r2, [sp, #28]
 8017e98:	4654      	mov	r4, sl
 8017e9a:	2000      	movs	r0, #0
 8017e9c:	f04f 0c0a 	mov.w	ip, #10
 8017ea0:	4621      	mov	r1, r4
 8017ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ea6:	3b30      	subs	r3, #48	@ 0x30
 8017ea8:	2b09      	cmp	r3, #9
 8017eaa:	d94b      	bls.n	8017f44 <_svfiprintf_r+0x17c>
 8017eac:	b1b0      	cbz	r0, 8017edc <_svfiprintf_r+0x114>
 8017eae:	9207      	str	r2, [sp, #28]
 8017eb0:	e014      	b.n	8017edc <_svfiprintf_r+0x114>
 8017eb2:	eba0 0308 	sub.w	r3, r0, r8
 8017eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8017eba:	4313      	orrs	r3, r2
 8017ebc:	9304      	str	r3, [sp, #16]
 8017ebe:	46a2      	mov	sl, r4
 8017ec0:	e7d2      	b.n	8017e68 <_svfiprintf_r+0xa0>
 8017ec2:	9b03      	ldr	r3, [sp, #12]
 8017ec4:	1d19      	adds	r1, r3, #4
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	9103      	str	r1, [sp, #12]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	bfbb      	ittet	lt
 8017ece:	425b      	neglt	r3, r3
 8017ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8017ed4:	9307      	strge	r3, [sp, #28]
 8017ed6:	9307      	strlt	r3, [sp, #28]
 8017ed8:	bfb8      	it	lt
 8017eda:	9204      	strlt	r2, [sp, #16]
 8017edc:	7823      	ldrb	r3, [r4, #0]
 8017ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8017ee0:	d10a      	bne.n	8017ef8 <_svfiprintf_r+0x130>
 8017ee2:	7863      	ldrb	r3, [r4, #1]
 8017ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ee6:	d132      	bne.n	8017f4e <_svfiprintf_r+0x186>
 8017ee8:	9b03      	ldr	r3, [sp, #12]
 8017eea:	1d1a      	adds	r2, r3, #4
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	9203      	str	r2, [sp, #12]
 8017ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ef4:	3402      	adds	r4, #2
 8017ef6:	9305      	str	r3, [sp, #20]
 8017ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017fbc <_svfiprintf_r+0x1f4>
 8017efc:	7821      	ldrb	r1, [r4, #0]
 8017efe:	2203      	movs	r2, #3
 8017f00:	4650      	mov	r0, sl
 8017f02:	f7e8 f9f5 	bl	80002f0 <memchr>
 8017f06:	b138      	cbz	r0, 8017f18 <_svfiprintf_r+0x150>
 8017f08:	9b04      	ldr	r3, [sp, #16]
 8017f0a:	eba0 000a 	sub.w	r0, r0, sl
 8017f0e:	2240      	movs	r2, #64	@ 0x40
 8017f10:	4082      	lsls	r2, r0
 8017f12:	4313      	orrs	r3, r2
 8017f14:	3401      	adds	r4, #1
 8017f16:	9304      	str	r3, [sp, #16]
 8017f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f1c:	4824      	ldr	r0, [pc, #144]	@ (8017fb0 <_svfiprintf_r+0x1e8>)
 8017f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f22:	2206      	movs	r2, #6
 8017f24:	f7e8 f9e4 	bl	80002f0 <memchr>
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d036      	beq.n	8017f9a <_svfiprintf_r+0x1d2>
 8017f2c:	4b21      	ldr	r3, [pc, #132]	@ (8017fb4 <_svfiprintf_r+0x1ec>)
 8017f2e:	bb1b      	cbnz	r3, 8017f78 <_svfiprintf_r+0x1b0>
 8017f30:	9b03      	ldr	r3, [sp, #12]
 8017f32:	3307      	adds	r3, #7
 8017f34:	f023 0307 	bic.w	r3, r3, #7
 8017f38:	3308      	adds	r3, #8
 8017f3a:	9303      	str	r3, [sp, #12]
 8017f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f3e:	4433      	add	r3, r6
 8017f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f42:	e76a      	b.n	8017e1a <_svfiprintf_r+0x52>
 8017f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f48:	460c      	mov	r4, r1
 8017f4a:	2001      	movs	r0, #1
 8017f4c:	e7a8      	b.n	8017ea0 <_svfiprintf_r+0xd8>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	3401      	adds	r4, #1
 8017f52:	9305      	str	r3, [sp, #20]
 8017f54:	4619      	mov	r1, r3
 8017f56:	f04f 0c0a 	mov.w	ip, #10
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f60:	3a30      	subs	r2, #48	@ 0x30
 8017f62:	2a09      	cmp	r2, #9
 8017f64:	d903      	bls.n	8017f6e <_svfiprintf_r+0x1a6>
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d0c6      	beq.n	8017ef8 <_svfiprintf_r+0x130>
 8017f6a:	9105      	str	r1, [sp, #20]
 8017f6c:	e7c4      	b.n	8017ef8 <_svfiprintf_r+0x130>
 8017f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f72:	4604      	mov	r4, r0
 8017f74:	2301      	movs	r3, #1
 8017f76:	e7f0      	b.n	8017f5a <_svfiprintf_r+0x192>
 8017f78:	ab03      	add	r3, sp, #12
 8017f7a:	9300      	str	r3, [sp, #0]
 8017f7c:	462a      	mov	r2, r5
 8017f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8017fb8 <_svfiprintf_r+0x1f0>)
 8017f80:	a904      	add	r1, sp, #16
 8017f82:	4638      	mov	r0, r7
 8017f84:	f3af 8000 	nop.w
 8017f88:	1c42      	adds	r2, r0, #1
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	d1d6      	bne.n	8017f3c <_svfiprintf_r+0x174>
 8017f8e:	89ab      	ldrh	r3, [r5, #12]
 8017f90:	065b      	lsls	r3, r3, #25
 8017f92:	f53f af2d 	bmi.w	8017df0 <_svfiprintf_r+0x28>
 8017f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f98:	e72c      	b.n	8017df4 <_svfiprintf_r+0x2c>
 8017f9a:	ab03      	add	r3, sp, #12
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	462a      	mov	r2, r5
 8017fa0:	4b05      	ldr	r3, [pc, #20]	@ (8017fb8 <_svfiprintf_r+0x1f0>)
 8017fa2:	a904      	add	r1, sp, #16
 8017fa4:	4638      	mov	r0, r7
 8017fa6:	f000 f9bb 	bl	8018320 <_printf_i>
 8017faa:	e7ed      	b.n	8017f88 <_svfiprintf_r+0x1c0>
 8017fac:	0801bc77 	.word	0x0801bc77
 8017fb0:	0801bc81 	.word	0x0801bc81
 8017fb4:	00000000 	.word	0x00000000
 8017fb8:	08017d11 	.word	0x08017d11
 8017fbc:	0801bc7d 	.word	0x0801bc7d

08017fc0 <__sfputc_r>:
 8017fc0:	6893      	ldr	r3, [r2, #8]
 8017fc2:	3b01      	subs	r3, #1
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	b410      	push	{r4}
 8017fc8:	6093      	str	r3, [r2, #8]
 8017fca:	da08      	bge.n	8017fde <__sfputc_r+0x1e>
 8017fcc:	6994      	ldr	r4, [r2, #24]
 8017fce:	42a3      	cmp	r3, r4
 8017fd0:	db01      	blt.n	8017fd6 <__sfputc_r+0x16>
 8017fd2:	290a      	cmp	r1, #10
 8017fd4:	d103      	bne.n	8017fde <__sfputc_r+0x1e>
 8017fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fda:	f000 bb7f 	b.w	80186dc <__swbuf_r>
 8017fde:	6813      	ldr	r3, [r2, #0]
 8017fe0:	1c58      	adds	r0, r3, #1
 8017fe2:	6010      	str	r0, [r2, #0]
 8017fe4:	7019      	strb	r1, [r3, #0]
 8017fe6:	4608      	mov	r0, r1
 8017fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fec:	4770      	bx	lr

08017fee <__sfputs_r>:
 8017fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff0:	4606      	mov	r6, r0
 8017ff2:	460f      	mov	r7, r1
 8017ff4:	4614      	mov	r4, r2
 8017ff6:	18d5      	adds	r5, r2, r3
 8017ff8:	42ac      	cmp	r4, r5
 8017ffa:	d101      	bne.n	8018000 <__sfputs_r+0x12>
 8017ffc:	2000      	movs	r0, #0
 8017ffe:	e007      	b.n	8018010 <__sfputs_r+0x22>
 8018000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018004:	463a      	mov	r2, r7
 8018006:	4630      	mov	r0, r6
 8018008:	f7ff ffda 	bl	8017fc0 <__sfputc_r>
 801800c:	1c43      	adds	r3, r0, #1
 801800e:	d1f3      	bne.n	8017ff8 <__sfputs_r+0xa>
 8018010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018014 <_vfiprintf_r>:
 8018014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018018:	460d      	mov	r5, r1
 801801a:	b09d      	sub	sp, #116	@ 0x74
 801801c:	4614      	mov	r4, r2
 801801e:	4698      	mov	r8, r3
 8018020:	4606      	mov	r6, r0
 8018022:	b118      	cbz	r0, 801802c <_vfiprintf_r+0x18>
 8018024:	6a03      	ldr	r3, [r0, #32]
 8018026:	b90b      	cbnz	r3, 801802c <_vfiprintf_r+0x18>
 8018028:	f7ff fbfc 	bl	8017824 <__sinit>
 801802c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801802e:	07d9      	lsls	r1, r3, #31
 8018030:	d405      	bmi.n	801803e <_vfiprintf_r+0x2a>
 8018032:	89ab      	ldrh	r3, [r5, #12]
 8018034:	059a      	lsls	r2, r3, #22
 8018036:	d402      	bmi.n	801803e <_vfiprintf_r+0x2a>
 8018038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801803a:	f7ff fd3a 	bl	8017ab2 <__retarget_lock_acquire_recursive>
 801803e:	89ab      	ldrh	r3, [r5, #12]
 8018040:	071b      	lsls	r3, r3, #28
 8018042:	d501      	bpl.n	8018048 <_vfiprintf_r+0x34>
 8018044:	692b      	ldr	r3, [r5, #16]
 8018046:	b99b      	cbnz	r3, 8018070 <_vfiprintf_r+0x5c>
 8018048:	4629      	mov	r1, r5
 801804a:	4630      	mov	r0, r6
 801804c:	f000 fb84 	bl	8018758 <__swsetup_r>
 8018050:	b170      	cbz	r0, 8018070 <_vfiprintf_r+0x5c>
 8018052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018054:	07dc      	lsls	r4, r3, #31
 8018056:	d504      	bpl.n	8018062 <_vfiprintf_r+0x4e>
 8018058:	f04f 30ff 	mov.w	r0, #4294967295
 801805c:	b01d      	add	sp, #116	@ 0x74
 801805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018062:	89ab      	ldrh	r3, [r5, #12]
 8018064:	0598      	lsls	r0, r3, #22
 8018066:	d4f7      	bmi.n	8018058 <_vfiprintf_r+0x44>
 8018068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801806a:	f7ff fd23 	bl	8017ab4 <__retarget_lock_release_recursive>
 801806e:	e7f3      	b.n	8018058 <_vfiprintf_r+0x44>
 8018070:	2300      	movs	r3, #0
 8018072:	9309      	str	r3, [sp, #36]	@ 0x24
 8018074:	2320      	movs	r3, #32
 8018076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801807a:	f8cd 800c 	str.w	r8, [sp, #12]
 801807e:	2330      	movs	r3, #48	@ 0x30
 8018080:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018230 <_vfiprintf_r+0x21c>
 8018084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018088:	f04f 0901 	mov.w	r9, #1
 801808c:	4623      	mov	r3, r4
 801808e:	469a      	mov	sl, r3
 8018090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018094:	b10a      	cbz	r2, 801809a <_vfiprintf_r+0x86>
 8018096:	2a25      	cmp	r2, #37	@ 0x25
 8018098:	d1f9      	bne.n	801808e <_vfiprintf_r+0x7a>
 801809a:	ebba 0b04 	subs.w	fp, sl, r4
 801809e:	d00b      	beq.n	80180b8 <_vfiprintf_r+0xa4>
 80180a0:	465b      	mov	r3, fp
 80180a2:	4622      	mov	r2, r4
 80180a4:	4629      	mov	r1, r5
 80180a6:	4630      	mov	r0, r6
 80180a8:	f7ff ffa1 	bl	8017fee <__sfputs_r>
 80180ac:	3001      	adds	r0, #1
 80180ae:	f000 80a7 	beq.w	8018200 <_vfiprintf_r+0x1ec>
 80180b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180b4:	445a      	add	r2, fp
 80180b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80180b8:	f89a 3000 	ldrb.w	r3, [sl]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f000 809f 	beq.w	8018200 <_vfiprintf_r+0x1ec>
 80180c2:	2300      	movs	r3, #0
 80180c4:	f04f 32ff 	mov.w	r2, #4294967295
 80180c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180cc:	f10a 0a01 	add.w	sl, sl, #1
 80180d0:	9304      	str	r3, [sp, #16]
 80180d2:	9307      	str	r3, [sp, #28]
 80180d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80180d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80180da:	4654      	mov	r4, sl
 80180dc:	2205      	movs	r2, #5
 80180de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180e2:	4853      	ldr	r0, [pc, #332]	@ (8018230 <_vfiprintf_r+0x21c>)
 80180e4:	f7e8 f904 	bl	80002f0 <memchr>
 80180e8:	9a04      	ldr	r2, [sp, #16]
 80180ea:	b9d8      	cbnz	r0, 8018124 <_vfiprintf_r+0x110>
 80180ec:	06d1      	lsls	r1, r2, #27
 80180ee:	bf44      	itt	mi
 80180f0:	2320      	movmi	r3, #32
 80180f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180f6:	0713      	lsls	r3, r2, #28
 80180f8:	bf44      	itt	mi
 80180fa:	232b      	movmi	r3, #43	@ 0x2b
 80180fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018100:	f89a 3000 	ldrb.w	r3, [sl]
 8018104:	2b2a      	cmp	r3, #42	@ 0x2a
 8018106:	d015      	beq.n	8018134 <_vfiprintf_r+0x120>
 8018108:	9a07      	ldr	r2, [sp, #28]
 801810a:	4654      	mov	r4, sl
 801810c:	2000      	movs	r0, #0
 801810e:	f04f 0c0a 	mov.w	ip, #10
 8018112:	4621      	mov	r1, r4
 8018114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018118:	3b30      	subs	r3, #48	@ 0x30
 801811a:	2b09      	cmp	r3, #9
 801811c:	d94b      	bls.n	80181b6 <_vfiprintf_r+0x1a2>
 801811e:	b1b0      	cbz	r0, 801814e <_vfiprintf_r+0x13a>
 8018120:	9207      	str	r2, [sp, #28]
 8018122:	e014      	b.n	801814e <_vfiprintf_r+0x13a>
 8018124:	eba0 0308 	sub.w	r3, r0, r8
 8018128:	fa09 f303 	lsl.w	r3, r9, r3
 801812c:	4313      	orrs	r3, r2
 801812e:	9304      	str	r3, [sp, #16]
 8018130:	46a2      	mov	sl, r4
 8018132:	e7d2      	b.n	80180da <_vfiprintf_r+0xc6>
 8018134:	9b03      	ldr	r3, [sp, #12]
 8018136:	1d19      	adds	r1, r3, #4
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	9103      	str	r1, [sp, #12]
 801813c:	2b00      	cmp	r3, #0
 801813e:	bfbb      	ittet	lt
 8018140:	425b      	neglt	r3, r3
 8018142:	f042 0202 	orrlt.w	r2, r2, #2
 8018146:	9307      	strge	r3, [sp, #28]
 8018148:	9307      	strlt	r3, [sp, #28]
 801814a:	bfb8      	it	lt
 801814c:	9204      	strlt	r2, [sp, #16]
 801814e:	7823      	ldrb	r3, [r4, #0]
 8018150:	2b2e      	cmp	r3, #46	@ 0x2e
 8018152:	d10a      	bne.n	801816a <_vfiprintf_r+0x156>
 8018154:	7863      	ldrb	r3, [r4, #1]
 8018156:	2b2a      	cmp	r3, #42	@ 0x2a
 8018158:	d132      	bne.n	80181c0 <_vfiprintf_r+0x1ac>
 801815a:	9b03      	ldr	r3, [sp, #12]
 801815c:	1d1a      	adds	r2, r3, #4
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	9203      	str	r2, [sp, #12]
 8018162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018166:	3402      	adds	r4, #2
 8018168:	9305      	str	r3, [sp, #20]
 801816a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018240 <_vfiprintf_r+0x22c>
 801816e:	7821      	ldrb	r1, [r4, #0]
 8018170:	2203      	movs	r2, #3
 8018172:	4650      	mov	r0, sl
 8018174:	f7e8 f8bc 	bl	80002f0 <memchr>
 8018178:	b138      	cbz	r0, 801818a <_vfiprintf_r+0x176>
 801817a:	9b04      	ldr	r3, [sp, #16]
 801817c:	eba0 000a 	sub.w	r0, r0, sl
 8018180:	2240      	movs	r2, #64	@ 0x40
 8018182:	4082      	lsls	r2, r0
 8018184:	4313      	orrs	r3, r2
 8018186:	3401      	adds	r4, #1
 8018188:	9304      	str	r3, [sp, #16]
 801818a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801818e:	4829      	ldr	r0, [pc, #164]	@ (8018234 <_vfiprintf_r+0x220>)
 8018190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018194:	2206      	movs	r2, #6
 8018196:	f7e8 f8ab 	bl	80002f0 <memchr>
 801819a:	2800      	cmp	r0, #0
 801819c:	d03f      	beq.n	801821e <_vfiprintf_r+0x20a>
 801819e:	4b26      	ldr	r3, [pc, #152]	@ (8018238 <_vfiprintf_r+0x224>)
 80181a0:	bb1b      	cbnz	r3, 80181ea <_vfiprintf_r+0x1d6>
 80181a2:	9b03      	ldr	r3, [sp, #12]
 80181a4:	3307      	adds	r3, #7
 80181a6:	f023 0307 	bic.w	r3, r3, #7
 80181aa:	3308      	adds	r3, #8
 80181ac:	9303      	str	r3, [sp, #12]
 80181ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181b0:	443b      	add	r3, r7
 80181b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181b4:	e76a      	b.n	801808c <_vfiprintf_r+0x78>
 80181b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80181ba:	460c      	mov	r4, r1
 80181bc:	2001      	movs	r0, #1
 80181be:	e7a8      	b.n	8018112 <_vfiprintf_r+0xfe>
 80181c0:	2300      	movs	r3, #0
 80181c2:	3401      	adds	r4, #1
 80181c4:	9305      	str	r3, [sp, #20]
 80181c6:	4619      	mov	r1, r3
 80181c8:	f04f 0c0a 	mov.w	ip, #10
 80181cc:	4620      	mov	r0, r4
 80181ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181d2:	3a30      	subs	r2, #48	@ 0x30
 80181d4:	2a09      	cmp	r2, #9
 80181d6:	d903      	bls.n	80181e0 <_vfiprintf_r+0x1cc>
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d0c6      	beq.n	801816a <_vfiprintf_r+0x156>
 80181dc:	9105      	str	r1, [sp, #20]
 80181de:	e7c4      	b.n	801816a <_vfiprintf_r+0x156>
 80181e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80181e4:	4604      	mov	r4, r0
 80181e6:	2301      	movs	r3, #1
 80181e8:	e7f0      	b.n	80181cc <_vfiprintf_r+0x1b8>
 80181ea:	ab03      	add	r3, sp, #12
 80181ec:	9300      	str	r3, [sp, #0]
 80181ee:	462a      	mov	r2, r5
 80181f0:	4b12      	ldr	r3, [pc, #72]	@ (801823c <_vfiprintf_r+0x228>)
 80181f2:	a904      	add	r1, sp, #16
 80181f4:	4630      	mov	r0, r6
 80181f6:	f3af 8000 	nop.w
 80181fa:	4607      	mov	r7, r0
 80181fc:	1c78      	adds	r0, r7, #1
 80181fe:	d1d6      	bne.n	80181ae <_vfiprintf_r+0x19a>
 8018200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018202:	07d9      	lsls	r1, r3, #31
 8018204:	d405      	bmi.n	8018212 <_vfiprintf_r+0x1fe>
 8018206:	89ab      	ldrh	r3, [r5, #12]
 8018208:	059a      	lsls	r2, r3, #22
 801820a:	d402      	bmi.n	8018212 <_vfiprintf_r+0x1fe>
 801820c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801820e:	f7ff fc51 	bl	8017ab4 <__retarget_lock_release_recursive>
 8018212:	89ab      	ldrh	r3, [r5, #12]
 8018214:	065b      	lsls	r3, r3, #25
 8018216:	f53f af1f 	bmi.w	8018058 <_vfiprintf_r+0x44>
 801821a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801821c:	e71e      	b.n	801805c <_vfiprintf_r+0x48>
 801821e:	ab03      	add	r3, sp, #12
 8018220:	9300      	str	r3, [sp, #0]
 8018222:	462a      	mov	r2, r5
 8018224:	4b05      	ldr	r3, [pc, #20]	@ (801823c <_vfiprintf_r+0x228>)
 8018226:	a904      	add	r1, sp, #16
 8018228:	4630      	mov	r0, r6
 801822a:	f000 f879 	bl	8018320 <_printf_i>
 801822e:	e7e4      	b.n	80181fa <_vfiprintf_r+0x1e6>
 8018230:	0801bc77 	.word	0x0801bc77
 8018234:	0801bc81 	.word	0x0801bc81
 8018238:	00000000 	.word	0x00000000
 801823c:	08017fef 	.word	0x08017fef
 8018240:	0801bc7d 	.word	0x0801bc7d

08018244 <_printf_common>:
 8018244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018248:	4616      	mov	r6, r2
 801824a:	4698      	mov	r8, r3
 801824c:	688a      	ldr	r2, [r1, #8]
 801824e:	690b      	ldr	r3, [r1, #16]
 8018250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018254:	4293      	cmp	r3, r2
 8018256:	bfb8      	it	lt
 8018258:	4613      	movlt	r3, r2
 801825a:	6033      	str	r3, [r6, #0]
 801825c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018260:	4607      	mov	r7, r0
 8018262:	460c      	mov	r4, r1
 8018264:	b10a      	cbz	r2, 801826a <_printf_common+0x26>
 8018266:	3301      	adds	r3, #1
 8018268:	6033      	str	r3, [r6, #0]
 801826a:	6823      	ldr	r3, [r4, #0]
 801826c:	0699      	lsls	r1, r3, #26
 801826e:	bf42      	ittt	mi
 8018270:	6833      	ldrmi	r3, [r6, #0]
 8018272:	3302      	addmi	r3, #2
 8018274:	6033      	strmi	r3, [r6, #0]
 8018276:	6825      	ldr	r5, [r4, #0]
 8018278:	f015 0506 	ands.w	r5, r5, #6
 801827c:	d106      	bne.n	801828c <_printf_common+0x48>
 801827e:	f104 0a19 	add.w	sl, r4, #25
 8018282:	68e3      	ldr	r3, [r4, #12]
 8018284:	6832      	ldr	r2, [r6, #0]
 8018286:	1a9b      	subs	r3, r3, r2
 8018288:	42ab      	cmp	r3, r5
 801828a:	dc26      	bgt.n	80182da <_printf_common+0x96>
 801828c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018290:	6822      	ldr	r2, [r4, #0]
 8018292:	3b00      	subs	r3, #0
 8018294:	bf18      	it	ne
 8018296:	2301      	movne	r3, #1
 8018298:	0692      	lsls	r2, r2, #26
 801829a:	d42b      	bmi.n	80182f4 <_printf_common+0xb0>
 801829c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80182a0:	4641      	mov	r1, r8
 80182a2:	4638      	mov	r0, r7
 80182a4:	47c8      	blx	r9
 80182a6:	3001      	adds	r0, #1
 80182a8:	d01e      	beq.n	80182e8 <_printf_common+0xa4>
 80182aa:	6823      	ldr	r3, [r4, #0]
 80182ac:	6922      	ldr	r2, [r4, #16]
 80182ae:	f003 0306 	and.w	r3, r3, #6
 80182b2:	2b04      	cmp	r3, #4
 80182b4:	bf02      	ittt	eq
 80182b6:	68e5      	ldreq	r5, [r4, #12]
 80182b8:	6833      	ldreq	r3, [r6, #0]
 80182ba:	1aed      	subeq	r5, r5, r3
 80182bc:	68a3      	ldr	r3, [r4, #8]
 80182be:	bf0c      	ite	eq
 80182c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182c4:	2500      	movne	r5, #0
 80182c6:	4293      	cmp	r3, r2
 80182c8:	bfc4      	itt	gt
 80182ca:	1a9b      	subgt	r3, r3, r2
 80182cc:	18ed      	addgt	r5, r5, r3
 80182ce:	2600      	movs	r6, #0
 80182d0:	341a      	adds	r4, #26
 80182d2:	42b5      	cmp	r5, r6
 80182d4:	d11a      	bne.n	801830c <_printf_common+0xc8>
 80182d6:	2000      	movs	r0, #0
 80182d8:	e008      	b.n	80182ec <_printf_common+0xa8>
 80182da:	2301      	movs	r3, #1
 80182dc:	4652      	mov	r2, sl
 80182de:	4641      	mov	r1, r8
 80182e0:	4638      	mov	r0, r7
 80182e2:	47c8      	blx	r9
 80182e4:	3001      	adds	r0, #1
 80182e6:	d103      	bne.n	80182f0 <_printf_common+0xac>
 80182e8:	f04f 30ff 	mov.w	r0, #4294967295
 80182ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182f0:	3501      	adds	r5, #1
 80182f2:	e7c6      	b.n	8018282 <_printf_common+0x3e>
 80182f4:	18e1      	adds	r1, r4, r3
 80182f6:	1c5a      	adds	r2, r3, #1
 80182f8:	2030      	movs	r0, #48	@ 0x30
 80182fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80182fe:	4422      	add	r2, r4
 8018300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018308:	3302      	adds	r3, #2
 801830a:	e7c7      	b.n	801829c <_printf_common+0x58>
 801830c:	2301      	movs	r3, #1
 801830e:	4622      	mov	r2, r4
 8018310:	4641      	mov	r1, r8
 8018312:	4638      	mov	r0, r7
 8018314:	47c8      	blx	r9
 8018316:	3001      	adds	r0, #1
 8018318:	d0e6      	beq.n	80182e8 <_printf_common+0xa4>
 801831a:	3601      	adds	r6, #1
 801831c:	e7d9      	b.n	80182d2 <_printf_common+0x8e>
	...

08018320 <_printf_i>:
 8018320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018324:	7e0f      	ldrb	r7, [r1, #24]
 8018326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018328:	2f78      	cmp	r7, #120	@ 0x78
 801832a:	4691      	mov	r9, r2
 801832c:	4680      	mov	r8, r0
 801832e:	460c      	mov	r4, r1
 8018330:	469a      	mov	sl, r3
 8018332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018336:	d807      	bhi.n	8018348 <_printf_i+0x28>
 8018338:	2f62      	cmp	r7, #98	@ 0x62
 801833a:	d80a      	bhi.n	8018352 <_printf_i+0x32>
 801833c:	2f00      	cmp	r7, #0
 801833e:	f000 80d2 	beq.w	80184e6 <_printf_i+0x1c6>
 8018342:	2f58      	cmp	r7, #88	@ 0x58
 8018344:	f000 80b9 	beq.w	80184ba <_printf_i+0x19a>
 8018348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801834c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018350:	e03a      	b.n	80183c8 <_printf_i+0xa8>
 8018352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018356:	2b15      	cmp	r3, #21
 8018358:	d8f6      	bhi.n	8018348 <_printf_i+0x28>
 801835a:	a101      	add	r1, pc, #4	@ (adr r1, 8018360 <_printf_i+0x40>)
 801835c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018360:	080183b9 	.word	0x080183b9
 8018364:	080183cd 	.word	0x080183cd
 8018368:	08018349 	.word	0x08018349
 801836c:	08018349 	.word	0x08018349
 8018370:	08018349 	.word	0x08018349
 8018374:	08018349 	.word	0x08018349
 8018378:	080183cd 	.word	0x080183cd
 801837c:	08018349 	.word	0x08018349
 8018380:	08018349 	.word	0x08018349
 8018384:	08018349 	.word	0x08018349
 8018388:	08018349 	.word	0x08018349
 801838c:	080184cd 	.word	0x080184cd
 8018390:	080183f7 	.word	0x080183f7
 8018394:	08018487 	.word	0x08018487
 8018398:	08018349 	.word	0x08018349
 801839c:	08018349 	.word	0x08018349
 80183a0:	080184ef 	.word	0x080184ef
 80183a4:	08018349 	.word	0x08018349
 80183a8:	080183f7 	.word	0x080183f7
 80183ac:	08018349 	.word	0x08018349
 80183b0:	08018349 	.word	0x08018349
 80183b4:	0801848f 	.word	0x0801848f
 80183b8:	6833      	ldr	r3, [r6, #0]
 80183ba:	1d1a      	adds	r2, r3, #4
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	6032      	str	r2, [r6, #0]
 80183c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80183c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80183c8:	2301      	movs	r3, #1
 80183ca:	e09d      	b.n	8018508 <_printf_i+0x1e8>
 80183cc:	6833      	ldr	r3, [r6, #0]
 80183ce:	6820      	ldr	r0, [r4, #0]
 80183d0:	1d19      	adds	r1, r3, #4
 80183d2:	6031      	str	r1, [r6, #0]
 80183d4:	0606      	lsls	r6, r0, #24
 80183d6:	d501      	bpl.n	80183dc <_printf_i+0xbc>
 80183d8:	681d      	ldr	r5, [r3, #0]
 80183da:	e003      	b.n	80183e4 <_printf_i+0xc4>
 80183dc:	0645      	lsls	r5, r0, #25
 80183de:	d5fb      	bpl.n	80183d8 <_printf_i+0xb8>
 80183e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80183e4:	2d00      	cmp	r5, #0
 80183e6:	da03      	bge.n	80183f0 <_printf_i+0xd0>
 80183e8:	232d      	movs	r3, #45	@ 0x2d
 80183ea:	426d      	negs	r5, r5
 80183ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183f0:	4859      	ldr	r0, [pc, #356]	@ (8018558 <_printf_i+0x238>)
 80183f2:	230a      	movs	r3, #10
 80183f4:	e011      	b.n	801841a <_printf_i+0xfa>
 80183f6:	6821      	ldr	r1, [r4, #0]
 80183f8:	6833      	ldr	r3, [r6, #0]
 80183fa:	0608      	lsls	r0, r1, #24
 80183fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8018400:	d402      	bmi.n	8018408 <_printf_i+0xe8>
 8018402:	0649      	lsls	r1, r1, #25
 8018404:	bf48      	it	mi
 8018406:	b2ad      	uxthmi	r5, r5
 8018408:	2f6f      	cmp	r7, #111	@ 0x6f
 801840a:	4853      	ldr	r0, [pc, #332]	@ (8018558 <_printf_i+0x238>)
 801840c:	6033      	str	r3, [r6, #0]
 801840e:	bf14      	ite	ne
 8018410:	230a      	movne	r3, #10
 8018412:	2308      	moveq	r3, #8
 8018414:	2100      	movs	r1, #0
 8018416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801841a:	6866      	ldr	r6, [r4, #4]
 801841c:	60a6      	str	r6, [r4, #8]
 801841e:	2e00      	cmp	r6, #0
 8018420:	bfa2      	ittt	ge
 8018422:	6821      	ldrge	r1, [r4, #0]
 8018424:	f021 0104 	bicge.w	r1, r1, #4
 8018428:	6021      	strge	r1, [r4, #0]
 801842a:	b90d      	cbnz	r5, 8018430 <_printf_i+0x110>
 801842c:	2e00      	cmp	r6, #0
 801842e:	d04b      	beq.n	80184c8 <_printf_i+0x1a8>
 8018430:	4616      	mov	r6, r2
 8018432:	fbb5 f1f3 	udiv	r1, r5, r3
 8018436:	fb03 5711 	mls	r7, r3, r1, r5
 801843a:	5dc7      	ldrb	r7, [r0, r7]
 801843c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018440:	462f      	mov	r7, r5
 8018442:	42bb      	cmp	r3, r7
 8018444:	460d      	mov	r5, r1
 8018446:	d9f4      	bls.n	8018432 <_printf_i+0x112>
 8018448:	2b08      	cmp	r3, #8
 801844a:	d10b      	bne.n	8018464 <_printf_i+0x144>
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	07df      	lsls	r7, r3, #31
 8018450:	d508      	bpl.n	8018464 <_printf_i+0x144>
 8018452:	6923      	ldr	r3, [r4, #16]
 8018454:	6861      	ldr	r1, [r4, #4]
 8018456:	4299      	cmp	r1, r3
 8018458:	bfde      	ittt	le
 801845a:	2330      	movle	r3, #48	@ 0x30
 801845c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018464:	1b92      	subs	r2, r2, r6
 8018466:	6122      	str	r2, [r4, #16]
 8018468:	f8cd a000 	str.w	sl, [sp]
 801846c:	464b      	mov	r3, r9
 801846e:	aa03      	add	r2, sp, #12
 8018470:	4621      	mov	r1, r4
 8018472:	4640      	mov	r0, r8
 8018474:	f7ff fee6 	bl	8018244 <_printf_common>
 8018478:	3001      	adds	r0, #1
 801847a:	d14a      	bne.n	8018512 <_printf_i+0x1f2>
 801847c:	f04f 30ff 	mov.w	r0, #4294967295
 8018480:	b004      	add	sp, #16
 8018482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018486:	6823      	ldr	r3, [r4, #0]
 8018488:	f043 0320 	orr.w	r3, r3, #32
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	4833      	ldr	r0, [pc, #204]	@ (801855c <_printf_i+0x23c>)
 8018490:	2778      	movs	r7, #120	@ 0x78
 8018492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018496:	6823      	ldr	r3, [r4, #0]
 8018498:	6831      	ldr	r1, [r6, #0]
 801849a:	061f      	lsls	r7, r3, #24
 801849c:	f851 5b04 	ldr.w	r5, [r1], #4
 80184a0:	d402      	bmi.n	80184a8 <_printf_i+0x188>
 80184a2:	065f      	lsls	r7, r3, #25
 80184a4:	bf48      	it	mi
 80184a6:	b2ad      	uxthmi	r5, r5
 80184a8:	6031      	str	r1, [r6, #0]
 80184aa:	07d9      	lsls	r1, r3, #31
 80184ac:	bf44      	itt	mi
 80184ae:	f043 0320 	orrmi.w	r3, r3, #32
 80184b2:	6023      	strmi	r3, [r4, #0]
 80184b4:	b11d      	cbz	r5, 80184be <_printf_i+0x19e>
 80184b6:	2310      	movs	r3, #16
 80184b8:	e7ac      	b.n	8018414 <_printf_i+0xf4>
 80184ba:	4827      	ldr	r0, [pc, #156]	@ (8018558 <_printf_i+0x238>)
 80184bc:	e7e9      	b.n	8018492 <_printf_i+0x172>
 80184be:	6823      	ldr	r3, [r4, #0]
 80184c0:	f023 0320 	bic.w	r3, r3, #32
 80184c4:	6023      	str	r3, [r4, #0]
 80184c6:	e7f6      	b.n	80184b6 <_printf_i+0x196>
 80184c8:	4616      	mov	r6, r2
 80184ca:	e7bd      	b.n	8018448 <_printf_i+0x128>
 80184cc:	6833      	ldr	r3, [r6, #0]
 80184ce:	6825      	ldr	r5, [r4, #0]
 80184d0:	6961      	ldr	r1, [r4, #20]
 80184d2:	1d18      	adds	r0, r3, #4
 80184d4:	6030      	str	r0, [r6, #0]
 80184d6:	062e      	lsls	r6, r5, #24
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	d501      	bpl.n	80184e0 <_printf_i+0x1c0>
 80184dc:	6019      	str	r1, [r3, #0]
 80184de:	e002      	b.n	80184e6 <_printf_i+0x1c6>
 80184e0:	0668      	lsls	r0, r5, #25
 80184e2:	d5fb      	bpl.n	80184dc <_printf_i+0x1bc>
 80184e4:	8019      	strh	r1, [r3, #0]
 80184e6:	2300      	movs	r3, #0
 80184e8:	6123      	str	r3, [r4, #16]
 80184ea:	4616      	mov	r6, r2
 80184ec:	e7bc      	b.n	8018468 <_printf_i+0x148>
 80184ee:	6833      	ldr	r3, [r6, #0]
 80184f0:	1d1a      	adds	r2, r3, #4
 80184f2:	6032      	str	r2, [r6, #0]
 80184f4:	681e      	ldr	r6, [r3, #0]
 80184f6:	6862      	ldr	r2, [r4, #4]
 80184f8:	2100      	movs	r1, #0
 80184fa:	4630      	mov	r0, r6
 80184fc:	f7e7 fef8 	bl	80002f0 <memchr>
 8018500:	b108      	cbz	r0, 8018506 <_printf_i+0x1e6>
 8018502:	1b80      	subs	r0, r0, r6
 8018504:	6060      	str	r0, [r4, #4]
 8018506:	6863      	ldr	r3, [r4, #4]
 8018508:	6123      	str	r3, [r4, #16]
 801850a:	2300      	movs	r3, #0
 801850c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018510:	e7aa      	b.n	8018468 <_printf_i+0x148>
 8018512:	6923      	ldr	r3, [r4, #16]
 8018514:	4632      	mov	r2, r6
 8018516:	4649      	mov	r1, r9
 8018518:	4640      	mov	r0, r8
 801851a:	47d0      	blx	sl
 801851c:	3001      	adds	r0, #1
 801851e:	d0ad      	beq.n	801847c <_printf_i+0x15c>
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	079b      	lsls	r3, r3, #30
 8018524:	d413      	bmi.n	801854e <_printf_i+0x22e>
 8018526:	68e0      	ldr	r0, [r4, #12]
 8018528:	9b03      	ldr	r3, [sp, #12]
 801852a:	4298      	cmp	r0, r3
 801852c:	bfb8      	it	lt
 801852e:	4618      	movlt	r0, r3
 8018530:	e7a6      	b.n	8018480 <_printf_i+0x160>
 8018532:	2301      	movs	r3, #1
 8018534:	4632      	mov	r2, r6
 8018536:	4649      	mov	r1, r9
 8018538:	4640      	mov	r0, r8
 801853a:	47d0      	blx	sl
 801853c:	3001      	adds	r0, #1
 801853e:	d09d      	beq.n	801847c <_printf_i+0x15c>
 8018540:	3501      	adds	r5, #1
 8018542:	68e3      	ldr	r3, [r4, #12]
 8018544:	9903      	ldr	r1, [sp, #12]
 8018546:	1a5b      	subs	r3, r3, r1
 8018548:	42ab      	cmp	r3, r5
 801854a:	dcf2      	bgt.n	8018532 <_printf_i+0x212>
 801854c:	e7eb      	b.n	8018526 <_printf_i+0x206>
 801854e:	2500      	movs	r5, #0
 8018550:	f104 0619 	add.w	r6, r4, #25
 8018554:	e7f5      	b.n	8018542 <_printf_i+0x222>
 8018556:	bf00      	nop
 8018558:	0801bc88 	.word	0x0801bc88
 801855c:	0801bc99 	.word	0x0801bc99

08018560 <__sflush_r>:
 8018560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018568:	0716      	lsls	r6, r2, #28
 801856a:	4605      	mov	r5, r0
 801856c:	460c      	mov	r4, r1
 801856e:	d454      	bmi.n	801861a <__sflush_r+0xba>
 8018570:	684b      	ldr	r3, [r1, #4]
 8018572:	2b00      	cmp	r3, #0
 8018574:	dc02      	bgt.n	801857c <__sflush_r+0x1c>
 8018576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018578:	2b00      	cmp	r3, #0
 801857a:	dd48      	ble.n	801860e <__sflush_r+0xae>
 801857c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801857e:	2e00      	cmp	r6, #0
 8018580:	d045      	beq.n	801860e <__sflush_r+0xae>
 8018582:	2300      	movs	r3, #0
 8018584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018588:	682f      	ldr	r7, [r5, #0]
 801858a:	6a21      	ldr	r1, [r4, #32]
 801858c:	602b      	str	r3, [r5, #0]
 801858e:	d030      	beq.n	80185f2 <__sflush_r+0x92>
 8018590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018592:	89a3      	ldrh	r3, [r4, #12]
 8018594:	0759      	lsls	r1, r3, #29
 8018596:	d505      	bpl.n	80185a4 <__sflush_r+0x44>
 8018598:	6863      	ldr	r3, [r4, #4]
 801859a:	1ad2      	subs	r2, r2, r3
 801859c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801859e:	b10b      	cbz	r3, 80185a4 <__sflush_r+0x44>
 80185a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80185a2:	1ad2      	subs	r2, r2, r3
 80185a4:	2300      	movs	r3, #0
 80185a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185a8:	6a21      	ldr	r1, [r4, #32]
 80185aa:	4628      	mov	r0, r5
 80185ac:	47b0      	blx	r6
 80185ae:	1c43      	adds	r3, r0, #1
 80185b0:	89a3      	ldrh	r3, [r4, #12]
 80185b2:	d106      	bne.n	80185c2 <__sflush_r+0x62>
 80185b4:	6829      	ldr	r1, [r5, #0]
 80185b6:	291d      	cmp	r1, #29
 80185b8:	d82b      	bhi.n	8018612 <__sflush_r+0xb2>
 80185ba:	4a2a      	ldr	r2, [pc, #168]	@ (8018664 <__sflush_r+0x104>)
 80185bc:	410a      	asrs	r2, r1
 80185be:	07d6      	lsls	r6, r2, #31
 80185c0:	d427      	bmi.n	8018612 <__sflush_r+0xb2>
 80185c2:	2200      	movs	r2, #0
 80185c4:	6062      	str	r2, [r4, #4]
 80185c6:	04d9      	lsls	r1, r3, #19
 80185c8:	6922      	ldr	r2, [r4, #16]
 80185ca:	6022      	str	r2, [r4, #0]
 80185cc:	d504      	bpl.n	80185d8 <__sflush_r+0x78>
 80185ce:	1c42      	adds	r2, r0, #1
 80185d0:	d101      	bne.n	80185d6 <__sflush_r+0x76>
 80185d2:	682b      	ldr	r3, [r5, #0]
 80185d4:	b903      	cbnz	r3, 80185d8 <__sflush_r+0x78>
 80185d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80185d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80185da:	602f      	str	r7, [r5, #0]
 80185dc:	b1b9      	cbz	r1, 801860e <__sflush_r+0xae>
 80185de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80185e2:	4299      	cmp	r1, r3
 80185e4:	d002      	beq.n	80185ec <__sflush_r+0x8c>
 80185e6:	4628      	mov	r0, r5
 80185e8:	f7ff fa92 	bl	8017b10 <_free_r>
 80185ec:	2300      	movs	r3, #0
 80185ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80185f0:	e00d      	b.n	801860e <__sflush_r+0xae>
 80185f2:	2301      	movs	r3, #1
 80185f4:	4628      	mov	r0, r5
 80185f6:	47b0      	blx	r6
 80185f8:	4602      	mov	r2, r0
 80185fa:	1c50      	adds	r0, r2, #1
 80185fc:	d1c9      	bne.n	8018592 <__sflush_r+0x32>
 80185fe:	682b      	ldr	r3, [r5, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d0c6      	beq.n	8018592 <__sflush_r+0x32>
 8018604:	2b1d      	cmp	r3, #29
 8018606:	d001      	beq.n	801860c <__sflush_r+0xac>
 8018608:	2b16      	cmp	r3, #22
 801860a:	d11e      	bne.n	801864a <__sflush_r+0xea>
 801860c:	602f      	str	r7, [r5, #0]
 801860e:	2000      	movs	r0, #0
 8018610:	e022      	b.n	8018658 <__sflush_r+0xf8>
 8018612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018616:	b21b      	sxth	r3, r3
 8018618:	e01b      	b.n	8018652 <__sflush_r+0xf2>
 801861a:	690f      	ldr	r7, [r1, #16]
 801861c:	2f00      	cmp	r7, #0
 801861e:	d0f6      	beq.n	801860e <__sflush_r+0xae>
 8018620:	0793      	lsls	r3, r2, #30
 8018622:	680e      	ldr	r6, [r1, #0]
 8018624:	bf08      	it	eq
 8018626:	694b      	ldreq	r3, [r1, #20]
 8018628:	600f      	str	r7, [r1, #0]
 801862a:	bf18      	it	ne
 801862c:	2300      	movne	r3, #0
 801862e:	eba6 0807 	sub.w	r8, r6, r7
 8018632:	608b      	str	r3, [r1, #8]
 8018634:	f1b8 0f00 	cmp.w	r8, #0
 8018638:	dde9      	ble.n	801860e <__sflush_r+0xae>
 801863a:	6a21      	ldr	r1, [r4, #32]
 801863c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801863e:	4643      	mov	r3, r8
 8018640:	463a      	mov	r2, r7
 8018642:	4628      	mov	r0, r5
 8018644:	47b0      	blx	r6
 8018646:	2800      	cmp	r0, #0
 8018648:	dc08      	bgt.n	801865c <__sflush_r+0xfc>
 801864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018652:	81a3      	strh	r3, [r4, #12]
 8018654:	f04f 30ff 	mov.w	r0, #4294967295
 8018658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801865c:	4407      	add	r7, r0
 801865e:	eba8 0800 	sub.w	r8, r8, r0
 8018662:	e7e7      	b.n	8018634 <__sflush_r+0xd4>
 8018664:	dfbffffe 	.word	0xdfbffffe

08018668 <_fflush_r>:
 8018668:	b538      	push	{r3, r4, r5, lr}
 801866a:	690b      	ldr	r3, [r1, #16]
 801866c:	4605      	mov	r5, r0
 801866e:	460c      	mov	r4, r1
 8018670:	b913      	cbnz	r3, 8018678 <_fflush_r+0x10>
 8018672:	2500      	movs	r5, #0
 8018674:	4628      	mov	r0, r5
 8018676:	bd38      	pop	{r3, r4, r5, pc}
 8018678:	b118      	cbz	r0, 8018682 <_fflush_r+0x1a>
 801867a:	6a03      	ldr	r3, [r0, #32]
 801867c:	b90b      	cbnz	r3, 8018682 <_fflush_r+0x1a>
 801867e:	f7ff f8d1 	bl	8017824 <__sinit>
 8018682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d0f3      	beq.n	8018672 <_fflush_r+0xa>
 801868a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801868c:	07d0      	lsls	r0, r2, #31
 801868e:	d404      	bmi.n	801869a <_fflush_r+0x32>
 8018690:	0599      	lsls	r1, r3, #22
 8018692:	d402      	bmi.n	801869a <_fflush_r+0x32>
 8018694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018696:	f7ff fa0c 	bl	8017ab2 <__retarget_lock_acquire_recursive>
 801869a:	4628      	mov	r0, r5
 801869c:	4621      	mov	r1, r4
 801869e:	f7ff ff5f 	bl	8018560 <__sflush_r>
 80186a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186a4:	07da      	lsls	r2, r3, #31
 80186a6:	4605      	mov	r5, r0
 80186a8:	d4e4      	bmi.n	8018674 <_fflush_r+0xc>
 80186aa:	89a3      	ldrh	r3, [r4, #12]
 80186ac:	059b      	lsls	r3, r3, #22
 80186ae:	d4e1      	bmi.n	8018674 <_fflush_r+0xc>
 80186b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186b2:	f7ff f9ff 	bl	8017ab4 <__retarget_lock_release_recursive>
 80186b6:	e7dd      	b.n	8018674 <_fflush_r+0xc>

080186b8 <fiprintf>:
 80186b8:	b40e      	push	{r1, r2, r3}
 80186ba:	b503      	push	{r0, r1, lr}
 80186bc:	4601      	mov	r1, r0
 80186be:	ab03      	add	r3, sp, #12
 80186c0:	4805      	ldr	r0, [pc, #20]	@ (80186d8 <fiprintf+0x20>)
 80186c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80186c6:	6800      	ldr	r0, [r0, #0]
 80186c8:	9301      	str	r3, [sp, #4]
 80186ca:	f7ff fca3 	bl	8018014 <_vfiprintf_r>
 80186ce:	b002      	add	sp, #8
 80186d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186d4:	b003      	add	sp, #12
 80186d6:	4770      	bx	lr
 80186d8:	24000138 	.word	0x24000138

080186dc <__swbuf_r>:
 80186dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186de:	460e      	mov	r6, r1
 80186e0:	4614      	mov	r4, r2
 80186e2:	4605      	mov	r5, r0
 80186e4:	b118      	cbz	r0, 80186ee <__swbuf_r+0x12>
 80186e6:	6a03      	ldr	r3, [r0, #32]
 80186e8:	b90b      	cbnz	r3, 80186ee <__swbuf_r+0x12>
 80186ea:	f7ff f89b 	bl	8017824 <__sinit>
 80186ee:	69a3      	ldr	r3, [r4, #24]
 80186f0:	60a3      	str	r3, [r4, #8]
 80186f2:	89a3      	ldrh	r3, [r4, #12]
 80186f4:	071a      	lsls	r2, r3, #28
 80186f6:	d501      	bpl.n	80186fc <__swbuf_r+0x20>
 80186f8:	6923      	ldr	r3, [r4, #16]
 80186fa:	b943      	cbnz	r3, 801870e <__swbuf_r+0x32>
 80186fc:	4621      	mov	r1, r4
 80186fe:	4628      	mov	r0, r5
 8018700:	f000 f82a 	bl	8018758 <__swsetup_r>
 8018704:	b118      	cbz	r0, 801870e <__swbuf_r+0x32>
 8018706:	f04f 37ff 	mov.w	r7, #4294967295
 801870a:	4638      	mov	r0, r7
 801870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801870e:	6823      	ldr	r3, [r4, #0]
 8018710:	6922      	ldr	r2, [r4, #16]
 8018712:	1a98      	subs	r0, r3, r2
 8018714:	6963      	ldr	r3, [r4, #20]
 8018716:	b2f6      	uxtb	r6, r6
 8018718:	4283      	cmp	r3, r0
 801871a:	4637      	mov	r7, r6
 801871c:	dc05      	bgt.n	801872a <__swbuf_r+0x4e>
 801871e:	4621      	mov	r1, r4
 8018720:	4628      	mov	r0, r5
 8018722:	f7ff ffa1 	bl	8018668 <_fflush_r>
 8018726:	2800      	cmp	r0, #0
 8018728:	d1ed      	bne.n	8018706 <__swbuf_r+0x2a>
 801872a:	68a3      	ldr	r3, [r4, #8]
 801872c:	3b01      	subs	r3, #1
 801872e:	60a3      	str	r3, [r4, #8]
 8018730:	6823      	ldr	r3, [r4, #0]
 8018732:	1c5a      	adds	r2, r3, #1
 8018734:	6022      	str	r2, [r4, #0]
 8018736:	701e      	strb	r6, [r3, #0]
 8018738:	6962      	ldr	r2, [r4, #20]
 801873a:	1c43      	adds	r3, r0, #1
 801873c:	429a      	cmp	r2, r3
 801873e:	d004      	beq.n	801874a <__swbuf_r+0x6e>
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	07db      	lsls	r3, r3, #31
 8018744:	d5e1      	bpl.n	801870a <__swbuf_r+0x2e>
 8018746:	2e0a      	cmp	r6, #10
 8018748:	d1df      	bne.n	801870a <__swbuf_r+0x2e>
 801874a:	4621      	mov	r1, r4
 801874c:	4628      	mov	r0, r5
 801874e:	f7ff ff8b 	bl	8018668 <_fflush_r>
 8018752:	2800      	cmp	r0, #0
 8018754:	d0d9      	beq.n	801870a <__swbuf_r+0x2e>
 8018756:	e7d6      	b.n	8018706 <__swbuf_r+0x2a>

08018758 <__swsetup_r>:
 8018758:	b538      	push	{r3, r4, r5, lr}
 801875a:	4b29      	ldr	r3, [pc, #164]	@ (8018800 <__swsetup_r+0xa8>)
 801875c:	4605      	mov	r5, r0
 801875e:	6818      	ldr	r0, [r3, #0]
 8018760:	460c      	mov	r4, r1
 8018762:	b118      	cbz	r0, 801876c <__swsetup_r+0x14>
 8018764:	6a03      	ldr	r3, [r0, #32]
 8018766:	b90b      	cbnz	r3, 801876c <__swsetup_r+0x14>
 8018768:	f7ff f85c 	bl	8017824 <__sinit>
 801876c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018770:	0719      	lsls	r1, r3, #28
 8018772:	d422      	bmi.n	80187ba <__swsetup_r+0x62>
 8018774:	06da      	lsls	r2, r3, #27
 8018776:	d407      	bmi.n	8018788 <__swsetup_r+0x30>
 8018778:	2209      	movs	r2, #9
 801877a:	602a      	str	r2, [r5, #0]
 801877c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018780:	81a3      	strh	r3, [r4, #12]
 8018782:	f04f 30ff 	mov.w	r0, #4294967295
 8018786:	e033      	b.n	80187f0 <__swsetup_r+0x98>
 8018788:	0758      	lsls	r0, r3, #29
 801878a:	d512      	bpl.n	80187b2 <__swsetup_r+0x5a>
 801878c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801878e:	b141      	cbz	r1, 80187a2 <__swsetup_r+0x4a>
 8018790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018794:	4299      	cmp	r1, r3
 8018796:	d002      	beq.n	801879e <__swsetup_r+0x46>
 8018798:	4628      	mov	r0, r5
 801879a:	f7ff f9b9 	bl	8017b10 <_free_r>
 801879e:	2300      	movs	r3, #0
 80187a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80187a2:	89a3      	ldrh	r3, [r4, #12]
 80187a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187a8:	81a3      	strh	r3, [r4, #12]
 80187aa:	2300      	movs	r3, #0
 80187ac:	6063      	str	r3, [r4, #4]
 80187ae:	6923      	ldr	r3, [r4, #16]
 80187b0:	6023      	str	r3, [r4, #0]
 80187b2:	89a3      	ldrh	r3, [r4, #12]
 80187b4:	f043 0308 	orr.w	r3, r3, #8
 80187b8:	81a3      	strh	r3, [r4, #12]
 80187ba:	6923      	ldr	r3, [r4, #16]
 80187bc:	b94b      	cbnz	r3, 80187d2 <__swsetup_r+0x7a>
 80187be:	89a3      	ldrh	r3, [r4, #12]
 80187c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187c8:	d003      	beq.n	80187d2 <__swsetup_r+0x7a>
 80187ca:	4621      	mov	r1, r4
 80187cc:	4628      	mov	r0, r5
 80187ce:	f000 f89e 	bl	801890e <__smakebuf_r>
 80187d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187d6:	f013 0201 	ands.w	r2, r3, #1
 80187da:	d00a      	beq.n	80187f2 <__swsetup_r+0x9a>
 80187dc:	2200      	movs	r2, #0
 80187de:	60a2      	str	r2, [r4, #8]
 80187e0:	6962      	ldr	r2, [r4, #20]
 80187e2:	4252      	negs	r2, r2
 80187e4:	61a2      	str	r2, [r4, #24]
 80187e6:	6922      	ldr	r2, [r4, #16]
 80187e8:	b942      	cbnz	r2, 80187fc <__swsetup_r+0xa4>
 80187ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187ee:	d1c5      	bne.n	801877c <__swsetup_r+0x24>
 80187f0:	bd38      	pop	{r3, r4, r5, pc}
 80187f2:	0799      	lsls	r1, r3, #30
 80187f4:	bf58      	it	pl
 80187f6:	6962      	ldrpl	r2, [r4, #20]
 80187f8:	60a2      	str	r2, [r4, #8]
 80187fa:	e7f4      	b.n	80187e6 <__swsetup_r+0x8e>
 80187fc:	2000      	movs	r0, #0
 80187fe:	e7f7      	b.n	80187f0 <__swsetup_r+0x98>
 8018800:	24000138 	.word	0x24000138

08018804 <memmove>:
 8018804:	4288      	cmp	r0, r1
 8018806:	b510      	push	{r4, lr}
 8018808:	eb01 0402 	add.w	r4, r1, r2
 801880c:	d902      	bls.n	8018814 <memmove+0x10>
 801880e:	4284      	cmp	r4, r0
 8018810:	4623      	mov	r3, r4
 8018812:	d807      	bhi.n	8018824 <memmove+0x20>
 8018814:	1e43      	subs	r3, r0, #1
 8018816:	42a1      	cmp	r1, r4
 8018818:	d008      	beq.n	801882c <memmove+0x28>
 801881a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801881e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018822:	e7f8      	b.n	8018816 <memmove+0x12>
 8018824:	4402      	add	r2, r0
 8018826:	4601      	mov	r1, r0
 8018828:	428a      	cmp	r2, r1
 801882a:	d100      	bne.n	801882e <memmove+0x2a>
 801882c:	bd10      	pop	{r4, pc}
 801882e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018836:	e7f7      	b.n	8018828 <memmove+0x24>

08018838 <_sbrk_r>:
 8018838:	b538      	push	{r3, r4, r5, lr}
 801883a:	4d06      	ldr	r5, [pc, #24]	@ (8018854 <_sbrk_r+0x1c>)
 801883c:	2300      	movs	r3, #0
 801883e:	4604      	mov	r4, r0
 8018840:	4608      	mov	r0, r1
 8018842:	602b      	str	r3, [r5, #0]
 8018844:	f7f0 fc64 	bl	8009110 <_sbrk>
 8018848:	1c43      	adds	r3, r0, #1
 801884a:	d102      	bne.n	8018852 <_sbrk_r+0x1a>
 801884c:	682b      	ldr	r3, [r5, #0]
 801884e:	b103      	cbz	r3, 8018852 <_sbrk_r+0x1a>
 8018850:	6023      	str	r3, [r4, #0]
 8018852:	bd38      	pop	{r3, r4, r5, pc}
 8018854:	240042fc 	.word	0x240042fc

08018858 <abort>:
 8018858:	b508      	push	{r3, lr}
 801885a:	2006      	movs	r0, #6
 801885c:	f000 f8bc 	bl	80189d8 <raise>
 8018860:	2001      	movs	r0, #1
 8018862:	f7f0 fbdd 	bl	8009020 <_exit>

08018866 <_realloc_r>:
 8018866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801886a:	4680      	mov	r8, r0
 801886c:	4615      	mov	r5, r2
 801886e:	460c      	mov	r4, r1
 8018870:	b921      	cbnz	r1, 801887c <_realloc_r+0x16>
 8018872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018876:	4611      	mov	r1, r2
 8018878:	f7ff b9be 	b.w	8017bf8 <_malloc_r>
 801887c:	b92a      	cbnz	r2, 801888a <_realloc_r+0x24>
 801887e:	f7ff f947 	bl	8017b10 <_free_r>
 8018882:	2400      	movs	r4, #0
 8018884:	4620      	mov	r0, r4
 8018886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801888a:	f000 f8e3 	bl	8018a54 <_malloc_usable_size_r>
 801888e:	4285      	cmp	r5, r0
 8018890:	4606      	mov	r6, r0
 8018892:	d802      	bhi.n	801889a <_realloc_r+0x34>
 8018894:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018898:	d8f4      	bhi.n	8018884 <_realloc_r+0x1e>
 801889a:	4629      	mov	r1, r5
 801889c:	4640      	mov	r0, r8
 801889e:	f7ff f9ab 	bl	8017bf8 <_malloc_r>
 80188a2:	4607      	mov	r7, r0
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d0ec      	beq.n	8018882 <_realloc_r+0x1c>
 80188a8:	42b5      	cmp	r5, r6
 80188aa:	462a      	mov	r2, r5
 80188ac:	4621      	mov	r1, r4
 80188ae:	bf28      	it	cs
 80188b0:	4632      	movcs	r2, r6
 80188b2:	f7ff f900 	bl	8017ab6 <memcpy>
 80188b6:	4621      	mov	r1, r4
 80188b8:	4640      	mov	r0, r8
 80188ba:	f7ff f929 	bl	8017b10 <_free_r>
 80188be:	463c      	mov	r4, r7
 80188c0:	e7e0      	b.n	8018884 <_realloc_r+0x1e>

080188c2 <__swhatbuf_r>:
 80188c2:	b570      	push	{r4, r5, r6, lr}
 80188c4:	460c      	mov	r4, r1
 80188c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ca:	2900      	cmp	r1, #0
 80188cc:	b096      	sub	sp, #88	@ 0x58
 80188ce:	4615      	mov	r5, r2
 80188d0:	461e      	mov	r6, r3
 80188d2:	da0d      	bge.n	80188f0 <__swhatbuf_r+0x2e>
 80188d4:	89a3      	ldrh	r3, [r4, #12]
 80188d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80188da:	f04f 0100 	mov.w	r1, #0
 80188de:	bf14      	ite	ne
 80188e0:	2340      	movne	r3, #64	@ 0x40
 80188e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80188e6:	2000      	movs	r0, #0
 80188e8:	6031      	str	r1, [r6, #0]
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	b016      	add	sp, #88	@ 0x58
 80188ee:	bd70      	pop	{r4, r5, r6, pc}
 80188f0:	466a      	mov	r2, sp
 80188f2:	f000 f879 	bl	80189e8 <_fstat_r>
 80188f6:	2800      	cmp	r0, #0
 80188f8:	dbec      	blt.n	80188d4 <__swhatbuf_r+0x12>
 80188fa:	9901      	ldr	r1, [sp, #4]
 80188fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018900:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018904:	4259      	negs	r1, r3
 8018906:	4159      	adcs	r1, r3
 8018908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801890c:	e7eb      	b.n	80188e6 <__swhatbuf_r+0x24>

0801890e <__smakebuf_r>:
 801890e:	898b      	ldrh	r3, [r1, #12]
 8018910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018912:	079d      	lsls	r5, r3, #30
 8018914:	4606      	mov	r6, r0
 8018916:	460c      	mov	r4, r1
 8018918:	d507      	bpl.n	801892a <__smakebuf_r+0x1c>
 801891a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801891e:	6023      	str	r3, [r4, #0]
 8018920:	6123      	str	r3, [r4, #16]
 8018922:	2301      	movs	r3, #1
 8018924:	6163      	str	r3, [r4, #20]
 8018926:	b003      	add	sp, #12
 8018928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801892a:	ab01      	add	r3, sp, #4
 801892c:	466a      	mov	r2, sp
 801892e:	f7ff ffc8 	bl	80188c2 <__swhatbuf_r>
 8018932:	9f00      	ldr	r7, [sp, #0]
 8018934:	4605      	mov	r5, r0
 8018936:	4639      	mov	r1, r7
 8018938:	4630      	mov	r0, r6
 801893a:	f7ff f95d 	bl	8017bf8 <_malloc_r>
 801893e:	b948      	cbnz	r0, 8018954 <__smakebuf_r+0x46>
 8018940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018944:	059a      	lsls	r2, r3, #22
 8018946:	d4ee      	bmi.n	8018926 <__smakebuf_r+0x18>
 8018948:	f023 0303 	bic.w	r3, r3, #3
 801894c:	f043 0302 	orr.w	r3, r3, #2
 8018950:	81a3      	strh	r3, [r4, #12]
 8018952:	e7e2      	b.n	801891a <__smakebuf_r+0xc>
 8018954:	89a3      	ldrh	r3, [r4, #12]
 8018956:	6020      	str	r0, [r4, #0]
 8018958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801895c:	81a3      	strh	r3, [r4, #12]
 801895e:	9b01      	ldr	r3, [sp, #4]
 8018960:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018964:	b15b      	cbz	r3, 801897e <__smakebuf_r+0x70>
 8018966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801896a:	4630      	mov	r0, r6
 801896c:	f000 f84e 	bl	8018a0c <_isatty_r>
 8018970:	b128      	cbz	r0, 801897e <__smakebuf_r+0x70>
 8018972:	89a3      	ldrh	r3, [r4, #12]
 8018974:	f023 0303 	bic.w	r3, r3, #3
 8018978:	f043 0301 	orr.w	r3, r3, #1
 801897c:	81a3      	strh	r3, [r4, #12]
 801897e:	89a3      	ldrh	r3, [r4, #12]
 8018980:	431d      	orrs	r5, r3
 8018982:	81a5      	strh	r5, [r4, #12]
 8018984:	e7cf      	b.n	8018926 <__smakebuf_r+0x18>

08018986 <_raise_r>:
 8018986:	291f      	cmp	r1, #31
 8018988:	b538      	push	{r3, r4, r5, lr}
 801898a:	4605      	mov	r5, r0
 801898c:	460c      	mov	r4, r1
 801898e:	d904      	bls.n	801899a <_raise_r+0x14>
 8018990:	2316      	movs	r3, #22
 8018992:	6003      	str	r3, [r0, #0]
 8018994:	f04f 30ff 	mov.w	r0, #4294967295
 8018998:	bd38      	pop	{r3, r4, r5, pc}
 801899a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801899c:	b112      	cbz	r2, 80189a4 <_raise_r+0x1e>
 801899e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80189a2:	b94b      	cbnz	r3, 80189b8 <_raise_r+0x32>
 80189a4:	4628      	mov	r0, r5
 80189a6:	f000 f853 	bl	8018a50 <_getpid_r>
 80189aa:	4622      	mov	r2, r4
 80189ac:	4601      	mov	r1, r0
 80189ae:	4628      	mov	r0, r5
 80189b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189b4:	f000 b83a 	b.w	8018a2c <_kill_r>
 80189b8:	2b01      	cmp	r3, #1
 80189ba:	d00a      	beq.n	80189d2 <_raise_r+0x4c>
 80189bc:	1c59      	adds	r1, r3, #1
 80189be:	d103      	bne.n	80189c8 <_raise_r+0x42>
 80189c0:	2316      	movs	r3, #22
 80189c2:	6003      	str	r3, [r0, #0]
 80189c4:	2001      	movs	r0, #1
 80189c6:	e7e7      	b.n	8018998 <_raise_r+0x12>
 80189c8:	2100      	movs	r1, #0
 80189ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80189ce:	4620      	mov	r0, r4
 80189d0:	4798      	blx	r3
 80189d2:	2000      	movs	r0, #0
 80189d4:	e7e0      	b.n	8018998 <_raise_r+0x12>
	...

080189d8 <raise>:
 80189d8:	4b02      	ldr	r3, [pc, #8]	@ (80189e4 <raise+0xc>)
 80189da:	4601      	mov	r1, r0
 80189dc:	6818      	ldr	r0, [r3, #0]
 80189de:	f7ff bfd2 	b.w	8018986 <_raise_r>
 80189e2:	bf00      	nop
 80189e4:	24000138 	.word	0x24000138

080189e8 <_fstat_r>:
 80189e8:	b538      	push	{r3, r4, r5, lr}
 80189ea:	4d07      	ldr	r5, [pc, #28]	@ (8018a08 <_fstat_r+0x20>)
 80189ec:	2300      	movs	r3, #0
 80189ee:	4604      	mov	r4, r0
 80189f0:	4608      	mov	r0, r1
 80189f2:	4611      	mov	r1, r2
 80189f4:	602b      	str	r3, [r5, #0]
 80189f6:	f7f0 fb63 	bl	80090c0 <_fstat>
 80189fa:	1c43      	adds	r3, r0, #1
 80189fc:	d102      	bne.n	8018a04 <_fstat_r+0x1c>
 80189fe:	682b      	ldr	r3, [r5, #0]
 8018a00:	b103      	cbz	r3, 8018a04 <_fstat_r+0x1c>
 8018a02:	6023      	str	r3, [r4, #0]
 8018a04:	bd38      	pop	{r3, r4, r5, pc}
 8018a06:	bf00      	nop
 8018a08:	240042fc 	.word	0x240042fc

08018a0c <_isatty_r>:
 8018a0c:	b538      	push	{r3, r4, r5, lr}
 8018a0e:	4d06      	ldr	r5, [pc, #24]	@ (8018a28 <_isatty_r+0x1c>)
 8018a10:	2300      	movs	r3, #0
 8018a12:	4604      	mov	r4, r0
 8018a14:	4608      	mov	r0, r1
 8018a16:	602b      	str	r3, [r5, #0]
 8018a18:	f7f0 fb62 	bl	80090e0 <_isatty>
 8018a1c:	1c43      	adds	r3, r0, #1
 8018a1e:	d102      	bne.n	8018a26 <_isatty_r+0x1a>
 8018a20:	682b      	ldr	r3, [r5, #0]
 8018a22:	b103      	cbz	r3, 8018a26 <_isatty_r+0x1a>
 8018a24:	6023      	str	r3, [r4, #0]
 8018a26:	bd38      	pop	{r3, r4, r5, pc}
 8018a28:	240042fc 	.word	0x240042fc

08018a2c <_kill_r>:
 8018a2c:	b538      	push	{r3, r4, r5, lr}
 8018a2e:	4d07      	ldr	r5, [pc, #28]	@ (8018a4c <_kill_r+0x20>)
 8018a30:	2300      	movs	r3, #0
 8018a32:	4604      	mov	r4, r0
 8018a34:	4608      	mov	r0, r1
 8018a36:	4611      	mov	r1, r2
 8018a38:	602b      	str	r3, [r5, #0]
 8018a3a:	f7f0 fae1 	bl	8009000 <_kill>
 8018a3e:	1c43      	adds	r3, r0, #1
 8018a40:	d102      	bne.n	8018a48 <_kill_r+0x1c>
 8018a42:	682b      	ldr	r3, [r5, #0]
 8018a44:	b103      	cbz	r3, 8018a48 <_kill_r+0x1c>
 8018a46:	6023      	str	r3, [r4, #0]
 8018a48:	bd38      	pop	{r3, r4, r5, pc}
 8018a4a:	bf00      	nop
 8018a4c:	240042fc 	.word	0x240042fc

08018a50 <_getpid_r>:
 8018a50:	f7f0 bace 	b.w	8008ff0 <_getpid>

08018a54 <_malloc_usable_size_r>:
 8018a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a58:	1f18      	subs	r0, r3, #4
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	bfbc      	itt	lt
 8018a5e:	580b      	ldrlt	r3, [r1, r0]
 8018a60:	18c0      	addlt	r0, r0, r3
 8018a62:	4770      	bx	lr

08018a64 <_init>:
 8018a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a66:	bf00      	nop
 8018a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a6a:	bc08      	pop	{r3}
 8018a6c:	469e      	mov	lr, r3
 8018a6e:	4770      	bx	lr

08018a70 <_fini>:
 8018a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a72:	bf00      	nop
 8018a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a76:	bc08      	pop	{r3}
 8018a78:	469e      	mov	lr, r3
 8018a7a:	4770      	bx	lr
